{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","feature_1","Feature","target_1","Target","typeinfo_1","Typeinfo","TypeinfoFlags","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","common_1","tokenizer_1","Token","Range","NodeKind","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","Node","createTypeName","typeName","TypeName","identifier","next","createSimpleTypeName","createIdentifierExpression","createNamedType","typeArguments","isNullable","type","NamedTypeNode","createFunctionType","parameters","returnType","explicitThisType","FunctionTypeNode","createOmittedType","createTypeParameter","extendsType","defaultType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","flags","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportDefaultStatement","ExportDefaultStatement","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","localName","exportedName","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","foreignName","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","arrowKind","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","TypeNode","_super","__extends","_this","apply","TYPENAME","NAMEDTYPE","FUNCTIONTYPE","TYPEPARAMETER","ParameterKind","DecoratorKind","PARAMETER","implicitFieldDeclaration","NONE","is","flag","isAny","set","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","BINARY","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","SOURCE","parent","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPORTDEFAULT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","ArrowKind","FUNCTIONDECLARATION","clone","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","findDecorator","k","decorator","isTypeOmitted","OperatorKind","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","typeClasses","managedClasses","signatureTypes","signatureID","nextClassId","nativeDummySignature","nativeSource","nativeFile","File","internalName","resolver","Resolver","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","makeNativeTypeDeclaration","makeNativeFunctionDeclaration","makeNativeNamespaceDeclaration","makeNativeFunction","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","e_3","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerNativeTypeClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","firstChar","parseInt","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","_l","_m","USER_ENTRY","_o","e_6","_p","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","_e","_f","setType","typeKind","className","classElement","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","requireGlobal","lookupExport","fileQueuedExports","checkDecorators","acceptedFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeProperty","initializeMethod","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","AMBIENT","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","FILE","current","unset","originalDeclaration","actual","isBound","TypedElement","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","Class","base","INTERFACE","currentMemoryOffset","constructorInstance","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","isBuiltinArray","lengthField","lookupOverload","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","classReference","Interface","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","_BinaryenUnary","binary","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","children","_BinaryenBlock","br","_BinaryenBreak","drop","_BinaryenDrop","loop","_BinaryenLoop","if","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","defaultName","numNames","strs","_BinaryenSwitch","_BinaryenCall","call_indirect","_BinaryenCallIndirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_bitselect","cond","_BinaryenSIMDBitselect","simd_shift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getLocalGetIndex","getLocalSetIndex","_BinaryenLocalSetGetIndex","getLocalSetValue","_BinaryenLocalSetGetValue","isLocalTee","_BinaryenLocalSetIsTee","getGlobalGetName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","getCallTarget","_BinaryenCallGetTarget","getCallOperandCount","_BinaryenCallGetNumOperands","getCallOperand","_BinaryenCallGetOperand","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Break","Block","numChildren","traverse","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDBitselect","_BinaryenSIMDBitselectGetLeft","_BinaryenSIMDBitselectGetRight","_BinaryenSIMDBitselectGetCond","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Select","Drop","Host","Nop","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","compare","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","isIllegalVariableIdentifier","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","builtins_1","currentThisExpression","currentElementExpression","resolveType","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","nameNode","typeArgumentNodes","isSimpleType","simpleName","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","type_1","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveTypeArguments","typeNode","Cannot_find_name_0","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveExpression","ctxFlow","ctxType","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","resolveIdentifier","actualFunction","resolveLiteralExpression","resolvePropertyAccessExpression","resolveElementAccessExpression","resolveCallExpression","ensureResolvedLazyGlobal","targetNode","propertyName","indexedGet","arrayType","resolvedType","targetExpression","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","functionTypeNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","k_1","unsetLocalFlag","pop","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getAndFreeTempLocal","getScopedLocal","addScopedLocal","scopedLocal","addScopedAlias","existingLocal","scopedAlias","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","stack","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","isNonnull","inheritNonnullIfTrue","EqzI32","EqzI64","inheritNonnullIfFalse","EqI32","EqI64","NeI32","NeI64","canOverflow","WRAPPED","canConversionOverflow","global_1","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","MIN_VALUE","fromType","last","instanceName","levels","findUsedLocalsVisit","used","findUsedLocals","Options","importMemory","sharedMemory","importTable","explicitStart","features","noUnsafe","feature","Constraints","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","Atomics","MutableGloabls","SIMD128","BulkMemory","SignExt","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","funcRef","ensureFunctionType","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","members_1","members_1_1","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","initializerNode","compileExpression","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","initializeInStart","Mutable_value_cannot_be_inlined","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","alwaysFalse","terminates","continues","breaks","fallsThrough","alwaysTrue","stmts_1","incrExpr","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","constraints","ANY_RETAINED","numCases","context","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","CONSTANT","compileInlineConstant","contextualType","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","Expression_is_never_null","tempIndex","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","AllTrueVecI8x16","EqVecI8x16","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr_1","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","flow_2","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","Expression_is_unsafe","argumentExpressions","thisArg","parameterTypes_1","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","usedLocals","paramExpr","paramType","argumentLocal","baseInstance","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","expr_1","theOperands","numOperands","isCallImport","allOptionalsAreConstant","expr_2","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","flow_3","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","tempDataStart","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","propertyAccess","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","thisLocalIndex","makeInstanceOfClass","idTemp","idExpr","conditions","single","Auto","compiler_1","compiler","isAsm","directize","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","ClzI64","CtzI64","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","floor","CeilF32","FloorF32","CeilF64","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","alreadyUnchecked","call_direct","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","managedClasses_1","managedClasses_1_1","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","managedClasses_2","managedClasses_2_1","abvPrototype","managedClasses_3","managedClasses_3_1","isAcyclic","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","i64_to_string","ExportsWalker","includePrivate","seen","walk","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","e_15","e_16","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","members_2","members_2_1","name_1","visitInterface","TSDBuilder","unknown","numMembers","members_3","members_3_1","name_2","isInterface","Parser","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","parseFile","isEntry","indexOf","USER","currentSource","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","getDependee","dependent","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","state_1","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","round","y","sign","isTrueish","fromCodePoint","replaceAll","search","replacment","res","split","Number","capacity","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","__decorate","unmanaged","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","setExplicitStart","setNoUnsafe","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","buildRTTI","cls","bitsetIs","map","bitsetSet","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,aACA,mBAAAC,eAAAC,IACAD,OAAA,aAAAJ,GACA,iBAAAC,QACAA,QAAA,eAAAD,EAAAG,QAAA,aAEAJ,EAAA,eAAAC,EAAAD,EAAA,UARA,CASC,oBAAAO,UAAAC,KAAA,SAAAC,GACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAV,QAGA,IAAAC,EAAAO,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAZ,QAAA,IAUA,OANAa,EAAAH,GAAAI,KAAAb,EAAAD,QAAAC,IAAAD,QAAAS,GAGAR,EAAAW,GAAA,EAGAX,EAAAD,QA0DA,OArDAS,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAjB,EAAAkB,EAAAC,GACAV,EAAAW,EAAApB,EAAAkB,IACAG,OAAAC,eAAAtB,EAAAkB,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAzB,GACA,oBAAA0B,eAAAC,aACAN,OAAAC,eAAAtB,EAAA0B,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAtB,EAAA,cAAiD4B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAnC,GACA,IAAAkB,EAAAlB,KAAA8B,WACA,WAA2B,OAAA9B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAQ,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,oFC5EA,SAAYC,GAEVA,IAAA,eAKAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,cAEAA,IAAA,oBAEAA,IAAA,wBAEAA,IAAA,yBAEAA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,4BAEAA,IAAA,gBAEAA,IAAA,gBAEAA,IAAA,gDAKAA,IAAA,yBAEAA,IAAA,yBAEAA,IAAA,yCAEAA,IAAA,4BAEAA,IAAA,kCAEAA,IAAA,sCAEAA,IAAA,uCAKAA,IAAA,6BAEAA,IAAA,6BAEAA,IAAA,2BAEAA,IAAA,0BAEAA,IAAA,kCAEAA,IAAA,4BAEAA,IAAA,uBAKAA,IAAA,2BAxEF,CAAY3C,EAAA2C,cAAA3C,EAAA2C,YAAW,KA4EV3C,EAAA4C,eAAiB,IAEjB5C,EAAA6C,aAAe,KAEf7C,EAAA8C,cAAgB,OAEhB9C,EAAA+C,cAAgB,OAEhB/C,EAAAgD,mBAAqB,IAErBhD,EAAAiD,iBAAmB,IAEnBjD,EAAAkD,gBAAkB,IAElBlD,EAAAmD,cAAgB,OAEhBnD,EAAAoD,eAAiBpD,EAAAmD,cAAgBnD,EAAA4C,eAEjC5C,EAAAqD,aAAerD,EAAA4C,eAAiB,QAG7C,SAAiBU,GAEFA,EAAAC,MAAQ,GAERD,EAAAE,GAAK,KACLF,EAAAG,IAAM,MACNH,EAAAI,IAAM,MACNJ,EAAAK,IAAM,MACNL,EAAAM,MAAQ,QACRN,EAAAO,GAAK,KACLP,EAAAQ,IAAM,MACNR,EAAAS,IAAM,MACNT,EAAAU,IAAM,MACNV,EAAAW,MAAQ,QACRX,EAAAY,KAAO,OACPZ,EAAAa,IAAM,MACNb,EAAAc,IAAM,MACNd,EAAAe,KAAO,OACPf,EAAAgB,MAAQ,QACRhB,EAAAiB,MAAQ,QACRjB,EAAAkB,MAAQ,QACRlB,EAAAmB,MAAQ,QACRnB,EAAAoB,MAAQ,QACRpB,EAAAqB,MAAQ,QACRrB,EAAAsB,MAAQ,QACRtB,EAAAuB,MAAQ,QACRvB,EAAAwB,MAAQ,QACRxB,EAAAyB,MAAQ,QACRzB,EAAA0B,MAAQ,OACR1B,EAAA2B,OAAS,SACT3B,EAAA4B,QAAU,UACV5B,EAAA6B,OAAS,SACT7B,EAAA8B,OAAS,SACT9B,EAAA+B,QAAU,UACV/B,EAAAgC,QAAU,UAEVhC,EAAAiC,MAAQ,OACRjC,EAAAkC,MAAQ,OACRlC,EAAAmC,OAAS,QAETnC,EAAAoC,MAAQ,OACRpC,EAAAqC,OAAS,QACTrC,EAAAsC,YAAc,cAEdtC,EAAAuC,WAAa,aACbvC,EAAAwC,mBAAqB,qBACrBxC,EAAAyC,cAAgB,gBAChBzC,EAAA0C,gBAAkB,kBAClB1C,EAAA2C,mBAAqB,qBACrB3C,EAAA4C,iBAAmB,mBACnB5C,EAAA6C,2BAA6B,6BAC7B7C,EAAA8C,2BAA6B,6BAC7B9C,EAAA+C,wBAA0B,0BAC1B/C,EAAAgD,iBAAmB,mBACnBhD,EAAAiD,oBAAsB,sBAEtBjD,EAAAkD,GAAK,KACLlD,EAAAmD,IAAM,MACNnD,EAAAoD,IAAM,MACNpD,EAAAqD,IAAM,MACNrD,EAAAsD,MAAQ,QACRtD,EAAAuD,GAAK,KACLvD,EAAAwD,IAAM,MACNxD,EAAAyD,IAAM,MACNzD,EAAA0D,IAAM,MACN1D,EAAA2D,MAAQ,QACR3D,EAAA4D,KAAO,OACP5D,EAAA6D,IAAM,MACN7D,EAAA8D,IAAM,MACN9D,EAAA+D,KAAO,OACP/D,EAAAgE,OAAS,SACThE,EAAAiE,MAAQ,QACRjE,EAAAkE,WAAa,aACblE,EAAAmE,IAAM,MACNnE,EAAAoE,IAAM,MACNpE,EAAAqE,gBAAkB,kBAClBrE,EAAAsE,YAAc,cACdtE,EAAAuE,KAAO,OACPvE,EAAAwE,MAAQ,QACRxE,EAAAyE,UAAY,YACZzE,EAAA0E,WAAa,aACb1E,EAAA2E,WAAa,aACb3E,EAAA4E,WAAa,aACb5E,EAAA6E,WAAa,aACb7E,EAAA8E,kBAAoB,oBACpB9E,EAAA+E,YAAc,cACd/E,EAAAgF,YAAc,cACdhF,EAAAiF,YAAc,cACdjF,EAAAkF,aAAe,eACflF,EAAAmF,aAAe,eAEfnF,EAAAoF,MAAQ,QACRpF,EAAAqF,IAAM,MACNrF,EAAAsF,IAAM,MACNtF,EAAAuF,MAAQ,UACRvF,EAAAwF,QAAU,YACVxF,EAAAyF,KAAO,SACPzF,EAAA0F,OAAS,WACT1F,EAAA2F,QAAU,YACV3F,EAAA4F,QAAU,YACV5F,EAAA6F,SAAW,aACX7F,EAAA8F,YAAc,eACd9F,EAAA+F,MAAQ,UACR/F,EAAAgG,WAAa,eAvG5B,CAAiBtJ,EAAAsD,gBAAAtD,EAAAsD,cAAa,KA2G9B,IAAAiG,EAAA9I,EAAA,IAAST,EAAAwJ,QAAAD,EAAAC,QACT,IAAAC,EAAAhJ,EAAA,IAAST,EAAA0J,OAAAD,EAAAC,OACT,IAAAC,EAAAlJ,EAAA,IAAST,EAAA4J,SAAAD,EAAAC,SAAU5J,EAAA6J,cAAAF,EAAAE,2JC9MnBC,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,KAGAT,EAAA+J,WAAA,SAA2BC,GACzB,OAAY,GAALA,GAA2B,IAAhBA,EAAKA,EAAI,mFCL7B,IAeYC,EAfZC,EAAAzJ,EAAA,IAKA0J,EAAA1J,EAAA,GAIA2J,EAAA3J,EAAA,IAgBA,SAAgB4J,EAA2BC,GACzC,OAAQA,GACN,KAAKL,EAAmBM,KAAM,MAAO,OACrC,KAAKN,EAAmBO,QAAS,MAAO,UACxC,KAAKP,EAAmBQ,MAAO,MAAO,QACtC,QAEE,OADAC,QAAO,GACA,IAeb,SAAgBC,EAA0BL,GACxC,OAAQA,GACN,KAAKL,EAAmBM,KAAM,OAAOvK,EAAA4K,WACrC,KAAKX,EAAmBO,QAAS,OAAOxK,EAAA6K,aACxC,KAAKZ,EAAmBQ,MAAO,OAAOzK,EAAA8K,UACtC,QAEE,OADAJ,QAAO,GACA,IA5CX1K,EAAA+K,eAAAX,EAAAW,eACA/K,EAAAgL,uBAAAZ,EAAAY,uBAIF,SAAYf,GAEVA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,iBANF,CAAYA,EAAAjK,EAAAiK,qBAAAjK,EAAAiK,mBAAkB,KAU9BjK,EAAAqK,6BAaarK,EAAA4K,WAAqB,QAErB5K,EAAA6K,aAAuB,QAEvB7K,EAAA8K,UAAoB,QAEpB9K,EAAAiL,YAAsB,OAGnCjL,EAAA2K,4BAaA,IAAAO,EAAA,WAcE,SAAAA,EAAoBC,EAAWb,EAA8Bc,GAL7D9K,KAAA+K,MAAsB,KAEtB/K,KAAAgL,aAA6B,KAI3BhL,KAAK6K,KAAOA,EACZ7K,KAAKgK,SAAWA,EAChBhK,KAAK8K,QAAUA,EAkFnB,OA9ESF,EAAAjJ,OAAP,SACEkJ,EACAb,EACAiB,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIL,EAAUlB,EAAAc,uBAAuBG,GAIrC,OAHY,MAARI,IAAcH,EAAUA,EAAQM,QAAQ,MAAOH,IACvC,MAARC,IAAcJ,EAAUA,EAAQM,QAAQ,MAAOF,IACvC,MAARC,IAAcL,EAAUA,EAAQM,QAAQ,MAAOD,IAC5C,IAAIP,EAAkBC,EAAMb,EAAUc,IAIxCF,EAAAS,WAAP,SACER,EACAI,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEON,EAAkBjJ,OAAOkJ,EAAMlB,EAAmBM,KAAMgB,EAAMC,IAIhEN,EAAAU,cAAP,SACET,EACAI,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEON,EAAkBjJ,OAAOkJ,EAAMlB,EAAmBO,QAASe,EAAMC,IAInEN,EAAAW,YAAP,SACEV,EACAI,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEON,EAAkBjJ,OAAOkJ,EAAMlB,EAAmBQ,MAAOc,EAAMC,IAIxEN,EAAA3I,UAAAuJ,UAAA,SAAUT,GAER,OADA/K,KAAK+K,MAAQA,EACN/K,MAIT4K,EAAA3I,UAAAwJ,iBAAA,SAAiBV,GAEf,OADA/K,KAAKgL,aAAeD,EACb/K,MAIT4K,EAAA3I,UAAAyJ,SAAA,WACE,OAAI1L,KAAK+K,MAELhB,EAA2B/J,KAAKgK,UAChC,IACAhK,KAAK6K,KAAKa,SAAS,IACnB,MACA1L,KAAK8K,QACL,QACA9K,KAAK+K,MAAMY,OAAOC,eAClB,IACA5L,KAAK+K,MAAMc,KAAKH,SAAS,IACzB,IACA1L,KAAK+K,MAAMe,OAAOJ,SAAS,IAI7B3B,EAA2B/J,KAAKgK,UAChC,IACAhK,KAAK6K,KAAKa,SAAS,IACnB,KACA1L,KAAK8K,SAGXF,EAnGA,GA4JA,SAAgBmB,EAAwBhB,EAAciB,QAAA,IAAAA,OAAA,GAKpD,IAJA,IAAIC,EAAOlB,EAAMY,OAAOM,KACpBC,EAAMD,EAAKE,OACXC,EAAQrB,EAAMqB,MACdC,EAAMtB,EAAMsB,IACTD,EAAQ,IAAMvC,EAAAyC,YAAYL,EAAKM,WAAWH,EAAQ,KAAKA,IAC9D,KAAOC,EAAMH,IAAQrC,EAAAyC,YAAYL,EAAKM,WAAWF,KAAOA,IAMxD,IALA,IAAIG,EAAe,CACjB,MACAP,EAAKQ,UAAUL,EAAOC,GACtB,OAEKD,EAAQrB,EAAMqB,OACnBI,EAAGE,KAAK,KACRN,IAGF,GADIJ,GAAWQ,EAAGE,KAAKhN,EAAA8K,WACnBO,EAAMqB,OAASrB,EAAMsB,IACvBG,EAAGE,KAAK,UAER,KAAON,IAAUrB,EAAMsB,KAAK,CAC1B,GAAIxC,EAAAyC,YAAYL,EAAKM,WAAWH,IAAS,CACvCI,EAAGE,KAAKN,GAASrB,EAAMqB,MAAQ,EAAI,IAAM,KACzC,MAEFI,EAAGE,KAAK,KAIZ,OADIV,GAAWQ,EAAGE,KAAKhN,EAAAiL,aAChB6B,EAAGG,KAAK,IAzLJjN,EAAAkL,oBAsGblL,EAAAkN,wBAAA,SACE9B,EACAkB,EACAa,QADA,IAAAb,OAAA,QACA,IAAAa,OAAA,GAIA,IAAIL,EAAe,GAUnB,GATIR,GAAWQ,EAAGE,KAAKrC,EAA0BS,EAAQd,WACzDwC,EAAGE,KAAK3C,EAA2Be,EAAQd,WACvCgC,GAAWQ,EAAGE,KAAKhN,EAAAiL,aACvB6B,EAAGE,KAAK5B,EAAQD,KAAO,IAAO,MAAQ,OACtC2B,EAAGE,KAAK5B,EAAQD,KAAKa,SAAS,KAC9Bc,EAAGE,KAAK,MACRF,EAAGE,KAAK5B,EAAQA,SAGZA,EAAQC,MAAO,CAGjB,IAAIA,EAAQD,EAAQC,MAChB8B,IACFL,EAAGE,KAAK,MACRF,EAAGE,KAAKX,EAAwBhB,EAAOiB,KAEzCQ,EAAGE,KAAK,MACRF,EAAGE,KAAK,QACRF,EAAGE,KAAK3B,EAAMY,OAAOC,gBACrBY,EAAGE,KAAK,KACRF,EAAGE,KAAK3B,EAAMc,KAAKH,SAAS,KAC5Bc,EAAGE,KAAK,KACRF,EAAGE,KAAK3B,EAAMe,OAAOJ,SAAS,KAC9Bc,EAAGE,KAAK,KAER,IAAI1B,EAAeF,EAAQE,aACvBA,IACE6B,IACFL,EAAGE,KAAK,MACRF,EAAGE,KAAKX,EAAwBf,EAAcgB,KAEhDQ,EAAGE,KAAK,MACRF,EAAGE,KAAK,QACRF,EAAGE,KAAK3B,EAAMY,OAAOC,gBACrBY,EAAGE,KAAK,KACRF,EAAGE,KAAK3B,EAAMc,KAAKH,SAAS,KAC5Bc,EAAGE,KAAK,KACRF,EAAGE,KAAK3B,EAAMe,OAAOJ,SAAS,KAC9Bc,EAAGE,KAAK,MAGZ,OAAOF,EAAGG,KAAK,KAIjBjN,EAAAqM,0BAiCA,IAAAe,EAAA,WAME,SAAAA,EAAsBC,QAAA,IAAAA,MAAA,MACpB/M,KAAK+M,YAAcA,GAAiD,IAAI9F,MAwF5E,OApFE6F,EAAA7K,UAAA+K,eAAA,SACEnC,EACAb,EACAe,EACAC,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIL,EAAUF,EAAkBjJ,OAAOkJ,EAAMb,EAAUiB,EAAMC,EAAMC,GAAMK,UAAUT,GAC/EC,IAAcF,EAAQE,aAAeA,GACzChL,KAAK+M,YAAYL,KAAK5B,IAMxBgC,EAAA7K,UAAAgL,KAAA,SACEpC,EACAE,EACAE,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAnL,KAAKgN,eAAenC,EAAMlB,EAAmBM,KAAMc,EAAO,KAAME,EAAMC,EAAMC,IAI9E2B,EAAA7K,UAAAiL,YAAA,SACErC,EACAE,EACAC,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAnL,KAAKgN,eAAenC,EAAMlB,EAAmBM,KAAMc,EAAOC,EAAcC,EAAMC,EAAMC,IAItF2B,EAAA7K,UAAAkL,QAAA,SACEtC,EACAE,EACAE,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAnL,KAAKgN,eAAenC,EAAMlB,EAAmBO,QAASa,EAAO,KAAME,EAAMC,EAAMC,IAIjF2B,EAAA7K,UAAAmL,eAAA,SACEvC,EACAE,EACAC,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAnL,KAAKgN,eAAenC,EAAMlB,EAAmBO,QAASa,EAAOC,EAAcC,EAAMC,EAAMC,IAIzF2B,EAAA7K,UAAAoL,MAAA,SACExC,EACAE,EACAE,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAnL,KAAKgN,eAAenC,EAAMlB,EAAmBQ,MAAOY,EAAO,KAAME,EAAMC,EAAMC,IAI/E2B,EAAA7K,UAAAqL,aAAA,SACEzC,EACAE,EACAC,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAnL,KAAKgN,eAAenC,EAAMlB,EAAmBQ,MAAOY,EAAOC,EAAcC,EAAMC,EAAMC,IAEzF2B,EA/FA,GAAsBpN,EAAAoN,mbC9PtB,IAAAS,EAAApN,EAAA,GAOAqN,EAAArN,EAAA,GAYST,EAAA+N,MAXPD,EAAAC,MAWc/N,EAAAgO,MATdF,EAAAE,MAGF,IASYC,EATZ9D,EAAA1J,EAAA,IASA,SAAYwN,GAEVA,IAAA,mBAGAA,IAAA,yBACAA,IAAA,+BACAA,IAAA,uBACAA,IAAA,iCACAA,IAAA,yBAGAA,IAAA,2BACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,kCACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kCACAA,IAAA,oCACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,8BAGAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,kCACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,cACAA,IAAA,YACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,wBACAA,IAAA,gBACAA,IAAA,kBAGAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,gDACAA,IAAA,wCACAA,IAAA,8CACAA,IAAA,0CACAA,IAAA,0DACAA,IAAA,gDACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,sCACAA,IAAA,8CAGAA,IAAA,0BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,sBA1EF,CAAYA,EAAAjO,EAAAiO,WAAAjO,EAAAiO,SAAQ,KA8EpBjO,EAAAkO,oBAAA,SAAoCC,GAClC,OAAQA,GACN,KAAKF,EAASG,QACd,KAAKH,EAASI,KACd,KAAKJ,EAASK,KACd,KAAKL,EAASM,MAAO,OAAO,EAE9B,OAAO,GAITvO,EAAAwO,eAAA,SAA+BL,GAC7B,OAAQA,GACN,KAAKF,EAASQ,WACd,KAAKR,EAASS,UACd,KAAKT,EAASU,KACd,KAAKV,EAASW,cACd,KAAKX,EAASY,cACd,KAAKZ,EAASa,eACd,KAAKb,EAASc,MAAO,OAAO,EAE9B,OAAO,GAIT/O,EAAAgP,sBAAA,SAAsCb,GACpC,OAAQA,GACN,KAAKF,EAASQ,WACd,KAAKR,EAASa,eAAgB,OAAO,EAEvC,OAAO,GAIT,IAAAG,EAAA,oBAAAA,KA66BA,OAp6BSA,EAAAC,eAAP,SACEhO,EACAmK,GAEA,IAAI8D,EAAW,IAAIC,EAInB,OAHAD,EAAS9D,MAAQA,EACjB8D,EAASE,WAAanO,EACtBiO,EAASG,KAAO,KACTH,GAGFF,EAAAM,qBAAP,SACErO,EACAmK,GAEA,OAAO4D,EAAKC,eAAeD,EAAKO,2BAA2BtO,EAAMmK,GAAQA,IAGpE4D,EAAAQ,gBAAP,SACEvO,EACAwO,EACAC,EACAtE,GAEA,IAAIuE,EAAO,IAAIC,EAKf,OAJAD,EAAKvE,MAAQA,EACbuE,EAAK1O,KAAOA,EACZ0O,EAAKF,cAAgBA,EACrBE,EAAKD,WAAaA,EACXC,GAGFX,EAAAa,mBAAP,SACEC,EACAC,EACAC,EACAN,EACAtE,GAEA,IAAIuE,EAAO,IAAIM,EAMf,OALAN,EAAKvE,MAAQA,EACbuE,EAAKG,WAAaA,EAClBH,EAAKI,WAAaA,EAClBJ,EAAKK,iBAAmBA,EACxBL,EAAKD,WAAaA,EACXC,GAGFX,EAAAkB,kBAAP,SACE9E,GAEA,OAAO4D,EAAKQ,gBACVR,EAAKM,qBAAqB,GAAIlE,GAC9B,MACA,EACAA,IAIG4D,EAAAmB,oBAAP,SACElP,EACAmP,EACAC,EACAjF,GAEA,IAAIkF,EAAO,IAAIC,EAKf,OAJAD,EAAKlF,MAAQA,EACbkF,EAAKrP,KAAOA,EACZqP,EAAKF,YAAcA,EACnBE,EAAKD,YAAcA,EACZC,GAGFtB,EAAAwB,gBAAP,SACEvP,EACA0O,EACAc,EACAvC,EACA9C,GAEA,IAAIkF,EAAO,IAAII,EAMf,OALAJ,EAAKlF,MAAQA,EACbkF,EAAKrP,KAAOA,EACZqP,EAAKX,KAAOA,EACZW,EAAKG,YAAcA,EACnBH,EAAKK,cAAgBzC,EACdoC,GAKFtB,EAAA4B,gBAAP,SACE3P,EACA4P,EACAzF,GAEA,IAAI0F,EAAO,IAAIC,EAKf,OAJAD,EAAK1F,MAAQA,EACb0F,EAAK7P,KAAOA,EACZ6P,EAAKE,UAAYH,EACjBC,EAAKG,cAAgBC,EAAoBjQ,GAClC6P,GAGF9B,EAAAmC,cAAP,SACE7E,EACA4B,EACA9C,GAEA,IAAIgG,EAAO,IAAIC,EAIf,OAHAD,EAAKhG,MAAQA,EACbgG,EAAKE,YAAcpD,EACnBkD,EAAK9E,KAAOA,EACL8E,GAKFpC,EAAAO,2BAAP,SACEtO,EACAmK,EACAmG,QAAA,IAAAA,OAAA,GAEA,IAAIC,EAAO,IAAIC,EAKf,OAJAD,EAAKpG,MAAQA,EACboG,EAAKlF,KAAOrL,EACZuQ,EAAKE,OAASzQ,EACduQ,EAAKD,SAAWA,EACTC,GAGFxC,EAAA2C,gCAAP,SACEvG,GAEA,IAAIoG,EAAO,IAAIC,EAGf,OAFAD,EAAKpG,MAAQA,EACboG,EAAKlF,KAAO,GACLkF,GAGFxC,EAAA4C,6BAAP,SACEC,EACAzG,GAEA,IAAIoG,EAAO,IAAIM,EAGf,OAFAN,EAAKpG,MAAQA,EACboG,EAAKO,mBAAqBF,EACnBL,GAGFxC,EAAAgD,0BAAP,SACEC,EACAC,EACAC,EACA/G,GAEA,IAAIoG,EAAO,IAAIY,EAKf,OAJAZ,EAAKpG,MAAQA,EACboG,EAAKS,cAAgBA,EACrBT,EAAKU,WAAaA,EAClBV,EAAKW,OAASA,EACPX,GAGFxC,EAAAqD,uBAAP,SACEC,EACAC,EACAC,EACApH,GAEA,IAAIoG,EAAO,IAAIiB,EAKf,OAJAjB,EAAKpG,MAAQA,EACboG,EAAKc,SAAWA,EAChBd,EAAKe,KAAOA,EACZf,EAAKgB,MAAQA,EACNhB,GAGFxC,EAAA0D,qBAAP,SACER,EACAS,EACA9B,EACAzF,GAEA,IAAIoG,EAAO,IAAIoB,EAKf,OAJApB,EAAKpG,MAAQA,EACboG,EAAKU,WAAaA,EAClBV,EAAK/B,cAAgBkD,EACrBnB,EAAKR,UAAYH,EACVW,GAGFxC,EAAA6D,sBAAP,SACEC,GAEA,IAAItB,EAAO,IAAIuB,EAGf,OAFAvB,EAAKpG,MAAQ0H,EAAY1H,MACzBoG,EAAKsB,YAAcA,EACZtB,GAGFxC,EAAAgE,sBAAP,SACEC,EACA7H,GAEA,IAAIoG,EAAO,IAAI0B,EAGf,OAFA1B,EAAKpG,MAAQA,EACboG,EAAKyB,YAAcA,EACZzB,GAGFxC,EAAAmE,4BAAP,SACE/H,GAEA,IAAIoG,EAAO,IAAI4B,EAEf,OADA5B,EAAKpG,MAAQA,EACNoG,GAGFxC,EAAAqE,8BAAP,SACEnB,EACAoB,EACAlI,GAEA,IAAIoG,EAAO,IAAI+B,EAIf,OAHA/B,EAAKpG,MAAQA,EACboG,EAAKU,WAAaA,EAClBV,EAAKgC,kBAAoBF,EAClB9B,GAGFxC,EAAAyE,sBAAP,SACErI,GAEA,IAAIoG,EAAO,IAAIkC,EAEf,OADAlC,EAAKpG,MAAQA,EACNoG,GAGFxC,EAAA2E,6BAAP,SACEhS,EACAyJ,GAEA,IAAIoG,EAAO,IAAIoC,EAGf,OAFApC,EAAKpG,MAAQA,EACboG,EAAK7P,MAAQA,EACN6P,GAGFxC,EAAA6E,yBAAP,SACEf,GAEA,IAAItB,EAAO,IAAIsC,EAGf,OAFAtC,EAAKpG,MAAQ0H,EAAY1H,MACzBoG,EAAKsB,YAAcA,EACZtB,GAGFxC,EAAA+E,2BAAP,SACE7B,EACA8B,EACA5I,GAEA,IAAIoG,EAAO,IAAIyC,EAIf,OAHAzC,EAAKpG,MAAQA,EACboG,EAAKU,WAAaA,EAClBV,EAAKwC,OAASA,EACPxC,GAGFxC,EAAAkF,+BAAP,SACEvS,EACAyJ,GAEA,IAAIoG,EAAO,IAAI2C,EAGf,OAFA3C,EAAKpG,MAAQA,EACboG,EAAK7P,MAAQA,EACN6P,GAGFxC,EAAAoF,oBAAP,SACElC,EACAS,EACA9B,EACAzF,GAEA,IAAIoG,EAAO,IAAI6C,EAKf,OAJA7C,EAAKpG,MAAQA,EACboG,EAAKU,WAAaA,EAClBV,EAAK/B,cAAgBkD,EACrBnB,EAAKR,UAAYH,EACVW,GAGFxC,EAAAsF,qBAAP,SACElJ,GAEA,IAAIoG,EAAO,IAAI+C,EAEf,OADA/C,EAAKpG,MAAQA,EACNoG,GAGFxC,EAAAwF,8BAAP,SACEC,EACAC,EACAtJ,GAEA,IAAIoG,EAAO,IAAImD,EAIf,OAHAnD,EAAKpG,MAAQA,EACboG,EAAKiD,MAAQA,EACbjD,EAAKkD,OAASA,EACPlD,GAGFxC,EAAA4F,8BAAP,SACE1C,EACA9G,GAEA,IAAIoG,EAAO,IAAIqD,EAGf,OAFArD,EAAKpG,MAAQA,EACboG,EAAKU,WAAaA,EACXV,GAGFxC,EAAA8F,+BAAP,SACE5C,EACA7P,EACA+I,GAEA,IAAIoG,EAAO,IAAIuD,EAIf,OAHAvD,EAAKpG,MAAQA,EACboG,EAAKU,WAAaA,EAClBV,EAAKnP,SAAWA,EACTmP,GAGFxC,EAAAgG,8BAAP,SACEC,EACAC,EACA9J,GAEA,IAAIoG,EAAO,IAAI2D,EAIf,OAHA3D,EAAKpG,MAAQA,EACboG,EAAKyD,QAAUA,EACfzD,EAAK4D,aAAeF,EACb1D,GAGFxC,EAAAqG,wBAAP,SACEC,EACAC,EACAC,EACApK,GAEA,IAAIoG,EAAO,IAAIiE,EAKf,OAJAjE,EAAKpG,MAAQA,EACboG,EAAK8D,UAAYA,EACjB9D,EAAK+D,OAASA,EACd/D,EAAKgE,OAASA,EACPhE,GAGFxC,EAAA0G,8BAAP,SACE/T,EACAyJ,GAEA,IAAIoG,EAAO,IAAImE,EAGf,OAFAnE,EAAKpG,MAAQA,EACboG,EAAK7P,MAAQA,EACN6P,GAGFxC,EAAA4G,sBAAP,SACExK,GAEA,IAAIoG,EAAO,IAAIqE,EAEf,OADArE,EAAKpG,MAAQA,EACNoG,GAGFxC,EAAA8G,qBAAP,SACE1K,GAEA,IAAIoG,EAAO,IAAIuE,EAEf,OADAvE,EAAKpG,MAAQA,EACNoG,GAGFxC,EAAAgH,qBAAP,SACE5K,GAEA,IAAIoG,EAAO,IAAIyE,EAEf,OADAzE,EAAKpG,MAAQA,EACNoG,GAGFxC,EAAAkH,6BAAP,SACE5D,EACA6D,EACA/K,GAEA,IAAIoG,EAAO,IAAI4E,EAIf,OAHA5E,EAAKpG,MAAQA,EACboG,EAAKc,SAAWA,EAChBd,EAAK2E,QAAUA,EACR3E,GAGFxC,EAAAqH,4BAAP,SACE/D,EACA6D,EACA/K,GAEA,IAAIoG,EAAO,IAAI8E,EAIf,OAHA9E,EAAKpG,MAAQA,EACboG,EAAKc,SAAWA,EAChBd,EAAK2E,QAAUA,EACR3E,GAKFxC,EAAAuH,qBAAP,SACEC,EACApL,GAEA,IAAI0F,EAAO,IAAI2F,GAGf,OAFA3F,EAAK1F,MAAQA,EACb0F,EAAK0F,WAAaA,EACX1F,GAGF9B,EAAA0H,qBAAP,SACEC,EACAvL,GAEA,IAAI0F,EAAO,IAAI8F,GAGf,OAFA9F,EAAK1F,MAAQA,EACb0F,EAAK6F,MAAQA,EACN7F,GAGF9B,EAAA6H,uBAAP,SACEzH,EACA0H,EACA1G,EACA2G,EACAC,EACAC,EACA/B,EACA9J,GAEA,IAAI0F,EAAO,IAAIoG,GASf,OARApG,EAAK1F,MAAQA,EACb0F,EAAKoE,MAAQA,EACbpE,EAAK7P,KAAOmO,EACZ0B,EAAKgG,eAAiBA,EACtBhG,EAAKV,YAAcA,EACnBU,EAAKiG,gBAAkBA,EACvBjG,EAAKkG,QAAUA,EACflG,EAAKmG,WAAaA,EACXnG,GAGF9B,EAAAmI,wBAAP,SACER,EACAvL,GAEA,IAAI0F,EAAO,IAAIsG,GAGf,OAFAtG,EAAK1F,MAAQA,EACb0F,EAAK6F,MAAQA,EACN7F,GAGF9B,EAAAqI,kBAAP,SACEC,EACAhC,EACAlK,GAEA,IAAI0F,EAAO,IAAIyG,GAIf,OAHAzG,EAAK1F,MAAQA,EACb0F,EAAKwG,UAAYA,EACjBxG,EAAKwE,UAAYA,EACVxE,GAGF9B,EAAAwI,qBAAP,SACEpM,GAEA,IAAI0F,EAAO,IAAI2G,GAEf,OADA3G,EAAK1F,MAAQA,EACN0F,GAGF9B,EAAA0I,sBAAP,SACEzW,EACA+V,EACAC,EACA/B,EACA9J,GAEA,IAAI0F,EAAO,IAAI6G,GAMf,OALA7G,EAAK1F,MAAQA,EACb0F,EAAKoE,MAAQA,EACbpE,EAAK7P,KAAOA,EACZ6P,EAAK4D,OAASsC,EACdlG,EAAKmG,WAAaA,EACXnG,GAGF9B,EAAA4I,2BAAP,SACE3W,EACAU,EACAuT,EACA9J,GAEA,IAAI0F,EAAO,IAAI+G,GAKf,OAJA/G,EAAK1F,MAAQA,EACb0F,EAAKoE,MAAQA,EACbpE,EAAK7P,KAAOA,EACZ6P,EAAKnP,MAAQA,EACNmP,GAGF9B,EAAA8I,sBAAP,SACEd,EACAe,EACAC,EACA5M,GAEA,IAAI0F,EAAO,IAAImH,GAIf,GAHAnH,EAAK1F,MAAQA,EACb0F,EAAKkG,QAAUA,EACflG,EAAKiH,KAAOA,EACRA,EAAM,CACR,IAAI9L,EAAiB/B,EAAAgO,cAAcH,EAAKpW,OACpCoW,EAAKpW,MAAMwW,WAAW,KACxBrH,EAAK7E,eAAiB/B,EAAAkO,YACpBnM,EACAb,EAAMY,OAAOC,iBAGVA,EAAekM,WAAWvK,EAAAzK,kBAC7B8I,EAAiB2B,EAAAzK,eAAiB8I,GAEpC6E,EAAK7E,eAAiBA,GAExB6E,EAAKuH,aAAeC,GAAmBxH,EAAK7E,qBAE5C6E,EAAK7E,eAAiB,KACtB6E,EAAKuH,aAAe,KAGtB,OADAvH,EAAKkH,UAAYA,EACVlH,GAGF9B,EAAAuJ,6BAAP,SACEzF,EACA1H,GAEA,IAAI0F,EAAO,IAAI0H,GAGf,OAFA1H,EAAKgC,YAAcA,EACnBhC,EAAK1F,MAAQA,EACN0F,GAGF9B,EAAAyJ,4BAAP,SACExX,EACAyX,EACAtN,GAEA,IAAI0F,EAAO,IAAI6H,GAIf,OAHA7H,EAAK1F,MAAQA,EACb0F,EAAK7P,KAAOA,EACZ6P,EAAK4H,aAAeA,EACb5H,GAGF9B,EAAA4J,mBAAP,SACE3X,EACAyX,EACAtN,GAEA,IAAIkF,EAAO,IAAIuI,GAKf,OAJAvI,EAAKlF,MAAQA,EACbkF,EAAKwI,UAAY7X,EACZyX,IAAcA,EAAezX,GAClCqP,EAAKyI,aAAeL,EACbpI,GAGFtB,EAAAgK,0BAAP,SACE9G,GAEA,IAAIpB,EAAO,IAAImI,GAGf,OAFAnI,EAAK1F,MAAQ8G,EAAW9G,MACxB0F,EAAKoB,WAAaA,EACXpB,GAGF9B,EAAAkK,kBAAP,SACE5D,EACA6D,EACAC,EACAhO,GAEA,IAAI0F,EAAO,IAAIuI,GAKf,OAJAvI,EAAK1F,MAAQA,EACb0F,EAAKwE,UAAYA,EACjBxE,EAAKqI,OAASA,EACdrI,EAAKsI,QAAUA,EACRtI,GAGF9B,EAAAsK,sBAAP,SACEC,EACAxB,EACA3M,GAEA,IAAI0F,EAAO,IAAI0I,GACf1I,EAAK1F,MAAQA,EACb0F,EAAK2I,aAAeF,EACpBzI,EAAK4I,cAAgB,KACrB5I,EAAKiH,KAAOA,EACZ,IAAI9L,EAAiB/B,EAAAgO,cAAcH,EAAKpW,OAaxC,OAZIoW,EAAKpW,MAAMwW,WAAW,KACxBrH,EAAK7E,eAAiB/B,EAAAkO,YACpBnM,EACAb,EAAMY,OAAOC,iBAGVA,EAAekM,WAAWvK,EAAAzK,kBAC7B8I,EAAiB2B,EAAAzK,eAAiB8I,GAEpC6E,EAAK7E,eAAiBA,GAExB6E,EAAKuH,aAAeC,GAAmBxH,EAAK7E,gBACrC6E,GAGF9B,EAAA2K,kCAAP,SACEvK,EACA2I,EACA3M,GAEA,IAAI0F,EAAO,IAAI0I,GACf1I,EAAK1F,MAAQA,EACb0F,EAAK2I,aAAe,KACpB3I,EAAK4I,cAAgBtK,EACrB0B,EAAKiH,KAAOA,EACZ,IAAI9L,EAAiB/B,EAAAgO,cAAcH,EAAKpW,OAaxC,OAZIoW,EAAKpW,MAAMwW,WAAW,KACxBrH,EAAK7E,eAAiB/B,EAAAkO,YACpBnM,EACAb,EAAMY,OAAOC,iBAGVA,EAAekM,WAAWvK,EAAAzK,kBAC7B8I,EAAiB2B,EAAAzK,eAAiB8I,GAEpC6E,EAAK7E,eAAiBA,GAExB6E,EAAKuH,aAAeC,GAAmBxH,EAAK7E,gBACrC6E,GAGF9B,EAAA4K,wBAAP,SACEC,EACA5Y,EACAmK,GAEA,IAAIkF,EAAO,IAAIwJ,GAKf,OAJAxJ,EAAKlF,MAAQA,EACbkF,EAAKuJ,YAAcA,EACd5Y,IAAMA,EAAO4Y,GAClBvJ,EAAKrP,KAAOA,EACLqP,GAGFtB,EAAA+K,2BAAP,SACE9Y,EACA6V,EACA1G,EACA4G,EACAC,EACA/B,EACA9J,GAEA,IAAI0F,EAAO,IAAIkJ,GAQf,OAPAlJ,EAAK1F,MAAQA,EACb0F,EAAKoE,MAAQA,EACbpE,EAAK7P,KAAOA,EACZ6P,EAAKgG,eAAiBA,EACtBhG,EAAKV,YAAcA,EACnBU,EAAKkG,QAAUA,EACflG,EAAKmG,WAAaA,EACXnG,GAGF9B,EAAAiL,uBAAP,SACEhZ,EACA0O,EACAc,EACAwG,EACA/B,EACA9J,GAEA,IAAI0F,EAAO,IAAIoJ,GAOf,OANApJ,EAAK1F,MAAQA,EACb0F,EAAKoE,MAAQA,EACbpE,EAAK7P,KAAOA,EACZ6P,EAAKnB,KAAOA,EACZmB,EAAKL,YAAcA,EACnBK,EAAKmG,WAAaA,EACXnG,GAGF9B,EAAAmL,mBAAP,SACE1J,EACA6E,EACA8E,EACA9C,EACAlM,GAEA,IAAI0F,EAAO,IAAIuJ,GAMf,OALAvJ,EAAK1F,MAAQA,EACb0F,EAAKL,YAAcA,EACnBK,EAAKwE,UAAYA,EACjBxE,EAAKsJ,YAAcA,EACnBtJ,EAAKwG,UAAYA,EACVxG,GAGF9B,EAAAsL,0BAAP,SACErZ,EACA6V,EACAyD,EACAC,EACAvD,EACA/B,EACAuF,EACArP,GAEA,IAAI0F,EAAO,IAAI4J,GASf,OARA5J,EAAK1F,MAAQA,EACb0F,EAAKoE,MAAQA,EACbpE,EAAK7P,KAAOA,EACZ6P,EAAKgG,eAAiBA,EACtBhG,EAAKyJ,UAAYA,EACjBzJ,EAAK0J,KAAOA,EACZ1J,EAAKmG,WAAaA,EAClBnG,EAAK2J,UAAYA,EACV3J,GAGF9B,EAAA2L,gCAAP,SACEC,EACAC,EACAzP,GAEA,IAAIkF,EAAO,IAAIwK,GAIf,OAHAxK,EAAKlF,MAAQA,EACbkF,EAAKsK,QAAUA,EACftK,EAAKuK,UAAYA,EACVvK,GAGFtB,EAAA+L,wBAAP,SACE9Z,EACA6V,EACAyD,EACAC,EACAvD,EACA/B,EACA9J,GAEA,IAAI0F,EAAO,IAAIkK,GAQf,OAPAlK,EAAK1F,MAAQA,EACb0F,EAAKoE,MAAQA,EACbpE,EAAK7P,KAAOA,EACZ6P,EAAKgG,eAAiBA,EACtBhG,EAAKyJ,UAAYA,EACjBzJ,EAAK0J,KAAOA,EACZ1J,EAAKmG,WAAaA,EACXnG,GAGF9B,EAAAiM,2BAAP,SACEha,EACA+V,EACAC,EACA/B,EACA9J,GAEA,IAAI0F,EAAO,IAAIoK,GAMf,OALApK,EAAK1F,MAAQA,EACb0F,EAAKoE,MAAQA,EACbpE,EAAK7P,KAAOA,EACZ6P,EAAKkG,QAAUA,EACflG,EAAKmG,WAAaA,EACXnG,GAGF9B,EAAAmM,sBAAP,SACExZ,EACAyJ,GAEA,IAAI0F,EAAO,IAAIsK,GAGf,OAFAtK,EAAK1F,MAAQA,EACb0F,EAAKnP,MAAQA,EACNmP,GAGF9B,EAAAqM,sBAAP,SACE/F,EACAgG,EACAlQ,GAEA,IAAI0F,EAAO,IAAIyK,GAIf,OAHAzK,EAAK1F,MAAQA,EACb0F,EAAKwE,UAAYA,EACjBxE,EAAKwK,MAAQA,EACNxK,GAGF9B,EAAAwM,iBAAP,SACE7E,EACAH,EACApL,GAEA,IAAIkF,EAAO,IAAImL,GAIf,OAHAnL,EAAKlF,MAAQA,EACbkF,EAAKqG,MAAQA,EACbrG,EAAKkG,WAAaA,EACXlG,GAGFtB,EAAA0M,qBAAP,SACE/Z,EACAyJ,GAEA,IAAI0F,EAAO,IAAI6K,GAGf,OAFA7K,EAAK1F,MAAQA,EACb0F,EAAKnP,MAAQA,EACNmP,GAGF9B,EAAA4M,mBAAP,SACEpF,EACAqF,EACAC,EACAC,EACA3Q,GAEA,IAAI0F,EAAO,IAAIkL,GAMf,OALAlL,EAAK1F,MAAQA,EACb0F,EAAK0F,WAAaA,EAClB1F,EAAK+K,cAAgBA,EACrB/K,EAAKgL,gBAAkBA,EACvBhL,EAAKiL,kBAAoBA,EAClBjL,GAGF9B,EAAAiN,sBAAP,SACEhb,EACA6V,EACAoF,EACAjF,EACA/B,EACA9J,GAEA,IAAI0F,EAAO,IAAIqL,GAOf,OANArL,EAAK1F,MAAQA,EACb0F,EAAKoE,MAAQA,EACbpE,EAAK7P,KAAOA,EACZ6P,EAAKgG,eAAiBA,EACtBhG,EAAKnB,KAAOuM,EACZpL,EAAKmG,WAAaA,EACXnG,GAGF9B,EAAAoN,wBAAP,SACE3C,EACAxC,EACA7L,GAEA,IAAI0F,EAAO,IAAIuL,GAIf,OAHAvL,EAAK1F,MAAQA,EACb0F,EAAK2I,aAAeA,EACpB3I,EAAKmG,WAAaA,EACXnG,GAGF9B,EAAAsN,0BAAP,SACErb,EACA0O,EACAc,EACAwG,EACA/B,EACA9J,GAEA,IAAIkF,EAAO,IAAIiM,GAOf,OANAjM,EAAKlF,MAAQA,EACbkF,EAAK4E,MAAQA,EACb5E,EAAKrP,KAAOA,EACZqP,EAAKX,KAAOA,EACZW,EAAKG,YAAcA,EACnBH,EAAK2G,WAAaA,EACX3G,GAGFtB,EAAAwN,oBAAP,SACEtK,EACA9G,GAEA,IAAI0F,EAAO,IAAI2L,GAGf,OAFA3L,EAAK1F,MAAQA,EACb0F,EAAKoB,WAAaA,EACXpB,GAGF9B,EAAA0N,qBAAP,SACEpH,EACAgC,EACAlM,GAEA,IAAI0F,EAAO,IAAI6L,GAIf,OAHA7L,EAAK1F,MAAQA,EACb0F,EAAKwE,UAAYA,EACjBxE,EAAKwG,UAAYA,EACVxG,GAEX9B,EA76BA,GAAsBjP,EAAAiP,OAi7BtB,IAAA4N,EAAA,SAAAC,GAAA,SAAAD,mDAKA,OALuCE,EAAAF,EAAAC,GAKvCD,EALA,CAAuC5N,GAAjBjP,EAAA6c,WAQtB,IAAAzN,EAAA,SAAA0N,GAAA,SAAA1N,IAAA,IAAA4N,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASiP,WAMlB,OAP8BH,EAAA3N,EAAA0N,GAO9B1N,EAPA,CAA8BH,GAAjBjP,EAAAoP,WAUb,IAAAS,EAAA,SAAAiN,GAAA,SAAAjN,IAAA,IAAAmN,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASkP,YAMlB,OAPmCJ,EAAAlN,EAAAiN,GAOnCjN,EAPA,CAAmCgN,GAAtB7c,EAAA6P,gBAUb,IAAAK,EAAA,SAAA4M,GAAA,SAAA5M,IAAA,IAAA8M,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASmP,eAQlB,OATsCL,EAAA7M,EAAA4M,GAStC5M,EATA,CAAsC2M,GAAzB7c,EAAAkQ,mBAYb,IAAAM,EAAA,SAAAsM,GAAA,SAAAtM,IAAA,IAAAwM,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASoP,gBAQlB,OATuCN,EAAAvM,EAAAsM,GASvCtM,EATA,CAAuCvB,GAA1BjP,EAAAwQ,oBAYb,SAAY8M,GAEVA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,eANF,CAAYtd,EAAAsd,gBAAAtd,EAAAsd,cAAa,KAUzB,IA2BYC,EA3BZ5M,EAAA,SAAAmM,GAAA,SAAAnM,IAAA,IAAAqM,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASuP,UAWhBR,EAAAS,yBAAoD,KAEpDT,EAAA7H,MAAqBtH,EAAAlL,YAAY+a,OAQnC,OAtBmCX,EAAApM,EAAAmM,GAiBjCnM,EAAApO,UAAAob,GAAA,SAAGC,GAA2B,OAAQtd,KAAK6U,MAAQyI,IAASA,GAE5DjN,EAAApO,UAAAsb,MAAA,SAAMD,GAA2B,OAA8B,IAAtBtd,KAAK6U,MAAQyI,IAEtDjN,EAAApO,UAAAub,IAAA,SAAIF,GAA2Btd,KAAK6U,OAASyI,GAC/CjN,EAtBA,CAAmC1B,GA4CnC,SAAgBkC,EAAoBjQ,GAElC,GAAIA,EAAKiN,MAAQF,EAASQ,WAAY,CACpC,IAAIsP,EAAiC7c,EAAMqL,KAE3C,OADA7B,OAAOqT,EAAQtR,QACPsR,EAAQlR,WAAW,IACzB,QACE,GAAe,WAAXkR,EAAsB,OAAOR,EAAcS,QAC/C,MAEF,SACE,GAAe,YAAXD,EAAuB,OAAOR,EAAcU,SAChD,MAEF,SACE,GAAe,UAAXF,EAAqB,OAAOR,EAAcW,OAC9C,MAEF,SACE,GAAe,UAAXH,EAAqB,OAAOR,EAAcY,OAC9C,MAEF,SACE,GAAe,QAAXJ,EAAmB,OAAOR,EAAca,KAC5C,MAEF,SACE,GAAe,YAAXL,EAAuB,OAAOR,EAAcc,SAChD,MAEF,SACE,GAAe,UAAXN,EAAqB,OAAOR,EAAce,OAC9C,MAEF,SACE,GAAe,aAAXP,EAAwB,OAAOR,EAAcgB,UACjD,GAAe,UAAXR,EAAqB,OAAOR,EAAciB,aAI7C,GACLtd,EAAKiN,MAAQF,EAASa,gBACK5N,EAAMiR,WAAWhE,MAAQF,EAASQ,WAC7D,CACIsP,EAA4D7c,EAAMiR,WAAY5F,KAClF7B,OAAOqT,EAAQtR,QACf,IAAIgS,EAAqCvd,EAAMoB,SAASiK,KAGxD,GAFA7B,OAAO+T,EAAQhS,QAEA,YAAXsR,EACF,OAAQU,EAAQ5R,WAAW,IACzB,QACE,GAAe,UAAX4R,EAAqB,OAAOlB,EAAcmB,gBAC9C,MAEF,SACE,OAAQD,GACN,IAAK,SAAU,OAAOlB,EAAcoB,gBACpC,IAAK,UAAW,OAAOpB,EAAcqB,mBAO/C,OAAOrB,EAAcsB,OA7GV7e,EAAA2Q,gBA2Bb,SAAY4M,GACVA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,qCACAA,IAAA,qCACAA,IAAA,uCACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,oBAbF,CAAYA,EAAAvd,EAAAud,gBAAAvd,EAAAud,cAAa,KAiBzBvd,EAAAmR,sBAqEA,IAAAH,EAAA,SAAA8L,GAAA,SAAA9L,IAAA,IAAAgM,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAAS6Q,YAQlB,OATmC/B,EAAA/L,EAAA8L,GASnC9L,EATA,CAAmC/B,GAAtBjP,EAAAgR,gBAYb,SAAY+N,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,iBANF,CAAY/e,EAAA+e,cAAA/e,EAAA+e,YAAW,KAUvB,IAAAzN,EAAA,SAAAwL,GAAA,SAAAxL,IAAA,IAAA0L,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAAS+Q,UAMlB,OAPiCjC,EAAAzL,EAAAwL,GAOjCxL,EAPA,CAAiCrC,GAApBjP,EAAAsR,cAYb,IAAA2N,EAAA,SAAAnC,GAAA,SAAAmC,mDAAgD,OAAPlC,EAAAkC,EAAAnC,GAAOmC,EAAhD,CAAyChQ,GAAnBjP,EAAAif,aAGtB,IAYYC,EAZZxN,EAAA,SAAAoL,GAAA,SAAApL,IAAA,IAAAsL,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASQ,aAQlB,OAT0CsO,EAAArL,EAAAoL,GAS1CpL,EATA,CAA0CuN,GAA7Bjf,EAAA0R,uBAYb,SAAYwN,GACVA,IAAA,iBACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,mBANF,CAAYA,EAAAlf,EAAAkf,cAAAlf,EAAAkf,YAAW,KAUvB,IAAAC,EAAA,SAAArC,GAAA,SAAAqC,IAAA,IAAAnC,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASG,UAIlB,OALgD2O,EAAAoC,EAAArC,GAKhDqC,EALA,CAAgDF,GAA1Bjf,EAAAmf,oBAQtB,IAAApN,EAAA,SAAA+K,GAAA,SAAA/K,IAAA,IAAAiL,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAAoC,YAAcF,EAAYG,QAI5B,OAL4CtC,EAAAhL,EAAA+K,GAK5C/K,EALA,CAA4CoN,GAA/Bnf,EAAA+R,yBAQb,SAAYuN,GACVA,IAAA,mBACAA,IAAA,WACAA,IAAA,qBAHF,CAAYtf,EAAAsf,gBAAAtf,EAAAsf,cAAa,KAOzB,IAAAjN,EAAA,SAAAyK,GAAA,SAAAzK,IAAA,IAAA2K,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASS,YAQlB,OATyCqO,EAAA1K,EAAAyK,GASzCzK,EATA,CAAyC4M,GAA5Bjf,EAAAqS,sBAYb,IAAAK,EAAA,SAAAoK,GAAA,SAAApK,IAAA,IAAAsK,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASsR,SAQlB,OATsCxC,EAAArK,EAAAoK,GAStCpK,EATA,CAAsCuM,GAAzBjf,EAAA0S,mBAYb,IAAAG,EAAA,SAAAiK,GAAA,SAAAjK,IAAA,IAAAmK,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASU,OA4BlB,OA7BoCoO,EAAAlK,EAAAiK,GAWlCzb,OAAAC,eAAIuR,EAAAtQ,UAAA,qBAAkB,KAAtB,WACE,IACIid,EADA9P,EAAgBpP,KAAKoP,cAEzB,OAAIA,IAAkB8P,EAAmB9P,EAAcjD,QAC9CqB,EAAAE,MAAMf,KAAKyC,EAAc,GAAGrE,MAAOqE,EAAc8P,EAAmB,GAAGnU,OAEzE/K,KAAK6R,WAAW9G,uCAIzBhK,OAAAC,eAAIuR,EAAAtQ,UAAA,iBAAc,KAAlB,WACE,IAAIuO,EAAOxQ,KAAK2Q,UACZwO,EAAe3O,EAAKrE,OACxB,OAAIgT,EACK3R,EAAAE,MAAMf,KAAK6D,EAAK,GAAGzF,MAAOyF,EAAK2O,EAAe,GAAGpU,OAEnD/K,KAAK6R,WAAW9G,uCAE3BwH,EA7BA,CAAoCoM,GAAvBjf,EAAA6S,iBAgCb,IAAAG,EAAA,SAAA8J,GAAA,SAAA9J,IAAA,IAAAgK,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASyR,QAIlB,OALqC3C,EAAA/J,EAAA8J,GAKrC9J,EALA,CAAqCiM,GAAxBjf,EAAAgT,kBAQb,IAAAG,EAAA,SAAA2J,GAAA,SAAA3J,IAAA,IAAA6J,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAAS0R,QAIlB,OALqC5C,EAAA5J,EAAA2J,GAKrC3J,EALA,CAAqC8L,GAAxBjf,EAAAmT,kBAQb,IAAAE,EAAA,SAAAyJ,GAAA,SAAAzJ,IAAA,IAAA2J,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAAS2R,YAChB5C,EAAAzQ,KAAO,cACPyQ,EAAArL,OAAS9D,EAAAvK,cAAcsC,cACzB,OAJ2CmX,EAAA1J,EAAAyJ,GAI3CzJ,EAJA,CAA2C3B,GAA9B1R,EAAAqT,wBAOb,IAAAG,EAAA,SAAAsJ,GAAA,SAAAtJ,IAAA,IAAAwJ,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASW,gBAMlB,OAP6CmO,EAAAvJ,EAAAsJ,GAO7CtJ,EAPA,CAA6CyL,GAAhCjf,EAAAwT,0BAUb,IAAAK,EAAA,SAAAiJ,GAAA,SAAAjJ,IAAA,IAAAmJ,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAAoC,YAAcF,EAAYW,QAI5B,OAL4C9C,EAAAlJ,EAAAiJ,GAK5CjJ,EALA,CAA4CsL,GAA/Bnf,EAAA6T,yBAQb,IAAAE,EAAA,SAAA+I,GAAA,SAAA/I,IAAA,IAAAiJ,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAAS6R,WAIlB,OALwC/C,EAAAhJ,EAAA+I,GAKxC/I,EALA,CAAwCkL,GAA3Bjf,EAAA+T,qBAQb,IAAAG,EAAA,SAAA4I,GAAA,SAAA5I,IAAA,IAAA8I,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAAS8R,aAMlB,OAP0ChD,EAAA7I,EAAA4I,GAO1C5I,EAPA,CAA0C+K,GAA7Bjf,EAAAkU,uBAUb,IAAAE,EAAA,SAAA0I,GAAA,SAAA1I,IAAA,IAAA4I,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAAoC,YAAcF,EAAYc,UAI5B,OAL8CjD,EAAA3I,EAAA0I,GAK9C1I,EALA,CAA8C+K,GAAjCnf,EAAAoU,2BAQb,IAAAE,EAAA,SAAAwI,GAAA,SAAAxI,IAAA,IAAA0I,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASgS,MAClB,OAFmClD,EAAAzI,EAAAwI,GAEnCxI,EAFA,CAAmCzB,GAAtB7S,EAAAsU,gBAKb,IAAAE,EAAA,SAAAsI,GAAA,SAAAtI,IAAA,IAAAwI,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASI,KAChB2O,EAAAzQ,KAAO,OACPyQ,EAAArL,OAAS9D,EAAAvK,cAAciC,QACzB,OAJoCwX,EAAAvI,EAAAsI,GAIpCtI,EAJA,CAAoC9C,GAAvB1R,EAAAwU,iBAOb,IAAAI,EAAA,SAAAkI,GAAA,SAAAlI,IAAA,IAAAoI,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAAoC,YAAcF,EAAYgB,SAM5B,OAP6CnD,EAAAnI,EAAAkI,GAO7ClI,EAPA,CAA6CuK,GAAhCnf,EAAA4U,0BAUb,IAAAE,EAAA,SAAAgI,GAAA,SAAAhI,IAAA,IAAAkI,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASY,gBAIlB,OAL6CkO,EAAAjI,EAAAgI,GAK7ChI,EALA,CAA6CmK,GAAhCjf,EAAA8U,0BAQb,IAAAE,EAAA,SAAA8H,GAAA,SAAA9H,IAAA,IAAAgI,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASa,iBAMlB,OAP8CiO,EAAA/H,EAAA8H,GAO9C9H,EAPA,CAA8CiK,GAAjCjf,EAAAgV,2BAUb,IAAAI,EAAA,SAAA0H,GAAA,SAAA1H,IAAA,IAAA4H,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAAoC,YAAcF,EAAYiB,SAM5B,OAP6CpD,EAAA3H,EAAA0H,GAO7C1H,EAPA,CAA6C+J,GAAhCnf,EAAAoV,0BAUb,IAAAM,EAAA,SAAAoH,GAAA,SAAApH,IAAA,IAAAsH,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASmS,UAQlB,OATuCrD,EAAArH,EAAAoH,GASvCpH,EATA,CAAuCuJ,GAA1Bjf,EAAA0V,oBAYb,IAAAE,EAAA,SAAAkH,GAAA,SAAAlH,IAAA,IAAAoH,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAAoC,YAAcF,EAAYmB,SAI5B,OAL6CtD,EAAAnH,EAAAkH,GAK7ClH,EALA,CAA6CuJ,GAAhCnf,EAAA4V,0BAQb,IAAAE,EAAA,SAAAgH,GAAA,SAAAhH,IAAA,IAAAkH,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASc,MAChBiO,EAAAzQ,KAAO,QACPyQ,EAAArL,OAAS9D,EAAAvK,cAAcqC,SACzB,OAJqCoX,EAAAjH,EAAAgH,GAIrChH,EAJA,CAAqCpE,GAAxB1R,EAAA8V,kBAOb,IAAAE,EAAA,SAAA8G,GAAA,SAAA9G,IAAA,IAAAgH,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASqS,KAChBtD,EAAAzQ,KAAO,OACPyQ,EAAArL,OAAS9D,EAAAvK,cAAcoC,QACzB,OAJoCqX,EAAA/G,EAAA8G,GAIpC9G,EAJA,CAAoCtE,GAAvB1R,EAAAgW,iBAOb,IAAAE,EAAA,SAAA4G,GAAA,SAAA5G,IAAA,IAAA8G,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASK,KAChB0O,EAAAzQ,KAAO,OACPyQ,EAAArL,OAAS9D,EAAAvK,cAAckC,QACzB,OAJoCuX,EAAA7G,EAAA4G,GAIpC5G,EAJA,CAAoCxE,GAAvB1R,EAAAkW,iBAOb,IAAAvC,EAAA,SAAAmJ,GAAA,SAAAnJ,IAAA,IAAAqJ,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASM,MAChByO,EAAAzQ,KAAO,QACPyQ,EAAArL,OAAS9D,EAAAvK,cAAcmC,SACzB,OAJqCsX,EAAApJ,EAAAmJ,GAIrCnJ,EAJA,CAAqCjC,GAAxB1R,EAAA2T,kBAOb,IAAA4M,EAAA,SAAAzD,GAAA,SAAAyD,mDAMA,OAN8CxD,EAAAwD,EAAAzD,GAM9CyD,EANA,CAA8CtB,GAAxBjf,EAAAugB,kBAStB,IAAAlK,EAAA,SAAAyG,GAAA,SAAAzG,IAAA,IAAA2G,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASuS,eAClB,OAF4CzD,EAAA1G,EAAAyG,GAE5CzG,EAFA,CAA4CkK,GAA/BvgB,EAAAqW,yBAKb,IAAAE,EAAA,SAAAuG,GAAA,SAAAvG,IAAA,IAAAyG,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASwS,cAClB,OAF2C1D,EAAAxG,EAAAuG,GAE3CvG,EAFA,CAA2CgK,GAA9BvgB,EAAAuW,wBAOb,IAGYmK,EAHZC,EAAA,SAAA7D,GAAA,SAAA6D,mDAA+C,OAAP5D,EAAA4D,EAAA7D,GAAO6D,EAA/C,CAAwC1R,GAAlBjP,EAAA2gB,YAGtB,SAAYD,GAEVA,IAAA,eAEAA,IAAA,2BAEAA,IAAA,qBAEAA,IAAA,iCARF,CAAYA,EAAA1gB,EAAA0gB,aAAA1gB,EAAA0gB,WAAU,KAYtB,IAAAE,EAAA,SAAA9D,GAwBE,SAAA8D,EAAY1U,EAAwBK,EAAc4B,GAAlD,IAAA6O,EACEF,EAAAhc,KAAAR,OAAOA,KAxBT0c,EAAA7O,KAAOF,EAAS4S,OAChB7D,EAAA8D,OAAS,KAeT9D,EAAA+D,UAA8B,KAE9B/D,EAAAgE,gBAAuB,EAEvBhE,EAAAiE,YAAkC,KAKhCjE,EAAKkE,WAAa/S,EAClB6O,EAAK9Q,eAAiBA,EACtB,IAAIoM,EAAeC,GAAmByE,EAAK9Q,gBAC3C8Q,EAAK1E,aAAeA,EACpB,IAAI6I,EAAM7I,EAAa8I,YAAYvT,EAAAjL,uBACnCoa,EAAKqE,WAAaF,GAAO,EAAI7I,EAAavL,UAAUoU,EAAM,GAAK7I,EAC/D0E,EAAKvG,WAAa,IAAIlP,MACtByV,EAAK3R,MAAQ,IAAIyC,EAAAE,MAAMgP,EAAM,EAAGzQ,EAAKE,QACrCuQ,EAAKzQ,KAAOA,IAOhB,OAzC4BwQ,EAAA6D,EAAA9D,GAqC1Bzb,OAAAC,eAAIsf,EAAAre,UAAA,YAAS,KAAb,WACE,IAAI4L,EAAO7N,KAAK4gB,WAChB,OAAO/S,GAAQuS,EAAWY,SAAWnT,GAAQuS,EAAWa,+CAE5DX,EAzCA,CAA4B3R,GAAfjP,EAAA4gB,SA4Cb,IAAAY,GAAA,SAAA1E,GAAA,SAAA0E,IAAA,IAAAxE,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YAIE0c,EAAA9F,WAAqC,KAErC8F,EAAA7H,MAAqBtH,EAAAlL,YAAY+a,OAQnC,OAdmDX,EAAAyE,EAAA1E,GASjD0E,EAAAjf,UAAAob,GAAA,SAAGC,GAA2B,OAAQtd,KAAK6U,MAAQyI,IAASA,GAE5D4D,EAAAjf,UAAAsb,MAAA,SAAMD,GAA2B,OAA8B,IAAtBtd,KAAK6U,MAAQyI,IAEtD4D,EAAAjf,UAAAub,IAAA,SAAIF,GAA2Btd,KAAK6U,OAASyI,GAC/C4D,EAdA,CAAmDb,GAA7B3gB,EAAAwhB,wBAiBtB,IAAAzG,GAAA,SAAA+B,GAAA,SAAA/B,IAAA,IAAAiC,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASwT,4BAMlB,OAP+C1E,EAAAhC,EAAA+B,GAO/C/B,EAPA,CAA+CyG,IAAlCxhB,EAAA+a,6BAUb,IAAA2G,GAAA,SAAA5E,GAAA,SAAA4E,mDAMA,OAN+D3E,EAAA2E,EAAA5E,GAM/D4E,EANA,CAA+DF,IAAzCxhB,EAAA0hB,oCAStB,IAAAhL,GAAA,SAAAoG,GAAA,SAAApG,IAAA,IAAAsG,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAAS0T,QAIlB,OALoC5E,EAAArG,EAAAoG,GAKpCpG,EALA,CAAoCiK,GAAvB3gB,EAAA0W,kBAQb,IAAAG,GAAA,SAAAiG,GAAA,SAAAjG,IAAA,IAAAmG,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAAS2T,QAIlB,OALoC7E,EAAAlG,EAAAiG,GAKpCjG,EALA,CAAoC8J,GAAvB3gB,EAAA6W,kBAQb,IAAAM,GAAA,SAAA2F,GAAA,SAAA3F,IAAA,IAAA6F,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAAS4T,mBAelB,OAhBsC9E,EAAA5F,EAAA2F,GAYpCzb,OAAAC,eAAI6V,EAAA5U,UAAA,YAAS,KAAb,WACE,IAAIwU,EAAiBzW,KAAKyW,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAetK,OAAS,mCAE7D0K,EAhBA,CAAsCqK,IAAzBxhB,EAAAmX,oBAmBb,IAAAE,GAAA,SAAAyF,GAAA,SAAAzF,IAAA,IAAA2F,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAAS6T,WAIlB,OALuC/E,EAAA1F,EAAAyF,GAKvCzF,EALA,CAAuCsJ,GAA1B3gB,EAAAqX,qBAQb,IAAAG,GAAA,SAAAsF,GAAA,SAAAtF,IAAA,IAAAwF,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAAS8T,KAMlB,OAPiChF,EAAAvF,EAAAsF,GAOjCtF,EAPA,CAAiCmJ,GAApB3gB,EAAAwX,eAUb,IAAAE,GAAA,SAAAoF,GAAA,SAAApF,IAAA,IAAAsF,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAAS1K,QAClB,OAFoCwZ,EAAArF,EAAAoF,GAEpCpF,EAFA,CAAoCiJ,GAAvB3gB,EAAA0X,kBAKb,IAAAE,GAAA,SAAAkF,GAAA,SAAAlF,IAAA,IAAAoF,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAAS+T,kBAIlB,OALqCjF,EAAAnF,EAAAkF,GAKrClF,EALA,CAAqC4J,IAAxBxhB,EAAA4X,mBAQb,IAAAE,GAAA,SAAAgF,GAAA,SAAAhF,IAAA,IAAAkF,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASgU,uBAKlB,OAN0ClF,EAAAjF,EAAAgF,GAM1ChF,EANA,CAA0C4J,IAA7B1hB,EAAA8X,wBASb,IAAAc,GAAA,SAAAkE,GAAA,SAAAlE,IAAA,IAAAoE,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASiU,eAMlB,OAP2CnF,EAAAnE,EAAAkE,GAO3ClE,EAPA,CAA2C3J,GAA9BjP,EAAA4Y,yBAUb,IAAAE,GAAA,SAAAgE,GAAA,SAAAhE,IAAA,IAAAkE,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASkU,eAMlB,OAPkCpF,EAAAjE,EAAAgE,GAOlChE,EAPA,CAAkC7J,GAArBjP,EAAA8Y,gBAUb,IAAAZ,GAAA,SAAA4E,GAAA,SAAA5E,IAAA,IAAA8E,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASmU,SAYlB,OAbqCrF,EAAA7E,EAAA4E,GAarC5E,EAbA,CAAqCyI,GAAxB3gB,EAAAkY,mBAgBb,IAAAO,GAAA,SAAAqE,GAAA,SAAArE,IAAA,IAAAuE,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASoU,gBAIlB,OAL4CtF,EAAAtE,EAAAqE,GAK5CrE,EALA,CAA4CkI,GAA/B3gB,EAAAyY,0BAQb,IAAAS,GAAA,SAAA4D,GAAA,SAAA5D,IAAA,IAAA8D,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASqU,aAIlB,OALyCvF,EAAA7D,EAAA4D,GAKzC5D,EALA,CAAyCyH,GAA5B3gB,EAAAkZ,uBAQb,IAAAiB,GAAA,SAAA2C,GAAA,SAAA3C,IAAA,IAAA6C,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASsU,iBAGhBvF,EAAAwF,gBAAuB,IACzB,OALsCzF,EAAA5C,EAAA2C,GAKtC3C,EALA,CAAsCuH,IAAzB1hB,EAAAma,oBAQb,IAAAG,GAAA,SAAAwC,GAAA,SAAAxC,IAAA,IAAA0C,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASwU,MAalB,OAdkC1F,EAAAzC,EAAAwC,GAclCxC,EAdA,CAAkCqG,GAArB3gB,EAAAsa,gBAiBb,SAAkBoI,GAEhBA,IAAA,eAEAA,IAAA,6CAEAA,IAAA,+BANF,CAAkB1iB,EAAA0iB,YAAA1iB,EAAA0iB,UAAS,KAU3B,IAAA/H,GAAA,SAAAmC,GAAA,SAAAnC,IAAA,IAAAqC,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAAS0U,sBA6BlB,OA9ByC5F,EAAApC,EAAAmC,GAYvCzb,OAAAC,eAAIqZ,EAAApY,UAAA,YAAS,KAAb,WACE,IAAIwU,EAAiBzW,KAAKyW,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAetK,OAAS,mCAI3DkO,EAAApY,UAAAqgB,MAAA,WACE,OAAO3T,EAAKsL,0BACVja,KAAKY,KACLZ,KAAKyW,eACLzW,KAAKka,UACLla,KAAKma,KACLna,KAAK4W,WACL5W,KAAK6U,MACL7U,KAAKoa,UACLpa,KAAK+K,QAGXsP,EA9BA,CAAyC6G,IAA5BxhB,EAAA2a,uBAiCb,IAAArB,GAAA,SAAAwD,GAAA,SAAAxD,IAAA,IAAA0D,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAAS4U,KAQlB,OATiC9F,EAAAzD,EAAAwD,GASjCxD,EATA,CAAiCqH,GAApB3gB,EAAAsZ,eAYb,IAAAS,GAAA,SAAA+C,GAAA,SAAA/C,IAAA,IAAAiD,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAAS6U,oBAIlB,OALuC/F,EAAAhD,EAAA+C,GAKvC/C,EALA,CAAuCyH,IAA1BxhB,EAAA+Z,qBAQb,IAAAN,GAAA,SAAAqD,GAAA,SAAArD,IAAA,IAAAuD,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAAS8U,SAYlB,OAbqChG,EAAAtD,EAAAqD,GAarCrD,EAbA,CAAqCkH,GAAxB3gB,EAAAyZ,mBAgBb,IAAAQ,GAAA,SAAA6C,GAAA,SAAA7C,IAAA,IAAA+C,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAAS+U,uBAClB,OAF0CjG,EAAA9C,EAAA6C,GAE1C7C,EAFA,CAA0C9C,IAA7BnX,EAAAia,wBAKb,IAAAgB,GAAA,SAAA6B,GAAA,SAAA7B,IAAA,IAAA+B,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASgV,oBAClB,OAFuClG,EAAA9B,EAAA6B,GAEvC7B,EAFA,CAAuCN,IAA1B3a,EAAAib,qBAKb,IAAAE,GAAA,SAAA2B,GAAA,SAAA3B,IAAA,IAAA6B,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASiV,uBAIlB,OAL0CnG,EAAA5B,EAAA2B,GAK1C3B,EALA,CAA0CqG,IAA7BxhB,EAAAmb,wBAQb,IAAAE,GAAA,SAAAyB,GAAA,SAAAzB,IAAA,IAAA2B,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASkV,SAIlB,OALqCpG,EAAA1B,EAAAyB,GAKrCzB,EALA,CAAqCsF,GAAxB3gB,EAAAqb,mBAQb,IAAAK,GAAA,SAAAoB,GAAA,SAAApB,IAAA,IAAAsB,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASmV,aAMlB,OAPgCrG,EAAArB,EAAAoB,GAOhCpB,EAPA,CAAgCzM,GAAnBjP,EAAA0b,cAUb,IAAAF,GAAA,SAAAsB,GAAA,SAAAtB,IAAA,IAAAwB,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASoV,SAMlB,OAPqCtG,EAAAvB,EAAAsB,GAOrCtB,EAPA,CAAqCmF,GAAxB3gB,EAAAwb,mBAUb,IAAAI,GAAA,SAAAkB,GAAA,SAAAlB,IAAA,IAAAoB,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASqV,QAIlB,OALoCvG,EAAAnB,EAAAkB,GAKpClB,EALA,CAAoC+E,GAAvB3gB,EAAA4b,kBAQb,IAAAK,GAAA,SAAAa,GAAA,SAAAb,IAAA,IAAAe,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASsV,MAUlB,OAXkCxG,EAAAd,EAAAa,GAWlCb,EAXA,CAAkC0E,GAArB3gB,EAAAic,gBAcb,IAAAG,GAAA,SAAAU,GAAA,SAAAV,IAAA,IAAAY,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASuV,kBAMlB,OAPqCzG,EAAAX,EAAAU,GAOrCV,EAPA,CAAqCoF,IAAxBxhB,EAAAoc,mBAUb,IAAAI,GAAA,SAAAM,GAAA,SAAAN,IAAA,IAAAQ,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASwV,sBAClB,OAFyC1G,EAAAP,EAAAM,GAEzCN,EAFA,CAAyCkF,IAA5B1hB,EAAAwc,uBAKb,IAAAF,GAAA,SAAAQ,GAAA,SAAAR,IAAA,IAAAU,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAASyV,WAMlB,OAPuC3G,EAAAT,EAAAQ,GAOvCR,EAPA,CAAuCqE,GAA1B3gB,EAAAsc,qBAUb,IAAAI,GAAA,SAAAI,GAAA,SAAAJ,IAAA,IAAAM,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAAS0V,OAIlB,OALmC5G,EAAAL,EAAAI,GAKnCJ,EALA,CAAmCiE,GAAtB3gB,EAAA0c,iBAQb,IAAAE,GAAA,SAAAE,GAAA,SAAAF,IAAA,IAAAI,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YACE0c,EAAA7O,KAAOF,EAAS2V,QAMlB,OAPoC7G,EAAAH,EAAAE,GAOpCF,EAPA,CAAoC+D,GAqBpC,SAAgBpI,GAAmBP,GAEjC,OADIA,EAAK6L,SAAS,SAAQ7L,EAAOA,EAAKjL,UAAU,EAAGiL,EAAKvL,OAAS,IAC1DuL,EAvBIhY,EAAA4c,kBAUb5c,EAAA8jB,cAAA,SAA8B3V,EAAqB+I,GACjD,GAAIA,EACF,IAAK,IAAIvW,EAAI,EAAGojB,EAAI7M,EAAWzK,OAAQ9L,EAAIojB,IAAKpjB,EAAG,CACjD,IAAIqjB,EAAY9M,EAAWvW,GAC3B,GAAIqjB,EAAU9S,eAAiB/C,EAAM,OAAO6V,EAGhD,OAAO,MAIThkB,EAAAuY,sBAMAvY,EAAAikB,cAAA,SAA8BrU,GAC5B,GAAIA,EAAKzB,MAAQF,EAASkP,UAAW,CACnC,IAAIjc,EAAuB0O,EAAM1O,KACjC,QAASA,EAAKoO,MAAQpO,EAAKmO,WAAW9C,KAAKE,QAE7C,OAAO,64BCr/DT,IA8IYyX,EA9IZrW,EAAApN,EAAA,GAmBA0jB,EAAA1jB,EAAA,GAMA2jB,EAAA3jB,EAAA,GAOA4jB,EAAA5jB,EAAA,GAiDA0J,EAAA1J,EAAA,GASA6jB,EAAA7jB,EAAA,GAIA8jB,EAAA9jB,EAAA,IAKA+jB,EACE,SAESC,EAEAC,EAEAC,EAEAC,EAEAC,GARAvkB,KAAAmkB,YAEAnkB,KAAAokB,kBAEApkB,KAAAqkB,oBAEArkB,KAAAskB,cAEAtkB,KAAAukB,kBAKXC,EACE,SAESJ,EAEAC,EAEAC,EAEAC,GANAvkB,KAAAokB,kBAEApkB,KAAAqkB,oBAEArkB,KAAAskB,cAEAtkB,KAAAukB,kBAKXE,EAEE,SAESH,EAEAC,EAEAG,GAJA1kB,KAAAskB,cAEAtkB,KAAAukB,iBAEAvkB,KAAA0kB,eAqDX,SAASC,EAA0B/T,EAA8BgU,GAE/D,OADAxa,OAAOwa,EAAIzY,QACHyE,GACN,KAAKmT,EAAA9G,cAAcc,SACnB,KAAKgG,EAAA9G,cAAcmB,gBACjB,OAAQwG,EAAIrY,WAAW,IACrB,QACE,GAAW,MAAPqY,EAAa,OAAOhB,EAAaiB,YACrC,GAAW,OAAPD,EAAc,OAAOhB,EAAakB,YACtC,MAEF,SACE,GAAW,MAAPF,EAAa,OAAOhB,EAAamB,sBACrC,GAAW,OAAPH,EAAc,OAAOhB,EAAaoB,sBACtC,MAEF,QACE,GAAW,KAAPJ,EAAY,OAAOhB,EAAaqB,IACpC,MAEF,QACE,GAAW,KAAPL,EAAY,OAAOhB,EAAasB,IACpC,MAEF,QACE,GAAW,KAAPN,EAAY,OAAOhB,EAAauB,IACpC,GAAW,MAAPP,EAAa,OAAOhB,EAAawB,IACrC,MAEF,QACE,GAAW,KAAPR,EAAY,OAAOhB,EAAayB,IACpC,MAEF,QACE,GAAW,KAAPT,EAAY,OAAOhB,EAAa0B,IACpC,MAEF,QACE,GAAW,KAAPV,EAAY,OAAOhB,EAAa2B,YACpC,MAEF,SACE,GAAW,KAAPX,EAAY,OAAOhB,EAAa4B,WACpC,MAEF,QACE,GAAW,KAAPZ,EAAY,OAAOhB,EAAa6B,YACpC,MAEF,QACE,GAAW,MAAPb,EAAa,OAAOhB,EAAa8B,GACrC,MAEF,QACE,GAAW,MAAPd,EAAa,OAAOhB,EAAa+B,GACrC,MAEF,QACE,GAAW,KAAPf,EAAY,OAAOhB,EAAagC,GACpC,GAAW,MAAPhB,EAAa,OAAOhB,EAAaiC,GACrC,GAAW,MAAPjB,EAAa,OAAOhB,EAAakC,YACrC,GAAW,OAAPlB,EAAc,OAAOhB,EAAamC,cACtC,MAEF,QACE,GAAW,KAAPnB,EAAY,OAAOhB,EAAaoC,GACpC,GAAW,MAAPpB,EAAa,OAAOhB,EAAaqC,GACrC,GAAW,MAAPrB,EAAa,OAAOhB,EAAasC,YAIzC,MAEF,KAAKnC,EAAA9G,cAAcoB,gBACjB,OAAQuG,EAAIrY,WAAW,IACrB,QACE,GAAW,KAAPqY,EAAY,OAAOhB,EAAauC,KACpC,GAAW,MAAPvB,EAAa,OAAOhB,EAAawC,WACrC,MAEF,QACE,GAAW,KAAPxB,EAAY,OAAOhB,EAAayC,MACpC,GAAW,MAAPzB,EAAa,OAAOhB,EAAa0C,WACrC,MAEF,QACE,GAAW,KAAP1B,EAAY,OAAOhB,EAAa2C,IACpC,MAEF,SACE,GAAW,KAAP3B,EAAY,OAAOhB,EAAa4C,YAIxC,MAEF,KAAKzC,EAAA9G,cAAcqB,iBACjB,OAAQsG,EAAIrY,WAAW,IACrB,QACE,GAAW,MAAPqY,EAAa,OAAOhB,EAAa6C,YACrC,MAEF,QACE,GAAW,MAAP7B,EAAa,OAAOhB,EAAa8C,aAO7C,OAAO9C,EAAa+C,SA9JtB,SAAY/C,GACVA,IAAA,qBAGAA,IAAA,6BACAA,IAAA,6BACAA,IAAA,iDACAA,IAAA,iDAGAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,kCACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAGAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,4BAGAA,IAAA,8BACAA,IAAA,8BAvCF,CAAYA,EAAAlkB,EAAAkkB,eAAAlkB,EAAAkkB,aAAY,KAkKxB,IAshDYgD,EAwCAC,EA9jDZC,EAAA,SAAAtK,GAoGE,SAAAsK,EAEE/Z,QAAA,IAAAA,MAAA,MAFF,IAAA2P,EAIEF,EAAAhc,KAAAR,KAAM+M,IAAY/M,KAnGpB0c,EAAAqK,QAAoB,GAEpBrK,EAAAsK,kBAAyB,EAWzBtK,EAAAuK,YAAgC,IAAI7f,IAEpCsV,EAAAwK,eAAsC,IAAI9f,IAE1CsV,EAAAyK,sBAAmE,IAAI/f,IAEvEsV,EAAA0K,gBAAuC,IAAIhgB,IAE3CsV,EAAA2K,YAAmC,IAAIjgB,IAEvCsV,EAAA4K,eAAiC,IAAIlgB,IACrCsV,EAAA6K,eAA8B,IAAItgB,MAAiB,GACnDyV,EAAA8K,YAAmB,EAmEnB9K,EAAA+K,YAAmB,EAoEX/K,EAAAgL,qBAAgD,KA5DtD,IAAIC,EAAe,IAAI5D,EAAAzD,OAAO/S,EAAA1K,cAAe,gBAAiBkhB,EAAA3D,WAAWa,eACzEvE,EAAKiL,aAAeA,EACpB,IAAIC,EAAa,IAAIC,EAAKnL,EAAMiL,UAChCjL,EAAKkL,WAAaA,EAClBlL,EAAKuK,YAAYzJ,IAAIoK,EAAWE,aAAcF,GAC9ClL,EAAKqL,SAAW,IAAI/D,EAAAgE,SAAStL,KAq6CjC,OAnhD6BD,EAAAqK,EAAAtK,GAkH3BsK,EAAA7kB,UAAAgmB,mBAAA,SAAmBC,EAAoBC,EAAaC,EAAsBC,GAOxEje,OAAOie,EAAe,GAAK,IAC3Bxe,EAAAye,SAASD,EAAaH,EAAQC,GAC9Bte,EAAAye,SAAS,EAAGJ,EAAQC,EAAS,GAC7Bte,EAAAye,SAASF,EAAcG,GAAIL,EAAQC,EAAS,GAC5Cte,EAAAye,SAASD,EAAaH,EAAQC,EAAS,KAIzCpnB,OAAAC,eAAI8lB,EAAA7kB,UAAA,oBAAiB,KAArB,WACE,OAAO,oCAIT6kB,EAAA7kB,UAAAumB,8BAAA,SAEE5nB,EAEAiU,QAAA,IAAAA,MAAqBtH,EAAAlL,YAAY+a,MAEjC,IAAIrS,EAAQ/K,KAAK2nB,aAAa5c,MAC9B,OAAOgZ,EAAApV,KAAKsN,0BACV8H,EAAApV,KAAKO,2BAA2BtO,EAAMmK,GACtC,KAAM,KAAM,KAAM8J,EAAO9J,IAK7B+b,EAAA7kB,UAAAwmB,0BAAA,SAEE7nB,EAEAiU,QAAA,IAAAA,MAAqBtH,EAAAlL,YAAY+a,MAEjC,IAAIrS,EAAQ/K,KAAK2nB,aAAa5c,MAC1BgE,EAAagV,EAAApV,KAAKO,2BAA2BtO,EAAMmK,GACvD,OAAOgZ,EAAApV,KAAKiN,sBACV7M,EACA,KACAgV,EAAApV,KAAKkB,kBAAkB9E,GACvB,KAAM8J,EAAO9J,IAQjB+b,EAAA7kB,UAAAymB,8BAAA,SAEE9nB,EAEAiU,QAAA,IAAAA,MAAqBtH,EAAAlL,YAAY+a,MAEjC,IAAIrS,EAAQ/K,KAAK2nB,aAAa5c,MAC9B,OAAOgZ,EAAApV,KAAKsL,0BACV8J,EAAApV,KAAKO,2BAA2BtO,EAAMmK,GACtC,KACA/K,KAAK0nB,uBAAyB1nB,KAAK0nB,qBAAuB3D,EAAApV,KAAKa,mBAAmB,GAChFuU,EAAApV,KAAKQ,gBACH4U,EAAApV,KAAKM,qBAAqB1B,EAAAvK,cAAc0B,MAAOqG,GAC/C,MAAM,EAAOA,GAEf,MAAM,EAAOA,IAEf,KAAM,KAAM8J,EAAK,EAAkB9J,IAKvC+b,EAAA7kB,UAAA0mB,+BAAA,SAEE/nB,EAEAiU,QAAA,IAAAA,MAAqBtH,EAAAlL,YAAY+a,MAEjC,IAAIrS,EAAQ/K,KAAK2nB,aAAa5c,MAC9B,OAAOgZ,EAAApV,KAAKiM,2BACVmJ,EAAApV,KAAKO,2BAA2BtO,EAAMmK,GACtC,GAAI,KAAM8J,EAAO9J,IAKrB+b,EAAA7kB,UAAA2mB,mBAAA,SAEEhoB,EAEAsZ,EAEAsG,EAEA3L,EAEAgU,GAEA,YANA,IAAArI,MAAkBxgB,KAAK4nB,iBAEvB,IAAA/S,MAAqBtH,EAAAlL,YAAY+a,WAEjC,IAAAyL,MAAiChC,EAAezJ,MAEzC,IAAI0L,EACTloB,EACA,IAAImoB,EACFnoB,EACA4f,EACAxgB,KAAK0oB,8BAA8B9nB,EAAMiU,GACzCgU,GAEF3O,IAKJ4M,EAAA7kB,UAAA+mB,wBAAA,SAAwBvW,GACtB,IAAI0U,EAAwBnnB,KAAKmnB,sBAEjC,OADA/c,OAAO+c,EAAsB8B,IAAIxW,IAC1B0U,EAAsBjmB,IAAIuR,IAInCqU,EAAA7kB,UAAAinB,WAAA,SAAWC,+BACTnpB,KAAKmpB,QAAUA,EAGfnpB,KAAKopB,mBAAmB7b,EAAAvK,cAAcE,GAAI4gB,EAAAuF,KAAKnmB,IAC/ClD,KAAKopB,mBAAmB7b,EAAAvK,cAAcG,IAAK2gB,EAAAuF,KAAKlmB,KAChDnD,KAAKopB,mBAAmB7b,EAAAvK,cAAcI,IAAK0gB,EAAAuF,KAAKjmB,KAChDpD,KAAKopB,mBAAmB7b,EAAAvK,cAAcK,IAAKygB,EAAAuF,KAAKhmB,KAChDrD,KAAKopB,mBAAmB7b,EAAAvK,cAAcM,MAAO6lB,EAAQG,WACrDtpB,KAAKopB,mBAAmB7b,EAAAvK,cAAcO,GAAIugB,EAAAuF,KAAK9lB,IAC/CvD,KAAKopB,mBAAmB7b,EAAAvK,cAAcQ,IAAKsgB,EAAAuF,KAAK7lB,KAChDxD,KAAKopB,mBAAmB7b,EAAAvK,cAAcS,IAAKqgB,EAAAuF,KAAK5lB,KAChDzD,KAAKopB,mBAAmB7b,EAAAvK,cAAcU,IAAKogB,EAAAuF,KAAK3lB,KAChD1D,KAAKopB,mBAAmB7b,EAAAvK,cAAcW,MAAOwlB,EAAQI,WACrDvpB,KAAKopB,mBAAmB7b,EAAAvK,cAAcY,KAAMkgB,EAAAuF,KAAKzlB,MACjD5D,KAAKopB,mBAAmB7b,EAAAvK,cAAca,IAAKigB,EAAAuF,KAAKxlB,KAChD7D,KAAKopB,mBAAmB7b,EAAAvK,cAAcc,IAAKggB,EAAAuF,KAAKvlB,KAChD9D,KAAKopB,mBAAmB7b,EAAAvK,cAAc0B,MAAOof,EAAAuF,KAAKG,MAClDxpB,KAAKopB,mBAAmB7b,EAAAvK,cAAc2B,OAAQmf,EAAAuF,KAAKvlB,KACnD9D,KAAKopB,mBAAmB7b,EAAAvK,cAAc4B,QAASkf,EAAAuF,KAAKzlB,MACpD5D,KAAK4nB,WAAW6B,IAAIlc,EAAAvK,cAAc8B,OAAQ,IAAI4kB,EAC5Cnc,EAAAvK,cAAc8B,OACd9E,KAAK4nB,WACL5nB,KAAKyoB,0BAA0Blb,EAAAvK,cAAc8B,OAAQyI,EAAAlL,YAAYyf,OAASvU,EAAAlL,YAAYsnB,SACtF9C,EAAenJ,UAEjB1d,KAAK4nB,WAAW6B,IAAIlc,EAAAvK,cAAc+B,QAAS,IAAI2kB,EAC7Cnc,EAAAvK,cAAc+B,QACd/E,KAAK4nB,WACL5nB,KAAKyoB,0BAA0Blb,EAAAvK,cAAc+B,QAASwI,EAAAlL,YAAYyf,OAASvU,EAAAlL,YAAYsnB,SACvF9C,EAAenJ,UAEjB1d,KAAK4nB,WAAW6B,IAAIlc,EAAAvK,cAAcgC,QAAS,IAAI0kB,EAC7Cnc,EAAAvK,cAAcgC,QACdhF,KAAK4nB,WACL5nB,KAAKyoB,0BAA0Blb,EAAAvK,cAAcgC,QAASuI,EAAAlL,YAAYyf,OAASvU,EAAAlL,YAAYsnB,SACvF9C,EAAenJ,UAEbyL,EAAQS,WAAU,IAAgB5pB,KAAKopB,mBAAmB7b,EAAAvK,cAAce,KAAM+f,EAAAuF,KAAKtlB,MAGvF/D,KAAK6pB,wBAAwBtc,EAAAvK,cAAcuC,WAAYue,EAAAuF,KAAKjmB,IAC1D0mB,QAAQX,EAAQY,SAAWxc,EAAAnE,OAAO4gB,OAASzc,EAAAnE,OAAO6gB,SACpDjqB,KAAK6pB,wBAAwBtc,EAAAvK,cAAcyC,cAAeqe,EAAAuF,KAAKzlB,KAC7DkmB,QAAQX,EAAQe,SAAW,EAAI,EAAG,IACpClqB,KAAK6pB,wBAAwBtc,EAAAvK,cAAc0C,gBAAiBoe,EAAAuF,KAAKjmB,IAC/D0mB,QAAQX,EAAQgB,WAAY,IAC9BnqB,KAAK6pB,wBAAwBtc,EAAAvK,cAAc2C,mBAAoBme,EAAAuF,KAAKjmB,IAClE0mB,QAAQX,EAAQiB,kBAAmB,IACrCpqB,KAAK6pB,wBAAwBtc,EAAAvK,cAAc4C,iBAAkBke,EAAAuF,KAAKjmB,IAChE0mB,QAAQX,EAAQkB,gBAAiB,IACnCrqB,KAAK6pB,wBAAwBtc,EAAAvK,cAAc6C,2BAA4Bie,EAAAuF,KAAKzlB,KAC1EkmB,QAAQX,EAAQS,WAAU,GAA2B,EAAI,EAAG,IAC9D5pB,KAAK6pB,wBAAwBtc,EAAAvK,cAAc8C,2BAA4Bge,EAAAuF,KAAKzlB,KAC1EkmB,QAAQX,EAAQS,WAAU,GAA2B,EAAI,EAAG,IAC9D5pB,KAAK6pB,wBAAwBtc,EAAAvK,cAAc+C,wBAAyB+d,EAAAuF,KAAKzlB,KACvEkmB,QAAQX,EAAQS,WAAU,GAAwB,EAAI,EAAG,IAC3D5pB,KAAK6pB,wBAAwBtc,EAAAvK,cAAcgD,iBAAkB8d,EAAAuF,KAAKzlB,KAChEkmB,QAAQX,EAAQS,WAAU,GAAiB,EAAI,EAAG,IACpD5pB,KAAK6pB,wBAAwBtc,EAAAvK,cAAciD,oBAAqB6d,EAAAuF,KAAKzlB,KACnEkmB,QAAQX,EAAQS,WAAU,IAAoB,EAAI,EAAG,IAUvD,IAPA,IAAIU,EAAgB,IAAIrjB,MACpBsjB,EAAgB,IAAInjB,IACpBojB,EAAoB,IAAIpjB,IACxBqjB,EAAgB,IAAIxjB,MACpByjB,EAAmB,IAAIzjB,MAGlB5G,EAAI,EAAGojB,EAAIzjB,KAAK+mB,QAAQ5a,OAAQ9L,EAAIojB,IAAKpjB,EAAG,CACnD,IAAIsL,EAAS3L,KAAK+mB,QAAQ1mB,GACtBsqB,EAAO,IAAI9C,EAAK7nB,KAAM2L,GAC1B3L,KAAKinB,YAAYzJ,IAAImN,EAAK7C,aAAc6C,GAExC,IADA,IAAIxU,EAAaxK,EAAOwK,WACfyU,EAAI,EAAGtqB,EAAI6V,EAAWhK,OAAQye,EAAItqB,IAAKsqB,EAAG,CACjD,IAAI3T,EAAYd,EAAWyU,GAC3B,OAAQ3T,EAAUpJ,MAChB,KAAKkW,EAAApW,SAASmU,OACZ9hB,KAAK6qB,kBAAmC5T,EAAW0T,EAAMJ,EAAeC,GACxE,MAEF,KAAKzG,EAAApW,SAASoU,cACZ/hB,KAAK8qB,wBAAgD7T,EAAW0T,EAAMF,EAAeC,GACrF,MAEF,KAAK3G,EAAApW,SAAS8U,OACZziB,KAAK+qB,kBAAmC9T,EAAW0T,EAAML,EAAeC,GACxE,MAEF,KAAKxG,EAAApW,SAASyV,SACZpjB,KAAKgrB,oBAAuC/T,EAAW0T,GACvD,MAEF,KAAK5G,EAAApW,SAAS4T,iBACZvhB,KAAKirB,gBAAkChU,EAAW0T,EAAMF,EAAeC,GACvE,MAEF,KAAK3G,EAAApW,SAAS+T,gBACZ1hB,KAAKkrB,eAAgCjU,EAAW0T,GAChD,MAEF,KAAK5G,EAAApW,SAAS0U,oBACZriB,KAAKmrB,mBAAwClU,EAAW0T,GACxD,MAEF,KAAK5G,EAAApW,SAAS+U,qBACZ1iB,KAAKorB,oBAA0CnU,EAAW0T,GAC1D,MAEF,KAAK5G,EAAApW,SAASiV,qBACZ5iB,KAAKqrB,oBAA0CpU,EAAW0T,EAAMF,EAAeC,GAC/E,MAEF,KAAK3G,EAAApW,SAASuV,gBACZljB,KAAKsrB,yBAA0CrU,EAAW0T,SAQlE,IAAgC,IAAAY,EAAAC,EAAAhB,GAAiBiB,EAAAF,EAAAvc,QAAAyc,EAAAC,KAAAD,EAAAF,EAAAvc,OAAxC,KAAA2c,EAAAC,EAAAH,EAAAnqB,MAAA,GAAOuqB,GAANlB,EAAAgB,EAAA,GAAMA,EAAA,IACd,IAAStrB,EAAI,EAAGojB,EAAIoI,EAAY1f,OAAQ9L,EAAIojB,IAAKpjB,EAAG,CAClD,IAAIyrB,EAAaD,EAAYxrB,IACzB0rB,EAAc/rB,KAAKgsB,kBAAkBF,EAAWxH,YAAawH,EAAWvH,iBAQ5EoG,EAAKsB,iBAAiBF,GANpB/rB,KAAKqN,MACHwW,EAAApZ,eAAeyhB,iBACfJ,EAAWpH,YAAY3Z,MAAO+gB,EAAWpH,YAAYpjB,0GAS7D,IAASjB,EAAI,EAAGojB,EAAI6G,EAAcne,OAAQ9L,EAAIojB,IAAKpjB,EAAG,CACpD,IAuBM0rB,EAvBFI,EAAe7B,EAAcjqB,GAC7BgkB,EAAoB8H,EAAa9H,kBACrC,GAAIA,GACEpR,GAAUjT,KAAKosB,cACjB/H,EAAkBpY,KAClBkgB,EAAa7H,YACb6H,EAAa5H,eACbgG,IAGA4B,EAAahI,UAAUsF,IACrB0C,EAAa/H,gBAAgBnY,KAC7BgH,IACA,GAIFjT,KAAKqN,MACHwW,EAAApZ,eAAe4hB,kCACfhI,EAAkBtZ,MAAOohB,EAAa7H,YAAaD,EAAkBpY,WAKzE,GADI8f,EAAc/rB,KAAKgsB,kBAAkBG,EAAa7H,YAAa6H,EAAa5H,gBAC/D,CACf,IAAIJ,EAAYgI,EAAahI,UACzB1L,EAAY0T,EAAa/H,gBAAgBnY,KAC7CkY,EAAUsF,IACRhR,EACAsT,EAAYO,oBACV7T,EACA0L,IAEF,QAGF/Z,QAAO,OAMb,IAA4B,IAAAmiB,EAAAf,EAAAjB,GAAaiC,EAAAD,EAAAvd,QAAAwd,EAAAd,KAAAc,EAAAD,EAAAvd,OAAE,CAAlC,IAAAyd,EAAAb,EAAAY,EAAAlrB,MAAA,GAAO5B,GAANirB,EAAA8B,EAAA,GAAMA,EAAA,QACd,IAAuC,IAAAC,GAAAC,OAAA,EAAAnB,EAAA9rB,IAAOktB,EAAAF,EAAA1d,QAAA4d,EAAAlB,KAAAkB,EAAAF,EAAA1d,OAAE,CAAvC,IAAA6d,EAAAjB,EAAAgB,EAAAtrB,MAAA,GAACwrB,GAAAD,EAAA,GAAYE,GAAAF,EAAA,GAEhBvI,IADA7L,EAAYsU,GAAa3I,gBAAgBnY,KAC3B8gB,GAAazI,aAC/B,GAAIA,IACErR,GAAUjT,KAAKosB,cACjB3T,EACA6L,GACAla,OAAO2iB,GAAaxI,gBACpBgG,IAGAI,EAAKqC,aAAaF,GAAY7Z,IAE9BjT,KAAKqN,MACHwW,EAAApZ,eAAe4hB,kCACfU,GAAa3I,gBAAgBrZ,MAC7BuZ,GAAa7L,QAKjB,GADIxF,GAAU0X,EAAKsC,aAAaxU,GAE9BkS,EAAKqC,aAAaF,GAAY7Z,QACzB,CACL,IAAIia,GAAgBltB,KAAKmtB,aAAa1U,GAClCyU,IAAiBA,cAAyBE,EAC5CzC,EAAKqC,aAAaF,GAA6BI,IAE/CltB,KAAKqN,MACHwW,EAAApZ,eAAe4hB,kCACfU,GAAa1I,kBAAkBtZ,MAC/B4f,EAAK7C,aAAciF,GAAa1I,kBAAkBpY,4MAS9D7B,OAA2B,GAApBpK,KAAKynB,aACZznB,KAAKqtB,oBAAsBrtB,KAAKstB,aAAa/f,EAAAvK,cAAcsE,aAC3D8C,OAAsC,GAA/BpK,KAAKqtB,oBAAoB9E,IAChCvoB,KAAKutB,eAAiBvtB,KAAKstB,aAAa/f,EAAAvK,cAAcgE,QACtDoD,OAAiC,GAA1BpK,KAAKutB,eAAehF,IAC3BvoB,KAAKwtB,wBAA0BxtB,KAAKstB,aAAa/f,EAAAvK,cAAcqE,iBAC/D+C,OAA0C,GAAnCpK,KAAKwtB,wBAAwBjF,IAGpCvoB,KAAKytB,wBAAuB,EAAclgB,EAAAvK,cAAckD,IACxDlG,KAAKytB,wBAAuB,EAAelgB,EAAAvK,cAAcmD,KACzDnG,KAAKytB,wBAAuB,EAAelgB,EAAAvK,cAAcoD,KACzDpG,KAAKytB,wBAAuB,EAAelgB,EAAAvK,cAAcqD,KACzDrG,KAAKytB,wBAAuB,EAAiBlgB,EAAAvK,cAAcsD,OAC3DtG,KAAKytB,wBAAuB,EAAclgB,EAAAvK,cAAcuD,IACxDvG,KAAKytB,wBAAuB,EAAelgB,EAAAvK,cAAcwD,KACzDxG,KAAKytB,wBAAuB,EAAelgB,EAAAvK,cAAcyD,KACzDzG,KAAKytB,wBAAuB,EAAelgB,EAAAvK,cAAc0D,KACzD1G,KAAKytB,wBAAuB,EAAiBlgB,EAAAvK,cAAc2D,OAC3D3G,KAAKytB,wBAAuB,GAAgBlgB,EAAAvK,cAAc4D,MAC1D5G,KAAKytB,wBAAuB,GAAelgB,EAAAvK,cAAc6D,KACzD7G,KAAKytB,wBAAuB,GAAelgB,EAAAvK,cAAc8D,KACrDqiB,EAAQS,WAAU,IAAgB5pB,KAAKytB,wBAAuB,GAAgBlgB,EAAAvK,cAAc+D,MAGhG/G,KAAK0tB,iBAAmC1tB,KAAKJ,QAAQ2N,EAAAvK,cAAcyE,UAAWmf,EAAY+G,iBAC1F3tB,KAAK4tB,kBAAoC5tB,KAAKJ,QAAQ2N,EAAAvK,cAAc0E,WAAYkf,EAAY+G,iBAC5F3tB,KAAK6tB,kBAAoC7tB,KAAKJ,QAAQ2N,EAAAvK,cAAc2E,WAAYif,EAAY+G,iBAC5F3tB,KAAK8tB,kBAAoC9tB,KAAKJ,QAAQ2N,EAAAvK,cAAc4E,WAAYgf,EAAY+G,iBAC5F3tB,KAAK+tB,iBAAmC/tB,KAAKJ,QAAQ2N,EAAAvK,cAAc6E,WAAY+e,EAAY+G,iBAC3F3tB,KAAKguB,wBAA0ChuB,KAAKJ,QAAQ2N,EAAAvK,cAAc8E,kBAAmB8e,EAAY+G,iBACzG3tB,KAAKiuB,kBAAoCjuB,KAAKJ,QAAQ2N,EAAAvK,cAAc+E,YAAa6e,EAAY+G,iBAC7F3tB,KAAKkuB,kBAAoCluB,KAAKJ,QAAQ2N,EAAAvK,cAAcgF,YAAa4e,EAAY+G,iBAC7F3tB,KAAKmuB,kBAAoCnuB,KAAKJ,QAAQ2N,EAAAvK,cAAciF,YAAa2e,EAAY+G,iBAC7F3tB,KAAKouB,kBAAoCpuB,KAAKJ,QAAQ2N,EAAAvK,cAAckF,aAAc0e,EAAY+G,iBAC9F3tB,KAAKquB,kBAAoCruB,KAAKJ,QAAQ2N,EAAAvK,cAAcmF,aAAcye,EAAY+G,iBAG9F,IAAI5F,GAAW/nB,KAAK+nB,SACpB,IAAS1nB,EAAI,EAAGojB,EAAIgH,EAActe,OAAQ9L,EAAIojB,IAAKpjB,EAAG,CACpD,IAAIiuB,GAAgB7D,EAAcpqB,GAC9BkuB,GAAcnkB,OAAOkkB,GAAcC,aACnCC,GAAczG,GAAS0G,gBAAgBF,GAAY3tB,KAAM0tB,GAAc9N,QAC3E,GAAKgO,GACL,GAAIA,GAAY3gB,MAAQ+Y,EAAY+G,gBAAiB,CACnD,IAAIe,GAAgCF,GAChCE,GAAcC,aAAa9H,EAAe7I,SAC5Che,KAAKqN,MACHwW,EAAApZ,eAAemkB,yCACfL,GAAYxjB,MAAwByjB,GAAaK,eAAe5iB,MAIlEyiB,GAAcC,aAAa9H,EAAe5I,YAC1CqQ,GAAcK,aAAa9H,EAAe5I,YAE1Cje,KAAKqN,MACHwW,EAAApZ,eAAeqkB,+DACf/K,EAAArW,MAAMf,KAAK2hB,GAAcO,eAAe9jB,MAAOwjB,GAAYxjB,QAG/DujB,GAAcI,cAAgBA,QAE9B1uB,KAAKqN,MACHwW,EAAApZ,eAAeskB,sCACfR,GAAYxjB,OAOhB,IAAIikB,GAAgB7F,EAAQ6F,cAC5B,GAAIA,OACF,IAA0B,IAAAC,GAAAzD,EAAAwD,IAAaE,GAAAD,GAAAjgB,QAAAkgB,GAAAxD,KAAAwD,GAAAD,GAAAjgB,OAAE,CAAhC,IAAAmgB,GAAAvD,EAAAsD,GAAA5tB,MAAA,GAACua,GAAAsT,GAAA,GAAOvuB,GAAAuuB,GAAA,GACf,GAAKvuB,GAAKuL,OAAV,CACA,IAAIijB,GAAYxuB,GAAK2L,WAAW,GAChC,GAAI6iB,IAAS,IAAmBA,IAAS,GACvCpvB,KAAK6pB,wBAAwBhO,GAAOiI,EAAAuF,KAAKjmB,IAAK0mB,QAAauF,SAASzuB,GAAM,UACrE,CACL,IAAIsmB,GAAiBlnB,KAAKknB,eAE1B,KADIjU,GAAUiU,GAAehmB,IAAIN,KAK5B,MAAM,IAAI0uB,MAAM,2BAA6B1uB,IAHhD,GAAIsmB,GAAe+B,IAAIpN,IAAQ,MAAM,IAAIyT,MAAM,6BAA+B1uB,IAC9EsmB,GAAe1J,IAAI3B,GAAO5I,4GASpCjT,KAAKuvB,eAAiCvvB,KAAKJ,QAAQ2N,EAAAvK,cAAciE,MAAO2f,EAAY+G,iBACpF3tB,KAAKwvB,oBAAsCxvB,KAAKJ,QAAQ2N,EAAAvK,cAAckE,WAAY0f,EAAY+G,iBAC9F3tB,KAAKyvB,aAA+BzvB,KAAKJ,QAAQ2N,EAAAvK,cAAcmE,IAAKyf,EAAY+G,iBAChF3tB,KAAK0vB,aAA+B1vB,KAAKJ,QAAQ2N,EAAAvK,cAAcoE,IAAKwf,EAAY+G,iBAChF3tB,KAAK2vB,cAAgB3vB,KAAK4vB,eAAeriB,EAAAvK,cAAcoF,OACvDpI,KAAK6vB,cAAgB7vB,KAAK8vB,gBAAgBviB,EAAAvK,cAAcuF,OACxDvI,KAAK+vB,gBAAkB/vB,KAAK8vB,gBAAgBviB,EAAAvK,cAAcwF,SAC1DxI,KAAKgwB,aAAehwB,KAAK8vB,gBAAgBviB,EAAAvK,cAAcyF,MACvDzI,KAAKiwB,eAAiBjwB,KAAK8vB,gBAAgBviB,EAAAvK,cAAc0F,QACzD1I,KAAKkwB,gBAAkBlwB,KAAK8vB,gBAAgBviB,EAAAvK,cAAc2F,SAC1D3I,KAAKmwB,gBAAkBnwB,KAAK8vB,gBAAgBviB,EAAAvK,cAAc4F,SAC1D5I,KAAKowB,iBAAmBpwB,KAAK8vB,gBAAgBviB,EAAAvK,cAAc6F,UAC3D7I,KAAKqwB,mBAAqBrwB,KAAK8vB,gBAAgBviB,EAAAvK,cAAc8F,aAC7D9I,KAAKswB,cAAgBtwB,KAAK8vB,gBAAgBviB,EAAAvK,cAAc+F,OACxD/I,KAAKuwB,mBAAqBvwB,KAAK8vB,gBAAgBviB,EAAAvK,cAAcgG,gBAG7D,IAAiB,IAAAwnB,GAAAhF,EAAAxrB,KAAKinB,YAAY5S,UAAQoc,GAAAD,GAAAxhB,QAAAyhB,GAAA/E,KAAA+E,GAAAD,GAAAxhB,OAAE,CAE1C,GAAgB,QADZtP,GADGirB,EAAI8F,GAAAnvB,OACQ5B,UACKirB,EAAKhf,OAAOiV,YAAcmD,EAAA3D,WAAWsQ,eAC3D,IAAoB,IAAAC,IAAAC,OAAA,EAAApF,EAAA9rB,EAAQ2U,WAAQwc,GAAAF,GAAA3hB,QAAA6hB,GAAAnF,KAAAmF,GAAAF,GAAA3hB,OAAA,CAA/B,IAAIiE,GAAO4d,GAAAvvB,MAAsBtB,KAAK8wB,iBAAiB7d,mNAM1D6T,EAAA7kB,UAAArC,QAAR,SAAgBgB,EAAciN,GAC5B,IAAIoF,EAAUjT,KAAKmtB,aAAavsB,GAChC,IAAKqS,EAAS,MAAM,IAAIqc,MAAM,WAAa1uB,GAC3C,GAAIqS,EAAQpF,MAAQA,EAAM,MAAM,IAAIyhB,MAAM,cAAgB1uB,GAC1D,OAAOqS,GAID6T,EAAA7kB,UAAAqrB,aAAR,SAAqB1sB,GACnB,IAAIqB,EAAYjC,KAAKJ,QAAQgB,EAAMgmB,EAAY+G,iBAC3CoD,EAAW/wB,KAAK+nB,SAASiJ,aAA6B/uB,EAAW,MACrE,IAAK8uB,EAAU,MAAM,IAAIzB,MAAM,WAAa1uB,GAC5C,OAAOmwB,GAIDjK,EAAA7kB,UAAA2tB,eAAR,SAAuBhvB,GACrB,IAAIqB,EAAYjC,KAAKmtB,aAAavsB,GAClC,OAAKqB,GAAaA,EAAU4L,MAAQ+Y,EAAYqK,mBACzCjxB,KAAK+nB,SAASmJ,gBAAmCjvB,EAAW,MADQ,MAKrE6kB,EAAA7kB,UAAA6tB,gBAAR,SAAwBlvB,GACtB,IAAIqB,EAAYjC,KAAKJ,QAAQgB,EAAMgmB,EAAYqK,oBAC3CF,EAAW/wB,KAAK+nB,SAASmJ,gBAAmCjvB,EAAW,MAC3E,IAAK8uB,EAAU,MAAM,IAAIzB,MAAM,WAAa1uB,GAC5C,OAAOmwB,GAIDjK,EAAA7kB,UAAA6uB,iBAAR,SAAyB7d,eAEvB,OADAA,EAAQuK,IAAIjQ,EAAAlL,YAAY8uB,eAChBle,EAAQpF,MACd,KAAK+Y,EAAY+G,gBACf,IAAIyD,EAAmCne,EAASme,gBAChD,GAAIA,MAAiB,IAAmB,IAAAC,EAAA7F,EAAA4F,EAAgB/c,UAAQid,EAAAD,EAAAriB,QAAAsiB,EAAA5F,KAAA4F,EAAAD,EAAAriB,OAAA,CAAtC,IAAIuiB,EAAMD,EAAAhwB,MAA8BtB,KAAK8wB,iBAAiBS,qGACxF,MAEF,KAAK3K,EAAY4K,mBACf,IAAIC,EAAsCxe,EAASwe,gBAC/CA,GAAiBzxB,KAAK8wB,iBAAiBW,GAC3C,IAAIC,EAAsCze,EAASye,gBAC/CA,GAAiB1xB,KAAK8wB,iBAAiBY,GAC3C,MAEF,KAAK9K,EAAY+K,SACjB,KAAK/K,EAAYpH,SACjB,KAAKoH,EAAYgL,MACjB,KAAKhL,EAAYxH,MAAOhV,QAAO,GAG/B,IAAIuM,EAAU1D,EAAQ0D,QACtB,GAAIA,MAAS,IAAmB,IAAAkb,EAAArG,EAAA7U,EAAQtC,UAAQyd,EAAAD,EAAA7iB,QAAA8iB,EAAApG,KAAAoG,EAAAD,EAAA7iB,OAAA,CAA1BuiB,EAAMO,EAAAxwB,MAAsBtB,KAAK8wB,iBAAiBS,uGAKpEzK,EAAA7kB,UAAAmnB,mBAAR,SAA2BxoB,EAAc0O,GACvC,IAAI2D,EAAU,IAAIyW,EAChB9oB,EACAZ,KAAK4nB,WACL5nB,KAAKyoB,0BAA0B7nB,EAAM2M,EAAAlL,YAAYyf,QACjD+E,EAAenJ,SAEjBzK,EAAQ8e,QAAQziB,GAChBtP,KAAK4nB,WAAW6B,IAAI7oB,EAAMqS,IAIpB6T,EAAA7kB,UAAAwrB,wBAAR,SAAgCuE,EAAoBC,GAClD7nB,QAAQpK,KAAKqnB,YAAY4B,IAAI+I,IAC7B,IAAI/e,EAAUjT,KAAKmtB,aAAa8E,GAChC,GAAIhf,EAAS,CACX7I,OAAO6I,EAAQpF,MAAQ+Y,EAAY+G,iBACnC,IAAIuE,EAAelyB,KAAK+nB,SAASiJ,aAA6B/d,EAAS,MACnEif,GAAclyB,KAAKqnB,YAAY7J,IAAIwU,EAAUE,KAK7CpL,EAAA7kB,UAAA4nB,wBAAR,SAAgCjpB,EAAc0O,EAAYhO,GACxD8I,OAAOkF,EAAK+N,GAAE,IACd,IAAI8U,EAAS,IAAIC,EACfxxB,EACAZ,KAAK4nB,WACLf,EAAezJ,KACfpd,KAAKwoB,8BAA8B5nB,EAAM2M,EAAAlL,YAAYgwB,MAAQ9kB,EAAAlL,YAAYyf,SAE3EqQ,EAAOG,wBAAwBhxB,EAAOgO,GACtCtP,KAAK4nB,WAAW6B,IAAI7oB,EAAMuxB,IAIpBrL,EAAA7kB,UAAAswB,sBAAR,SAA8B3xB,EAAc0O,EAAYhO,GACtD8I,OAAOkF,EAAK+N,GAAE,IACd,IAAI8U,EAAS,IAAIC,EACfxxB,EACAZ,KAAK4nB,WACLf,EAAezJ,KACfpd,KAAKwoB,8BAA8B5nB,EAAM2M,EAAAlL,YAAYgwB,MAAQ9kB,EAAAlL,YAAYyf,SAE3EqQ,EAAOK,sBAAsBlxB,EAAOgO,GACpCtP,KAAK4nB,WAAW6B,IAAI7oB,EAAMuxB,IAI5BrL,EAAA7kB,UAAAwwB,aAAA,SAAa7xB,EAAcqS,GACzB,IAAIiU,EAAiBlnB,KAAKknB,eAC1B,GAAIA,EAAe+B,IAAIroB,IACRsmB,EAAehmB,IAAIN,KAMjBqS,EAAS,CACtB,IAAIyf,EAASC,EAASzL,EAAehmB,IAAIN,GAAQqS,GACjD,IAAKyf,EAKH,OAJA1yB,KAAKqN,MACHwW,EAAApZ,eAAemoB,uBACf3f,EAAQ4b,eAAe9jB,MAAOnK,GAEzBqS,EAETA,EAAUyf,EAId,OADAxL,EAAe1J,IAAI5c,EAAMqS,GAClBA,GAIT6T,EAAA7kB,UAAAkrB,aAAA,SAAavsB,GACX,IAAI4Q,EAAWxR,KAAKknB,eACpB,OAAI1V,EAASyX,IAAIroB,GAAc4Q,EAAStQ,IAAIN,GACrC,MAITkmB,EAAA7kB,UAAA4wB,cAAA,SAAcjyB,GACZ,IAAI4Q,EAAWxR,KAAKknB,eACpB,GAAI1V,EAASyX,IAAIroB,GAAO,OAAO4Q,EAAStQ,IAAIN,GAC5C,MAAM,IAAI0uB,MAAM,mBAIVxI,EAAA7kB,UAAA+pB,kBAAR,SAEE1H,EAEAC,GAEA,IAAI0C,EAAcjnB,KAAKinB,YACvB,OAAOA,EAAYgC,IAAI3E,GAChB2C,EAAY/lB,IAAIojB,GAChB2C,EAAYgC,IAAI1E,GAChB0C,EAAY/lB,IAAIqjB,GAChB,MAIDuC,EAAA7kB,UAAAmqB,cAAR,SAEE5S,EAEA8K,EAEAC,EAEAgG,GAEA,OAAG,CACD,IAAIwB,EAAc/rB,KAAKgsB,kBAAkB1H,EAAaC,GACtD,IAAKwH,EAAa,OAAO,KAGzB,IAAI9Y,EAAU8Y,EAAY+G,aAAatZ,GACvC,GAAIvG,EAAS,OAAOA,EAGpB,GAAIsX,EAActB,IAAI8C,GAAc,CAClC,IAAIgH,EAAoBxI,EAAcrpB,IAAI6qB,GAC1C,GAAIgH,EAAkB9J,IAAIzP,GAAc,CACtC,IAAIuT,EAAegG,EAAkB7xB,IAAIsY,GACzC,GAAIuT,EAAazI,YAAa,CAC5B9K,EAAcuT,EAAa3I,gBAAgBnY,KAC3CqY,EAAcyI,EAAazI,YAC3BC,EAAiBna,OAAO2iB,EAAaxI,gBACrC,SAGA,GADAtR,EAAU8Y,EAAYkB,aAAaF,EAAa3I,gBAAgBnY,MACnD,OAAOgH,GAI1B,MAEF,OAAO,MAID6T,EAAA7kB,UAAA+wB,gBAAR,SAEEpc,EAEAqc,GAEA,IAAIpe,EAAQgS,EAAezJ,KAC3B,GAAIxG,EACF,IAAK,IAAIvW,EAAI,EAAGojB,EAAI7M,EAAWzK,OAAQ9L,EAAIojB,IAAKpjB,EAAG,CACjD,IAAIqjB,EAAY9M,EAAWvW,GAEvBid,EAAO4V,EADAnP,EAAAlT,oBAAoB6S,EAAU9iB,OAErC0c,IACEA,GAAQuJ,EAAenJ,QACnBuV,EAAgB3V,GAAUoG,EAAU3Y,MAAMY,OAAOwnB,UAMrDte,GAASyI,EALTtd,KAAKqN,MACHwW,EAAApZ,eAAe2oB,8BACf1P,EAAU3Y,MAAO2Y,EAAU9iB,KAAKmK,MAAMW,YAK/BunB,EAAgB3V,EAKlBzI,EAAQyI,EACjBtd,KAAKqN,MACHwW,EAAApZ,eAAe4oB,oBACf3P,EAAU3Y,MAAO2Y,EAAU9iB,KAAKmK,MAAMW,YAGxCmJ,GAASyI,EAVTtd,KAAKqN,MACHwW,EAAApZ,eAAe2oB,8BACf1P,EAAU3Y,MAAO2Y,EAAU9iB,KAAKmK,MAAMW,aAahD,OAAOmJ,GAIDiS,EAAA7kB,UAAAgpB,gBAAR,SAEExY,EAEA+N,EAEAiK,EAEAC,GAEA,IAAI9pB,EAAO6R,EAAY7R,KAAKqL,KACxBgH,EAAU,IAAIqgB,EAChB1yB,EACA4f,EACA/N,EACAzS,KAAKgzB,gBAAgBvgB,EAAYmE,WAC/BiQ,EAAejJ,OACfiJ,EAAe7I,OACf6I,EAAe5I,YAGnB,IAAKuC,EAAOiJ,IAAI7oB,EAAMqS,GAAU,OAAO,KAEvC,IAAIyD,EAAkBjE,EAAYiE,gBAClC,GAAIA,EAAiB,CACnB,IAAI6c,EAAqB7c,EAAgBvK,OAEzC,GAAI8G,EAAQ0b,aAAa9H,EAAe5I,WAClCsV,GACFvzB,KAAKqN,MACHwW,EAAApZ,eAAe+oB,8CACfzP,EAAArW,MAAMf,KACJ8F,EAAY7R,KAAKmK,MACjB2L,EAAgB6c,EAAqB,GAAGxoB,aAIzC,GAAIwoB,EAAoB,CAE7B,IAAK,IAAIlzB,EAAI,EAAGA,EAAIkzB,IAAsBlzB,EACxCL,KAAKmN,QACH0W,EAAApZ,eAAegpB,wBACf/c,EAAgBrW,GAAG0K,OAGvB2f,EAAiBhe,KAAKuG,IAItBR,EAAY1C,aAAa0a,EAAc/d,KAAKuG,GAIhD,IADA,IAAIygB,EAAqBjhB,EAAYkE,QACrB8M,GAAPpjB,EAAI,EAAOqzB,EAAmBvnB,QAAQ9L,EAAIojB,IAAKpjB,EAAG,CACzD,IAAIszB,EAAoBD,EAAmBrzB,GAC3C,OAAQszB,EAAkB9lB,MACxB,KAAKkW,EAAApW,SAASsU,iBACZjiB,KAAK4zB,gBAAkCD,EAAmB1gB,GAC1D,MAEF,KAAK8Q,EAAApW,SAASgV,kBACRgR,EAAkBpW,MAAMhQ,EAAAlL,YAAYwxB,IAAMtmB,EAAAlL,YAAYyxB,KACxD9zB,KAAK+zB,mBAAsCJ,EAAmB1gB,GAE9DjT,KAAKg0B,iBAAoCL,EAAmB1gB,GAE9D,MAEF,KAAK8Q,EAAApW,SAASwT,0BAA2B,MACzC,QAAS/W,QAAO,IAGpB,OAAO6I,GAID6T,EAAA7kB,UAAA2xB,gBAAR,SAEEnhB,EAEA+N,GAEA,IAEIvN,EAFArS,EAAO6R,EAAY7R,KAAKqL,KACxB2K,EAAanE,EAAYmE,WAE7B,GAAInE,EAAY4K,GAAG9P,EAAAlL,YAAY4xB,SAa7B,GAZA7pB,OAAOoW,EAAO3S,MAAQ+Y,EAAYsN,qBAClCjhB,EAAU,IAAImf,EACZxxB,EACA4f,EACAxgB,KAAKgzB,gBAAgBpc,GAClBnE,EAAY4K,GAAG9P,EAAAlL,YAAY8xB,UACxBtN,EAAehJ,OACfgJ,EAAezJ,MACfyJ,EAAe/I,KAAO+I,EAAe3I,QAE3CzL,IAEG+N,EAAOiJ,IAAI7oB,EAAMqS,GAAU,YAShC,GAPA7I,QAAQqI,EAAY8K,MAAMhQ,EAAAlL,YAAY+xB,SAAW7mB,EAAAlL,YAAYwxB,IAAMtmB,EAAAlL,YAAYyxB,MAC/E7gB,EAAU,IAAIohB,EACZzzB,EACA4f,EACA/N,EACAzS,KAAKgzB,gBAAgBpc,EAAYiQ,EAAe3I,UAE7CsC,EAAO8T,YAAY1zB,EAAMqS,GAAU,QAKpC6T,EAAA7kB,UAAA+xB,iBAAR,SAEEvhB,EAEA+N,GAEA,IAAI5f,EAAO6R,EAAY7R,KAAKqL,KACxBsoB,EAAW9hB,EAAY4K,GAAG9P,EAAAlL,YAAY4xB,QACtChB,EAAgBpM,EAAehJ,OAASgJ,EAAe3I,OACtDzL,EAAY4K,GAAG9P,EAAAlL,YAAYsnB,WAC9BsJ,GAAiBpM,EAAezI,gBACfyI,EAAexI,gBACfwI,EAAevI,kBAElC,IAAIrL,EAAU,IAAI8V,EAChBnoB,EACA4f,EACA/N,EACAzS,KAAKgzB,gBAAgBvgB,EAAYmE,WAAYqc,IAE/C,GAAIsB,GAEF,GADAnqB,OAAOqI,EAAY7R,KAAKiN,MAAQkW,EAAApW,SAAS2R,cACpCkB,EAAOiJ,IAAI7oB,EAAMqS,GAAU,YAEhC,IAAKuN,EAAO8T,YAAY1zB,EAAMqS,GAAU,OAE1CjT,KAAKw0B,uBAAuB/hB,EAAYmE,WAAY3D,EAASuN,IAIvDsG,EAAA7kB,UAAAuyB,uBAAR,SAEE5d,EAEA3U,EAEAwyB,GAEA,GAAI7d,EACF,IAAK,IAAIvW,EAAI,EAAGojB,EAAI7M,EAAWzK,OAAQ9L,EAAIojB,IAAKpjB,EAAG,CACjD,IAAIqjB,EAAY9M,EAAWvW,GAC3B,OAAQqjB,EAAU9S,eAChB,KAAKmT,EAAA9G,cAAcc,SACnB,KAAKgG,EAAA9G,cAAcmB,gBACnB,KAAK2F,EAAA9G,cAAcoB,gBACnB,KAAK0F,EAAA9G,cAAcqB,iBACjB,IAAIoW,EAAUhR,EAAU/S,WAAa+S,EAAU/S,UAAUxE,QAAU,EACnE,GAAe,GAAXuoB,EAAc,CAChB,IAAIC,EAA0BjR,EAAU/S,UAAW,GACnD,GACEgkB,EAAS9mB,MAAQkW,EAAApW,SAASG,SACN6mB,EAAU7V,aAAeiF,EAAAnF,YAAYmB,OACzD,CACA,IAAIlS,EAAO8W,EACTjB,EAAU9S,cACgB+jB,EAAUrzB,OAEtC,GAAIuM,GAAQ+V,EAAa+C,QACvB3mB,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACfkB,EAAS5pB,WAEN,CACL,IAAI6pB,EAAYH,EAAeI,mBAC3BD,EAAU3L,IAAIpb,GAChB7N,KAAKqN,MACHwW,EAAApZ,eAAeqqB,kCACfH,EAAS5pB,QAGX9I,EAAU8yB,aAAelnB,EACzB+mB,EAAUpX,IAAI3P,EAAM5L,UAIxBjC,KAAKqN,MACHwW,EAAApZ,eAAeuqB,wBACfL,EAAS5pB,YAIb/K,KAAKqN,MACHwW,EAAApZ,eAAewqB,+BACfvR,EAAU3Y,MAAO,IAAK2pB,EAAQhpB,SAAS,QAU7Cob,EAAA7kB,UAAAizB,eAAR,SAEEziB,EAEA+N,GAEA,IAAI5f,EAAO6R,EAAY7R,KAAKqL,KAC5B,GAAIwG,EAAY4K,GAAG9P,EAAAlL,YAAY4xB,QAAS,CAEtC,KADIkB,EAAgB3U,EAAO7J,WACNwe,EAAclM,IAAIroB,GAGhC,CACL,IAAIqS,EAAU,IAAImiB,EAAkBx0B,EAAM4f,EAAQ/N,GAClD,OAAK+N,EAAOiJ,IAAI7oB,EAAMqS,GACfA,EADgC,KAHvC,IADIA,EAAmBkiB,EAAcj0B,IAAIN,IAC7BiN,MAAQ+Y,EAAY4K,mBAAoB,OAA0Bve,MAM3E,CACL,IAAIkiB,EACJ,KADIA,EAAgB3U,EAAO4Q,mBACN+D,EAAclM,IAAIroB,GAGhC,CACDqS,EAAU,IAAImiB,EAAkBx0B,EAAM4f,EAAQ/N,GAClD,OAAK+N,EAAO8T,YAAY1zB,EAAMqS,GACvBA,EADwC,KAH/C,IADIA,EAAmBkiB,EAAcj0B,IAAIN,IAC7BiN,MAAQ+Y,EAAY4K,mBAAoB,OAA0Bve,EAWlF,OAJAjT,KAAKqN,MACHwW,EAAApZ,eAAe4qB,qBACf5iB,EAAY7R,KAAKmK,MAAOnK,GAEnB,MAIDkmB,EAAA7kB,UAAA8xB,mBAAR,SAEEthB,EAEA+N,GAEA,IAAIxe,EAAWhC,KAAKk1B,eAAeziB,EAAa+N,GAChD,GAAKxe,EAAL,CACA,IAAIpB,EAAO6R,EAAY7R,KAAKqL,KACxBqpB,EAAW7iB,EAAY4K,GAAG9P,EAAAlL,YAAYwxB,KAC1C,GAAIyB,GACF,GAAItzB,EAASyvB,gBAKX,YAJAzxB,KAAKqN,MACHwW,EAAApZ,eAAe4qB,qBACf5iB,EAAY7R,KAAKmK,MAAOnK,QAK5B,GAAIoB,EAAS0vB,gBAKX,YAJA1xB,KAAKqN,MACHwW,EAAApZ,eAAe4qB,qBACf5iB,EAAY7R,KAAKmK,MAAOnK,GAK9B,IAAIqS,EAAU,IAAI8V,GACfuM,EAAW/nB,EAAA/K,cAAgB+K,EAAA9K,eAAiB7B,EAC7CoB,EACAyQ,EACAzS,KAAKgzB,gBAAgBvgB,EAAYmE,WAC/BiQ,EAAehJ,OAASgJ,EAAe3I,SAGvCoX,EACFtzB,EAASyvB,gBAAkBxe,EAE3BjR,EAAS0vB,gBAAkBze,IAKvB6T,EAAA7kB,UAAAipB,eAAR,SAEEzY,EAEA+N,GAEA,IAAI5f,EAAO6R,EAAY7R,KAAKqL,KACxBgH,EAAU,IAAIsiB,EAChB30B,EACA4f,EACA/N,EACAzS,KAAKgzB,gBAAgBvgB,EAAYmE,WAC/BiQ,EAAejJ,OACfiJ,EAAehJ,OACfgJ,EAAe/I,OAGnB,IAAK0C,EAAOiJ,IAAI7oB,EAAMqS,GAAU,OAAO,KAEvC,IADA,IAAIoB,EAAS5B,EAAY4B,OAChBhU,EAAI,EAAGojB,EAAIpP,EAAOlI,OAAQ9L,EAAIojB,IAAKpjB,EAC1CL,KAAKw1B,oBAAoBnhB,EAAOhU,GAAI4S,GAEtC,OAAOA,GAID6T,EAAA7kB,UAAAuzB,oBAAR,SAEE/iB,EAEA+N,GAEA,IAAI5f,EAAO6R,EAAY7R,KAAKqL,KACxBgH,EAAU,IAAIwiB,EAChB70B,EACA4f,EACA/N,EACAzS,KAAKgzB,gBAAgBvgB,EAAYmE,WAC/BiQ,EAAezJ,OAGdoD,EAAOiJ,IAAI7oB,EAAMqS,IAIhB6T,EAAA7kB,UAAA4oB,kBAAR,SAEE5T,EAEAuJ,EAEA+J,EAEAC,GAEA,IAAI7T,EAAUM,EAAUN,QACxB,GAAIA,EACF,IAAK,IAAItW,EAAI,EAAGojB,EAAI9M,EAAQxK,OAAQ9L,EAAIojB,IAAKpjB,EAC3CL,KAAK01B,iBAAiB/e,EAAQtW,GAAImgB,EAAQvJ,EAAUe,aAAcuS,OAE/D,CACL,IAAIoL,OAAM,EACNnL,EAAkBvB,IAAIzI,GAASmV,EAASnL,EAAkBtpB,IAAIsf,GAC7DgK,EAAkBhN,IAAIgD,EAAQmV,EAAS,IAC5C,IAAIrR,EAAcla,OAAO6M,EAAUe,cACnC2d,EAAOjpB,KAAK,IAAI+X,EACdH,EACAA,EAAYf,SAAShW,EAAAxK,cACjBuhB,EAAY7X,UAAU,EAAG6X,EAAYnY,OAASoB,EAAAxK,aAAaoJ,QAC3DmY,EAAc/W,EAAAxK,aAClBqH,OAAO6M,EAAUS,UAMfoP,EAAA7kB,UAAAyzB,iBAAR,SAEEnE,EAEApN,EAEAG,EAEAiG,GAEA,IAAI9R,EAAY8Y,EAAO9Y,UAAUxM,KAC7BuN,EAAc+X,EAAO7Y,aAAazM,KAGlCgH,EAAUkR,EAAU2O,aAAatZ,GACrC,GAAIvG,EACFjT,KAAKqN,MACHwW,EAAApZ,eAAemrB,4DACfrE,EAAO7Y,aAAa3N,MAAOyO,QAK/B,GAAoB,OAAhB8K,EAGF,GAAIrR,EAAUkR,EAAU8I,aAAaxU,GACnC0L,EAAU6I,aAAaxT,EAAavG,OAG/B,CACL,IAAI0iB,OAAM,EACNpL,EAActB,IAAI9E,GAAYwR,EAASpL,EAAcrpB,IAAIijB,GACxDoG,EAAc/M,IAAI2G,EAAWwR,EAAS,IAAIvuB,KAC/CuuB,EAAOnY,IAAIhE,EAAa,IAAIgL,EAC1B+M,EAAO9Y,UACP8Y,EAAO7Y,aACP,KAAM,WAKL,CACDid,OAAM,EACNpL,EAActB,IAAI9E,GAAYwR,EAASpL,EAAcrpB,IAAIijB,GACxDoG,EAAc/M,IAAI2G,EAAWwR,EAAS,IAAIvuB,KAC/CuuB,EAAOnY,IAAIhE,EAAa,IAAIgL,EAC1B+M,EAAO9Y,UACP8Y,EAAO7Y,aACP4L,EACAA,EAAYf,SAAShW,EAAAxK,cACjBuhB,EAAY7X,UAAU,EAAG6X,EAAYnY,OAASoB,EAAAxK,aAAaoJ,QAC3DmY,EAAc/W,EAAAxK,iBAKhB+jB,EAAA7kB,UAAA6oB,wBAAR,SAEE7T,EAEAuJ,EAEAiK,EAEAC,GAEA,IAAIjY,EAAcwE,EAAUxE,YACxBQ,EAAkC,KACtC,OAAQR,EAAY5E,MAClB,KAAKkW,EAAApW,SAAS+T,gBACZzO,EAAUjT,KAAKkrB,eAAgCzY,EAAa+N,GAC5D,MAEF,KAAKuD,EAAApW,SAAS0U,oBACZpP,EAAUjT,KAAKmrB,mBAAwC1Y,EAAa+N,GACpE,MAEF,KAAKuD,EAAApW,SAAS4T,iBACZtO,EAAUjT,KAAKirB,gBAAkCxY,EAAa+N,EAAQiK,EAAeC,GACrF,MAEF,KAAK3G,EAAApW,SAAS+U,qBACZzP,EAAUjT,KAAKorB,oBAA0C3Y,EAAa+N,GACtE,MAEF,KAAKuD,EAAApW,SAASiV,qBACZ3P,EAAUjT,KAAKqrB,oBAA0C5Y,EAAa+N,EAAQiK,EAAeC,GAC7F,MAEF,QAAStgB,QAAO,GAElB,GAAI6I,EAAS,CACX,IAAIvT,EAAU8gB,EAAO9gB,QACrB,GAAKA,GACA,GAAIA,EAAQupB,IAAI,WAKnB,YAJAjpB,KAAKqN,MACHwW,EAAApZ,eAAemoB,uBACfngB,EAAY7R,KAAKmK,MAAO,gBAJdyV,EAAO9gB,QAAUA,EAAU,IAAI0H,IAQ7C1H,EAAQ8d,IAAI,UAAWvK,KAKnB6T,EAAA7kB,UAAA8oB,kBAAR,SAEE9T,EAEAuJ,EAEA8J,EAEAC,GAEA,IAAInR,EAAenC,EAAUmC,aAC7B,GAAIA,EACF,IAAK,IAAI/Y,EAAI,EAAGojB,EAAIrK,EAAajN,OAAQ9L,EAAIojB,IAAKpjB,EAChDL,KAAK61B,iBACHzc,EAAa/Y,GACbmgB,EACAvJ,EAAUe,aACVsS,EACAC,QAGKtT,EAAUoC,eACnBiR,EAAc5d,KAAK,IAAIwX,EACrB1D,EACAvJ,EAAUoC,cACV,KACApC,EAAUe,aACVf,EAAUe,aAAezK,EAAAxK,gBAQvB+jB,EAAA7kB,UAAA4zB,iBAAR,SAEEpjB,EAEA+N,EAEA8D,EAEAgG,EAEAC,GAEA,IAAIhG,EAAiBD,EAAYf,SAAShW,EAAAxK,cACtCuhB,EAAY7X,UAAU,EAAG6X,EAAYnY,OAASoB,EAAAxK,aAAaoJ,QAC3DmY,EAAc/W,EAAAxK,aAGdkQ,EAAUjT,KAAKosB,cAAc3Z,EAAY+G,YAAYvN,KAAMqY,EAAaC,EAAgBgG,GACxFtX,EACFuN,EAAOiJ,IAAIhX,EAAY7R,KAAKqL,KAAMgH,GAAS,GAK7CqX,EAAc5d,KAAK,IAAIwX,EACrB1D,EACA/N,EAAY7R,KACZ6R,EAAY+G,YACZ8K,EACAC,KAKIuC,EAAA7kB,UAAAkpB,mBAAR,SAEE1Y,EAEA+N,GAEA,IAAI5f,EAAO6R,EAAY7R,KAAKqL,KACxB6pB,EAAkBjP,EAAe3I,OAAS2I,EAAenJ,QACzDjL,EAAY4K,GAAG9P,EAAAlL,YAAY0zB,SAC7BD,GAAmBjP,EAAelJ,SAElCmY,GAAmBjP,EAAehJ,OAE/BpL,EAAY4K,GAAG9P,EAAAlL,YAAY2zB,WAC1BxV,EAAO3S,MAAQ+Y,EAAY+G,kBAC7BmI,GAAmBjP,EAAejJ,QAGtC,IAAI3K,EAAU,IAAI8V,EAChBnoB,EACA4f,EACA/N,EACAzS,KAAKgzB,gBAAgBvgB,EAAYmE,WAAYkf,IAE/C,OAAKtV,EAAOiJ,IAAI7oB,EAAMqS,GACfA,EADgC,MAKjC6T,EAAA7kB,UAAAmpB,oBAAR,SAEE3Y,EAEA+N,GAEA,IAAI5f,EAAO6R,EAAY7R,KAAKqL,KACxBgH,EAAU,IAAIgjB,EAChBr1B,EACA4f,EACA/N,EACAzS,KAAKgzB,gBAAgBvgB,EAAYmE,WAC/BiQ,EAAejJ,SAGnB,IAAK4C,EAAOiJ,IAAI7oB,EAAMqS,GAAU,OAAO,KAEvC,IADA,IAAIygB,EAAqBjhB,EAAYkE,QAC5BtW,EAAI,EAAGojB,EAAIiQ,EAAmBvnB,OAAQ9L,EAAIojB,IAAKpjB,EAAG,CACzD,IAAIszB,EAAoBD,EAAmBrzB,GAC3C,OAAQszB,EAAkB9lB,MACxB,KAAKkW,EAAApW,SAASsU,iBACZjiB,KAAK4zB,gBAAkCD,EAAmB1gB,GAC1D,MAEF,KAAK8Q,EAAApW,SAASgV,kBACRgR,EAAkBpW,MAAMhQ,EAAAlL,YAAYwxB,IAAMtmB,EAAAlL,YAAYyxB,KACxD9zB,KAAK+zB,mBAAsCJ,EAAmB1gB,GAE9DjT,KAAKg0B,iBAAoCL,EAAmB1gB,GAE9D,MAEF,QAAS7I,QAAO,IAGpB,OAAO6I,GAID6T,EAAA7kB,UAAAopB,oBAAR,SAEE5Y,EAEA+N,EAEAiK,EAEAC,GAEA,IAAI9pB,EAAO6R,EAAY7R,KAAKqL,KACxBiqB,EAAW,IAAIC,EACjBv1B,EACA4f,EACA/N,EACAzS,KAAKgzB,gBAAgBvgB,EAAYmE,WAAYiQ,EAAejJ,SAE9D,IAAK4C,EAAOiJ,IAAI7oB,EAAMs1B,GAAW,OAAO,KAGxC,IAFA,IAAIjjB,EAAU7I,OAAOoW,EAAOyM,aAAarsB,IACrC+V,EAAUlE,EAAYkE,QACjBtW,EAAI,EAAGojB,EAAI9M,EAAQxK,OAAQ9L,EAAIojB,IAAKpjB,EAAG,CAC9C,IAAIkxB,EAAS5a,EAAQtW,GACrB,OAAQkxB,EAAO1jB,MACb,KAAKkW,EAAApW,SAAS4T,iBACZvhB,KAAKirB,gBAAkCsG,EAAQ2E,EAAUzL,EAAeC,GACxE,MAEF,KAAK3G,EAAApW,SAAS+T,gBACZ1hB,KAAKkrB,eAAgCqG,EAAQ2E,GAC7C,MAEF,KAAKnS,EAAApW,SAAS0U,oBACZriB,KAAKmrB,mBAAwCoG,EAAQ2E,GACrD,MAEF,KAAKnS,EAAApW,SAAS+U,qBACZ1iB,KAAKorB,oBAA0CmG,EAAQ2E,GACvD,MAEF,KAAKnS,EAAApW,SAASiV,qBACZ5iB,KAAKqrB,oBAA0CkG,EAAQ2E,EAAUzL,EAAeC,GAChF,MAEF,KAAK3G,EAAApW,SAASuV,gBACZljB,KAAKsrB,yBAA0CiG,EAAQ2E,GACvD,MAEF,KAAKnS,EAAApW,SAASyV,SACZpjB,KAAKgrB,oBAAuCuG,EAAQ2E,GACpD,MAEF,QAAS9rB,QAAO,IAIpB,OADI8rB,GAAYjjB,GAASmjB,EAAYF,EAAUjjB,GACxCA,GAID6T,EAAA7kB,UAAAqpB,yBAAR,SAEE7Y,EAEA+N,GAEA,IAAI5f,EAAO6R,EAAY7R,KAAKqL,KACxBgH,EAAU,IAAIyW,EAChB9oB,EACA4f,EACA/N,EACAzS,KAAKgzB,gBAAgBvgB,EAAYmE,WAAYiQ,EAAezJ,OAE9DoD,EAAOiJ,IAAI7oB,EAAMqS,IAIX6T,EAAA7kB,UAAA+oB,oBAAR,SAEE/T,EAEAuJ,GAGA,IADA,IAAIpH,EAAenC,EAAUmC,aACpB/Y,EAAI,EAAGojB,EAAIrK,EAAajN,OAAQ9L,EAAIojB,IAAKpjB,EAAG,CACnD,IAAIoS,EAAc2G,EAAa/Y,GAC3BO,EAAO6R,EAAY7R,KAAKqL,KACxBgnB,EAAgBpM,EAAejJ,OAASiJ,EAAe/I,KACvDrL,EAAY4K,GAAG9P,EAAAlL,YAAYg0B,WAC7BpD,GAAiBpM,EAAelJ,UAE9BlL,EAAY4K,GAAG9P,EAAAlL,YAAYgwB,SAC7BY,GAAiBpM,EAAehJ,QAElC,IAAI5K,EAAU,IAAImf,EAChBxxB,EACA4f,EACAxgB,KAAKgzB,gBAAgBvgB,EAAYmE,WAAYqc,GAC7CxgB,GAEG+N,EAAOiJ,IAAI7oB,EAAMqS,KA8B5B6T,EAnhDA,CAA6BjD,EAAA/W,mBA0lD7B,SAAgBomB,EAAoBrlB,GAClC,OAAQA,GACN,KAAKkW,EAAA9G,cAAcW,OAAQ,OAAOiJ,EAAejJ,OACjD,KAAKmG,EAAA9G,cAAcc,SACnB,KAAKgG,EAAA9G,cAAcmB,gBAAiB,OAAOyI,EAAezI,gBAC1D,KAAK2F,EAAA9G,cAAcoB,gBAAiB,OAAOwI,EAAexI,gBAC1D,KAAK0F,EAAA9G,cAAcqB,iBAAkB,OAAOuI,EAAevI,iBAC3D,KAAKyF,EAAA9G,cAAcgB,UAAW,OAAO4I,EAAe5I,UACpD,KAAK8F,EAAA9G,cAAce,OAAQ,OAAO6I,EAAe7I,OACjD,KAAK+F,EAAA9G,cAAcY,OAAQ,OAAOgJ,EAAehJ,OACjD,KAAKkG,EAAA9G,cAAcU,SAAU,OAAOkJ,EAAelJ,SACnD,KAAKoG,EAAA9G,cAAcS,QAAS,OAAOmJ,EAAenJ,QAClD,KAAKqG,EAAA9G,cAAca,KAAM,OAAO+I,EAAe/I,KAC/C,KAAKiG,EAAA9G,cAAciB,OAAQ,OAAO2I,EAAe3I,OACjD,QAAS,OAAO2I,EAAezJ,MAxmDtB1d,EAAAonB,UAshDb,SAAYF,GAEVA,IAAA,mBAEAA,IAAA,iBAEAA,IAAA,eAEAA,IAAA,yBAEAA,IAAA,2CAEAA,IAAA,uBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,iBAEAA,IAAA,6CAEAA,IAAA,0BAEAA,IAAA,sCAEAA,IAAA,kBAEAA,IAAA,4CAEAA,IAAA,wBAEAA,IAAA,0BAEAA,IAAA,gBAEAA,IAAA,oCApCF,CAAYA,EAAAlnB,EAAAknB,cAAAlnB,EAAAknB,YAAW,KAwCvB,SAAYC,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,uCAEAA,IAAA,0BAEAA,IAAA,oBAEAA,IAAA,oBAEAA,IAAA,yBAEAA,IAAA,uBAEAA,IAAA,iBAEAA,IAAA,sBAxBF,CAAYA,EAAAnnB,EAAAmnB,iBAAAnnB,EAAAmnB,eAAc,KA4B1BnnB,EAAAwzB,sBAmBA,IAAAoD,EAAA,WAcE,SAAAA,EAESzoB,EAEAjN,EAEAknB,EAEAyO,EAEP/V,GAROxgB,KAAA6N,OAEA7N,KAAAY,OAEAZ,KAAA8nB,eAEA9nB,KAAAu2B,UAjBTv2B,KAAA6U,MAAqBtH,EAAAlL,YAAY+a,KAEjCpd,KAAA6oB,eAAiChC,EAAezJ,KAEhDpd,KAAA2W,QAA8C,KAE9C3W,KAAAw2B,WAAoC,KAelCx2B,KAAKu2B,QAAUA,EACfv2B,KAAKY,KAAOA,EACZZ,KAAK8nB,aAAeA,EAChBtH,EACFxgB,KAAKwgB,OAASA,GAEdpW,OAAOpK,KAAK6N,MAAQ+Y,EAAY6P,MAChCz2B,KAAKwgB,OAASxgB,MAoEpB,OA/DEe,OAAAC,eAAIs1B,EAAAr0B,UAAA,OAAI,KAAR,WAEE,IADA,IAAIy0B,EAAmB12B,OACpB,IAAK02B,EAAUA,EAAQlW,QAAQ3S,MAAQ+Y,EAAY6P,KAAM,OAAaC,mCAK3EJ,EAAAr0B,UAAAob,GAAA,SAAGC,GAA2B,OAAQtd,KAAK6U,MAAQyI,IAASA,GAE5DgZ,EAAAr0B,UAAAsb,MAAA,SAAM1I,GAA4B,OAA+B,IAAvB7U,KAAK6U,MAAQA,IAEvDyhB,EAAAr0B,UAAAub,IAAA,SAAIF,GAA2Btd,KAAK6U,OAASyI,GAE7CgZ,EAAAr0B,UAAA00B,MAAA,SAAMrZ,GAA0Btd,KAAK6U,QAAUyI,GAE/CgZ,EAAAr0B,UAAA0sB,aAAA,SAAarR,GAA8B,OAAQtd,KAAK6oB,eAAiBvL,IAASA,GAGlFgZ,EAAAr0B,UAAAgrB,aAAA,SAAarsB,GACX,IAAI+V,EAAU3W,KAAK2W,QACnB,OAAIA,GAAWA,EAAQsS,IAAIroB,GAAc+V,EAAQzV,IAAIN,GAC9C,MAOT01B,EAAAr0B,UAAAwnB,IAAA,SAAI7oB,EAAcqS,GAChB,IAAI2jB,EAAsB3jB,EAAQR,YAC9BkE,EAAU3W,KAAK2W,QACnB,GAAKA,GACA,GAAIA,EAAQsS,IAAIroB,GAAO,CAC1B,IAAIi2B,EAASlgB,EAAQzV,IAAIN,GACzB,GAAIi2B,EAAOrW,SAAWxgB,UAEf,CACL,IAAI0yB,EAASC,EAASkE,EAAQ5jB,GAC9B,IAAIyf,EAOF,OAJA1yB,KAAKu2B,QAAQlpB,MACXwW,EAAApZ,eAAemoB,uBACf3f,EAAQ4b,eAAe9jB,MAAOkI,EAAQ4b,eAAe5iB,OAEhD,EANPgH,EAAUyf,SARF1yB,KAAK2W,QAAUA,EAAU,IAAIvP,IAkB3CuP,EAAQ6G,IAAI5c,EAAMqS,GAClB,IAAIsjB,EAAUv2B,KAAKu2B,QAMnB,OALItjB,EAAQpF,MAAQ+Y,EAAYqK,oBAA2Che,EAAS6jB,UAElFP,EAAQrP,eAAe1J,IAAIvK,EAAQ6U,aAAc7U,GACjDsjB,EAAQpP,sBAAsB3J,IAAIoZ,EAAqB3jB,KAElD,GAITqjB,EAAAr0B,UAAAyJ,SAAA,WACE,OAAOkb,EAAY5mB,KAAK6N,MAAQ,IAAM7N,KAAK8nB,cAE/CwO,EArGA,GAAsB52B,EAAA42B,UAwGtB,IAAAlJ,EAAA,SAAA5Q,GAGE,SAAA4Q,EAEEvf,EAEAjN,EAEAknB,EAEAyO,EAEA/V,EAEO/N,GAZT,IAAAiK,EAcEF,EAAAhc,KAAAR,KAAM6N,EAAMjN,EAAMknB,EAAcyO,EAAS/V,IAAOxgB,YAFzC0c,EAAAjK,cASPiK,EAAKjK,YAAcA,EACnBiK,EAAK7H,MAAQpC,EAAYoC,QAiB7B,OA1C8C4H,EAAA2Q,EAAA5Q,GA6B5Czb,OAAAC,eAAIosB,EAAAnrB,UAAA,sBAAmB,KAAvB,WACE,OAAOjC,KAAKyS,YAAY1H,MAAMY,OAAOwnB,2CAIvCpyB,OAAAC,eAAIosB,EAAAnrB,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKyS,YAAY7R,sCAI1BG,OAAAC,eAAIosB,EAAAnrB,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKyS,YAAYmE,4CAE5BwW,EA1CA,CAA8CkJ,GAAxB52B,EAAA0tB,kBA6CtB,IAAA2J,EAAA,SAAAva,GAAA,SAAAua,IAAA,IAAAra,EAAA,OAAAF,KAAAG,MAAA3c,KAAA2Q,YAAA3Q,YAGE0c,EAAApN,KAAawU,EAAAuF,KAAKG,OAQpB,OAX2C/M,EAAAsa,EAAAva,GAMzCua,EAAA90B,UAAA8vB,QAAA,SAAQziB,GACNlF,QAAQpK,KAAKqd,GAAG9P,EAAAlL,YAAY20B,WAC5Bh3B,KAAKsP,KAAOA,EACZtP,KAAKwd,IAAIjQ,EAAAlL,YAAY20B,WAEzBD,EAXA,CAA2C3J,GAArB1tB,EAAAq3B,eActB,IAAAlP,EAAA,SAAArL,GAUE,SAAAqL,EAEE0O,EAEO5qB,GAJT,IAAA+Q,EAMEF,EAAAhc,KAAAR,KACE4mB,EAAY6P,KACZ9qB,EAAOC,eACPD,EAAOqM,aACPue,EACA,OACDv2B,KARM0c,EAAA/Q,SAXT+Q,EAAAhd,QAA8C,KAE9Cgd,EAAAmP,YAA6B,KAkB3BnP,EAAK/Q,OAASA,EACdvB,QAAQmsB,EAAQtP,YAAYgC,IAAIvM,EAAKoL,eACrCyO,EAAQtP,YAAYzJ,IAAId,EAAKoL,aAAcpL,GAC3C,IAAIua,EAAgBva,EAAK6Z,QAAQ3N,mBAC/B,SAAWlM,EAAKoL,aAChB,IAAIhE,EAAAoT,UAAUX,EAAS,KAAMzS,EAAAuF,KAAKG,MAClC9M,UAEFua,EAAcnP,aAAemP,EAAcr2B,KAC3C8b,EAAKua,cAAgBA,IAoFzB,OApH0Bxa,EAAAoL,EAAArL,GAoCxBqL,EAAA5lB,UAAAwnB,IAAA,SAAI7oB,EAAcqS,EAA0BkkB,GAI1C,YAJ0C,IAAAA,OAAA,GACtClkB,EAAQ0b,aAAa9H,EAAejJ,UACtC3K,EAAUjT,KAAKu2B,QAAQ9D,aAAa7xB,EAAMqS,MAEvCuJ,EAAAva,UAAMwnB,IAAGjpB,KAAAR,KAACY,EAAMqS,MACrBA,EAAU7I,OAAOpK,KAAKitB,aAAarsB,KACvByc,GAAG9P,EAAAlL,YAAYyf,UAAYqV,GACrCn3B,KAAKgtB,aACH/Z,EAAQrS,KACRqS,IAGG,IAIT4U,EAAA5lB,UAAAgrB,aAAA,SAAarsB,GACX,IAAIqS,EAAUuJ,EAAAva,UAAMgrB,aAAYzsB,KAAAR,KAACY,GACjC,GAAIqS,EAAS,OAAOA,EACpB,IAAI4Y,EAAc7rB,KAAK6rB,YACvB,GAAIA,EACF,IAAK,IAAIxrB,EAAI,EAAGojB,EAAIoI,EAAY1f,OAAQ9L,EAAIojB,IAAKpjB,EAC/C,GAAI4S,EAAU4Y,EAAYxrB,GAAG4sB,aAAarsB,GAAO,OAAOqS,EAG5D,OAAO,MAIT4U,EAAA5lB,UAAAm1B,OAAA,SAAOx2B,GACL,IAAIqS,EAAUjT,KAAKitB,aAAarsB,GAChC,OAAIqS,GACGjT,KAAKu2B,QAAQpJ,aAAavsB,IAInCinB,EAAA5lB,UAAA+qB,aAAA,SAAapsB,EAAcqS,GACzB,IAAIvT,EAAUM,KAAKN,QACdA,IAASM,KAAKN,QAAUA,EAAU,IAAI0H,KAC3C1H,EAAQ8d,IAAI5c,EAAMqS,GACdjT,KAAK2L,OAAOiV,YAAcmD,EAAA3D,WAAWa,eAAejhB,KAAKu2B,QAAQ9D,aAAa7xB,EAAMqS,IAI1F4U,EAAA5lB,UAAAgqB,iBAAA,SAAiBtB,GACf,IAAIkB,EAAc7rB,KAAK6rB,YACvB,GAAKA,GACA,GAAIA,EAAYwL,SAAS1M,GAAO,YADnB3qB,KAAK6rB,YAAcA,EAAc,GAEnDA,EAAYnf,KAAKie,IAInB9C,EAAA5lB,UAAA6wB,aAAA,SAAalyB,GACX,IAAIlB,EAAUM,KAAKN,QACnB,GAAIA,GAAWA,EAAQupB,IAAIroB,GAAO,OAAOlB,EAAQwB,IAAIN,GACrD,IAAIirB,EAAc7rB,KAAK6rB,YACvB,GAAIA,EACF,IAAK,IAAIxrB,EAAI,EAAGojB,EAAIoI,EAAY1f,OAAQ9L,EAAIojB,IAAKpjB,EAAG,CAClD,IAAI4S,EAAU4Y,EAAYxrB,GAAGyyB,aAAalyB,GAC1C,GAAIqS,EAAS,OAAOA,EAGxB,OAAO,MAIT4U,EAAA5lB,UAAAqqB,oBAAA,SAAoB1rB,EAAc4f,WAC5B9e,EAAK,IAAIy0B,EACXv1B,EACA4f,EACAxgB,KAAKu2B,QAAQ5N,+BAA+B/nB,IAE1ClB,EAAUM,KAAKN,QACnB,GAAIA,MACF,IAAiC,IAAA43B,EAAA9L,EAAA9rB,GAAO63B,EAAAD,EAAAtoB,QAAAuoB,EAAA7L,KAAA6L,EAAAD,EAAAtoB,OAAE,CAAjC,IAAAwoB,EAAA5L,EAAA2L,EAAAj2B,MAAA,GAACm2B,EAAAD,EAAA,GAAYjG,EAAAiG,EAAA,GACpB91B,EAAG+nB,IAAIgO,EAAYlG,qGAGvB,OAAO7vB,GAEXmmB,EApHA,CAA0ByO,GAAb52B,EAAAmoB,OAuHb,IAAA6B,EAAA,SAAAlN,GAGE,SAAAkN,EAEE9oB,EAEA4f,EAEA/N,EAEAoW,QAAA,IAAAA,MAAiChC,EAAezJ,MARlD,IAAAV,EAUEF,EAAAhc,KAAAR,KACE4mB,EAAY8Q,eACZ92B,EACA+2B,EAAmB/2B,EAAM4f,GAAQ,GACjCA,EAAO+V,QACP/V,EACA/N,IACDzS,YACD0c,EAAKmM,eAAiBA,IAiB1B,OAtCoCpM,EAAAiN,EAAAlN,GAyBlCzb,OAAAC,eAAI0oB,EAAAznB,UAAA,qBAAkB,KAAtB,WACE,OAAyBjC,KAAKyS,YAAagE,gDAI7C1V,OAAAC,eAAI0oB,EAAAznB,UAAA,WAAQ,KAAZ,WACE,OAAyBjC,KAAKyS,YAAanD,sCAI7Coa,EAAAznB,UAAAm1B,OAAA,SAAOx2B,GACL,OAAOZ,KAAKwgB,OAAO4W,OAAOx2B,IAE9B8oB,EAtCA,CAAoCqN,GAAvBr3B,EAAAgqB,iBAyCb,IAAAyM,EAAA,SAAA3Z,GAGE,SAAA2Z,EAEEv1B,EAEA4f,EAEA/N,EAEAoW,QAAA,IAAAA,MAAiChC,EAAezJ,MARlD,IAAAV,EAUEF,EAAAhc,KAAAR,KACE4mB,EAAYgR,UACZh3B,EACA+2B,EAAmB/2B,EAAM4f,GAAQ,GACjCA,EAAO+V,QACP/V,EACA/N,IACDzS,YACD0c,EAAKmM,eAAiBA,IAQ1B,OA7B+BpM,EAAA0Z,EAAA3Z,GAyB7B2Z,EAAAl0B,UAAAm1B,OAAA,SAAOx2B,GACL,OAAOZ,KAAKitB,aAAarsB,IAClBZ,KAAKwgB,OAAO4W,OAAOx2B,IAE9Bu1B,EA7BA,CAA+B/I,GAAlB1tB,EAAAy2B,YAgCb,IAAAZ,EAAA,SAAA/Y,GAGE,SAAA+Y,EAEE30B,EAEA4f,EAEA/N,EAEAoW,QAAA,IAAAA,MAAiChC,EAAezJ,MARlD,IAAAV,EAUEF,EAAAhc,KAAAR,KACE4mB,EAAYiR,KACZj3B,EACA+2B,EAAmB/2B,EAAM4f,GAAQ,GACjCA,EAAO+V,QACP/V,EACA/N,IACDzS,YACD0c,EAAKmM,eAAiBA,EACtBnM,EAAKqV,QAAQjO,EAAAuF,KAAKjmB,OAQtB,OA9B0BqZ,EAAA8Y,EAAA/Y,GA0BxB+Y,EAAAtzB,UAAAm1B,OAAA,SAAOx2B,GACL,OAAOZ,KAAKitB,aAAarsB,IAClBZ,KAAKwgB,OAAO4W,OAAOx2B,IAE9B20B,EA9BA,CAA0BwB,GAAbr3B,EAAA61B,OAiCb,SAAkBuC,GAEhBA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,iBANF,CAAkBp4B,EAAAo4B,oBAAAp4B,EAAAo4B,kBAAiB,KAUnC,IAAAC,EAAA,SAAAvb,GAUE,SAAAub,EAEElqB,EAEAjN,EAEA4f,EAEA/N,QAAA,IAAAA,MAAgD+N,EAAO+V,QAAQ/N,8BAA8B5nB,IAR/F,IAAA8b,EAUEF,EAAAhc,KAAAR,KACE6N,EACAjN,EACA+2B,EAAmB/2B,EAAM4f,GAAQ,GACjCA,EAAO+V,QACP/V,EACA/N,IACDzS,YAxBH0c,EAAAsb,kBAAiB,EAyBftb,EAAK7H,MAAQpC,EAAYoC,QAmC7B,OA/DkD4H,EAAAsb,EAAAvb,GAgChDzb,OAAAC,eAAI+2B,EAAA91B,UAAA,WAAQ,KAAZ,WACE,OAA0CjC,KAAKyS,YAAanD,sCAI9DvO,OAAAC,eAAI+2B,EAAA91B,UAAA,kBAAe,KAAnB,WACE,OAA0CjC,KAAKyS,YAAarC,6CAI9D2nB,EAAA91B,UAAAqwB,wBAAA,SAAwBhxB,EAAYgO,GAClClF,OAAOkF,EAAK+N,GAAE,IACdrd,KAAKsP,KAAOA,EACZtP,KAAKg4B,kBAAiB,EACtBh4B,KAAKi4B,qBAAuB32B,EAC5BtB,KAAKwd,IAAIjQ,EAAAlL,YAAYgwB,MAAQ9kB,EAAAlL,YAAY61B,QAAU3qB,EAAAlL,YAAY20B,WAIjEe,EAAA91B,UAAAuwB,sBAAA,SAAsBlxB,EAAYgO,GAChClF,OAAOkF,EAAK+N,GAAE,IACdrd,KAAKsP,KAAOA,EACZtP,KAAKg4B,kBAAiB,EACtBh4B,KAAKm4B,mBAAqB72B,EAC1BtB,KAAKwd,IAAIjQ,EAAAlL,YAAYgwB,MAAQ9kB,EAAAlL,YAAY61B,QAAU3qB,EAAAlL,YAAY20B,WAIjEe,EAAA91B,UAAAm1B,OAAA,SAAOx2B,GACL,OAAOZ,KAAKwgB,OAAO4W,OAAOx2B,IAE9Bm3B,EA/DA,CAAkDhB,GAA5Br3B,EAAAq4B,sBAkEtB,IAAAtC,EAAA,SAAAjZ,GAGE,SAAAiZ,EAEE70B,EAEA4f,EAEA/N,EAEAoW,QAAA,IAAAA,MAAiChC,EAAezJ,MARlD,IAAAV,EAUEF,EAAAhc,KAAAR,KACE4mB,EAAYwR,UACZx3B,EACA4f,EACA/N,IACDzS,YAMH0c,EAAA2b,aAAoB,EALlB3b,EAAKmM,eAAiBA,EACtBnM,EAAKqV,QAAQjO,EAAAuF,KAAKjmB,OAetB,OAnC+BqZ,EAAAgZ,EAAAjZ,GA2B7Bzb,OAAAC,eAAIy0B,EAAAxzB,UAAA,YAAS,KAAb,WACE,OAA8BjC,KAAKyS,YAAanR,uCAIlDm0B,EAAAxzB,UAAAm1B,OAAA,SAAOx2B,GACL,OAAOZ,KAAKwgB,OAAO4W,OAAOx2B,IAE9B60B,EAnCA,CAA+BsC,GAAlBr4B,EAAA+1B,YAsCb,IAAArD,EAAA,SAAA5V,GAGE,SAAA4V,EAEExxB,EAEA4f,EAEAqI,EAEApW,QAAA,IAAAA,MAAgD+N,EAAO+V,QAAQ/N,8BAA8B5nB,IAR/F,IAAA8b,EAUEF,EAAAhc,KAAAR,KACE4mB,EAAYhJ,OACZhd,EACA4f,EACA/N,IACDzS,YACD0c,EAAKmM,eAAiBA,IAE1B,OArB4BpM,EAAA2V,EAAA5V,GAqB5B4V,EArBA,CAA4B2F,GAAfr4B,EAAA0yB,SAwBb,IAAAkG,EAEE,SAES13B,EAEA0O,EAEAc,QAAA,IAAAA,MAAA,MAJApQ,KAAAY,OAEAZ,KAAAsP,OAEAtP,KAAAoQ,eARE1Q,EAAA44B,YAab,IAAAC,EAAA,SAAA/b,GAGE,SAAA+b,EAEE33B,EAEO43B,EAEPlpB,EAEAkR,EAEA/N,QAAA,IAAAA,MAAgD+N,EAAO+V,QAAQ/N,8BAA8B5nB,IAV/F,IAAA8b,EAYEF,EAAAhc,KAAAR,KACE4mB,EAAY6R,MACZ73B,EACA4f,EACA/N,IACDzS,YAbM0c,EAAA8b,QAcP9b,EAAK8b,MAAQA,EACbpuB,OAAOkF,GAAQwU,EAAAuF,KAAKG,MACpB9M,EAAKqV,QAAQziB,KAEjB,OAzB2BmN,EAAA8b,EAAA/b,GAyB3B+b,EAzBA,CAA2BR,GAAdr4B,EAAA64B,QA4Bb,IAAAxP,EAAA,SAAAvM,GAWE,SAAAuM,EAEEnoB,EAEA4f,EAEA/N,EAEAoW,QAAA,IAAAA,MAAiChC,EAAezJ,MARlD,IAAAV,EAUEF,EAAAhc,KAAAR,KACE4mB,EAAYqK,mBACZrwB,EACA+2B,EAAmB/2B,EAAM4f,EAAQ/N,EAAY4K,GAAG9P,EAAAlL,YAAY2zB,WAC5DxV,EAAO+V,QACP/V,EACA/N,IACDzS,YAzBH0c,EAAAqY,aAA6BnR,EAAa+C,QAE1CjK,EAAAgc,UAAyC,KAGjChc,EAAAic,gBAAuD,KAqB7Djc,EAAKmM,eAAiBA,IAsE1B,OAnGuCpM,EAAAsM,EAAAvM,GAiCrCzb,OAAAC,eAAI+nB,EAAA9mB,UAAA,qBAAkB,KAAtB,WACE,OAA6BjC,KAAKyS,YAAagE,gDAIjD1V,OAAAC,eAAI+nB,EAAA9mB,UAAA,mBAAgB,KAApB,WACE,OAA6BjC,KAAKyS,YAAayH,2CAIjDnZ,OAAAC,eAAI+nB,EAAA9mB,UAAA,WAAQ,KAAZ,WACE,OAA6BjC,KAAKyS,YAAa0H,sCAIjDpZ,OAAAC,eAAI+nB,EAAA9mB,UAAA,YAAS,KAAb,WACE,OAA6BjC,KAAKyS,YAAa2H,2CAIjDrZ,OAAAC,eAAI+nB,EAAA9mB,UAAA,UAAO,KAAX,WACE,IAAIue,EAASxgB,KAAKwgB,OAClB,OAAOA,EAAO3S,MAAQ+Y,EAAYxH,OAC3BoB,EAAO3S,MAAQ+Y,EAAY4K,oBAAsBhR,EAAOA,OAAO3S,MAAQ+Y,EAAYxH,uCAI5F2J,EAAA9mB,UAAA22B,QAAA,SAAQxQ,GACNhe,OAAOpK,KAAKqd,GAAG9P,EAAAlL,YAAY2zB,WAC3B5rB,QAAQpK,KAAK82B,SACb,IAAI6B,EAAkB34B,KAAK24B,gBAC3B,GAAKA,GACA,GAAIA,EAAgB1P,IAAIb,GAAgB,OAAOuQ,EAAgBz3B,IAAIknB,QADlDpoB,KAAK24B,gBAAkBA,EAAkB,IAAIvxB,IAEnE,IAAIqL,EAAczS,KAAKyS,YAAarI,OAAOqI,EAAY5E,MAAQkW,EAAApW,SAASgV,mBACxE,IAAIkW,EAAQ,IAAI9P,EACd/oB,KAAKY,KACLwnB,EACmB3V,EACnBzS,KAAK6oB,gBAMP,OAJAgQ,EAAMhkB,MAAQ7U,KAAK6U,MACnBgkB,EAAM9D,aAAe/0B,KAAK+0B,aAE1B4D,EAAgBnb,IAAI4K,EAAeyQ,GAC5BA,GAIT9P,EAAA9mB,UAAA62B,oBAAA,SAAoBC,GAClB,IAAIL,EAAY14B,KAAK04B,UACrB,OAAIA,GAAaA,EAAUzP,IAAI8P,GAA+BL,EAAUx3B,IAAI63B,GACrE,MAIThQ,EAAA9mB,UAAA+2B,oBAAA,SAAoBD,EAAqBE,GACvC,IAAIP,EAAY14B,KAAK04B,UAChBA,EACAtuB,QAAQsuB,EAAUzP,IAAI8P,IADX/4B,KAAK04B,UAAYA,EAAY,IAAItxB,IAEjDsxB,EAAUlb,IAAIub,EAAaE,IAI7BlQ,EAAA9mB,UAAAm1B,OAAA,SAAOx2B,GACL,OAAOZ,KAAKwgB,OAAO4W,OAAOx2B,IAE9BmoB,EAnGA,CAAuCqE,GAA1B1tB,EAAAqpB,oBAsGb,IAAAD,EAAA,SAAAtM,GAiCE,SAAAsM,EAEEoQ,EAEAj3B,EAEAiY,EAEAif,QAAA,IAAAA,MAAA,MARF,IAAAzc,EAUEF,EAAAhc,KAAAR,KACE4mB,EAAYpH,SACZ0Z,EACAvB,EAAmBuB,EAAwBj3B,EAAUue,OAAQve,EAAUob,GAAG9P,EAAAlL,YAAY2zB,WACtF/zB,EAAUs0B,QACVt0B,EAAUue,OACVve,EAAUwQ,cACXzS,KAOD,GAlDF0c,EAAA0c,aAAkC,IAAIhyB,IAEtCsV,EAAA2c,cAAyB,GAEzB3c,EAAA4c,iBAA2B,GAM3B5c,EAAA6c,eAA0B,GAE1B7c,EAAA8c,IAAmB,EAEnB9c,EAAA+c,oBAA2B,EAE3B/c,EAAAgd,WAA8B,KAG9Bhd,EAAAid,aAAoB,EAEpBjd,EAAAkd,gBAAuB,EAEvBld,EAAAmd,kBAAyB,EAyFzBnd,EAAAod,SAA2B,KAC3Bpd,EAAAqd,SAA2B,KAC3Brd,EAAAsd,SAA2B,KAC3Btd,EAAAud,SAA2B,KAC3Bvd,EAAAwd,UAA4B,KAG5Bxd,EAAAyd,YAAmB,EACnBzd,EAAA0d,WAA2B,KAC3B1d,EAAA2d,WAA4B,KA7E1B3d,EAAKza,UAAYA,EACjBya,EAAKxC,UAAYA,EACjBwC,EAAK7H,MAAQ5S,EAAU4S,MAAQtH,EAAAlL,YAAY20B,SAC3Cta,EAAKmM,eAAiB5mB,EAAU4mB,eAChCnM,EAAKyc,wBAA0BA,EAC/Bzc,EAAKpN,KAAOwU,EAAAuF,KAAK5lB,IAAI62B,WAAWpgB,IAC3BjY,EAAUob,GAAG9P,EAAAlL,YAAY0zB,SAAU,CACtC,IAAIwE,EAAa,EACjB,GAAI7d,EAAKW,GAAG9P,EAAAlL,YAAY2zB,UAAW,CACjC,IAAIwE,EAAQ,IAAIjC,EACdhrB,EAAAvK,cAAcoC,MACdm1B,IACAnwB,OAAO8P,EAAUugB,UACjB/d,GAEFA,EAAK0c,aAAa5b,IAAIjQ,EAAAvK,cAAcoC,MAAOo1B,GAC3C9d,EAAK2c,cAAcmB,EAAMhC,OAASgC,EAGpC,IADA,IAAIE,EAAiBxgB,EAAUwgB,eACtBr6B,EAAI,EAAGojB,EAAIiX,EAAevuB,OAAQ9L,EAAIojB,IAAKpjB,EAAG,CACrD,IAAIs6B,EAAgBD,EAAer6B,GAC/Bu6B,EAAgB1gB,EAAU2gB,iBAAiBx6B,GAC3Cm6B,EAAQ,IAAIjC,EACdqC,EACAL,IACAI,EACAje,GAEFA,EAAK0c,aAAa5b,IAAIod,EAAeJ,GACrC9d,EAAK2c,cAAcmB,EAAMhC,OAASgC,UAGtC9d,EAAKoe,KAAO7W,EAAA8W,KAAKp5B,OAAO+a,GACxBse,EAAwBte,EAAK6Z,QAAS7Z,KAmE1C,OAvJ8BD,EAAAqM,EAAAtM,GAwF5BsM,EAAA7mB,UAAAg5B,SAAA,SAAS3rB,EAAY1O,EAA4B6R,QAA5B,IAAA7R,MAAA,WAA4B,IAAA6R,MAAA,MAE/C,IAAI8nB,EAAav6B,KAAKka,UAAUwgB,eAAevuB,OAASnM,KAAKs5B,iBAAiBntB,OAC1EnM,KAAKqd,GAAG9P,EAAAlL,YAAY2zB,aAAauE,EACrC,IAAI9hB,EAAqB,OAAT7X,EACZA,EACA,OAAS25B,EAAW7uB,WACpB8uB,EAAQ,IAAIjC,EACd9f,EACA8hB,EACAjrB,EACAtP,KACAyS,GAAezS,KAAKu2B,QAAQ/N,8BAA8B/P,IAE5D,GAAI7X,EAAM,CACR,GAAIZ,KAAKo5B,aAAanQ,IAAIroB,GAAO,MAAM,IAAI0uB,MAAM,wBACjDtvB,KAAKo5B,aAAa5b,IAAI5c,EAAM45B,GAI9B,OAFAx6B,KAAKq5B,cAAcmB,EAAMhC,OAASgC,EAClCx6B,KAAKs5B,iBAAiB5sB,KAAK4C,GACpBkrB,GAIT1R,EAAA7mB,UAAAm1B,OAAA,SAAOx2B,GACL,IAAIs6B,EAASl7B,KAAKo5B,aAClB,OAAI8B,EAAOjS,IAAIroB,GAAcs6B,EAAOh6B,IAAIN,GACjCZ,KAAKwgB,OAAO4W,OAAOx2B,IAgB5BkoB,EAAA7mB,UAAAk5B,SAAA,SAASx7B,EAAgB65B,GAMvB,GALAx5B,KAAKw5B,IAAMA,EACXpvB,QAAQpK,KAAKo6B,aAAep6B,KAAKo6B,WAAWjuB,QAC5CnM,KAAKo6B,WAAa,KAClBp6B,KAAKq6B,WAAa,KAClBr6B,KAAK85B,SAAW95B,KAAK+5B,SAAW/5B,KAAKg6B,SAAWh6B,KAAKi6B,SAAW,KAC5Dj6B,KAAKu2B,QAAQpN,QAAQiS,UAEvB,IADA,IAAI7B,EAAiBv5B,KAAKu5B,eACjBl5B,EAAI,EAAGojB,EAAI8V,EAAeptB,OAAQ9L,EAAIojB,IAAKpjB,EAAG,CACrD,IAAIg7B,EAAgB9B,EAAel5B,GACnCV,EAAO27B,iBACL9B,EACA6B,EAAcE,aACdF,EAAc1vB,OAAO+U,eACrB2a,EAAcxvB,KACdwvB,EAAcvvB,UAKxBgd,EAvJA,CAA8BiO,GAAjBr3B,EAAAopB,WA0Jb,IAAA0S,EAAA,SAAAhf,GAQE,SAAAgf,EAEEthB,EAEAqc,EACAkF,QAAA,IAAAA,MAAA,IALF,IAAA/e,EAOEF,EAAAhc,KAAAR,KACE4mB,EAAY8U,gBACZD,EAAM,OAASvhB,EAAUyhB,oBACzBF,EACAlF,EACAA,EAAQ3O,aACT5nB,YACD0c,EAAKxC,UAAYA,EACjBwC,EAAK7H,MAAQtH,EAAAlL,YAAY20B,SACzBta,EAAKpN,KAAOwU,EAAAuF,KAAK5lB,IAAI62B,WAAWpgB,KAOpC,OA/BoCuC,EAAA+e,EAAAhf,GA4BlCgf,EAAAv5B,UAAAm1B,OAAA,SAAOx2B,GACL,OAAO,MAEX46B,EA/BA,CAAoClF,GAAvB52B,EAAA87B,iBAkCb,IAAAnH,EAAA,SAAA7X,GAGE,SAAA6X,EAEEzzB,EAEA4f,EAEA/N,EAEAoW,QAAA,IAAAA,MAAiChC,EAAezJ,MARlD,IAAAV,EAUEF,EAAAhc,KAAAR,KACE4mB,EAAYgV,gBACZh7B,EACA+2B,EAAmB/2B,EAAM4f,EAAQpW,OAAOqI,EAAY4K,GAAG9P,EAAAlL,YAAY2zB,YACnExV,EAAO+V,QACP/V,EACA/N,IACDzS,YACD0c,EAAKmM,eAAiBA,IAsB1B,OA3CoCpM,EAAA4X,EAAA7X,GAyBlCzb,OAAAC,eAAIqzB,EAAApyB,UAAA,WAAQ,KAAZ,WACE,OAA0BjC,KAAKyS,YAAanD,sCAI9CvO,OAAAC,eAAIqzB,EAAApyB,UAAA,kBAAe,KAAnB,WACE,OAA0BjC,KAAKyS,YAAarC,6CAI9CrP,OAAAC,eAAIqzB,EAAApyB,UAAA,iBAAc,KAAlB,WACE,OAA0BjC,KAAKyS,YAAayP,gDAI9CmS,EAAApyB,UAAAm1B,OAAA,SAAOx2B,GACL,OAAOZ,KAAKwgB,OAAO4W,OAAOx2B,IAE9ByzB,EA3CA,CAAoCjH,GAAvB1tB,EAAA20B,iBA8Cb,IAAAwH,EAAA,SAAArf,GAQE,SAAAqf,EAEE55B,EAEAue,EAEAlR,GANF,IAAAoN,EAQEF,EAAAhc,KAAAR,KACE4mB,EAAYgL,MACZ3vB,EAAUrB,KACV4f,EACkCve,EAAUwQ,cAC7CzS,YAhBH0c,EAAAof,cAAqB,EAiBnBpf,EAAKza,UAAYA,EACjBya,EAAK7H,MAAQ5S,EAAU4S,MACvB6H,EAAKmM,eAAiB5mB,EAAU4mB,eAChCze,OAAOkF,GAAQwU,EAAAuF,KAAKG,MACpB9M,EAAKqV,QAAQziB,GACb0rB,EAAwBte,EAAK6Z,QAAS7Z,KAE1C,OA7B2BD,EAAAof,EAAArf,GA6B3Bqf,EA7BA,CAA2B9D,GAAdr4B,EAAAm8B,QAgCb,IAAAzG,EAAA,SAAA5Y,GAQE,SAAA4Y,EAEEx0B,EAEA4f,EAEAub,GANF,IAAArf,EAQEF,EAAAhc,KAAAR,KACE4mB,EAAY4K,mBACZ5wB,EACA+2B,EAAmB/2B,EAAM4f,EAAQub,EAAiB1e,GAAG9P,EAAAlL,YAAY2zB,WACjExV,EAAO+V,QACP/V,EACAub,IACD/7B,YApBH0c,EAAA+U,gBAA4C,KAE5C/U,EAAAgV,gBAA4C,KAmB1ChV,EAAK7H,SAAWtH,EAAAlL,YAAYwxB,IAAMtmB,EAAAlL,YAAYyxB,OAOlD,OA/BuCrX,EAAA2Y,EAAA5Y,GA4BrC4Y,EAAAnzB,UAAAm1B,OAAA,SAAOx2B,GACL,OAAOZ,KAAKwgB,OAAO4W,OAAOx2B,IAE9Bw0B,EA/BA,CAAuChI,GAA1B1tB,EAAA01B,oBAkCb,IAAA4G,EAAA,SAAAxf,GAUE,SAAAwf,EAEE/5B,EAEAue,GAJF,IAAA9D,EAMEF,EAAAhc,KAAAR,KACE4mB,EAAY+K,SACZ1vB,EAAUrB,KACV4f,EACAve,EAAUs0B,QAAQ/N,8BAChBvmB,EAAUrB,KACVqB,EAAUob,GAAG9P,EAAAlL,YAAY2zB,UACrBzoB,EAAAlL,YAAY2zB,SACZzoB,EAAAlL,YAAY+a,QAEnBpd,YArBH0c,EAAAuf,eAAkC,KAElCvf,EAAAwf,eAAkC,KAoBhCxf,EAAKza,UAAYA,EACjBya,EAAK7H,MAAQ5S,EAAU4S,MACvB6H,EAAKmM,eAAiB5mB,EAAU4mB,eAChCmS,EAAwBte,EAAK6Z,QAAS7Z,KAO1C,OArC8BD,EAAAuf,EAAAxf,GAkC5Bwf,EAAA/5B,UAAAm1B,OAAA,SAAOx2B,GACL,OAAOZ,KAAKwgB,OAAO4W,OAAOx2B,IAE9Bo7B,EArCA,CAA8BjE,GAAjBr4B,EAAAs8B,WAwCb,IA4GWG,EA5GX7I,EAAA,SAAA9W,GAaE,SAAA8W,EAEE1yB,EAEA4f,EAEA/N,EAEAoW,EACAuT,QADA,IAAAvT,MAAiChC,EAAezJ,WAChD,IAAAgf,OAAA,GATF,IAAA1f,EAWEF,EAAAhc,KAAAR,KACEo8B,EAAexV,EAAYsN,oBAAsBtN,EAAY+G,gBAC7D/sB,EACA+2B,EAAmB/2B,EAAM4f,EAAQ/N,EAAY4K,GAAG9P,EAAAlL,YAAY2zB,WAC5DxV,EAAO+V,QACP/V,EACA/N,IACDzS,YA5BH0c,EAAA0U,gBAA8C,KAE9C1U,EAAAgS,cAAuC,KAEvChS,EAAA2f,qBAAiD,KAEjD3f,EAAAmY,mBAA2D,IAAIztB,IAE/DsV,EAAAgc,UAAsC,KAqBpChc,EAAKmM,eAAiBA,IA0E1B,OA1GoCpM,EAAA6W,EAAA9W,GAoClCzb,OAAAC,eAAIsyB,EAAArxB,UAAA,qBAAkB,KAAtB,WACE,OAA0BjC,KAAKyS,YAAagE,gDAG9C1V,OAAAC,eAAIsyB,EAAArxB,UAAA,cAAW,KAAf,WACE,OAA0BjC,KAAKyS,YAAa1C,6CAG9ChP,OAAAC,eAAIsyB,EAAArxB,UAAA,kBAAe,KAAnB,WACE,OAA0BjC,KAAKyS,YAAaiE,iDAI9C3V,OAAAC,eAAIsyB,EAAArxB,UAAA,iBAAc,KAAlB,WACE,IAAIurB,EAA0BxtB,KAAKu2B,QAAQ/I,wBAC3C,OAAmC,OAA5BA,GACAxtB,KAAKs8B,QAAQ9O,EAAwBvrB,4CAI9CqxB,EAAArxB,UAAAq6B,QAAA,SAAQC,GACN,IAAI7F,EAAiC12B,KACrC,GAAG,GAAI02B,IAAY6F,EAAe,OAAO,QAClC7F,EAAUA,EAAQhI,eACzB,OAAO,GAIT4E,EAAArxB,UAAAqyB,YAAA,SAAY1zB,EAAcqS,GACxB,IAAI2jB,EAAsB3jB,EAAQR,YAC9B2e,EAAkBpxB,KAAKoxB,gBAC3B,GAAKA,GACA,GAAIA,EAAgBnI,IAAIroB,GAAO,CAClC,IAAI8xB,EAASC,EAASvB,EAAgBlwB,IAAIN,GAAQqS,GAClD,IAAKyf,EAKH,OAJA1yB,KAAKu2B,QAAQlpB,MACXwW,EAAApZ,eAAemoB,uBACf3f,EAAQ4b,eAAe9jB,MAAOkI,EAAQ4b,eAAe5iB,OAEhD,EAETgH,EAAUyf,QAVU1yB,KAAKoxB,gBAAkBA,EAAkB,IAAIhqB,IAiBnE,OALAgqB,EAAgB5T,IAAI5c,EAAMqS,GACtBA,EAAQoK,GAAG9P,EAAAlL,YAAYyf,SAAW9hB,KAAKqd,GAAG9P,EAAAlL,YAAY8uB,gBACxDle,EAAQuK,IAAIjQ,EAAAlL,YAAY8uB,eAE1BnxB,KAAKu2B,QAAQpP,sBAAsB3J,IAAIoZ,EAAqB3jB,IACrD,GAITqgB,EAAArxB,UAAA62B,oBAAA,SAAoBC,GAClB,IAAIL,EAAY14B,KAAK04B,UACrB,OAAIA,GAAaA,EAAUzP,IAAI8P,GAA4BL,EAAUx3B,IAAI63B,GAClE,MAITzF,EAAArxB,UAAA+2B,oBAAA,SAAoBD,EAAqBE,GACvC,IAAIP,EAAY14B,KAAK04B,UAChBA,EACAtuB,QAAQsuB,EAAUzP,IAAI8P,IADX/4B,KAAK04B,UAAYA,EAAY,IAAItxB,IAEjDsxB,EAAUlb,IAAIub,EAAaE,IAI7B3F,EAAArxB,UAAAm1B,OAAA,SAAOx2B,GACL,OAAOZ,KAAKwgB,OAAO4W,OAAOx2B,IAE9B0yB,EA1GA,CAAoClG,GAAvB1tB,EAAA4zB,iBA4Gb,SAAW6I,GACTA,IAAA,qBACAA,IAAA,qBACAA,IAAA,6BAHF,CAAWA,MAAY,KAOvB,IAAAK,EAAA,SAAAhgB,GAkDE,SAAAggB,EAEEtD,EAEAj3B,EAEAmN,EAEAqtB,EACAL,gBAHA,IAAAhtB,MAAA,WAEA,IAAAqtB,MAAA,WACA,IAAAL,OAAA,GATF,IAAA1f,EAWEF,EAAAhc,KAAAR,KACEo8B,EAAexV,EAAY8V,UAAY9V,EAAYxH,MACnD8Z,EACAvB,EAAmBuB,EAAwBj3B,EAAUue,OAAQve,EAAUob,GAAG9P,EAAAlL,YAAY2zB,WACtF/zB,EAAUs0B,QACVt0B,EAAUue,OACVve,EAAUwQ,cACXzS,KA3DH0c,EAAAyc,wBAAmD,KAEnDzc,EAAAigB,oBAA2B,EAE3BjgB,EAAAkgB,oBAAuC,KAEvClgB,EAAAkY,UAA+C,KAEvClY,EAAAmgB,IAAW,EAEXngB,EAAAogB,SAAQ,EAEhBpgB,EAAAqgB,UAAiB,EAgDf,IAAIxG,EAAU7Z,EAAK6Z,QAQnB,GAPA7Z,EAAKza,UAAYA,EACjBya,EAAK7H,MAAQ5S,EAAU4S,MACvB6H,EAAKmM,eAAiB5mB,EAAU4mB,eAChCnM,EAAKtN,cAAgBA,EACrBsN,EAAKqV,QAAQwE,EAAQpN,QAAQI,UAAUyT,QAAQtgB,IAC/CA,EAAK+f,KAAOA,GAEP/f,EAAKiS,aAAa9H,EAAe5I,WAAY,CAChD,IAAIsK,EAAKgO,EAAQ9O,cACjB/K,EAAKmgB,IAAMtU,EACXgO,EAAQjP,eAAe9J,IAAI+K,EAAI7L,GAIjC,GAAI+f,EAAM,CACR,IAAIQ,EAAyBR,EAAKtD,wBAClC,GAAI8D,EAAwB,CAC1B,IAAI9D,EAA0Bzc,EAAKyc,4BACnC,IAAiC,IAAA+D,EAAA1R,EAAAyR,GAAsBE,EAAAD,EAAAluB,QAAAmuB,EAAAzR,KAAAyR,EAAAD,EAAAluB,OAAE,CAAhD,IAAAwoB,EAAA5L,EAAAuR,EAAA77B,MAAA,GAAC87B,EAAA5F,EAAA,GAAU6F,EAAA7F,EAAA,GACb2B,IAAyBzc,EAAKyc,wBAA0BA,EAA0B,IAAI/xB,KAC3F+xB,EAAwB3b,IAAI4f,EAAUC,uGAM5C,IAAI5mB,EAAiBxU,EAAUq7B,mBAC/B,GAAIluB,EAAe,CACjB,IAAI8P,EAAmB9P,EAAcjD,OACrC,IAAKsK,GAAkByI,GAAoBzI,EAAetK,OACxD,MAAM,IAAImjB,MAAM,gCAElB,GAAIpQ,EAAkB,CACfxC,EAAKyc,0BAAyBzc,EAAKyc,wBAA0B,IAAI/xB,KACtE,IAAK,IAAI/G,EAAI,EAAGA,EAAI6e,IAAoB7e,EACtCqc,EAAKyc,wBAAwB3b,IAAI/G,EAAepW,GAAGO,KAAKqL,KAAMmD,EAAc/O,UAG3E,GAAIoW,GAAkBA,EAAetK,OAC1C,MAAM,IAAImjB,MAAM,uCAElB0L,EAAwBzE,EAAS7Z,KA+NrC,OA9U2BD,EAAA+f,EAAAhgB,GAwBzBzb,OAAAC,eAAIw7B,EAAAv6B,UAAA,KAAE,KAAN,WACE,OAAOjC,KAAK68B,qCAId97B,OAAAC,eAAIw7B,EAAAv6B,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKiC,UAAUs7B,gDAIxBx8B,OAAAC,eAAIw7B,EAAAv6B,UAAA,cAAW,KAAf,WACE,GAAIjC,KAAKu9B,eAAgB,OAAO,EAChC,IAAIC,EAAcx9B,KAAKitB,aAAa,UACpC,OAAuB,OAAhBuQ,IACLA,EAAY3vB,MAAQ+Y,EAAYgL,OAE9B4L,EAAY3vB,MAAQ+Y,EAAY+K,UACW,OAAhC6L,EAAavB,kBAGwB,OAAlDj8B,KAAKy9B,eAAe7Z,EAAaiB,cAC2B,OAA5D7kB,KAAKy9B,eAAe7Z,EAAamB,yDAsErCyX,EAAAv6B,UAAAy7B,eAAA,SAAeC,GACb,IAAIjH,EAAwB12B,KAC5B,GAAG,GAAI02B,GAAWiH,EAAQ,OAAO,QAC1BjH,EAAUA,EAAQ+F,MACzB,OAAO,GAITD,EAAAv6B,UAAAw7B,eAAA,SAAe5vB,EAAoB+vB,GACjC,QADiC,IAAAA,OAAA,GAC7BA,EACF,OAAQ/vB,GACN,KAAK+V,EAAaiB,YAEhB,GADIgZ,EAAoB79B,KAAKy9B,eAAe7Z,EAAamB,uBAClC,OAAO8Y,EAC9B,MAEF,KAAKja,EAAakB,YAChB,IAAI+Y,EACJ,GADIA,EAAoB79B,KAAKy9B,eAAe7Z,EAAaoB,uBAClC,OAAO6Y,EAC9B,MAEF,QAASzzB,QAAO,GAGpB,IAAI6uB,EAAyBj5B,KAC7B,EAAG,CACD,IAAI40B,EAAYqE,EAASrE,UACzB,GAAIA,EAAW,CACb,IAAIkJ,EAAWlJ,EAAU1zB,IAAI2M,GAC7B,GAAIiwB,EAAU,OAAOA,SAEhB7E,EAAWA,EAASwD,MAC7B,OAAO,MAITD,EAAAv6B,UAAAm1B,OAAA,SAAOx2B,GACL,OAAOZ,KAAKwgB,OAAO4W,OAAOx2B,IAI5B47B,EAAAv6B,UAAA87B,SAAA,SAASC,GACP,IAAIrnB,EAAUvM,OAAOpK,KAAK2W,SAC1BvM,OAAOuM,EAAQsS,IAAI+U,IACnB,IAAIC,EAAiBtnB,EAAQzV,IAAI88B,GAEjC,OADA5zB,OAAO6zB,EAAMpwB,MAAQ+Y,EAAYgL,OAClBqM,EAAOnC,cAIxBU,EAAAv6B,UAAAi8B,WAAA,SAAct9B,EAAcU,EAAU4mB,EAAoBiW,GACxD,IAAIF,EAAQj+B,KAAKitB,aAAarsB,GAC9B,GAAIq9B,GAASA,EAAMpwB,MAAQ+Y,EAAYgL,MAAO,CAC5C,IAAIzJ,EAASgW,EAAqBF,EAAOnC,aACzC,OAAgBmC,EAAO3uB,KAAKzB,MAC1B,OACA,OAEE,OADAhE,EAAAu0B,QAAQh7B,IAAI9B,GAAQ4mB,EAAQC,GACrB,EAET,OACA,OAEE,OADAte,EAAAw0B,SAASj7B,IAAI9B,GAAQ4mB,EAAQC,GACtB,EAET,OACA,OAEE,OADAte,EAAAye,SAASllB,IAAI9B,GAAQ4mB,EAAQC,GACtB,EAET,OACA,OAGE,OAFA/d,QAAQpK,KAAKu2B,QAAQpN,QAAQY,UAC7BlgB,EAAAye,SAASllB,IAAI9B,GAAQ4mB,EAAQC,GACtB,EAET,QAEE,OADAte,EAAAy0B,SAASz6B,IAAIvC,GAAQ4mB,EAAQC,GACtB,EAET,QAEE,OADAte,EAAA00B,SAASz6B,IAAIxC,GAAQ4mB,EAAQC,GACtB,GAKb,OADA/d,QAAO,GACA,GAIToyB,EAAAv6B,UAAAq6B,QAAA,SAAQr6B,GACN,OAAOjC,KAAKiC,UAAUq6B,QAAQr6B,IAIhCu6B,EAAAv6B,UAAAu8B,mBAAA,SAAmBC,GACjB,IAAI/H,EAAwB12B,KAC5B,GAAG,GAAI02B,EAAQz0B,YAAcw8B,EAAmB,OAAO/H,EAAQtnB,oBACxDsnB,EAAUA,EAAQ+F,MACzB,OAAO,MAITD,EAAAv6B,UAAAy8B,kBAAA,WAIE,IAHA,IAAIhI,EAAiB12B,KACjBu2B,EAAUv2B,KAAKu2B,QACfoI,EAAcpI,EAAQ/I,wBACnBkJ,EAAQ+F,OAASkC,GACtBjI,EAAUtsB,OAAOssB,EAAQ+F,MAE3B,OAAQ/F,EAAQz0B,WACd,KAAKs0B,EAAQ7I,iBAAkB,OAAO5J,EAAAuF,KAAKnmB,GAC3C,KAAKqzB,EAAQ3I,kBAAmB,OAAO9J,EAAAuF,KAAKlmB,IAC5C,KAAKozB,EAAQ1I,kBAAmB,OAAO/J,EAAAuF,KAAKjmB,IAC5C,KAAKmzB,EAAQzI,kBAAmB,OAAOhK,EAAAuF,KAAKhmB,IAC5C,KAAKkzB,EAAQxI,iBACb,KAAKwI,EAAQvI,wBAAyB,OAAOlK,EAAAuF,KAAK9lB,GAClD,KAAKgzB,EAAQtI,kBAAmB,OAAOnK,EAAAuF,KAAK7lB,IAC5C,KAAK+yB,EAAQrI,kBAAmB,OAAOpK,EAAAuF,KAAK5lB,IAC5C,KAAK8yB,EAAQpI,kBAAmB,OAAOrK,EAAAuF,KAAK3lB,IAC5C,KAAK6yB,EAAQnI,kBAAmB,OAAOtK,EAAAuF,KAAKxlB,IAC5C,KAAK0yB,EAAQlI,kBAAmB,OAAOvK,EAAAuF,KAAKvlB,IAC5C,KAAKyyB,EAAQhH,eAAgB,OAAOnlB,OAAOpK,KAAKw+B,mBAAmBjI,EAAQhH,iBAAiB,GAC5F,QAASnlB,QAAO,GAElB,OAAO0Z,EAAAuF,KAAKG,MAIdzoB,OAAAC,eAAIw7B,EAAAv6B,UAAA,YAAS,KAAb,WACE,IAAI28B,EAAU5+B,KAAK88B,SACnB,GAAW,GAAP8B,EAAiC,CACnC,IAAIC,EAAW7+B,KAAK8+B,SAAS9+B,MACfA,KAAK88B,SAAW8B,EAA1BC,EAAiC,EACT,EAE9B,OAAc,GAAPD,mCAIDpC,EAAAv6B,UAAA68B,SAAR,SAAiBC,EAAcC,WAezBtI,EAJJ,QAX6B,IAAAsI,MAAA,IAAyB73B,KAWlD63B,EAAO/V,IAAIjpB,MAAO,OAAO,EAC7Bg/B,EAAOvV,IAAIzpB,MAIX,IAeI0uB,EAfA/X,EAAU3W,KAAK2W,QACnB,GAAIA,MACF,IAAmB,IAAA6gB,EAAAhM,EAAA7U,EAAQtC,UAAQgd,EAAAmG,EAAAxoB,QAAAqiB,EAAA3F,KAAA2F,EAAAmG,EAAAxoB,OAAE,CAAhC,IAAIuiB,EAAMF,EAAA/vB,MACb,GACEiwB,EAAO1jB,MAAQ+Y,EAAYgL,OACyB,QAAnD8E,EAAkBnF,EAAQjiB,KAAK2vB,kBAE9BvI,IAAYqI,GACZrI,EAAQoI,SAASC,EAAOC,IAE1B,OAAO,oGAQb,IAAKtQ,EAAgB1uB,KAAKu2B,QAAQhH,iBAAmBvvB,KAAKiC,UAAUq6B,QAAQ5N,GAAgB,CAC1F,IAAItf,EAAgBhF,OAAOpK,KAAKw+B,mBAAmB9P,IAEnD,GADAtkB,OAA+B,GAAxBgF,EAAcjD,QAE6B,QAA/CuqB,EAAUtnB,EAAc,GAAG6vB,kBAE1BvI,IAAYqI,GACZrI,EAAQoI,SAASC,EAAOC,IAE1B,OAAO,OAGJ,IAAKtQ,EAAgB1uB,KAAKu2B,QAAQ9G,eAAiBzvB,KAAKiC,UAAUq6B,QAAQ5N,GAAgB,CAC3Ftf,EAAgBhF,OAAOpK,KAAKw+B,mBAAmB9P,IAEnD,GADAtkB,OAA+B,GAAxBgF,EAAcjD,QAE6B,QAA/CuqB,EAAUtnB,EAAc,GAAG6vB,kBAE1BvI,IAAYqI,GACZrI,EAAQoI,SAASC,EAAOC,IAE1B,OAAO,OAGJ,IAAKtQ,EAAgB1uB,KAAKu2B,QAAQ7G,eAAiB1vB,KAAKiC,UAAUq6B,QAAQ5N,GAAgB,CAC3Ftf,EAAgBhF,OAAOpK,KAAKw+B,mBAAmB9P,IAEnD,GADAtkB,OAA+B,GAAxBgF,EAAcjD,QAE6B,QAA/CuqB,EAAUtnB,EAAc,GAAG6vB,kBAE1BvI,IAAYqI,GACZrI,EAAQoI,SAASC,EAAOC,IAE1B,OAAO,EACT,GACkD,QAA/CtI,EAAUtnB,EAAc,GAAG6vB,kBAE1BvI,IAAYqI,GACZrI,EAAQoI,SAASC,EAAOC,IAE1B,OAAO,EAEX,OAAO,GAEXxC,EA9UA,CAA2BzF,GAAdr3B,EAAA88B,QAiVb,IAAAvG,EAAA,SAAAzZ,GAGE,SAAAyZ,EACEr1B,EACA4f,EACA/N,EACAoW,UAEArM,EAAAhc,KAAAR,KACEY,EACA4f,EACA/N,EACAoW,GACA,IACD7oB,KAEL,OAjBwCyc,EAAAwZ,EAAAzZ,GAiBxCyZ,EAjBA,CAAwC3C,GAA3B5zB,EAAAu2B,qBAoBb,IAAAiJ,EAAA,SAAA1iB,GAGE,SAAA0iB,EACEhG,EACAj3B,EACAmN,EACAqtB,eADA,IAAArtB,MAAA,SACA,IAAAqtB,MAAA,MAEAjgB,EAAAhc,KAAAR,KACEk5B,EACAj3B,EACAmN,EACAqtB,GACA,IACDz8B,KAEL,OAjB+Byc,EAAAyiB,EAAA1iB,GAiB/B0iB,EAjBA,CAA+B1C,GAoB/B,SAASxB,EAAwBzE,EAAkBtjB,GACjD7I,QAAQmsB,EAAQnP,gBAAgB6B,IAAIhW,EAAQ6U,eAC5CyO,EAAQnP,gBAAgB5J,IAAIvK,EAAQ6U,aAAc7U,GAIpD,SAAS0f,EAASwM,EAAgBC,GAGhCh1B,OAAO+0B,EAAM5I,UAAY6I,EAAM7I,SAC/BnsB,QAAQg1B,EAAMzoB,SACd,IAAI+b,EAAiC,KACrC,OAAQyM,EAAMtxB,MACZ,KAAK+Y,EAAYqK,mBACf,OAAQmO,EAAMvxB,MACZ,KAAK+Y,EAAYgR,UACfxB,EAAYgJ,EAAOD,GACnBzM,EAA0ByM,EAC1B,MAEF,KAAKvY,EAAY8Q,eACVyH,EAAM3I,aACT2I,EAAM3I,WAA6B4I,EACnChJ,EAAYgJ,EAAOD,GACnBzM,EAA0ByM,GAKhC,MAEF,KAAKvY,EAAY+G,gBACjB,KAAK/G,EAAYiR,KACf,GAAIuH,EAAMvxB,MAAQ+Y,EAAYgR,UAAW,CACvCxB,EAAYgJ,EAAOD,GACnBzM,EAA0ByM,EAC1B,MAEF,MAEF,KAAKvY,EAAYgR,UACf,OAAQwH,EAAMvxB,MACZ,KAAK+Y,EAAYiR,KACjB,KAAKjR,EAAY+G,gBACjB,KAAK/G,EAAYqK,mBACfmF,EAAY+I,EAAOC,GACnB1M,EAA0B0M,EAC1B,MAEF,KAAKxY,EAAYgR,UACfxB,EAAYgJ,EAAOD,GACnBzM,EAA0ByM,EAC1B,MAEF,KAAKvY,EAAY8Q,eACVyH,EAAM3I,aACT2I,EAAM3I,WAA6B4I,EACnChJ,EAAYgJ,EAAOD,GACnBzM,EAA0ByM,GAKhC,MAEF,KAAKvY,EAAYhJ,OACXwhB,EAAMvxB,MAAQ+Y,EAAY8Q,iBACvByH,EAAM3I,aACT2I,EAAM3I,WAA6B4I,EACnChJ,EAAYgJ,EAAOD,GACnBzM,EAA0ByM,IAG9B,MAEF,KAAKvY,EAAY8Q,eACf,OAAQ0H,EAAMvxB,MACZ,KAAK+Y,EAAYhJ,OACjB,KAAKgJ,EAAYqK,mBACjB,KAAKrK,EAAYgR,UACVwH,EAAM5I,aACT4I,EAAM5I,WAA6B2I,EACnC/I,EAAY+I,EAAOC,GACnB1M,EAA0B0M,IAQhC1M,KACkByM,EAAM9hB,GAAG9P,EAAAlL,YAAYyf,SAAWqd,EAAMxQ,aAAa9H,EAAejJ,WAClEwhB,EAAM/hB,GAAG9P,EAAAlL,YAAYyf,SAAWsd,EAAMzQ,aAAa9H,EAAejJ,UAEpFuhB,EAAM5I,QAAQlpB,MACZwW,EAAApZ,eAAe40B,kFACf3M,EAAO7D,eAAe9jB,MAAO2nB,EAAO7D,eAAe5iB,OAIzD,OAAOymB,EAIT,SAAS0D,EAAYkJ,EAAcC,WAC7BC,EAAaF,EAAI3oB,QACrB,GAAI6oB,EAAY,CACd,IAAIC,EAAcF,EAAK5oB,QAClB8oB,IAAaF,EAAK5oB,QAAU8oB,EAAc,IAAIr4B,SACnD,IAAiC,IAAAs4B,EAAAlU,EAAAgU,GAAUG,EAAAD,EAAA1wB,QAAA2wB,EAAAjU,KAAAiU,EAAAD,EAAA1wB,OAAE,CAApC,IAAAwoB,EAAA5L,EAAA+T,EAAAr+B,MAAA,GAACm2B,EAAAD,EAAA,GAAYjG,EAAAiG,EAAA,GACpBiI,EAAYjiB,IAAIia,EAAYlG,uGAMlC,SAAgBoG,EAAmB/2B,EAAc4f,EAAiBof,EAAkBC,GAClF,YADkF,IAAAA,OAAA,GAC1Erf,EAAO3S,MACb,KAAK+Y,EAAY6P,KACf,OAAIoJ,EAAiBj/B,EACd4f,EAAOsH,aAAeva,EAAAjL,eAAiB1B,EAEhD,KAAKgmB,EAAYpH,SACf,OAAIqgB,EAAiBj/B,GACrBwJ,QAAQw1B,GACDpf,EAAOsH,aAAeva,EAAA3K,gBAAkBhC,GAEjD,QACE,OAAO+2B,EAAmBnX,EAAO5f,KAAM4f,EAAOA,OAAQA,EAAOnD,GAAG9P,EAAAlL,YAAY2zB,UAAW6J,IAC/ED,EAAaryB,EAAA7K,mBAAqB6K,EAAA5K,kBAAoB/B,GAtJvDlB,EAAAw/B,YAyIbx/B,EAAAi4B,sSC/+GA,IAaYmI,EAqBAC,EAlCZxyB,EAAApN,EAAA,IAaA,SAAY2/B,GACVA,IAAA,KAAOE,qBAAmB,OAC1BF,IAAA,IAAOG,sBAAoB,MAC3BH,IAAA,IAAOI,sBAAoB,MAC3BJ,IAAA,IAAOK,wBAAsB,MAC7BL,IAAA,IAAOM,wBAAsB,MAC7BN,IAAA,KAAOO,uBAAqB,OAC5BP,IAAA,YAAcQ,4BAA0B,cACxCR,IAAA,KAAOS,qBAAmB,OAR5B,CAAYT,EAAApgC,EAAAogC,aAAApgC,EAAAogC,WAAU,KAWtB,SAAYU,GACVA,IAAA,QAAUC,2BAAyB,UACnCD,IAAA,eAAiBE,kCAAgC,iBACjDF,IAAA,mBAAqBG,sCAAoC,qBACzDH,IAAA,QAAUI,2BAAyB,UACnCJ,IAAA,WAAaK,8BAA4B,aACzCL,IAAA,QAAUM,2BAAyB,UACnCN,IAAA,kBAAoBO,qCAAmC,oBAPzD,CAAYrhC,EAAA8gC,eAAA9gC,EAAA8gC,aAAY,KAUxB,SAAYT,GACVA,IAAA,QAAUiB,sBAAoB,UAC9BjB,IAAA,MAAQkB,oBAAkB,QAC1BlB,IAAA,GAAKmB,iBAAe,KACpBnB,IAAA,KAAOoB,mBAAiB,OACxBpB,IAAA,MAAQqB,oBAAkB,QAC1BrB,IAAA,OAASsB,qBAAmB,SAC5BtB,IAAA,KAAOuB,mBAAiB,OACxBvB,IAAA,aAAewB,2BAAyB,eACxCxB,IAAA,SAAWyB,uBAAqB,WAChCzB,IAAA,SAAW0B,uBAAqB,WAChC1B,IAAA,UAAY2B,wBAAsB,YAClC3B,IAAA,UAAY4B,wBAAsB,YAClC5B,IAAA,KAAO6B,mBAAiB,OACxB7B,IAAA,MAAQ8B,oBAAkB,QAC1B9B,IAAA,MAAQ+B,oBAAkB,QAC1B/B,IAAA,MAAQgC,oBAAkB,QAC1BhC,IAAA,OAASiC,qBAAmB,SAC5BjC,IAAA,OAASkC,qBAAmB,SAC5BlC,IAAA,KAAOmC,mBAAiB,OACxBnC,IAAA,OAASoC,qBAAmB,SAC5BpC,IAAA,KAAOqC,mBAAiB,OACxBrC,IAAA,IAAMsC,kBAAgB,MACtBtC,IAAA,YAAcuC,0BAAwB,cACtCvC,IAAA,cAAgBwC,4BAA0B,gBAC1CxC,IAAA,UAAYyC,wBAAsB,YAClCzC,IAAA,WAAa0C,yBAAuB,aACpC1C,IAAA,aAAe2C,2BAAyB,eACxC3C,IAAA,YAAc4C,0BAAwB,cACtC5C,IAAA,YAAc6C,0BAAwB,cACtC7C,IAAA,YAAc8C,0BAAwB,cACtC9C,IAAA,cAAgB+C,4BAA0B,gBAC1C/C,IAAA,UAAYgD,wBAAsB,YAClChD,IAAA,WAAaiD,yBAAuB,aACpCjD,IAAA,SAAWkD,uBAAqB,WAChClD,IAAA,WAAamD,yBAAuB,aACpCnD,IAAA,WAAaoD,yBAAuB,aApCtC,CAAYpD,EAAArgC,EAAAqgC,eAAArgC,EAAAqgC,aAAY,KAuCxB,SAAYqD,GACVA,IAAA,OAASC,qBAAmB,SAC5BD,IAAA,OAASE,qBAAmB,SAC5BF,IAAA,UAAYG,wBAAsB,YAClCH,IAAA,OAASI,uBAAqB,SAC9BJ,IAAA,OAASK,uBAAqB,SAC9BL,IAAA,QAAUM,wBAAsB,UAChCN,IAAA,SAAWO,yBAAuB,WAClCP,IAAA,SAAWQ,yBAAuB,WAClCR,IAAA,WAAaS,2BAAyB,aACtCT,IAAA,QAAUU,wBAAsB,UAChCV,IAAA,OAASW,qBAAmB,SAC5BX,IAAA,OAASY,qBAAmB,SAC5BZ,IAAA,OAASa,qBAAmB,SAC5Bb,IAAA,UAAYc,wBAAsB,YAClCd,IAAA,OAASe,uBAAqB,SAC9Bf,IAAA,OAASgB,uBAAqB,SAC9BhB,IAAA,QAAUiB,wBAAsB,UAChCjB,IAAA,SAAWkB,yBAAuB,WAClClB,IAAA,SAAWmB,yBAAuB,WAClCnB,IAAA,WAAaoB,2BAAyB,aACtCpB,IAAA,QAAUqB,wBAAsB,UAChCrB,IAAA,OAASsB,qBAAmB,SAC5BtB,IAAA,UAAYuB,yBAAuB,YACnCvB,IAAA,UAAYwB,yBAAuB,YACnCxB,IAAA,QAAUyB,sBAAoB,UAC9BzB,IAAA,cAAgB0B,iCAA+B,gBAC/C1B,IAAA,cAAgB2B,iCAA+B,gBAC/C3B,IAAA,cAAgB4B,iCAA+B,gBAC/C5B,IAAA,cAAgB6B,iCAA+B,gBAC/C7B,IAAA,cAAgB8B,iCAA+B,gBAC/C9B,IAAA,cAAgB+B,iCAA+B,gBAC/C/B,IAAA,cAAgBgC,iCAA+B,gBAC/ChC,IAAA,cAAgBiC,iCAA+B,gBAC/CjC,IAAA,eAAiBkC,+BAA6B,iBAC9ClC,IAAA,eAAiBmC,+BAA6B,iBAC9CnC,IAAA,gBAAkBoC,mCAAiC,kBACnDpC,IAAA,gBAAkBqC,mCAAiC,kBACnDrC,IAAA,gBAAkBsC,mCAAiC,kBACnDtC,IAAA,gBAAkBuC,mCAAiC,kBACnDvC,IAAA,gBAAkBwC,mCAAiC,kBACnDxC,IAAA,gBAAkByC,mCAAiC,kBACnDzC,IAAA,gBAAkB0C,mCAAiC,kBACnD1C,IAAA,gBAAkB2C,mCAAiC,kBACnD3C,IAAA,WAAa4C,2BAAyB,aACtC5C,IAAA,UAAY6C,0BAAwB,YACpC7C,IAAA,eAAiB8C,6BAA2B,iBAC5C9C,IAAA,eAAiB+C,6BAA2B,iBAG5C/C,IAAA,cAAgBgD,0BAAwB,gBACxChD,IAAA,eAAiBiD,2BAAyB,iBAC1CjD,IAAA,cAAgBkD,0BAAwB,gBACxClD,IAAA,eAAiBmD,2BAAyB,iBAC1CnD,IAAA,eAAiBoD,2BAAyB,iBAa1CpD,IAAA,cAAgBqD,0BAAwB,gBACxCrD,IAAA,cAAgBsD,0BAAwB,gBACxCtD,IAAA,cAAgBuD,0BAAwB,gBACxCvD,IAAA,cAAgBwD,0BAAwB,gBACxCxD,IAAA,cAAgByD,0BAAwB,gBACxCzD,IAAA,cAAgB0D,0BAAwB,gBACxC1D,IAAA,UAAY2D,sBAAoB,YAChC3D,IAAA,YAAc4D,wBAAsB,cACpC5D,IAAA,gBAAkB6D,4BAA0B,kBAC5C7D,IAAA,gBAAkB8D,4BAA0B,kBAC5C9D,IAAA,YAAc+D,wBAAsB,cACpC/D,IAAA,gBAAkBgE,4BAA0B,kBAC5ChE,IAAA,gBAAkBiE,4BAA0B,kBAC5CjE,IAAA,YAAckE,wBAAsB,cACpClE,IAAA,gBAAkBmE,4BAA0B,kBAC5CnE,IAAA,gBAAkBoE,4BAA0B,kBAC5CpE,IAAA,YAAcqE,wBAAsB,cACpCrE,IAAA,gBAAkBsE,4BAA0B,kBAC5CtE,IAAA,gBAAkBuE,4BAA0B,kBAC5CvE,IAAA,YAAcwE,wBAAsB,cACpCxE,IAAA,YAAcyE,wBAAsB,cACpCzE,IAAA,aAAe0E,yBAAuB,eACtC1E,IAAA,YAAc2E,wBAAsB,cACpC3E,IAAA,YAAc4E,wBAAsB,cACpC5E,IAAA,aAAe6E,yBAAuB,eACtC7E,IAAA,4BAA8B8E,wCAAsC,8BACpE9E,IAAA,4BAA8B+E,wCAAsC,8BACpE/E,IAAA,4BAA8BgF,wCAAsC,8BACpEhF,IAAA,4BAA8BiF,wCAAsC,8BACpEjF,IAAA,2BAA6BkF,uCAAqC,6BAClElF,IAAA,2BAA6BmF,uCAAqC,6BAClEnF,IAAA,2BAA6BoF,uCAAqC,6BAClEpF,IAAA,2BAA6BqF,uCAAqC,6BAnGpE,CAAY/oC,EAAA0jC,UAAA1jC,EAAA0jC,QAAO,KAsGnB,SAAYsF,GACVA,IAAA,OAASC,qBAAmB,SAC5BD,IAAA,OAASE,qBAAmB,SAC5BF,IAAA,OAASG,qBAAmB,SAC5BH,IAAA,OAASI,sBAAoB,SAC7BJ,IAAA,OAASK,sBAAoB,SAC7BL,IAAA,OAASM,sBAAoB,SAC7BN,IAAA,OAASO,sBAAoB,SAC7BP,IAAA,OAASQ,qBAAmB,SAC5BR,IAAA,MAAQS,oBAAkB,QAC1BT,IAAA,OAASU,qBAAmB,SAC5BV,IAAA,OAASW,qBAAmB,SAC5BX,IAAA,OAASY,sBAAoB,SAC7BZ,IAAA,OAASa,sBAAoB,SAC7Bb,IAAA,QAAUc,sBAAoB,UAC9Bd,IAAA,QAAUe,sBAAoB,UAC9Bf,IAAA,MAAQgB,oBAAkB,QAC1BhB,IAAA,MAAQiB,oBAAkB,QAC1BjB,IAAA,MAAQkB,qBAAmB,QAC3BlB,IAAA,MAAQmB,qBAAmB,QAC3BnB,IAAA,MAAQoB,qBAAmB,QAC3BpB,IAAA,MAAQqB,qBAAmB,QAC3BrB,IAAA,MAAQsB,qBAAmB,QAC3BtB,IAAA,MAAQuB,qBAAmB,QAC3BvB,IAAA,MAAQwB,qBAAmB,QAC3BxB,IAAA,MAAQyB,qBAAmB,QAC3BzB,IAAA,OAAS0B,qBAAmB,SAC5B1B,IAAA,OAAS2B,qBAAmB,SAC5B3B,IAAA,OAAS4B,qBAAmB,SAC5B5B,IAAA,OAAS6B,sBAAoB,SAC7B7B,IAAA,OAAS8B,sBAAoB,SAC7B9B,IAAA,OAAS+B,sBAAoB,SAC7B/B,IAAA,OAASgC,sBAAoB,SAC7BhC,IAAA,OAASiC,qBAAmB,SAC5BjC,IAAA,MAAQkC,oBAAkB,QAC1BlC,IAAA,OAASmC,qBAAmB,SAC5BnC,IAAA,OAASoC,qBAAmB,SAC5BpC,IAAA,OAASqC,sBAAoB,SAC7BrC,IAAA,OAASsC,sBAAoB,SAC7BtC,IAAA,QAAUuC,sBAAoB,UAC9BvC,IAAA,QAAUwC,sBAAoB,UAC9BxC,IAAA,MAAQyC,oBAAkB,QAC1BzC,IAAA,MAAQ0C,oBAAkB,QAC1B1C,IAAA,MAAQ2C,qBAAmB,QAC3B3C,IAAA,MAAQ4C,qBAAmB,QAC3B5C,IAAA,MAAQ6C,qBAAmB,QAC3B7C,IAAA,MAAQ8C,qBAAmB,QAC3B9C,IAAA,MAAQ+C,qBAAmB,QAC3B/C,IAAA,MAAQgD,qBAAmB,QAC3BhD,IAAA,MAAQiD,qBAAmB,QAC3BjD,IAAA,MAAQkD,qBAAmB,QAC3BlD,IAAA,OAASmD,uBAAqB,SAC9BnD,IAAA,OAASoD,uBAAqB,SAC9BpD,IAAA,OAASqD,uBAAqB,SAC9BrD,IAAA,OAASsD,uBAAqB,SAC9BtD,IAAA,YAAcuD,4BAA0B,cACxCvD,IAAA,OAASwD,uBAAqB,SAC9BxD,IAAA,OAASyD,uBAAqB,SAC9BzD,IAAA,MAAQ0D,sBAAoB,QAC5B1D,IAAA,MAAQ2D,sBAAoB,QAC5B3D,IAAA,MAAQ4D,sBAAoB,QAC5B5D,IAAA,MAAQ6D,sBAAoB,QAC5B7D,IAAA,MAAQ8D,sBAAoB,QAC5B9D,IAAA,MAAQ+D,sBAAoB,QAC5B/D,IAAA,OAASgE,uBAAqB,SAC9BhE,IAAA,OAASiE,uBAAqB,SAC9BjE,IAAA,OAASkE,uBAAqB,SAC9BlE,IAAA,OAASmE,uBAAqB,SAC9BnE,IAAA,YAAcoE,4BAA0B,cACxCpE,IAAA,OAASqE,uBAAqB,SAC9BrE,IAAA,OAASsE,uBAAqB,SAC9BtE,IAAA,MAAQuE,sBAAoB,QAC5BvE,IAAA,MAAQwE,sBAAoB,QAC5BxE,IAAA,MAAQyE,sBAAoB,QAC5BzE,IAAA,MAAQ0E,sBAAoB,QAC5B1E,IAAA,MAAQ2E,sBAAoB,QAC5B3E,IAAA,MAAQ4E,sBAAoB,QAG5B5E,IAAA,WAAa6E,uBAAqB,aAClC7E,IAAA,WAAa8E,uBAAqB,aAClC9E,IAAA,YAAc+E,wBAAsB,cACpC/E,IAAA,YAAcgF,wBAAsB,cACpChF,IAAA,YAAciF,wBAAsB,cACpCjF,IAAA,YAAckF,wBAAsB,cACpClF,IAAA,YAAcmF,wBAAsB,cACpCnF,IAAA,YAAcoF,wBAAsB,cACpCpF,IAAA,YAAcqF,wBAAsB,cACpCrF,IAAA,YAAcsF,wBAAsB,cACpCtF,IAAA,WAAauF,uBAAqB,aAClCvF,IAAA,WAAawF,uBAAqB,aAClCxF,IAAA,YAAcyF,wBAAsB,cACpCzF,IAAA,YAAc0F,wBAAsB,cACpC1F,IAAA,YAAc2F,wBAAsB,cACpC3F,IAAA,YAAc4F,wBAAsB,cACpC5F,IAAA,YAAc6F,wBAAsB,cACpC7F,IAAA,YAAc8F,wBAAsB,cACpC9F,IAAA,YAAc+F,wBAAsB,cACpC/F,IAAA,YAAcgG,wBAAsB,cACpChG,IAAA,WAAaiG,uBAAqB,aAClCjG,IAAA,WAAakG,uBAAqB,aAClClG,IAAA,YAAcmG,wBAAsB,cACpCnG,IAAA,YAAcoG,wBAAsB,cACpCpG,IAAA,YAAcqG,wBAAsB,cACpCrG,IAAA,YAAcsG,wBAAsB,cACpCtG,IAAA,YAAcuG,wBAAsB,cACpCvG,IAAA,YAAcwG,wBAAsB,cACpCxG,IAAA,YAAcyG,wBAAsB,cACpCzG,IAAA,YAAc0G,wBAAsB,cACpC1G,IAAA,WAAa2G,uBAAqB,aAClC3G,IAAA,WAAa4G,uBAAqB,aAClC5G,IAAA,WAAa6G,uBAAqB,aAClC7G,IAAA,WAAa8G,uBAAqB,aAClC9G,IAAA,WAAa+G,uBAAqB,aAClC/G,IAAA,WAAagH,uBAAqB,aAClChH,IAAA,WAAaiH,uBAAqB,aAClCjH,IAAA,WAAakH,uBAAqB,aAClClH,IAAA,WAAamH,uBAAqB,aAClCnH,IAAA,WAAaoH,uBAAqB,aAClCpH,IAAA,WAAaqH,uBAAqB,aAClCrH,IAAA,WAAasH,uBAAqB,aAClCtH,IAAA,UAAYuH,sBAAoB,YAChCvH,IAAA,SAAWwH,qBAAmB,WAC9BxH,IAAA,UAAYyH,sBAAoB,YAChCzH,IAAA,YAAc0H,wBAAsB,cACpC1H,IAAA,gBAAkB2H,4BAA0B,kBAC5C3H,IAAA,gBAAkB4H,4BAA0B,kBAC5C5H,IAAA,YAAc6H,wBAAsB,cACpC7H,IAAA,gBAAkB8H,4BAA0B,kBAC5C9H,IAAA,gBAAkB+H,4BAA0B,kBAC5C/H,IAAA,YAAcgI,wBAAsB,cACpChI,IAAA,YAAciI,wBAAsB,cACpCjI,IAAA,gBAAkBkI,4BAA0B,kBAC5ClI,IAAA,gBAAkBmI,4BAA0B,kBAC5CnI,IAAA,YAAcoI,wBAAsB,cACpCpI,IAAA,gBAAkBqI,4BAA0B,kBAC5CrI,IAAA,gBAAkBsI,4BAA0B,kBAC5CtI,IAAA,YAAcuI,wBAAsB,cACpCvI,IAAA,YAAcwI,wBAAsB,cACpCxI,IAAA,YAAcyI,wBAAsB,cACpCzI,IAAA,YAAc0I,wBAAsB,cACpC1I,IAAA,YAAc2I,wBAAsB,cACpC3I,IAAA,YAAc4I,wBAAsB,cACpC5I,IAAA,YAAc6I,wBAAsB,cACpC7I,IAAA,YAAc8I,wBAAsB,cACpC9I,IAAA,YAAc+I,wBAAsB,cACpC/I,IAAA,YAAcgJ,wBAAsB,cACpChJ,IAAA,YAAciJ,wBAAsB,cACpCjJ,IAAA,YAAckJ,wBAAsB,cACpClJ,IAAA,YAAcmJ,wBAAsB,cACpCnJ,IAAA,YAAcoJ,wBAAsB,cACpCpJ,IAAA,YAAcqJ,wBAAsB,cACpCrJ,IAAA,YAAcsJ,wBAAsB,cACpCtJ,IAAA,YAAcuJ,wBAAsB,cACpCvJ,IAAA,YAAcwJ,wBAAsB,cA1JtC,CAAYxyC,EAAAgpC,WAAAhpC,EAAAgpC,SAAQ,KA6JpB,SAAYyJ,GACVA,IAAA,WAAaC,uBAAqB,aAClCD,IAAA,WAAaE,uBAAqB,aAFpC,CAAY3yC,EAAAyyC,SAAAzyC,EAAAyyC,OAAM,KAKlB,SAAYG,GACVA,IAAA,IAAMC,yBAAuB,MAC7BD,IAAA,IAAME,yBAAuB,MAC7BF,IAAA,IAAMG,yBAAuB,MAC7BH,IAAA,GAAKI,wBAAsB,KAC3BJ,IAAA,IAAMK,yBAAuB,MAC7BL,IAAA,KAAOM,0BAAwB,OANjC,CAAYlzC,EAAA4yC,cAAA5yC,EAAA4yC,YAAW,KASvB,SAAYO,GACVA,IAAA,qBAAuBC,iCAA+B,uBACtDD,IAAA,qBAAuBE,iCAA+B,uBACtDF,IAAA,qBAAuBG,iCAA+B,uBACtDH,IAAA,qBAAuBI,iCAA+B,uBACtDJ,IAAA,oBAAsBK,gCAA8B,sBACpDL,IAAA,oBAAsBM,gCAA8B,sBACpDN,IAAA,oBAAsBO,gCAA8B,sBACpDP,IAAA,oBAAsBQ,gCAA8B,sBARtD,CAAY3zC,EAAAmzC,gBAAAnzC,EAAAmzC,cAAa,KAWzB,SAAYS,GACVA,IAAA,oBAAsBC,gCAA8B,sBACpDD,IAAA,oBAAsBE,gCAA8B,sBACpDF,IAAA,oBAAsBG,gCAA8B,sBACpDH,IAAA,oBAAsBI,gCAA8B,sBACpDJ,IAAA,oBAAsBK,gCAA8B,sBACpDL,IAAA,oBAAsBM,gCAA8B,sBANtD,CAAYl0C,EAAA4zC,gBAAA5zC,EAAA4zC,cAAa,KASzB,SAAYO,GACVA,IAAA,YAAcC,wBAAsB,cACpCD,IAAA,aAAeE,yBAAuB,eACtCF,IAAA,aAAeG,yBAAuB,eACtCH,IAAA,YAAcI,wBAAsB,cACpCJ,IAAA,aAAeK,yBAAuB,eACtCL,IAAA,aAAeM,yBAAuB,eACtCN,IAAA,YAAcO,wBAAsB,cACpCP,IAAA,aAAeQ,yBAAuB,eACtCR,IAAA,aAAeS,yBAAuB,eACtCT,IAAA,YAAcU,wBAAsB,cACpCV,IAAA,aAAeW,yBAAuB,eACtCX,IAAA,aAAeY,yBAAuB,eAZxC,CAAY/0C,EAAAm0C,cAAAn0C,EAAAm0C,YAAW,KAevB,IAAAa,EAAA,oBAAAA,KAWA,OANSA,EAAA/yC,OAAP,SAAcumB,EAAoBC,GAChC,IAAIwsB,EAAU,IAAID,EAGlB,OAFAC,EAAQzsB,OAASA,EACjBysB,EAAQxsB,OAASA,EACVwsB,GAEXD,EAXA,GAAah1C,EAAAg1C,gBAab,IAAAE,EAAA,WAyBE,SAAAA,IAwbQ50C,KAAA60C,sBAA6B,EAoO7B70C,KAAA80C,sBAA+B,EAyE/B90C,KAAA+0C,cAAmC,IAAI3tC,IA4IjD,OAp4BSwtC,EAAAjzC,OAAP,WACE,IAAIhC,EAAS,IAAIi1C,EAGjB,OAFAj1C,EAAO65B,IAAMwb,wBACbr1C,EAAOs1C,IAAMC,OAAOC,SAASC,0BACtBz1C,GAGFi1C,EAAAS,WAAP,SAAkBntB,GAChB,IAAIotB,EAAOC,EAAartB,GACxB,IACE,IAAIvoB,EAAS,IAAIi1C,EAGjB,OAFAj1C,EAAO65B,IAAMgc,oBAAoBF,EAAMptB,EAAO/b,QAC9CxM,EAAOs1C,IAAMC,OAAOC,SAASC,0BACtBz1C,UAEPu1C,OAAOzsC,KAAKgtC,WAAkBH,MAQlCV,EAAA3yC,UAAAyzC,gBAAA,SACE90C,EACA+0C,EACAC,GAEA,IAAIC,EAAO71C,KAAK81C,kBAAkBl1C,GAC9B00C,EAAOS,EAAcH,GACzB,IACE,OAAOI,yBAAyBh2C,KAAKw5B,IAAKqc,EAAMF,EAAQL,EAAMM,EAAaA,EAAWzpC,OAAS,WAE/F+oC,OAAOzsC,KAAK6sC,KAIhBV,EAAA3yC,UAAAg0C,2BAAA,SACEN,EACAC,GAEA,IAAIN,EAAOS,EAAcH,GACzB,IACE,OAAOM,oCAAoCl2C,KAAKw5B,IAAKmc,EAAQL,EAAMM,EAAaA,EAAWzpC,OAAS,WAEpG+oC,OAAOzsC,KAAK6sC,KAIhBV,EAAA3yC,UAAAk0C,mBAAA,SAAmBv1C,GACjB,IAAIi1C,EAAO71C,KAAK81C,kBAAkBl1C,GAClCw1C,4BAA4Bp2C,KAAKw5B,IAAKqc,IAKxCjB,EAAA3yC,UAAAmB,IAAA,SAAI9B,GACF,IAAI+0C,EAAMr2C,KAAKi1C,IAEf,OADAqB,sBAAsBD,EAAK/0C,GACpBi1C,eAAev2C,KAAKw5B,IAAK6c,IAGlCzB,EAAA3yC,UAAAoB,IAAA,SAAImzC,EAAeC,QAAA,IAAAA,MAAA,GACjB,IAAIJ,EAAMr2C,KAAKi1C,IAEf,OADAyB,sBAAsBL,EAAKG,EAAUC,GAC9BF,eAAev2C,KAAKw5B,IAAK6c,IAGlCzB,EAAA3yC,UAAA4B,IAAA,SAAIvC,GACF,IAAI+0C,EAAMr2C,KAAKi1C,IAEf,OADA0B,wBAAwBN,EAAK/0C,GACtBi1C,eAAev2C,KAAKw5B,IAAK6c,IAGlCzB,EAAA3yC,UAAA6B,IAAA,SAAIxC,GACF,IAAI+0C,EAAMr2C,KAAKi1C,IAEf,OADA2B,wBAAwBP,EAAK/0C,GACtBi1C,eAAev2C,KAAKw5B,IAAK6c,IAGlCzB,EAAA3yC,UAAA8B,KAAA,SAAK8yC,GACHzsC,OAAuB,IAAhBysC,EAAM1qC,QAEb,IADA,IAAIkqC,EAAMr2C,KAAKi1C,IACN50C,EAAI,EAAGA,EAAI,KAAMA,EAAGy2C,MAAUT,EAAMh2C,EAAGw2C,EAAMx2C,IAEtD,OADA02C,uBAAuBV,EAAKA,GACrBE,eAAev2C,KAAKw5B,IAAK6c,IAKlCzB,EAAA3yC,UAAA+0C,MAAA,SACEC,EACA9lC,GAEA,OAAO+lC,eAAel3C,KAAKw5B,IAAKyd,EAAI9lC,IAGtCyjC,EAAA3yC,UAAAk1C,OAAA,SACEF,EACA/kC,EACAC,GAEA,OAAOilC,gBAAgBp3C,KAAKw5B,IAAKyd,EAAI/kC,EAAMC,IAG7CyiC,EAAA3yC,UAAAo1C,KAAA,SACEJ,EACAr2C,EACA02C,QADA,IAAA12C,MAAA,WACA,IAAA02C,MAAA,MAEA,IAAIzB,EAAO71C,KAAK81C,kBAAkBl1C,GAC9B00C,EAAOiC,EAAcD,GACzB,IACE,OAAOE,cAAcx3C,KAAKw5B,IAAKyd,EAAIpB,EAAMP,EAAMgC,EAA6BA,EAAUnrC,OAAS,WAE/F+oC,OAAOzsC,KAAK6sC,KAIhBV,EAAA3yC,UAAAw1C,UAAA,SACEjf,EACAlpB,GAEA,OAAOooC,kBAAkB13C,KAAKw5B,IAAKhB,EAAOlpB,IAG5CslC,EAAA3yC,UAAA01C,UAAA,SACEnf,EACAl3B,GAEA,OAAOs2C,kBAAkB53C,KAAKw5B,IAAKhB,EAAOl3B,IAG5CszC,EAAA3yC,UAAA41C,WAAA,SACEj3C,EACA0O,GAEA,IAAIumC,EAAO71C,KAAK81C,kBAAkBl1C,GAClC,OAAOk3C,mBAAmB93C,KAAKw5B,IAAKqc,EAAMvmC,IAG5CslC,EAAA3yC,UAAA81C,KAAA,SACElB,EACAmB,EACAC,EACA3oC,EACA6Y,EACA+vB,GAEA,YAHA,IAAA/vB,MAAA,QACA,IAAA+vB,MAAArB,GAEOsB,cAAcn4C,KAAKw5B,IAAKqd,EAAOmB,EAAS,EAAI,EAAG7vB,EAAQ+vB,EAAO5oC,EAAM2oC,IAG7ErD,EAAA3yC,UAAA60C,MAAA,SACED,EACAoB,EACA32C,EACAgO,EACA6Y,EACA+vB,GAEA,QAHA,IAAA/vB,MAAA,QACA,IAAA+vB,MAAArB,GAEIvnC,EAAOwwB,EAAWsY,MAAQ9oC,EAAOwwB,EAAW/4B,KAAM,MAAM,IAAIuoB,MAAM,SAAWhgB,GACjF,OAAO+oC,eAAer4C,KAAKw5B,IAAKqd,EAAO1uB,EAAQ+vB,EAAOD,EAAK32C,EAAOgO,IAGpEslC,EAAA3yC,UAAAq2C,YAAA,SACEzB,EACAoB,EACA3oC,EACA6Y,GAEA,YAFA,IAAAA,MAAA,GAEOowB,oBAAoBv4C,KAAKw5B,IAAKqd,EAAO1uB,EAAQ7Y,EAAM2oC,IAG5DrD,EAAA3yC,UAAAu2C,aAAA,SACE3B,EACAoB,EACA32C,EACAgO,EACA6Y,GAEA,YAFA,IAAAA,MAAA,GAEOswB,qBAAqBz4C,KAAKw5B,IAAKqd,EAAO1uB,EAAQ8vB,EAAK32C,EAAOgO,IAGnEslC,EAAA3yC,UAAAy2C,WAAA,SACEzB,EACAJ,EACA1uB,EACA8vB,EACA32C,EACAgO,GAEA,OAAOqpC,mBAAmB34C,KAAKw5B,IAAKyd,EAAIJ,EAAO1uB,EAAQ8vB,EAAK32C,EAAOgO,IAGrEslC,EAAA3yC,UAAA22C,eAAA,SACE/B,EACA1uB,EACA8vB,EACAY,EACAC,EACAxpC,GAEA,OAAOypC,uBAAuB/4C,KAAKw5B,IAAKqd,EAAO1uB,EAAQ8vB,EAAKY,EAAUC,EAAaxpC,IAGrFslC,EAAA3yC,UAAA+2C,YAAA,SACEf,EACAY,EACAI,EACAC,GAEA,OAAOC,oBAAoBn5C,KAAKw5B,IAAKye,EAAKY,EAAUI,EAASC,IAG/DtE,EAAA3yC,UAAAm3C,cAAA,SACEnB,EACAoB,GAEA,OAAOC,sBAAsBt5C,KAAKw5B,IAAKye,EAAKoB,IAK9CzE,EAAA3yC,UAAAs3C,UAAA,SACE/gB,EACAl3B,GAEA,OAAOk4C,kBAAkBx5C,KAAKw5B,IAAKhB,EAAOl3B,IAG5CszC,EAAA3yC,UAAAw3C,WAAA,SACE74C,EACAU,GAEA,IAAIu0C,EAAO71C,KAAK81C,kBAAkBl1C,GAClC,OAAO84C,mBAAmB15C,KAAKw5B,IAAKqc,EAAMv0C,IAG5CszC,EAAA3yC,UAAA03C,MAAA,SACErjC,EACAsjC,EACAtqC,QAAA,IAAAA,MAAmBwwB,EAAWsY,MAE9B,IAAIvC,EAAO71C,KAAK81C,kBAAkBx/B,GAC9Bg/B,EAAOiC,EAAcqC,GACzB,IACE,OAAOC,eAAe75C,KAAKw5B,IAAKqc,EAAMP,EAAMsE,EAASztC,OAAQmD,WAE7D4lC,OAAOzsC,KAAK6sC,KAIhBV,EAAA3yC,UAAA63C,GAAA,SACExjC,EACArB,EACA3T,QADA,IAAA2T,MAAA,QACA,IAAA3T,MAAA,GAEA,IAAIu0C,EAAO71C,KAAK81C,kBAAkBx/B,GAClC,OAAOyjC,eAAe/5C,KAAKw5B,IAAKqc,EAAM5gC,EAAW3T,IAGnDszC,EAAA3yC,UAAA+3C,KAAA,SACEnoC,GAEA,OAAOooC,cAAcj6C,KAAKw5B,IAAK3nB,IAGjC+iC,EAAA3yC,UAAAi4C,KAAA,SACE5jC,EACA6D,GAEA,IAAI07B,EAAO71C,KAAK81C,kBAAkBx/B,GAClC,OAAO6jC,cAAcn6C,KAAKw5B,IAAKqc,EAAM17B,IAGvCy6B,EAAA3yC,UAAAm4C,GAAA,SACEnlC,EACA6D,EACAC,GAEA,YAFA,IAAAA,MAAA,GAEOshC,YAAYr6C,KAAKw5B,IAAKvkB,EAAW6D,EAAQC,IAGlD67B,EAAA3yC,UAAAq4C,IAAA,WACE,OAAOC,aAAav6C,KAAKw5B,MAG3Bob,EAAA3yC,UAAAu4C,OAAA,SACE3oC,GAEA,YAFA,IAAAA,MAAA,GAEO4oC,gBAAgBz6C,KAAKw5B,IAAK3nB,IAGnC+iC,EAAA3yC,UAAAy4C,OAAA,SACE5hC,EACAC,EACA9D,GAEA,OAAO0lC,gBAAgB36C,KAAKw5B,IAAKvkB,EAAW6D,EAAQC,IAGtD67B,EAAA3yC,UAAA24C,OAAA,SACExmC,EACAymC,EACA5lC,EACA3T,QAAA,IAAAA,MAAA,GAIA,IAFA,IAAIw5C,EAAW1mC,EAAMjI,OACjB4uC,EAAO,IAAI9zC,MAAa6zC,GACnBz6C,EAAI,EAAGA,EAAIy6C,IAAYz6C,EAC9B06C,EAAK16C,GAAKL,KAAK81C,kBAAkB1hC,EAAM/T,IAEzC,IAAIi1C,EAAOS,EAAcgF,GACrBlF,EAAO71C,KAAK81C,kBAAkB+E,GAClC,IACE,OAAOG,gBAAgBh7C,KAAKw5B,IAAK8b,EAAMwF,EAAUjF,EAAM5gC,EAAW3T,WAElE4zC,OAAOzsC,KAAK6sC,KAIhBV,EAAA3yC,UAAAzB,KAAA,SACEm9B,EACA2Z,EACA5nC,GAEA,IAAImmC,EAAO71C,KAAK81C,kBAAkBnY,GAC9B2X,EAAOiC,EAAcD,GACzB,IACE,OAAO2D,cAAcj7C,KAAKw5B,IAAKqc,EAAMP,EAAMgC,GAAYA,EAASnrC,QAAU,EAAGuD,WAE7EwlC,OAAOzsC,KAAK6sC,KAIhBV,EAAA3yC,UAAAi5C,cAAA,SACE1iB,EACA8e,EACAzoC,GAEA,IAAIgnC,EAAO71C,KAAK81C,kBAAkBjnC,GAC9BymC,EAAOiC,EAAcD,GACzB,IACE,OAAO6D,sBAAsBn7C,KAAKw5B,IAAKhB,EAAO8c,EAAMgC,GAAYA,EAASnrC,QAAU,EAAG0pC,WAEtFX,OAAOzsC,KAAK6sC,KAIhBV,EAAA3yC,UAAAm5C,YAAA,WACE,OAAOC,qBAAqBr7C,KAAKw5B,MAKnCob,EAAA3yC,UAAAq5C,YAAA,SACE/b,EACA5zB,EACA4vC,GAEA,OAAOC,oBAAoBx7C,KAAKw5B,IAAK+F,EAAM5zB,EAAQ4vC,IAGrD3G,EAAA3yC,UAAAw5C,YAAA,SACElc,EACAj+B,EACAi6C,GAEA,OAAOG,oBAAoB17C,KAAKw5B,IAAK+F,EAAMj+B,EAAOi6C,IAKpD3G,EAAA3yC,UAAA05C,aAAA,SACE1E,EACA2E,EACAC,GAEA,OAAOC,qBAAqB97C,KAAKw5B,IAAKyd,EAAI2E,EAAKC,IAGjDjH,EAAA3yC,UAAA85C,aAAA,SACE9E,EACA2E,EACAC,EACAv6C,GAEA,OAAO06C,qBAAqBh8C,KAAKw5B,IAAKyd,EAAI2E,EAAKC,EAAKv6C,IAGtDszC,EAAA3yC,UAAAg6C,aAAA,SACEC,EACAC,EACAC,GAEAhyC,OAAsB,IAAfgyC,EAAKjwC,QACZ,IAAImpC,EAAOC,EAAa6G,GACxB,IACE,OAAOC,qBAAqBr8C,KAAKw5B,IAAK0iB,EAAMC,EAAM7G,WAElDJ,OAAOzsC,KAAK6sC,KAIhBV,EAAA3yC,UAAAq6C,eAAA,SACEJ,EACAC,EACAI,GAEA,OAAOC,uBAAuBx8C,KAAKw5B,IAAK0iB,EAAMC,EAAMI,IAGtD3H,EAAA3yC,UAAAw6C,WAAA,SACExF,EACA2E,EACAc,GAEA,OAAOC,mBAAmB38C,KAAKw5B,IAAKyd,EAAI2E,EAAKc,IAK/C9H,EAAA3yC,UAAA26C,UAAA,SACEh8C,EACA0O,EACAutC,EACAzsC,GAEA,IAAIylC,EAAO71C,KAAK81C,kBAAkBl1C,GAClC,OAAOk8C,mBAAmB98C,KAAKw5B,IAAKqc,EAAMvmC,EAAMutC,EAAU,EAAI,EAAGzsC,IAGnEwkC,EAAA3yC,UAAA86C,aAAA,SACEn8C,GAEA,IAAIi1C,EAAO71C,KAAK81C,kBAAkBl1C,GAClCo8C,sBAAsBh9C,KAAKw5B,IAAKqc,IAGlCjB,EAAA3yC,UAAAg7C,YAAA,SACEr8C,EACA0O,EACA4tC,EACA/iC,GAEA,IAAI07B,EAAO71C,KAAK81C,kBAAkBl1C,GAC9B00C,EAAOS,EAAcmH,GACzB,IACE,OAAOC,qBAAqBn9C,KAAKw5B,IAAKqc,EAAMvmC,EAAMgmC,EAAM4H,EAAWA,EAAS/wC,OAAS,EAAGgO,WAExF+6B,OAAOzsC,KAAK6sC,KAIhBV,EAAA3yC,UAAAm7C,eAAA,SAAex8C,GACb,IAAIi1C,EAAO71C,KAAK81C,kBAAkBl1C,GAClCy8C,wBAAwBr9C,KAAKw5B,IAAKqc,IAKpCjB,EAAA3yC,UAAAq7C,qBAAA,SAAqB3H,EAAoBC,EAAiCz7B,GACxEna,KAAK60C,qBAAuBzqC,QAAQpK,KAAK60C,sBACzC,IAAI0I,EAAWv9C,KAAK81C,kBAAkB,IAClCR,EAAOS,EAAcH,GACzB,IACE,IAAI4H,EAAUxH,yBAAyBh2C,KAAKw5B,IAAK+jB,EAAU5H,EAAQL,EAAMM,EAAaA,EAAWzpC,OAAS,GAC1G,OAAOgxC,qBAAqBn9C,KAAKw5B,IAAK+jB,EAAUC,EAAS,EAAG,EAAGrjC,WAE/D+6B,OAAOzsC,KAAK6sC,KAIhBV,EAAA3yC,UAAAw7C,wBAAA,WACEz9C,KAAK60C,sBAAwBzqC,OAAOpK,KAAK60C,sBACzC,IAAI0I,EAAWv9C,KAAK81C,kBAAkB,IACtCuH,wBAAwBr9C,KAAKw5B,IAAK+jB,GAClCnH,4BAA4Bp2C,KAAKw5B,IAAK+jB,IAGxC3I,EAAA3yC,UAAAy7C,kBAAA,SACE51B,EACAzP,GAEA,IAAIslC,EAAQ39C,KAAK81C,kBAAkBhuB,GAC/B81B,EAAQ59C,KAAK81C,kBAAkBz9B,GACnC,OAAOwlC,2BAA2B79C,KAAKw5B,IAAKmkB,EAAOC,IAGrDhJ,EAAA3yC,UAAA67C,eAAA,SACEh2B,EACAzP,GAEA,IAAIslC,EAAQ39C,KAAK81C,kBAAkBhuB,GAC/B81B,EAAQ59C,KAAK81C,kBAAkBz9B,GACnC,OAAO0lC,wBAAwB/9C,KAAKw5B,IAAKmkB,EAAOC,IAGlDhJ,EAAA3yC,UAAA+7C,gBAAA,SACEl2B,EACAzP,GAEA,IAAIslC,EAAQ39C,KAAK81C,kBAAkBhuB,GAC/B81B,EAAQ59C,KAAK81C,kBAAkBz9B,GACnC,OAAO4lC,yBAAyBj+C,KAAKw5B,IAAKmkB,EAAOC,IAGnDhJ,EAAA3yC,UAAAi8C,gBAAA,SACEp2B,EACAzP,GAEA,IAAIslC,EAAQ39C,KAAK81C,kBAAkBhuB,GAC/B81B,EAAQ59C,KAAK81C,kBAAkBz9B,GACnC,OAAO8lC,yBAAyBn+C,KAAKw5B,IAAKmkB,EAAOC,IAGnDhJ,EAAA3yC,UAAAm8C,aAAA,SAAa/lC,GACX,IAAIw9B,EAAO71C,KAAK81C,kBAAkBz9B,GAClCgmC,sBAAsBr+C,KAAKw5B,IAAKqc,IAGlCjB,EAAA3yC,UAAAq8C,kBAAA,SACEx2B,EACAy2B,EACAC,EACAC,GAEA,IAAId,EAAQ39C,KAAK81C,kBAAkBhuB,GAC/B81B,EAAQ59C,KAAK81C,kBAAkByI,GAC/BG,EAAQ1+C,KAAK81C,kBAAkB0I,GACnC,OAAOG,2BAA2B3+C,KAAKw5B,IAAKmkB,EAAOC,EAAOc,EAAOD,IAGnE7J,EAAA3yC,UAAA28C,eAAA,SACE92B,EACAy2B,EACAC,GAEA,IAAIb,EAAQ39C,KAAK81C,kBAAkBhuB,GAC/B81B,EAAQ59C,KAAK81C,kBAAkByI,GAC/BG,EAAQ1+C,KAAK81C,kBAAkB0I,GACnC,OAAOK,wBAAwB7+C,KAAKw5B,IAAKmkB,EAAOC,EAAOc,IAGzD9J,EAAA3yC,UAAA68C,gBAAA,SACEh3B,EACAy2B,EACAC,EACAO,QAAA,IAAAA,OAAA,GAEA,IAAIpB,EAAQ39C,KAAK81C,kBAAkBhuB,GAC/B81B,EAAQ59C,KAAK81C,kBAAkByI,GAC/BG,EAAQ1+C,KAAK81C,kBAAkB0I,GACnC,OAAOQ,yBAAyBh/C,KAAKw5B,IAAKmkB,EAAOC,EAAOc,EAAOK,IAGjEnK,EAAA3yC,UAAAg9C,gBAAA,SACEn3B,EACAy2B,EACAC,EACAU,GAEA,IAAIvB,EAAQ39C,KAAK81C,kBAAkBhuB,GAC/B81B,EAAQ59C,KAAK81C,kBAAkByI,GAC/BG,EAAQ1+C,KAAK81C,kBAAkB0I,GACnC,OAAOW,yBAAyBn/C,KAAKw5B,IAAKmkB,EAAOC,EAAOc,EAAOQ,IAMjEtK,EAAA3yC,UAAAm9C,UAAA,SACEC,EACAC,EACAC,EACA5hB,EACA7Q,EACAiyB,QADA,IAAAjyB,MAAA,WACA,IAAAiyB,OAAA,GAQA,IANA,IAAIlJ,EAAO71C,KAAK81C,kBAAkBhpB,GAC9BrJ,EAAI87B,EAASpzC,OACbqzC,EAAO,IAAIv4C,MAAawc,GACxBg8B,EAAO,IAAIx4C,MAAUwc,GACrBi8B,EAAO,IAAIz4C,MAAqBwc,GAChCk8B,EAAO,IAAI14C,MAAawc,GACnBpjB,EAAI,EAAGA,EAAIojB,IAAKpjB,EAAG,CAC1B,IAAI6nB,EAASq3B,EAASl/C,GAAG6nB,OACrBC,EAASo3B,EAASl/C,GAAG8nB,OACzBq3B,EAAKn/C,GAAKk1C,EAAartB,GACvBu3B,EAAKp/C,GAAK,EACVq/C,EAAKr/C,GAAKs9B,GAAUpwB,EAAAnE,OAAO4gB,OACvBhqB,KAAKqD,IAAIu8C,QAAQz3B,GAAS03B,SAAS13B,IACnCnoB,KAAKoD,IAAIw8C,QAAQz3B,IACrBw3B,EAAKt/C,GAAK6nB,EAAO/b,OAEnB,IAAI2zC,EAAQ/J,EAAcyJ,GACtBO,EAAQxK,EAAakK,GACrBO,EAAQjK,EAAc2J,GACtBO,EAAQlK,EAAc4J,GAC1B,IACEO,mBAAmBlgD,KAAKw5B,IAAK6lB,EAASC,EAASzJ,EAAMiK,EAAOC,EAAOC,EAAOC,EAAOx8B,EAAGs7B,WAEpF7J,OAAOzsC,KAAKw3C,GACZ/K,OAAOzsC,KAAKu3C,GACZ9K,OAAOzsC,KAAKs3C,GACZ7K,OAAOzsC,KAAKq3C,GACZ,IAASz/C,EAAIojB,EAAI,EAAGpjB,GAAK,IAAKA,EAAG60C,OAAOzsC,KAAK+2C,EAAKn/C,MAItDu0C,EAAA3yC,UAAAk+C,iBAAA,SACEd,EACAC,EACAc,GAIA,IAFA,IAAItF,EAAWsF,EAAMj0C,OACjBiI,EAAQ,IAAInN,MAAa6zC,GACpBz6C,EAAI,EAAGA,EAAIy6C,IAAYz6C,EAC9B+T,EAAM/T,GAAKL,KAAK81C,kBAAkBsK,EAAM//C,IAE1C,IAAIi1C,EAAOS,EAAc3hC,GACzB,IACEisC,0BAA0BrgD,KAAKw5B,IAAK6lB,EAASC,EAAShK,EAAMwF,WAE5D5F,OAAOzsC,KAAK6sC,KAIhBV,EAAA3yC,UAAAq+C,SAAA,SAASC,GACPC,kBAAkBxgD,KAAKw5B,IAAK+mB,IAG9B3L,EAAA3yC,UAAAw+C,iBAAA,WACE,OAAOC,6BAGT9L,EAAA3yC,UAAA0+C,iBAAA,SAAiBC,QAAA,IAAAA,MAAA,GACfC,0BAA0BD,IAG5BhM,EAAA3yC,UAAA6+C,eAAA,WACE,OAAOC,2BAGTnM,EAAA3yC,UAAA++C,eAAA,SAAeJ,QAAA,IAAAA,MAAA,GACbK,wBAAwBL,IAG1BhM,EAAA3yC,UAAAi/C,aAAA,SAAaC,QAAA,IAAAA,OAAA,GACXC,sBAAsBD,IAGxBvM,EAAA3yC,UAAAo/C,YAAA,WACE,OAAOC,2BAA2BthD,KAAKw5B,MAGzCob,EAAA3yC,UAAAs/C,YAAA,SAAYC,GACVC,2BAA2BzhD,KAAKw5B,IAAKgoB,IAGvC5M,EAAA3yC,UAAAy/C,SAAA,SAASnB,QAAA,IAAAA,MAAA,GACHA,EACFoB,0BAA0BpB,EAAMvgD,KAAKw5B,KAErCooB,wBAAwB5hD,KAAKw5B,MAIjCob,EAAA3yC,UAAA4/C,UAAA,SAAUC,EAAkBvB,QAAA,IAAAA,MAAA,GAG1B,IAFA,IAAIzF,EAAWgH,EAAO31C,OAClBiI,EAAQ,IAAInN,MAAa6zC,GACpBz6C,EAAI,EAAGA,EAAIy6C,IAAYz6C,EAC9B+T,EAAM/T,GAAK0hD,EAAYD,EAAOzhD,IAEhC,IAAIi1C,EAAOS,EAAc3hC,GACzB,IACMmsC,EACFyB,2BAA2BzB,EAAMvgD,KAAKw5B,IAAK8b,EAAMwF,GAEjDmH,yBAAyBjiD,KAAKw5B,IAAK8b,EAAMwF,WAG3C5F,OAAOzsC,KAAK6sC,GACZ,IAASj1C,EAAIy6C,EAAUz6C,GAAK,IAAKA,EAAG60C,OAAOzsC,KAAK2L,EAAM/T,MAM1Du0C,EAAA3yC,UAAAigD,qBAAA,SAAqB/wC,GAEnB,IAAIgxC,EAAwBzB,4BACxB0B,EAAsBrB,0BACtBsB,EAAoBC,wBACxBzB,0BAA0B,GAC1BI,wBAAwB,GACxBG,uBAAsB,GAGtB,IAAI9xC,EAAOizC,2BAA2BpxC,GAClCovC,EAAOvgD,KAAKs9C,qBAAqBhuC,EAAM,KAAM6B,GAC7CiD,EAAQpU,KAAK80C,sBAkBjB,OAjBK1gC,IACHpU,KAAK80C,sBAAwB1gC,EAAQ2hC,EAAc,CACjD/1C,KAAK81C,kBAAkB,UACvB91C,KAAK81C,kBAAkB,iBAG3BkM,2BAA2BzB,EAAMvgD,KAAKw5B,IAAKplB,EAAO,GAClDjD,EAAOqxC,yBAAyBjC,GAC5BkC,yBAAyBtxC,IAAS4uB,EAAa2iB,SACjDvxC,EAAOwxC,wBAAwBxxC,IAEjCnR,KAAKy9C,0BAGLoD,0BAA0BsB,GAC1BlB,wBAAwBmB,GACxBhB,sBAAsBiB,GACflxC,GAGTyjC,EAAA3yC,UAAA2gD,SAAA,WACE,OAA4C,GAArCC,wBAAwB7iD,KAAKw5B,MAGtCob,EAAA3yC,UAAA6gD,UAAA,WACEC,yBAAyB/iD,KAAKw5B,MAGhCob,EAAA3yC,UAAA+gD,SAAA,SAASC,GACP,IAAI5M,EAAMr2C,KAAKi1C,IACf7qC,OAAOgrC,0BAA4B,IACnC,IAAIS,EAAOkM,EAAYkB,GACnBC,EAAmB,EACnBC,EAAsB,EAC1B,IACEC,gCAAgC/M,EAAKr2C,KAAKw5B,IAAKqc,GAC/CqN,EAAYG,EAAQhN,GACpB,IAAIiN,EAAcD,EAAQhN,EAAM,GAChC8M,EAAeE,EAAQhN,EAAM,GAC7B,IAAIkN,EAAM,IAAIC,EAGd,OAFAD,EAAIE,OA2jBV,SAAoBxL,EAAY9rC,GAE9B,IADA,IAAIo3C,EAAM,IAAI17C,WAAWsE,GAChB9L,EAAW,EAAGA,EAAI8L,IAAU9L,EACnCkjD,EAAIljD,GAAK03C,KAASE,EAAM53C,GAE1B,OAAOkjD,EAhkBUG,CAAWR,EAAWI,GACnCC,EAAInoB,UAAYuoB,EAAWR,GACpBI,UAEH1N,GAAMX,OAAOzsC,KAAKotC,GAClBqN,GAAWhO,OAAOzsC,KAAKy6C,GACvBC,GAAcjO,OAAOzsC,KAAK06C,KAIlCvO,EAAA3yC,UAAA2hD,OAAA,WACE,MAAM,IAAIt0B,MAAM,oBAGlBslB,EAAA3yC,UAAA4hD,QAAA,WACE,MAAM,IAAIv0B,MAAM,oBAKVslB,EAAA3yC,UAAA6zC,kBAAR,SAA0BgO,GACxB,GAAW,MAAPA,EAAa,OAAO,EACxB,IAAI/O,EAAgB/0C,KAAK+0C,cACzB,GAAIA,EAAc9rB,IAAI66B,GAAM,OAAc/O,EAAc7zC,IAAI4iD,GAC5D,IAAI7L,EAAM8J,EAAY+B,GAEtB,OADA/O,EAAcv3B,IAAIsmC,EAAK7L,GAChBA,GAGTrD,EAAA3yC,UAAA8hD,QAAA,mBACE35C,OAAOpK,KAAKw5B,SACZ,IAAgB,IAAAhC,EAAAhM,EAAAxrB,KAAK+0C,cAAc1gC,UAAQgd,EAAAmG,EAAAxoB,QAAAqiB,EAAA3F,KAAA2F,EAAAmG,EAAAxoB,OAAA,CAAtC,IAAIipC,EAAG5mB,EAAA/vB,MAAiC4zC,OAAOzsC,KAAKwvC,qGACzDj4C,KAAK+0C,cAAgB,IAAI3tC,IACzB8tC,OAAOzsC,KAAKzI,KAAKi1C,KACjBC,OAAOzsC,KAAKzI,KAAK80C,uBACjB90C,KAAK80C,sBAAwB,EAC7BkP,uBAAuBhkD,KAAKw5B,KAC5Bx5B,KAAKw5B,IAAM,GAGbob,EAAA3yC,UAAAgiD,eAAA,WACE,OAAOC,EAASviD,OAAO3B,OAGzB40C,EAAA3yC,UAAAkiD,gBAAA,SACEhzC,EACAizC,EACAC,GAEA,QAHA,IAAAD,OAAA,QACA,IAAAC,MAAgBjhD,IAAIkhD,WAEhBD,EAAW,EAAG,OAAO,EAGzB,IAAIE,EACAC,EAEJ,OALAH,GAAY,EAKJ5B,yBAAyBtxC,IAC/B,KAAK4uB,EAAa0kB,MAChB,OAAQlC,2BAA2BpxC,IACjC,KAAK2uB,EAAW15B,IACd,OAAOpG,KAAKoD,IAAIshD,0BAA0BvzC,IAE5C,KAAK2uB,EAAWz5B,IACd,OAAOrG,KAAKqD,IACVshD,6BAA6BxzC,GAC7ByzC,8BAA8BzzC,IAGlC,KAAK2uB,EAAWj5B,IACd,OAAO7G,KAAK6D,IAAIghD,0BAA0B1zC,IAE5C,KAAK2uB,EAAWh5B,IACd,OAAO9G,KAAK8D,IAAIghD,0BAA0B3zC,IAE5C,KAAK2uB,EAAW/4B,KAEd,OAAO,EAET,QACE,MAAM,IAAIuoB,MAAM,0BAItB,KAAKyQ,EAAaglB,SAChB,OAAOrN,kBAAkB13C,KAAKw5B,IAC5BwrB,0BAA0B7zC,GAC1BoxC,2BAA2BpxC,IAG/B,KAAK4uB,EAAaklB,UAChB,IAAIC,EAAaC,0BAA0Bh0C,GAC3C,IAAK+zC,EAAY,MACjB,OAAOpN,mBAAmB93C,KAAKw5B,IAAK0rB,EAAY3C,2BAA2BpxC,IAE7E,KAAK4uB,EAAaqlB,KAChB,KAAMb,EAAUvkD,KAAKmkD,gBAAgBkB,oBAAoBl0C,GAAOizC,EAAeC,IAC7E,MAEF,OACEiB,sBAAsBn0C,GAClBonC,oBAAoBv4C,KAAKw5B,IACvB+rB,sBAAsBp0C,GACtBq0C,uBAAuBr0C,GACvBoxC,2BAA2BpxC,GAC3BozC,GAEFpM,cAAcn4C,KAAKw5B,IACjB+rB,sBAAsBp0C,GACtBs0C,sBAAsBt0C,GAAQ,EAAI,EAClCq0C,uBAAuBr0C,GACvBu0C,sBAAsBv0C,GACtBoxC,2BAA2BpxC,GAC3BozC,GAIV,KAAKxkB,EAAa4lB,MAChB,KAAMpB,EAAUvkD,KAAKmkD,gBAAgByB,uBAAuBz0C,GAAOizC,EAAeC,IAChF,MAEF,OAAOnN,eAAel3C,KAAKw5B,IAAKqsB,oBAAoB10C,GAAOozC,GAE7D,KAAKxkB,EAAa+lB,OAChB,KAAMvB,EAAUvkD,KAAKmkD,gBAAgB4B,uBAAuB50C,GAAOizC,EAAeC,IAChF,MAEF,KAAMG,EAAUxkD,KAAKmkD,gBAAgB6B,wBAAwB70C,GAAOizC,EAAeC,IACjF,MAEF,OAAOjN,gBAAgBp3C,KAAKw5B,IAAKysB,qBAAqB90C,GAAOozC,EAASC,GAG1E,OAAO,GAKT5P,EAAA3yC,UAAAikD,iBAAA,SAAiBtlD,GACf,IAAIi1C,EAAOkM,EAAYnhD,GACvB,IACE,OAAOulD,oCAAoCnmD,KAAKw5B,IAAKqc,WAErDX,OAAOzsC,KAAKotC,KAIhBjB,EAAA3yC,UAAAmkD,iBAAA,SAAiB5tB,GACf,OAAOmrB,EAAW0C,oCAAoCrmD,KAAKw5B,IAAKhB,KAGlEoc,EAAA3yC,UAAAq5B,iBAAA,SACEilB,EACApvC,EACAm1C,EACAC,EACAC,GAEAC,kCAAkClG,EAAMpvC,EAAMm1C,EAAWC,EAAYC,IAzUvD5R,EAAA8R,kBAAkC,EA2UpD9R,EA14BA,GA84BA,SAAgB+R,EAAgBx1C,GAC9B,OAAOsxC,yBAAyBtxC,GA/4BrBzR,EAAAk1C,SA84Bbl1C,EAAAinD,kBAIAjnD,EAAAknD,kBAAA,SAAkCz1C,GAChC,OAAOoxC,2BAA2BpxC,IAGpCzR,EAAAmnD,iBAAA,SAAiC11C,GAC/B,OAAOuzC,0BAA0BvzC,IAGnCzR,EAAAonD,oBAAA,SAAoC31C,GAClC,OAAOwzC,6BAA6BxzC,IAGtCzR,EAAAqnD,qBAAA,SAAqC51C,GACnC,OAAOyzC,8BAA8BzzC,IAGvCzR,EAAAsnD,iBAAA,SAAiC71C,GAC/B,OAAO0zC,0BAA0B1zC,IAGnCzR,EAAAunD,iBAAA,SAAiC91C,GAC/B,OAAO2zC,0BAA0B3zC,IAGnCzR,EAAAwnD,iBAAA,SAAiC/1C,GAC/B,OAAO6zC,0BAA0B7zC,IAGnCzR,EAAAynD,iBAAA,SAAiCh2C,GAC/B,OAAOi2C,0BAA0Bj2C,IAGnCzR,EAAA2nD,iBAAA,SAAiCl2C,GAC/B,OAAOm2C,0BAA0Bn2C,IAGnCzR,EAAA6nD,WAAA,SAA2Bp2C,GACzB,OAAOq2C,uBAAuBr2C,IAGhCzR,EAAA+nD,iBAAA,SAAiCt2C,GAC/B,OAAOwyC,EAAWwB,0BAA0Bh0C,KAG9CzR,EAAAgoD,YAAA,SAA4Bv2C,GAC1B,OAAO80C,qBAAqB90C,IAG9BzR,EAAAioD,cAAA,SAA8Bx2C,GAC5B,OAAO40C,uBAAuB50C,IAGhCzR,EAAAkoD,eAAA,SAA+Bz2C,GAC7B,OAAO60C,wBAAwB70C,IAGjCzR,EAAAmoD,WAAA,SAA2B12C,GACzB,OAAO00C,oBAAoB10C,IAG7BzR,EAAAooD,cAAA,SAA8B32C,GAC5B,OAAOy0C,uBAAuBz0C,IAGhCzR,EAAAqoD,aAAA,SAA6B52C,GAC3B,OAAOo0C,sBAAsBp0C,IAG/BzR,EAAAsoD,cAAA,SAA8B72C,GAC5B,OAAOq0C,uBAAuBr0C,IAGhCzR,EAAAuoD,WAAA,SAA2B92C,GACzB,OAAOk0C,oBAAoBl0C,IAG7BzR,EAAAwoD,aAAA,SAA6B/2C,GAC3B,OAAOs0C,sBAAsBt0C,IAG/BzR,EAAAyoD,cAAA,SAA8Bh3C,GAC5B,OAAOi3C,uBAAuBj3C,IAGhCzR,EAAA2oD,eAAA,SAA+Bl3C,GAC7B,OAAOm3C,wBAAwBn3C,IAGjCzR,EAAA6oD,YAAA,SAA4Bp3C,GAC1B,OAAOq3C,qBAAqBr3C,IAG9BzR,EAAA+oD,cAAA,SAA8Bt3C,GAC5B,OAAOu3C,uBAAuBv3C,IAGhCzR,EAAAipD,aAAA,SAA6Bx3C,GAC3B,OAAOwyC,EAAWiF,sBAAsBz3C,KAG1CzR,EAAAmpD,mBAAA,SAAmC13C,GACjC,OAAO23C,6BAA6B33C,IAGtCzR,EAAAqpD,cAAA,SAA8B53C,EAAqBqnB,GACjD,OAAOwwB,uBAAuB73C,EAAMqnB,IAGtC94B,EAAAupD,eAAA,SAA+B93C,GAC7B,OAAO+3C,wBAAwB/3C,IAGjCzR,EAAAypD,UAAA,SAA0Bh4C,GACxB,OAAOi4C,qBAAqBj4C,IAG9BzR,EAAA2pD,WAAA,SAA2Bl4C,GACzB,OAAOm4C,sBAAsBn4C,IAG/BzR,EAAA6pD,YAAA,SAA4Bp4C,GAC1B,OAAOwyC,EAAW6F,qBAAqBr4C,KAGzCzR,EAAA+pD,YAAA,SAA4Bt4C,GAC1B,OAAOu4C,qBAAqBv4C,IAG9BzR,EAAAiqD,aAAA,SAA6Bx4C,GAC3B,OAAOwyC,EAAWiG,sBAAsBz4C,KAG1CzR,EAAAmqD,kBAAA,SAAkC14C,GAChC,OAAO24C,2BAA2B34C,IAGpCzR,EAAAqqD,cAAA,SAA8B54C,GAC5B,OAAO64C,yBAAyB74C,IAGlCzR,EAAAuqD,cAAA,SAA8B94C,GAC5B,OAAO+4C,0BAA0B/4C,IAGnCzR,EAAAyqD,mBAAA,SAAmCh5C,GACjC,OAAOi5C,4BAA4Bj5C,IAGrCzR,EAAA2qD,aAAA,SAA6Bl5C,GAC3B,OAAOm5C,sBAAsBn5C,IAG/BzR,EAAA6qD,eAAA,SAA+Bp5C,GAC7B,OAAOwxC,wBAAwBxxC,IAGjCzR,EAAA8qD,cAAA,SAA8Br5C,GAC5B,OAAOwyC,EAAW8G,uBAAuBt5C,KAG3CzR,EAAAgrD,oBAAA,SAAoCv5C,GAClC,OAAOw5C,4BAA4Bx5C,IAGrCzR,EAAAkrD,eAAA,SAA+Bz5C,EAAqBqnB,GAClD,OAAOqyB,wBAAwB15C,EAAMqnB,IAGvC94B,EAAAorD,UAAA,SAA0B35C,GACxB,OAAO45C,mBAAmB55C,IAG5BzR,EAAAsrD,oBAAA,SAAoC75C,GAClC,OAAO85C,4BAA4B95C,IAGrCzR,EAAAwrD,eAAA,SAA+B/5C,EAAqBqnB,GAClD,OAAO2yB,wBAAwBh6C,EAAMqnB,IAGvC94B,EAAA0rD,YAAA,SAA4Bj6C,GAC1B,OAAOwyC,EAAW0H,4BAA4Bl6C,KAKhDzR,EAAA4rD,gBAAA,SAAgC/K,GAC9B,OAAOiC,yBAAyBjC,IAGlC7gD,EAAA6rD,gBAAA,SAAgChL,GAC9B,OAAOoD,EAAW6H,yBAAyBjL,KAG7C7gD,EAAA+rD,sBAAA,SAAsClL,GACpC,OAAOmL,8BAA8BnL,IAGvC7gD,EAAAisD,qBAAA,SAAqCpL,EAAmB/nB,GACtD,OAAOozB,0BAA0BrL,EAAM/nB,IAGzC94B,EAAAmsD,sBAAA,SAAsCtL,GACpC,OAAOuL,2BAA2BvL,IAGpC,IAAA2D,EAAA,WAYE,SAAAA,KAoCF,OA3CSA,EAAAviD,OAAP,SAAchC,GACZ,IAAIosD,EAAW,IAAI7H,EAGnB,OAFA6H,EAASpsD,OAASA,EAClBosD,EAASvyB,IAAMwyB,gBAAgBrsD,EAAO65B,KAC/BuyB,GAKT7H,EAAAjiD,UAAAgqD,SAAA,SAASphD,GACP,OAAOqhD,kBAAkBlsD,KAAKw5B,IAAK3uB,IAGrCq5C,EAAAjiD,UAAAkqD,UAAA,SACEC,EACAC,EACAp3C,EACApK,QADA,IAAAoK,MAAA,QACA,IAAApK,MAAA,GAEAyhD,mBAAmBF,EAAMC,EAAIp3C,EAAWpK,IAG1Cq5C,EAAAjiD,UAAAsqD,mBAAA,SAAmB1hD,EAAqBoK,GACtC,OAAOu3C,4BAA4BxsD,KAAKw5B,IAAK3uB,EAAMoK,IAGrDivC,EAAAjiD,UAAAwqD,mBAAA,SACEL,EACAC,EACAK,EACA7hD,QAAA,IAAAA,MAAA,GAEA,IAAIyqC,EAAOS,EAAc2W,GACzB,IACEC,4BAA4BP,EAAMC,EAAI/W,EAAMoX,EAAQvgD,OAAQtB,WAE5DqqC,OAAOzsC,KAAK6sC,KAIhB4O,EAAAjiD,UAAA2qD,iBAAA,SAAiBC,EAAyBC,GACxC,OAAOC,0BAA0B/sD,KAAKw5B,IAAKqzB,EAAOC,IAEtD5I,EAhDA,GA4FA,SAAS3O,EAAayX,GACpB,IAAKA,EAAK,OAAO,EAIjB,IAHA,IAAIC,EAAYD,EAAI7gD,OAChB8rC,EAAM/C,OAAOC,SAAS8X,GACtBpR,EAAM5D,EACD53C,EAAI,EAAGA,EAAI4sD,IAAa5sD,EAC/By2C,MAAU+E,IAAOmR,EAAI3sD,IAEvB,OAAO43C,EAGT,SAASlC,EAAcmX,GACrB,IAAKA,EAAM,OAAO,EAGlB,IAFA,IAAIjV,EAAM/C,OAAOC,SAAS+X,EAAK/gD,QAAU,GACrC0vC,EAAM5D,EACD53C,EAAI,EAAGojB,EAAIypC,EAAK/gD,OAAQ9L,EAAIojB,IAAKpjB,EAAG,CAC3C,IAAI8sD,EAAMD,EAAK7sD,GAEfy2C,MAAU+E,EAAyB,IAAdsR,GACrBrW,MAAU+E,EAAM,EAAKsR,GAAS,EAAK,KACnCrW,MAAU+E,EAAM,EAAKsR,GAAQ,GAAM,KACnCrW,MAAU+E,EAAM,EAAKsR,IAAQ,IAC7BtR,GAAO,EAET,OAAO5D,EAGT,SAASV,EAAc6V,GACrB,OAAOrX,EAAcqX,GA2BvB,SAASrL,EAAY+B,GACnB,GAAW,MAAPA,EAAa,OAAO,EAIxB,IAHA,IAAI7L,EAAM/C,OAAOC,SA1BnB,SAA0B2O,GAExB,IADA,IAAI53C,EAAM,EACD7L,EAAI,EAAGojB,EAAIqgC,EAAI33C,OAAQ9L,EAAIojB,IAAKpjB,EAAG,CAC1C,IAAIgtD,EAAIvJ,EAAIv3C,WAAWlM,GACnBgtD,GAAK,OAAUA,GAAK,OAAUhtD,EAAI,EAAIojB,IACxC4pC,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBvJ,EAAIv3C,aAAalM,IAEpDgtD,GAAK,MACLnhD,EAEFA,GADSmhD,GAAK,KACP,EACEA,GAAK,MACP,EACEA,GAAK,QACP,EACEA,GAAK,SACP,EAEA,EAGX,OAAOnhD,EAKmBohD,CAAiBxJ,GAAO,GAE9CjI,EAAM5D,EACD53C,EAAI,EAAGojB,EAAIqgC,EAAI33C,OAAQ9L,EAAIojB,IAAKpjB,EAAG,CAC1C,IAAIgtD,EAAIvJ,EAAIv3C,WAAWlM,GACnBgtD,GAAK,OAAUA,GAAK,OAAUhtD,EAAI,EAAIojB,IACxC4pC,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBvJ,EAAIv3C,aAAalM,IAEpDgtD,GAAK,IACPvW,MAAU+E,IAAOwR,GACRA,GAAK,MACdvW,MAAU+E,IAAQ,IAASwR,IAAM,GACjCvW,MAAU+E,IAAQ,IAAqB,GAAZwR,IAClBA,GAAK,OACdvW,MAAU+E,IAAQ,IAASwR,IAAM,IACjCvW,MAAU+E,IAAQ,IAASwR,IAAO,EAAK,IACvCvW,MAAU+E,IAAQ,IAAqB,GAAZwR,IAClBA,GAAK,SACdvW,MAAU+E,IAAQ,IAASwR,IAAM,IACjCvW,MAAU+E,IAAQ,IAASwR,IAAM,GAAM,IACvCvW,MAAU+E,IAAQ,IAASwR,IAAO,EAAK,IACvCvW,MAAU+E,IAAQ,IAAqB,GAAZwR,IAClBA,GAAK,UACdvW,MAAU+E,IAAQ,IAASwR,IAAM,IACjCvW,MAAU+E,IAAQ,IAASwR,IAAM,GAAM,IACvCvW,MAAU+E,IAAQ,IAASwR,IAAM,GAAM,IACvCvW,MAAU+E,IAAQ,IAASwR,IAAO,EAAK,IACvCvW,MAAU+E,IAAQ,IAAqB,GAAZwR,KAE3BvW,MAAU+E,IAAQ,IAASwR,IAAM,IACjCvW,MAAU+E,IAAQ,IAASwR,IAAM,GAAM,IACvCvW,MAAU+E,IAAQ,IAASwR,IAAM,GAAM,IACvCvW,MAAU+E,IAAQ,IAASwR,IAAM,GAAM,IACvCvW,MAAU+E,IAAQ,IAASwR,IAAO,EAAK,IACvCvW,MAAU+E,IAAQ,IAAqB,GAAZwR,IAI/B,OADAvW,MAAU+E,EAAK,GACR5D,EAGT,SAASoL,EAAQpL,GACf,OACGF,KAASE,GACTF,KAASE,EAAM,IAAO,EACtBF,KAASE,EAAM,IAAM,GACrBF,KAASE,EAAM,IAAM,GAY1B,SAAgB0L,EAAW1L,GACzB,IAAKA,EAAK,OAAO,KAKjB,IAJA,IAEIsV,EACAC,EAASC,EAASC,EAASC,EAH3BC,EAAM,IAAI3mD,MAIPsmD,EAAKxV,KAASE,MACR,IAALsV,GAINC,EAAuB,GAAlBzV,KAASE,KACK,MAAT,IAALsV,IAILE,EAAuB,GAAlB1V,KAASE,KACK,MAAT,IAALsV,GACHA,GAAY,GAALA,IAAY,GAAOC,GAAM,EAAKC,GAErCC,EAAuB,GAAlB3V,KAASE,KACK,MAAT,IAALsV,GACHA,GAAY,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAEjDC,EAAuB,GAAlB5V,KAASE,KAEZsV,EADiB,MAAT,IAALA,IACS,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAGlD,EAALJ,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAD/C,GAAlB5V,KAASE,OAKpB2V,EAAIlhD,KAAK6gD,IApBPK,EAAIlhD,MAAY,GAAL6gD,IAAY,EAAKC,IAL5BI,EAAIlhD,KAAK6gD,GAmCb,OAAOvmD,OAAO6mD,eAAeD,GA1PlBluD,EAAAwkD,WA+MbxkD,EAAAikD,aA+CA,IAAAH,EAAA,aAAa9jD,EAAA8jD,eAQb9jD,EAAAouD,yBAAA,SAAgBA,EAAyB38C,GAEvC,GAAIoxC,2BAA2BpxC,IAAS2uB,EAAWiuB,YAAa,OAAO,EAEvE,OAAQtL,yBAAyBtxC,IAC/B,KAAK4uB,EAAaguB,YAClB,KAAKhuB,EAAa2iB,OAAQ,OAAO,EACjC,KAAK3iB,EAAaiuB,MAAO,OAA2C,GAApClE,2BAA2B34C,GAC3D,KAAK4uB,EAAakuB,MAChB,IAAKrF,sBAAsBz3C,GAAO,CAChC,IAAI+8C,EAAcpF,6BAA6B33C,GAC/C,OAAO+8C,EAAc,GAAKJ,EAAyB9E,uBAAuB73C,EAAM+8C,EAAc,KAIpG,OAAO,GAITxuD,EAAAyuD,SAAA,SAA4Bh9C,EAAqBi9C,EAASrlD,GACxD,OAAQ49C,EAAgBx1C,IACtB,KAAK4uB,EAAakuB,MAChB,IAAK,IAAI5tD,EAAI,EAAGyB,EAAIgnD,6BAA6B33C,GAAO9Q,EAAIyB,IAAKzB,EAC/D0I,EAAMigD,uBAAuB73C,EAAM9Q,GAAI+tD,GAEzC,MAEF,KAAKruB,EAAasuB,GAChBtlD,EAAMmgD,wBAAwB/3C,GAAOi9C,GACrCrlD,EAAMqgD,qBAAqBj4C,GAAOi9C,GAClC,IAAIr1C,EAAUuwC,sBAAsBn4C,GAChC4H,GAAShQ,EAAMgQ,EAASq1C,GAC5B,MAEF,KAAKruB,EAAauuB,KAChBvlD,EAAM2gD,qBAAqBv4C,GAAOi9C,GAClC,MAEF,KAAKruB,EAAaiuB,MAChB,IAAI/4C,EAAY60C,2BAA2B34C,GACvC8D,GAAWlM,EAAMkM,EAAWm5C,GAChC,MAEF,KAAKruB,EAAawuB,OAChBxlD,EAAMylD,4BAA4Br9C,GAAOi9C,GACzC,MAEF,KAAKruB,EAAa0uB,KAChB,IAASpuD,EAAI,EAAGyB,EAAI6oD,4BAA4Bx5C,GAAO9Q,EAAIyB,IAAKzB,EAC9D0I,EAAM8hD,wBAAwB15C,EAAM9Q,GAAI+tD,GAE1C,MAEF,KAAKruB,EAAa2uB,aAChB,IAASruD,EAAI,EAAGyB,EAAI6sD,oCAAoCx9C,GAAO9Q,EAAIyB,IAAKzB,EACtE0I,EAAM6lD,gCAAgCz9C,EAAM9Q,GAAI+tD,GAElD,MAEF,KAAKruB,EAAaglB,SAChB,MAEF,KAAKhlB,EAAa8uB,SAChB9lD,EAAMu+C,0BAA0Bn2C,GAAOi9C,GACvC,MAEF,KAAKruB,EAAaklB,UAChB,MAEF,KAAKllB,EAAa+uB,UAChB/lD,EAAMgmD,2BAA2B59C,GAAOi9C,GACxC,MAEF,KAAKruB,EAAaqlB,KAChBr8C,EAAMs8C,oBAAoBl0C,GAAOi9C,GACjC,MAEF,KAAKruB,EAAaivB,MAChBjmD,EAAMy/C,qBAAqBr3C,GAAOi9C,GAClCrlD,EAAM2/C,uBAAuBv3C,GAAOi9C,GACpC,MAEF,KAAKruB,EAAakvB,UAChBlmD,EAAMmmD,yBAAyB/9C,GAAOi9C,GACtCrlD,EAAMomD,2BAA2Bh+C,GAAOi9C,GACxC,MAEF,KAAKruB,EAAaqvB,cAChBrmD,EAAMsmD,6BAA6Bl+C,GAAOi9C,GAC1CrlD,EAAMumD,kCAAkCn+C,GAAOi9C,GAC/CrlD,EAAMwmD,qCAAqCp+C,GAAOi9C,GAClD,MAEF,KAAKruB,EAAayvB,WAChBzmD,EAAM0mD,0BAA0Bt+C,GAAOi9C,GACvCrlD,EAAM2mD,+BAA+Bv+C,GAAOi9C,GAC5CrlD,EAAM4mD,8BAA8Bx+C,GAAOi9C,GAC3C,MAEF,KAAKruB,EAAa6vB,aAChB7mD,EAAM8mD,4BAA4B1+C,GAAOi9C,GACzC,MAEF,KAAKruB,EAAa+vB,YAChB/mD,EAAMgnD,2BAA2B5+C,GAAOi9C,GACxC,MAEF,KAAKruB,EAAaiwB,YAChBjnD,EAAMknD,2BAA2B9+C,GAAOi9C,GACxCrlD,EAAMmnD,6BAA6B/+C,GAAOi9C,GAC1C,MAEF,KAAKruB,EAAaowB,YAChBpnD,EAAMqnD,4BAA4Bj/C,GAAOi9C,GACzCrlD,EAAMsnD,6BAA6Bl/C,GAAOi9C,GAC1C,MAEF,KAAKruB,EAAauwB,cAChBvnD,EAAMwnD,8BAA8Bp/C,GAAOi9C,GAC3CrlD,EAAMynD,+BAA+Br/C,GAAOi9C,GAC5CrlD,EAAM0nD,8BAA8Bt/C,GAAOi9C,GAC3C,MAEF,KAAKruB,EAAa2wB,UAChB3nD,EAAM4nD,yBAAyBx/C,GAAOi9C,GACtCrlD,EAAM6nD,2BAA2Bz/C,GAAOi9C,GACxC,MAEF,KAAKruB,EAAa8wB,WAChB9nD,EAAM+nD,2BAA2B3/C,GAAOi9C,GACxCrlD,EAAMgoD,6BAA6B5/C,GAAOi9C,GAC1CrlD,EAAMioD,2BAA2B7/C,GAAOi9C,GACxC,MAEF,KAAKruB,EAAakxB,SAChB,MAEF,KAAKlxB,EAAamxB,WAChBnoD,EAAMooD,2BAA2BhgD,GAAOi9C,GACxCrlD,EAAMqoD,6BAA6BjgD,GAAOi9C,GAC1CrlD,EAAMsoD,2BAA2BlgD,GAAOi9C,GACxC,MAEF,KAAKruB,EAAauxB,WAChBvoD,EAAMwoD,2BAA2BpgD,GAAOi9C,GACxCrlD,EAAMyoD,4BAA4BrgD,GAAOi9C,GACzCrlD,EAAM0oD,2BAA2BtgD,GAAOi9C,GACxC,MAEF,KAAKruB,EAAa0kB,MAChB,MAEF,KAAK1kB,EAAa4lB,MAChB58C,EAAM68C,uBAAuBz0C,GAAOi9C,GACpC,MAEF,KAAKruB,EAAa+lB,OAChB/8C,EAAMg9C,uBAAuB50C,GAAOi9C,GACpCrlD,EAAMi9C,wBAAwB70C,GAAOi9C,GACrC,MAEF,KAAKruB,EAAa2xB,OAChB3oD,EAAMihD,yBAAyB74C,GAAOi9C,GACtCrlD,EAAMmhD,0BAA0B/4C,GAAOi9C,GACvCrlD,EAAMqhD,4BAA4Bj5C,GAAOi9C,GACzC,MAEF,KAAKruB,EAAa4xB,KAChB5oD,EAAMuhD,sBAAsBn5C,GAAOi9C,GACnC,MAEF,KAAKruB,EAAa2iB,OAChB35C,EAAM45C,wBAAwBxxC,GAAOi9C,GACrC,MAEF,KAAKruB,EAAa6xB,KAChB,IAASvxD,EAAI,EAAGyB,EAAImpD,4BAA4B95C,GAAO9Q,EAAIyB,IAAKzB,EAC9D0I,EAAMoiD,wBAAwBh6C,EAAM9Q,GAAI+tD,GAE1C,MAEF,KAAKruB,EAAa8xB,IAGlB,KAAK9xB,EAAaguB,YAChB,MAEF,QAAS3jD,QAAO,GAElB,OAAO,kFC76DT,IAAA0nD,EAAA3xD,EAAA,GAOA4xD,EAAA5xD,EAAA,IAOA,SAAkB6xD,GAKhBA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAKAA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAEAA,IAAA,gBAKAA,IAAA,cAEAA,IAAA,cAKAA,IAAA,gBAKAA,IAAA,gBA7CF,CAAkBtyD,EAAAsyD,WAAAtyD,EAAAsyD,SAAQ,KAiD1B,SAAkBC,GAChBA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,sBAEAA,IAAA,kBAEAA,IAAA,gBAEAA,IAAA,mBAEAA,IAAA,2BAEAA,IAAA,yBAEAA,IAAA,sBAvBF,CAAkBvyD,EAAAuyD,YAAAvyD,EAAAuyD,UAAS,KA0B3B,IAAMC,EAAY,IAAIrqD,WAAW,IAGjCwhB,EAAA,WAoBE,SAAAA,EAAYxb,EAAgBgH,EAAkB0mC,GAHtCv7C,KAAAmyD,mBAAkC,KAIxCnyD,KAAK6N,KAAOA,EACZ7N,KAAK6U,MAAQA,EACb7U,KAAKu7C,KAAOA,EACZv7C,KAAKoyD,SAAgBC,KAAe9W,EAAO,GAC3Cv7C,KAAKi/B,eAAiB,KACtBj/B,KAAKsyD,mBAAqB,KAC1BtyD,KAAKuyD,gBAAkBvyD,KA6Z3B,OAzZEe,OAAAC,eAAIqoB,EAAApnB,UAAA,UAAO,KAAX,WACE,OAAQjC,KAAK6N,MACX,OAAkB,OAAOwb,EAAKnmB,GAC9B,OAAmB,OAAOmmB,EAAKlmB,IAC/B,QACA,OAAmB,OAAOkmB,EAAKjmB,IAC/B,QACA,OAAmB,OAAOimB,EAAKhmB,IAC/B,OAAqB,OAAoB,IAAbrD,KAAKu7C,KAAalyB,EAAKmpC,QAAUnpC,EAAKopC,QAClE,OAAkB,OAAOppC,EAAK9lB,GAC9B,OAAmB,OAAO8lB,EAAK7lB,IAC/B,OAAmB,OAAO6lB,EAAK5lB,IAC/B,OAAmB,OAAO4lB,EAAK3lB,IAC/B,OAAqB,OAAoB,IAAb1D,KAAKu7C,KAAalyB,EAAKqpC,QAAUrpC,EAAKspC,QAClE,QACA,QAAS,OAAOtpC,EAAKjmB,sCAKzBrC,OAAAC,eAAIqoB,EAAApnB,UAAA,aAAU,KAAd,WACE,OAAa,IAATjC,KAAK6N,KAA8Bwb,EAAKupC,KACrC5yD,sCAITe,OAAAC,eAAIqoB,EAAApnB,UAAA,YAAS,KAAb,WACE,OAAO,GAAK4wD,IAAS7yD,KAAKoyD,2CAI5BrxD,OAAAC,eAAIqoB,EAAApnB,UAAA,YAAS,KAAb,WACE,IAAIg9B,EAAiBj/B,KAAKi/B,eAC1B,OAA0B,OAAnBA,IAA4BA,EAAetQ,aAAamjC,EAAAjrC,eAAe5I,4CAIhFld,OAAAC,eAAIqoB,EAAApnB,UAAA,cAAW,KAAf,WACE,IAAIg9B,EAAiBj/B,KAAKi/B,eAC1B,OAA0B,OAAnBA,GAA2BA,EAAetQ,aAAamjC,EAAAjrC,eAAe5I,4CAI/EoL,EAAApnB,UAAA6wD,yBAAA,SAAyBC,GACvB,OAAOA,EAAWxX,KAAOv7C,KAAKu7C,MAIhClyB,EAAApnB,UAAA+wD,wBAAA,SAAwBD,GACtB,IAAIxX,EAAOv7C,KAAKqd,GAAE,GAAuBrd,KAAKu7C,KAAOv7C,KAAKu7C,KAAO,EACjE,OAAO,IAAQwX,EAAWxX,KAAOA,GAInClyB,EAAApnB,UAAAob,GAAA,SAAGxI,GAA0B,OAAQ7U,KAAK6U,MAAQA,IAAUA,GAE5DwU,EAAApnB,UAAAsb,MAAA,SAAM1I,GAA0B,OAA+B,IAAvB7U,KAAK6U,MAAQA,IAGrDwU,EAAApnB,UAAA+6B,QAAA,SAAQi2B,GACN7oD,OAAgB,GAATpK,KAAK6N,OAA2B7N,KAAKi/B,gBAC5C,IAAIskB,EAAM,IAAIl6B,EAAKrpB,KAAK6N,MAAmB,IAAb7N,KAAK6U,MAAwB,IAAwB7U,KAAKu7C,MAExF,OADAgI,EAAItkB,eAAiBg0B,EACd1P,GAITl6B,EAAApnB,UAAAq4B,WAAA,SAAWpgB,GACT9P,OAAgB,GAATpK,KAAK6N,OAAyB7N,KAAKsyD,oBAC1C,IAAI/O,EAAM,IAAIl6B,EAAKrpB,KAAK6N,MAAmB,IAAb7N,KAAK6U,MAAwB,IAAwB7U,KAAKu7C,MAExF,OADAgI,EAAI+O,mBAAqBp4C,EAClBqpC,GAITl6B,EAAApnB,UAAAixD,WAAA,WASE,OARA9oD,OAAOpK,KAAKqd,GAAE,MACTrd,KAAKmyD,qBACR/nD,QAAQpK,KAAKqd,GAAE,MACfrd,KAAKmyD,mBAAqB,IAAI9oC,EAAKrpB,KAAK6N,KAAgB,IAAV7N,KAAK6U,MAA4B7U,KAAKu7C,MACpFv7C,KAAKmyD,mBAAmBI,gBAAkBvyD,KAC1CA,KAAKmyD,mBAAmBlzB,eAAiBj/B,KAAKi/B,eAC9Cj/B,KAAKmyD,mBAAmBG,mBAAqBtyD,KAAKsyD,oBAE7CtyD,KAAKmyD,oBAId9oC,EAAApnB,UAAAy7B,eAAA,SAAeC,EAAcw1B,GAC3B,IAAIC,EACAC,EACAC,EACAC,EACJ,QAL2B,IAAAJ,OAAA,GAKvBnzD,KAAKqd,GAAE,MACT,GAAIsgB,EAAOtgB,GAAE,QACNrd,KAAKqd,GAAE,MAAwBsgB,EAAOtgB,GAAE,MAC3C,GAAI+1C,EAAepzD,KAAKi/B,gBACtB,GAAIo0B,EAAc11B,EAAOsB,eACvB,OAAOm0B,EAAa11B,eAAe21B,QAEhC,IAAIC,EAAkBtzD,KAAKsyD,sBAC5BiB,EAAiB51B,EAAO20B,oBAC1B,OAAOgB,EAAgB51B,eAAe61B,QAKzC,IAAK51B,EAAOtgB,GAAE,KACnB,GAAIrd,KAAKqd,GAAE,GACT,GAAIsgB,EAAOtgB,GAAE,IACX,IACG81C,GACDnzD,MAAQqpB,EAAKzlB,MACb5D,KAAKqd,GAAE,IAAsBsgB,EAAOtgB,GAAE,GAEtC,OAAOrd,KAAKu7C,MAAQ5d,EAAO4d,SAExB,IAAe,IAAX5d,EAAO9vB,KAChB,OAAO7N,KAAKu7C,MAAQ,GACf,GAAe,IAAX5d,EAAO9vB,KAChB,OAAO7N,KAAKu7C,MAAQ,QAEjB,GAAIv7C,KAAKqd,GAAE,IAChB,GAAIsgB,EAAOtgB,GAAE,GACX,OAAOrd,KAAKu7C,MAAQ5d,EAAO4d,UAExB,GAAIv7C,KAAKqd,GAAE,OACZsgB,EAAOtgB,GAAE,MACX,OAAOrd,KAAKu7C,MAAQ5d,EAAO4d,KAIjC,OAAO,GAITlyB,EAAApnB,UAAAuxD,uBAAA,SAAuB71B,EAAcw1B,GACnC,YADmC,IAAAA,OAAA,GAC/BnzD,KAAKqd,GAAE,KAA8Brd,KAAK09B,eAAeC,IACpDA,EAAOtgB,GAAE,OACdrd,KAAKqd,GAAE,GACFsgB,EAAOtgB,GAAE,IAAuBsgB,EAAO4d,MAAQv7C,KAAKu7C,QACxD4X,GAAwBnzD,KAAKqd,GAAE,IAAsBsgB,EAAOtgB,GAAE,IAG5Drd,KAAK6N,MAAQ8vB,EAAO9vB,OAItBwb,EAAAoqC,kBAAP,SAAyBvhD,EAAYC,EAAauhD,GAChD,OAAIvhD,EAAMurB,eAAexrB,EAAMwhD,GAA+BxhD,EACrDA,EAAKwrB,eAAevrB,EAAOuhD,GAA+BvhD,EAC5D,MAITkX,EAAApnB,UAAAyJ,SAAA,WACE,GAAI1L,KAAKqd,GAAE,KAAuB,CAChC,IAAI4hB,EAAiBj/B,KAAKi/B,eAC1B,GAAIA,EACF,OAAOj/B,KAAKqd,GAAE,KACV4hB,EAAenX,aAAe,UAC9BmX,EAAenX,aAErB,IAAIwqC,EAAqBtyD,KAAKsyD,mBAC9B,GAAIA,EACF,OAAOtyD,KAAKqd,GAAE,KACV,IAAMi1C,EAAmB5mD,WAAa,WACtC4mD,EAAmB5mD,WAEzBtB,QAAO,GAET,OAAQpK,KAAK6N,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAoB,MAAO,OAC3B,QAASzD,QAAO,GAChB,QAAoB,MAAO,SAO/Bif,EAAApnB,UAAA0xD,aAAA,WACE,OAAQ3zD,KAAK6N,MACX,QAAS,OAAOkkD,EAAAjyB,WAAW15B,IAC3B,OACA,OAAmB,OAAO2rD,EAAAjyB,WAAWz5B,IACrC,OACA,OAAqB,OAAoB,IAAbrG,KAAKu7C,KAAawW,EAAAjyB,WAAWz5B,IAAM0rD,EAAAjyB,WAAW15B,IAC1E,QAAmB,OAAO2rD,EAAAjyB,WAAWj5B,IACrC,QAAmB,OAAOkrD,EAAAjyB,WAAWh5B,IACrC,QAAoB,OAAOirD,EAAAjyB,WAAW/4B,KACtC,QAAqB,OAAOgrD,EAAAjyB,WAAWsY,OAK3C/uB,EAAApnB,UAAA2xD,aAAA,SAAaj0D,GACX,OAAQK,KAAK6N,MACX,QAAoBzD,QAAO,GAC3B,QAAS,OAAOzK,EAAOyD,IAAI,GAC3B,OACA,OAAqB,GAAiB,IAAbpD,KAAKu7C,KAAY,OAAO57C,EAAOyD,IAAI,GAC5D,OACA,OAAmB,OAAOzD,EAAO0D,IAAI,GACrC,QAAmB,OAAO1D,EAAOkE,IAAI,GACrC,QAAmB,OAAOlE,EAAOmE,IAAI,GACrC,QAAoB,OAAOnE,EAAOoE,KAAKmuD,KAK3C7oC,EAAApnB,UAAA4xD,YAAA,SAAYl0D,GACV,OAAQK,KAAK6N,MACX,QACA,QAAoBzD,QAAO,GAC3B,QAAS,OAAOzK,EAAOyD,IAAI,GAC3B,OACA,OAAqB,GAAiB,IAAbpD,KAAKu7C,KAAY,OAAO57C,EAAOyD,IAAI,GAC5D,OACA,OAAmB,OAAOzD,EAAO0D,IAAI,GACrC,QAAmB,OAAO1D,EAAOkE,IAAI,GACrC,QAAmB,OAAOlE,EAAOmE,IAAI,KAKzCulB,EAAApnB,UAAA6xD,eAAA,SAAen0D,GACb,OAAQK,KAAK6N,MACX,QACA,QAAoBzD,QAAO,GAC3B,QAAS,OAAOzK,EAAOyD,KAAK,GAC5B,OACA,OAAqB,GAAiB,IAAbpD,KAAKu7C,KAAY,OAAO57C,EAAOyD,KAAK,GAC7D,OACA,OAAmB,OAAOzD,EAAO0D,KAAK,GAAI,GAC1C,QAAmB,OAAO1D,EAAOkE,KAAK,GACtC,QAAmB,OAAOlE,EAAOmE,KAAK,KAK1CulB,EAAApnB,UAAA05B,kBAAA,WACE,OAAQ37B,KAAK6N,MAEX,OACA,OACA,OACA,OACA,OACA,OACA,QAAoB,MAAO,IAC3B,OACA,OAAmB,MAAO,IAC1B,OACA,OAAqB,OAAoB,IAAb7N,KAAKu7C,KAAa,IAAM,IACpD,QAAmB,MAAO,IAC1B,QAAmB,MAAO,IAC1B,QAAoB,MAAO,IAC3B,QAAoB,MAAO,IAC3B,QAASnxC,QAAO,GAElB,MAAO,KAMOif,EAAAnmB,GAAY,IAAImmB,EAAI,EAClC,IAGmB,GAILA,EAAAlmB,IAAY,IAAIkmB,EAAI,EAClC,IAGkB,IAIJA,EAAAjmB,IAAY,IAAIimB,EAAI,EAClC,IAEkB,IAIJA,EAAAhmB,IAAY,IAAIgmB,EAAI,EAClC,IAGkB,IAIJA,EAAAopC,QAAgB,IAAIppC,EAAI,EACtC,IAGkB,IAIJA,EAAAmpC,QAAgB,IAAInpC,EAAI,EACtC,IAIkB,IAIJA,EAAA9lB,GAAW,IAAI8lB,EAAI,EACjC,IAGmB,GAILA,EAAA7lB,IAAY,IAAI6lB,EAAI,EAClC,IAGkB,IAIJA,EAAA5lB,IAAY,IAAI4lB,EAAI,EAClC,IAEkB,IAIJA,EAAA3lB,IAAY,IAAI2lB,EAAI,EAClC,IAGkB,IAIJA,EAAAspC,QAAgB,IAAItpC,EAAI,EACtC,IAGkB,IAIJA,EAAAqpC,QAAgB,IAAIrpC,EAAI,EACtC,IAIkB,IAIJA,EAAAzlB,KAAa,IAAIylB,EAAI,GACnC,IAGmB,GAILA,EAAAxlB,IAAY,IAAIwlB,EAAI,GAClC,IAEkB,IAIJA,EAAAvlB,IAAY,IAAIulB,EAAI,GAClC,IAGkB,IAIJA,EAAAtlB,KAAa,IAAIslB,EAAI,GACnC,KACiB,KAIHA,EAAAG,KAAa,IAAIH,EAAI,KAAgC,GAGrDA,EAAAupC,KAAa,IAAIvpC,EAAKA,EAAKjmB,IAAIyK,KAAMwb,EAAKjmB,IAAIyR,MAAOwU,EAAKjmB,IAAIm4C,MAChFlyB,EAxbA,GAAa3pB,EAAA2pB,OA2bb3pB,EAAAq0D,mBAAA,SAAmCC,GAGjC,IAFA,IAAIC,EAAWD,EAAM7nD,OACjBo3C,EAAM,IAAIt8C,MAAkBgtD,GACvB5zD,EAAI,EAAGA,EAAI4zD,IAAY5zD,EAAGkjD,EAAIljD,GAAK2zD,EAAM3zD,GAAGszD,eACrD,OAAOpQ,GAIT7jD,EAAAw0D,cAAA,SAA8BF,GAC5B,IAAIC,EAAWD,EAAM7nD,OACrB,IAAK8nD,EAAU,MAAO,GAEtB,IADA,IAAIznD,EAAK,IAAIvF,MAAcgtD,GAClB5zD,EAAI,EAAGA,EAAI4zD,IAAY5zD,EAAGmM,EAAGnM,GAAK2zD,EAAM3zD,GAAGqL,WACpD,OAAOc,EAAGG,KAAK,MAIjB,IAAAuqB,EAAA,WAuBE,SAAAA,EACEX,EACAmE,EACAhrB,EACA+qB,GAWA,IAAI05B,OAbJ,IAAAz5B,MAAA,WACA,IAAAhrB,MAAA,WACA,IAAA+qB,MAAA,MAzBFz6B,KAAAuoB,GAAU,EAcVvoB,KAAAo0D,qBAA8C,KAa5Cp0D,KAAK06B,eAAiBA,GAAkC,GACxD16B,KAAKq0D,eAAiB,KACtBr0D,KAAKs0D,mBAAqB,EAC1Bt0D,KAAK0P,WAAaA,GAA0B2Z,EAAKG,KACjDxpB,KAAKy6B,SAAWA,EAChBz6B,KAAKu2B,QAAUA,EACfv2B,KAAKu0D,SAAU,EACfv0D,KAAKsP,KAAO+Z,EAAK5lB,IAAI62B,WAAWt6B,MAKhC,IAFA,IAAIunB,EAAiBgP,EAAQhP,eACzBpb,EAASob,EAAepb,OACnB9L,EAAI,EAAGA,EAAI8L,EAAQ9L,IAE1B,GADA8zD,EAAU5sC,EAAelnB,GACrBL,KAAK09B,eAAey2B,GAEtB,OADAn0D,KAAKuoB,GAAK4rC,EAAQ5rC,GACXvoB,KAGXu2B,EAAQhP,eAAe7a,KAAK1M,MAC5BA,KAAKuoB,GAAKgO,EAAQ/O,cAoGtB,OAjGE0P,EAAAj1B,UAAAuyD,iBAAA,SAAiBj+B,GACf,IAAIoH,EAAS39B,KAAKo0D,qBAGlB,OAFKz2B,EACAvzB,OAAOuzB,EAAOpH,SAAWA,GADjBv2B,KAAKo0D,qBAAuBz2B,EAAS,IAAIm0B,EAAAt2B,eAAex7B,KAAMu2B,GAEpEoH,GAITzG,EAAAj1B,UAAA44B,iBAAA,SAAiBrC,GACf,IAAI67B,EAAiBr0D,KAAKq0D,eAC1B,OAAOA,GAAkBA,EAAeloD,OAASqsB,EAC7C67B,EAAe77B,GACfi8B,EAAwBj8B,IAI9BtB,EAAAj1B,UAAAy7B,eAAA,SAAeC,GAIb,IAAI+2B,EAAe10D,KAAKy6B,SACpBk6B,EAAiBh3B,EAAOlD,SAC5B,GAAIi6B,GACF,IAAMC,IAAkBD,EAAah3B,eAAei3B,GAAkB,OAAO,OACxE,GAAIA,EACT,OAAO,EAIT,GAAI30D,KAAKu0D,SAAW52B,EAAO42B,QAAS,OAAO,EAG3C,IAAIK,EAAqB50D,KAAK06B,eAC1Bm6B,EAAuBl3B,EAAOjD,eAC9Bo6B,EAAgBF,EAAmBzoD,OACvC,GAAI2oD,GAAiBD,EAAqB1oD,OAAQ,OAAO,EACzD,IAAK,IAAI9L,EAAI,EAAGA,EAAIy0D,IAAiBz0D,EAAG,CACtC,IAAI00D,EAAoBH,EAAmBv0D,GACvC20D,EAAsBH,EAAqBx0D,GAC/C,IAAK00D,EAAkBr3B,eAAes3B,GAAsB,OAAO,EAIrE,IAAIC,EAAiBj1D,KAAK0P,WACtBwlD,EAAmBv3B,EAAOjuB,WAC9B,OAAOulD,GAAkBC,GAAoBD,EAAev3B,eAAew3B,IAItEh+B,EAAAi+B,oBAAP,SAA2Bz6B,EAA+BhrB,EAAkB+qB,QAAA,IAAAA,MAAA,MAC1E,IAAIjuB,EAAK,GAGT,GAFAA,EAAGE,KAAKgD,EAAWisB,qBACflB,GAAUjuB,EAAGE,KAAK+tB,EAASkB,qBAC3BjB,EACF,IAAK,IAAIr6B,EAAI,EAAGojB,EAAIiX,EAAevuB,OAAQ9L,EAAIojB,IAAKpjB,EAAGmM,EAAGE,KAAKguB,EAAer6B,GAAGs7B,qBAEnF,MAAO,WAAanvB,EAAGG,KAAK,KAI9BuqB,EAAAj1B,UAAA05B,kBAAA,WACE,OAAOzE,EAAUi+B,oBAAoBn1D,KAAK06B,eAAgB16B,KAAK0P,WAAY1P,KAAKy6B,WAIlFvD,EAAAj1B,UAAAyJ,SAAA,WACE,IAAIc,EAAK,IAAIvF,MACbuF,EAAGE,KAAK,KACR,IAAI8rB,EAAQ,EACRiC,EAAWz6B,KAAKy6B,SAChBA,IACFjuB,EAAGE,KAAK,UACRtC,QAAQqwB,EAAS63B,oBACjB9lD,EAAGE,KAAK+tB,EAAS/uB,YACjB8sB,EAAQ,GAEV,IAAI/oB,EAAazP,KAAK06B,eAClBo6B,EAAgBrlD,EAAWtD,OAC/B,GAAI2oD,EAKF,IAJA,IAAI1gD,EAAQpU,KAAKq0D,eACbvZ,EAAW1mC,EAAQA,EAAMjI,OAAS,EAClCipD,EAAgBp1D,KAAKs0D,mBACrBe,EAAYr1D,KAAKu0D,QAAUO,EAAgB,GAAK,EAC3Cz0D,EAAI,EAAGA,EAAIy0D,IAAiBz0D,IAAKm4B,EACpCA,GAAOhsB,EAAGE,KAAK,MACfrM,GAAKg1D,GAAW7oD,EAAGE,KAAK,OACxBrM,EAAIy6C,EAAUtuC,EAAGE,KAAgB0H,EAAO/T,IACvCmM,EAAGE,KAAK+nD,EAAwBp0D,IACjCA,GAAK+0D,GAAiB/0D,GAAKg1D,EAAW7oD,EAAGE,KAAK,OAC7CF,EAAGE,KAAK,MACbF,EAAGE,KAAK+C,EAAWpP,GAAGqL,YAK1B,OAFAc,EAAGE,KAAK,SACRF,EAAGE,KAAK1M,KAAK0P,WAAWhE,YACjBc,EAAGG,KAAK,KAEnBuqB,EArJA,GAAax3B,EAAAw3B,YA0Jb,IAAIo+B,EAA+C,KAGnD,SAAgBb,EAAwBj8B,GACjC88B,IAA6BA,EAA8B,IAChE,IAAK,IAAIj1D,EAAIi1D,EAA4BnpD,OAAQ9L,GAAKm4B,IAASn4B,EAC7Di1D,EAA4B5oD,KAAK,OAASrM,EAAEqL,SAAS,KAEvD,OAAO4pD,EAA4B98B,EAAQ,GAL7C94B,EAAA+0D,ybCjsBA,IAuBYhnD,EAwIA8nD,EA/JZ1xC,EAAA1jB,EAAA,GAMA4jB,EAAA5jB,EAAA,GAKA0J,EAAA1J,EAAA,GA0JA,SAAgBq1D,EAAiBvpD,GAE/B,OADA7B,OAAO6B,EAAKE,QACJF,EAAKM,WAAW,IACtB,QACE,OAAQN,GACN,IAAK,WAAY,OAAOwB,EAAM2mB,SAC9B,IAAK,KAAM,OAAO3mB,EAAMgoD,GACxB,IAAK,QAAS,OAAOhoD,EAAMioD,MAC3B,IAAK,QAAS,OAAOjoD,EAAMkoD,MAE7B,MAEF,QACE,OAAQ1pD,GACN,IAAK,QAAS,OAAOwB,EAAM6T,MAE7B,MAEF,QACE,OAAQrV,GACN,IAAK,OAAQ,OAAOwB,EAAMmoD,KAC1B,IAAK,QAAS,OAAOnoD,EAAMooD,MAC3B,IAAK,QAAS,OAAOpoD,EAAM2R,MAC3B,IAAK,WAAY,OAAO3R,EAAM+T,SAC9B,IAAK,QAAS,OAAO/T,EAAM4kB,MAC3B,IAAK,cAAe,OAAO5kB,EAAM6R,YAEnC,MAEF,SACE,OAAQrT,GACN,IAAK,WAAY,OAAOwB,EAAMqoD,SAC9B,IAAK,UAAW,OAAOroD,EAAM4oB,QAC7B,IAAK,UAAW,OAAO5oB,EAAMsoD,QAC7B,IAAK,SAAU,OAAOtoD,EAAMuoD,OAC5B,IAAK,KAAM,OAAOvoD,EAAMgU,GAE1B,MAEF,SACE,OAAQxV,GACN,IAAK,OAAQ,OAAOwB,EAAMwoD,KAC1B,IAAK,OAAQ,OAAOxoD,EAAMoqB,KAC1B,IAAK,SAAU,OAAOpqB,EAAMqU,OAC5B,IAAK,UAAW,OAAOrU,EAAMyoD,QAE/B,MAEF,SACE,OAAQjqD,GACN,IAAK,QAAS,OAAOwB,EAAMQ,MAC3B,IAAK,UAAW,OAAOR,EAAM0oD,QAC7B,IAAK,MAAO,OAAO1oD,EAAM0U,IACzB,IAAK,OAAQ,OAAO1U,EAAM2oD,KAC1B,IAAK,WAAY,OAAO3oD,EAAM+R,SAEhC,MAEF,SACE,OAAQvT,GACN,IAAK,MAAO,OAAOwB,EAAMomB,IAE3B,MAEF,SACE,OAAQ5nB,GACN,IAAK,KAAM,OAAOwB,EAAM8U,GACxB,IAAK,aAAc,OAAO9U,EAAM4oD,WAChC,IAAK,SAAU,OAAO5oD,EAAMgV,OAC5B,IAAK,KAAM,OAAOhV,EAAM6oD,GACxB,IAAK,aAAc,OAAO7oD,EAAMgS,WAChC,IAAK,YAAa,OAAOhS,EAAMivB,UAC/B,IAAK,KAAM,OAAOjvB,EAAM8oD,GAE1B,MAEF,SACE,OAAQtqD,GACN,IAAK,QAAS,OAAOwB,EAAM+oD,MAE7B,MAEF,SACE,OAAQvqD,GACN,IAAK,MAAO,OAAOwB,EAAMgpD,IAE3B,MAEF,SACE,OAAQxqD,GACN,IAAK,SAAU,OAAOwB,EAAMipD,OAE9B,MAEF,SACE,OAAQzqD,GACN,IAAK,YAAa,OAAOwB,EAAMmqB,UAC/B,IAAK,MAAO,OAAOnqB,EAAMkS,IACzB,IAAK,OAAQ,OAAOlS,EAAMM,KAE5B,MAEF,SACE,OAAQ9B,GACN,IAAK,KAAM,OAAOwB,EAAMkpD,GAE1B,MAEF,SACE,OAAQ1qD,GACN,IAAK,UAAW,OAAOwB,EAAMmpD,QAC7B,IAAK,UAAW,OAAOnpD,EAAMopD,QAC7B,IAAK,YAAa,OAAOppD,EAAMqpD,UAC/B,IAAK,SAAU,OAAOrpD,EAAMspD,OAE9B,MAEF,SACE,OAAQ9qD,GACN,IAAK,WAAY,OAAOwB,EAAM0mB,SAC9B,IAAK,SAAU,OAAO1mB,EAAMoV,OAE9B,MAEF,SACE,OAAQ5W,GACN,IAAK,MAAO,OAAOwB,EAAMqmB,IACzB,IAAK,SAAU,OAAOrmB,EAAMwmB,OAC5B,IAAK,QAAS,OAAOxmB,EAAMgB,MAC3B,IAAK,SAAU,OAAOhB,EAAMsV,OAE9B,MAEF,SACE,OAAQ9W,GACN,IAAK,OAAQ,OAAOwB,EAAMuS,KAC1B,IAAK,QAAS,OAAOvS,EAAMuV,MAC3B,IAAK,OAAQ,OAAOvV,EAAMO,KAC1B,IAAK,MAAO,OAAOP,EAAMwV,IACzB,IAAK,OAAQ,OAAOxV,EAAMupD,KAC1B,IAAK,SAAU,OAAOvpD,EAAMwpD,OAE9B,MAEF,SACE,OAAQhrD,GACN,IAAK,MAAO,OAAOwB,EAAMypD,IACzB,IAAK,OAAQ,OAAOzpD,EAAM4V,KAE5B,MAEF,SACE,OAAQpX,GACN,IAAK,QAAS,OAAOwB,EAAM6V,MAC3B,IAAK,OAAQ,OAAO7V,EAAM0pD,KAE5B,MAEF,SACE,OAAQlrD,GACN,IAAK,QAAS,OAAOwB,EAAM2pD,OAKjC,OAAO3pD,EAAMkZ,QAGf,SAAgB0wC,EAAsBC,GACpC,OAAQA,GACN,KAAK7pD,EAAM2mB,SACX,KAAK3mB,EAAMgoD,GACX,KAAKhoD,EAAM6R,YACX,KAAK7R,EAAM4oB,QACX,KAAK5oB,EAAMuoD,OACX,KAAKvoD,EAAM2oD,KACX,KAAK3oD,EAAM0U,IACX,KAAK1U,EAAMomB,IACX,KAAKpmB,EAAMgS,WACX,KAAKhS,EAAM8oD,GACX,KAAK9oD,EAAM+oD,MACX,KAAK/oD,EAAMipD,OACX,KAAKjpD,EAAMmqB,UACX,KAAKnqB,EAAMM,KACX,KAAKN,EAAM0mB,SACX,KAAK1mB,EAAMqmB,IACX,KAAKrmB,EAAMupD,KACX,KAAKvpD,EAAM4V,KAAM,OAAO,EACxB,QAAS,OAAO,IA1UpB,SAAY5V,GAKVA,IAAA,uBACAA,IAAA,WACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,uBACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,cACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,YACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,wBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,kBAIAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,8BACAA,IAAA,sCACAA,IAAA,4CACAA,IAAA,kCACAA,IAAA,4CACAA,IAAA,gDACAA,IAAA,0DACAA,IAAA,4CACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,0CACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,0CACAA,IAAA,sDACAA,IAAA,8EACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,kBACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,8CACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,qBACAA,IAAA,+BACAA,IAAA,iCACAA,IAAA,uCACAA,IAAA,yDACAA,IAAA,iCACAA,IAAA,qCACAA,IAAA,yDACAA,IAAA,qEACAA,IAAA,6FACAA,IAAA,yCACAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,aAIAA,IAAA,6BACAA,IAAA,mCACAA,IAAA,qCACAA,IAAA,iCAIAA,IAAA,uBACAA,IAAA,2BArIF,CAAYA,EAAA/N,EAAA+N,QAAA/N,EAAA+N,MAAK,KAwIjB,SAAY8nD,GACVA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBAHF,CAAYA,EAAA71D,EAAA61D,qBAAA71D,EAAA61D,mBAAkB,KAM9B71D,EAAA81D,mBAwKA91D,EAAA23D,wBAwBA33D,EAAA63D,4BAAA,SAA4C32D,GAE1C,OADAwJ,OAAOxJ,EAAKuL,QACJvL,EAAK2L,WAAW,IACtB,SAAiB,MAAe,UAAR3L,EACxB,SAAiB,MAAe,OAARA,EACxB,SAAiB,MAAe,cAARA,EACxB,SAAiB,MAAe,QAARA,EACxB,SAAiB,MAAe,QAARA,EAE1B,OAAO,GAGTlB,EAAA83D,sBAAA,SAAsCF,GACpC,OAAQA,GACN,KAAK7pD,EAAMuoD,OAAQ,MAAO,SAC1B,KAAKvoD,EAAM6oD,GAAI,MAAO,KACtB,KAAK7oD,EAAMgS,WAAY,MAAO,aAC9B,KAAKhS,EAAMkS,IAAK,MAAO,MACvB,KAAKlS,EAAMwpD,OAAQ,MAAO,SAC1B,KAAKxpD,EAAM4V,KAAM,MAAO,OACxB,KAAK5V,EAAM2pD,MAAO,MAAO,QACzB,KAAK3pD,EAAMgqD,YAAa,MAAO,MAC/B,KAAKhqD,EAAM4R,MAAO,MAAO,IACzB,KAAK5R,EAAMiqD,SAAU,MAAO,IAC5B,KAAKjqD,EAAMkqD,YAAa,MAAO,IAC/B,KAAKlqD,EAAMmqD,gBAAiB,MAAO,KACnC,KAAKnqD,EAAMoqD,mBAAoB,MAAO,KACtC,KAAKpqD,EAAMqqD,cAAe,MAAO,KACjC,KAAKrqD,EAAMsqD,mBAAoB,MAAO,KACtC,KAAKtqD,EAAMuqD,qBAAsB,MAAO,MACxC,KAAKvqD,EAAMwqD,0BAA2B,MAAO,MAC7C,KAAKxqD,EAAM0Y,KAAM,MAAO,IACxB,KAAK1Y,EAAM4Y,MAAO,MAAO,IACzB,KAAK5Y,EAAMyqD,kBAAmB,MAAO,KACrC,KAAKzqD,EAAM0qD,SAAU,MAAO,IAC5B,KAAK1qD,EAAM2qD,MAAO,MAAO,IACzB,KAAK3qD,EAAM4qD,QAAS,MAAO,IAC3B,KAAK5qD,EAAM6qD,UAAW,MAAO,KAC7B,KAAK7qD,EAAM8qD,YAAa,MAAO,KAC/B,KAAK9qD,EAAM+qD,kBAAmB,MAAO,KACrC,KAAK/qD,EAAMgrD,wBAAyB,MAAO,KAC3C,KAAKhrD,EAAMirD,oCAAqC,MAAO,MACvD,KAAKjrD,EAAMkrD,UAAW,MAAO,IAC7B,KAAKlrD,EAAMmrD,IAAK,MAAO,IACvB,KAAKnrD,EAAMorD,MAAO,MAAO,IACzB,KAAKprD,EAAMqrD,YAAa,MAAO,IAC/B,KAAKrrD,EAAMsrD,MAAO,MAAO,IACzB,KAAKtrD,EAAMurD,oBAAqB,MAAO,KACvC,KAAKvrD,EAAMwrD,QAAS,MAAO,KAC3B,KAAKxrD,EAAMyrD,OAAQ,MAAO,IAC1B,KAAKzrD,EAAM0rD,YAAa,MAAO,KAC/B,KAAK1rD,EAAM2rD,aAAc,MAAO,KAChC,KAAK3rD,EAAM4rD,gBAAiB,MAAO,KACnC,KAAK5rD,EAAM6rD,yBAA0B,MAAO,MAC5C,KAAK7rD,EAAM8rD,aAAc,MAAO,KAChC,KAAK9rD,EAAM+rD,eAAgB,MAAO,KAClC,KAAK/rD,EAAMgsD,yBAA0B,MAAO,MAC5C,KAAKhsD,EAAMisD,+BAAgC,MAAO,MAClD,KAAKjsD,EAAMksD,2CAA4C,MAAO,OAC9D,KAAKlsD,EAAMmsD,iBAAkB,MAAO,KACpC,KAAKnsD,EAAMosD,WAAY,MAAO,KAC9B,KAAKpsD,EAAMqsD,aAAc,MAAO,KAChC,QAEE,OADA1vD,QAAO,GACA,KAKb,IAAAsD,EAAA,WAUE,SAAAA,EAAY/B,EAAgBS,EAAYC,GA6CxCrM,KAAAu7B,aAAsB,EA5CpBv7B,KAAK2L,OAASA,EACd3L,KAAKoM,MAAQA,EACbpM,KAAKqM,IAAMA,EA2Cf,OAxCSqB,EAAAf,KAAP,SAAYotD,EAAUC,GACpB,GAAID,EAAEpuD,QAAUquD,EAAEruD,OAAQ,MAAM,IAAI2jB,MAAM,mBAC1C,OAAO,IAAI5hB,EAAMqsD,EAAEpuD,OACjBouD,EAAE3tD,MAAQ4tD,EAAE5tD,MAAQ2tD,EAAE3tD,MAAQ4tD,EAAE5tD,MAChC2tD,EAAE1tD,IAAM2tD,EAAE3tD,IAAM0tD,EAAE1tD,IAAM2tD,EAAE3tD,MAI9BtL,OAAAC,eAAI0M,EAAAzL,UAAA,UAAO,KAAX,WACE,OAAO,IAAIyL,EAAM1N,KAAK2L,OAAQ3L,KAAKoM,MAAOpM,KAAKoM,wCAGjDrL,OAAAC,eAAI0M,EAAAzL,UAAA,QAAK,KAAT,WACE,OAAO,IAAIyL,EAAM1N,KAAK2L,OAAQ3L,KAAKqM,IAAKrM,KAAKqM,sCAG/CtL,OAAAC,eAAI0M,EAAAzL,UAAA,OAAI,KAAR,WAGE,IAFA,IAAIgK,EAAOjM,KAAK2L,OAAOM,KACnBJ,EAAO,EACFgV,EAAM7gB,KAAKoM,MAAOyU,GAAO,IAAKA,EACb,IAApB5U,EAAKM,WAAWsU,IAA2BhV,IAEjD,OAAOA,mCAGT9K,OAAAC,eAAI0M,EAAAzL,UAAA,SAAM,KAAV,WAGE,IAFA,IAAIgK,EAAOjM,KAAK2L,OAAOM,KACnBH,EAAS,EACJ+U,EAAM7gB,KAAKoM,MAAQ,EAAGyU,GAAO,GACZ,IAApB5U,EAAKM,WAAWsU,KADqBA,IAEvC/U,EAEJ,OAAOA,mCAGT4B,EAAAzL,UAAAyJ,SAAA,WACE,OAAO1L,KAAK2L,OAAOM,KAAKQ,UAAUzM,KAAKoM,MAAOpM,KAAKqM,MAIvDqB,EAxDA,GAAahO,EAAAgO,QAgEb,IAAAusD,EAAA,SAAAz9C,GAgBE,SAAAy9C,EAAYtuD,EAAgBoB,QAAA,IAAAA,MAAA,MAA5B,IAAA2P,EACEF,EAAAhc,KAAAR,KAAM+M,IAAY/M,KAdpB0c,EAAArQ,IAAW,EAEXqQ,EAAAmE,IAAW,EACXnE,EAAA46C,OAAgB,EAChB56C,EAAAw9C,SAAgB,EAEhBx9C,EAAAy9C,WAAoB,EACpBz9C,EAAA09C,aAAoB,EACpB19C,EAAA29C,oBAA2B,EAE3B39C,EAAA49C,UAAmC,KAMjC59C,EAAK/Q,OAASA,EACd+Q,EAAKmE,IAAM,EACXnE,EAAKrQ,IAAMV,EAAOM,KAAKE,OACvBuQ,EAAK3P,YAAcA,GAAe,IAAI9F,MAEtC,IAAIoF,EAAMqQ,EAAKrQ,IACXJ,EAAON,EAAOM,KAWlB,GAPEyQ,EAAKmE,IAAMxU,GACc,OAAzBJ,EAAKM,WAAWmQ,EAAKmE,QAEnBnE,EAAKmE,IAKPnE,EAAKmE,IAAM,EAAIxU,GACU,IAAzBJ,EAAKM,WAAWmQ,EAAKmE,MACQ,IAA7B5U,EAAKM,WAAWmQ,EAAKmE,IAAM,GAG3B,IADAnE,EAAKmE,KAAO,EAEVnE,EAAKmE,IAAMxU,GACc,IAAzBJ,EAAKM,WAAWmQ,EAAKmE,QAEnBnE,EAAKmE,aA8iCf,OA5lC+BpE,EAAAw9C,EAAAz9C,GAoD7By9C,EAAAh4D,UAAA+M,KAAA,SAAKurD,GAEH,YAFG,IAAAA,MAAyChF,EAAmBQ,SAC/D/1D,KAAKm6D,WAAa,EACXn6D,KAAKs3D,MAAQt3D,KAAKw6D,WAAWD,IAG9BN,EAAAh4D,UAAAu4D,WAAR,SACED,EACAE,QADA,IAAAF,MAAyChF,EAAmBQ,cAC5D,IAAA0E,MAAsBr3D,IAAIkhD,WAI1B,IAFA,IAAIj4C,EAAMrM,KAAKqM,IACXJ,EAAOjM,KAAK2L,OAAOM,KAChBjM,KAAK6gB,IAAMxU,GAAK,CACrBrM,KAAKk6D,SAAWl6D,KAAK6gB,IACrB,IAAIngB,EAAIuL,EAAKM,WAAWvM,KAAK6gB,KAC7B,OAAQngB,GACN,QACE,OACIV,KAAK6gB,IAAMxU,GACY,IAAzBJ,EAAKM,WAAWvM,KAAK6gB,MACpB,MAGL,QACA,OACA,QACA,QACA,UACI7gB,KAAK6gB,IACP,MAEF,QAEE,QADE7gB,KAAK6gB,IAEL45C,EAAiB,GAAKz6D,KAAK6gB,IAAMxU,GACR,IAAzBJ,EAAKM,WAAWvM,KAAK6gB,QAEnB7gB,KAAK6gB,IAEL45C,EAAiB,GAAKz6D,KAAK6gB,IAAMxU,GACR,IAAzBJ,EAAKM,WAAWvM,KAAK6gB,QAEnB7gB,KAAK6gB,IACApT,EAAMwqD,2BAERxqD,EAAMsqD,oBAERtqD,EAAMqrD,YAEf,QACA,QACA,QACE,OAAOrrD,EAAMitD,cAEf,QAEE,QADE16D,KAAK6gB,IAEL45C,EAAiB,GAAKz6D,KAAK6gB,IAAMxU,GACR,IAAzBJ,EAAKM,WAAWvM,KAAK6gB,QAEnB7gB,KAAK6gB,IACApT,EAAM+rD,gBAER/rD,EAAM4qD,QAEf,QAEE,KADEr4D,KAAK6gB,IACH45C,EAAiB,GAAKz6D,KAAK6gB,IAAMxU,EAAK,CAExC,GAAO,KADHsuD,EAAM1uD,EAAKM,WAAWvM,KAAK6gB,MAG7B,QADE7gB,KAAK6gB,IACApT,EAAMurD,oBAEf,GAAO,IAAH2B,EAEF,QADE36D,KAAK6gB,IACApT,EAAMmsD,iBAGjB,OAAOnsD,EAAMkrD,UAEf,QAEE,QADE34D,KAAK6gB,IACApT,EAAMmtD,UAEf,QAEE,QADE56D,KAAK6gB,IACApT,EAAMotD,WAEf,QAEE,KADE76D,KAAK6gB,IACH45C,EAAiB,GAAKz6D,KAAK6gB,IAAMxU,EAAK,CAExC,GAAO,KADHsuD,EAAM1uD,EAAKM,WAAWvM,KAAK6gB,MAG7B,QADE7gB,KAAK6gB,IACApT,EAAM4rD,gBAEf,GAAO,IAAHsB,EAEF,QADE36D,KAAK6gB,IAEL45C,EAAiB,GAAKz6D,KAAK6gB,IAAMxU,GACR,IAAzBJ,EAAKM,WAAWvM,KAAK6gB,QAEnB7gB,KAAK6gB,IACApT,EAAM6rD,0BAER7rD,EAAMyqD,kBAGjB,OAAOzqD,EAAM0qD,SAEf,QAEE,KADEn4D,KAAK6gB,IACH45C,EAAiB,GAAKz6D,KAAK6gB,IAAMxU,EAAK,CAExC,GAAO,KADHsuD,EAAM1uD,EAAKM,WAAWvM,KAAK6gB,MAG7B,QADE7gB,KAAK6gB,IACApT,EAAM6qD,UAEf,GAAO,IAAHqC,EAEF,QADE36D,KAAK6gB,IACApT,EAAM0rD,YAGjB,OAAO1rD,EAAM0Y,KAEf,QAEE,QADEnmB,KAAK6gB,IACApT,EAAM4R,MAEf,QAEE,KADErf,KAAK6gB,IACH45C,EAAiB,GAAKz6D,KAAK6gB,IAAMxU,EAAK,CAExC,GAAO,KADHsuD,EAAM1uD,EAAKM,WAAWvM,KAAK6gB,MAG7B,QADE7gB,KAAK6gB,IACApT,EAAM8qD,YAEf,GAAO,IAAHoC,EAEF,QADE36D,KAAK6gB,IACApT,EAAM2rD,aAGjB,OAAO3rD,EAAM4Y,MAEf,QAEE,KADErmB,KAAK6gB,IACH45C,EAAiB,GAAKz6D,KAAK6gB,IAAMxU,EAAK,CACxC,IAAIsuD,EAAM1uD,EAAKM,WAAWvM,KAAK6gB,KAC/B,GAAIhX,EAAAixD,eAAeH,GAEjB,QADE36D,KAAK6gB,IACApT,EAAMstD,aAEf,GACEN,EAAiB,GAAKz6D,KAAK6gB,IAAM,EAAIxU,GAClC,IAAHsuD,GAC6B,IAA7B1uD,EAAKM,WAAWvM,KAAK6gB,IAAM,GAG3B,OADA7gB,KAAK6gB,KAAO,EACLpT,EAAMgqD,YAGjB,OAAOhqD,EAAMutD,IAEf,QACE,IAAIC,EAAkBj7D,KAAK6gB,IAE3B,KADE7gB,KAAK6gB,IACH45C,EAAiB,GAAKz6D,KAAK6gB,IAAMxU,EAAK,CAExC,GAAO,KADHsuD,EAAM1uD,EAAKM,WAAWvM,KAAK6gB,MACJ,CACzB,IAAI5P,EAAc8S,EAAAtF,YAAYy8C,KAQ9B,IANEl7D,KAAK6gB,IAAM,EAAIxU,GACc,IAA7BJ,EAAKM,WAAWvM,KAAK6gB,IAAM,OAEzB7gB,KAAK6gB,IACP5P,EAAc8S,EAAAtF,YAAY08C,UAEnBn7D,KAAK6gB,IAAMxU,GAClB,GAA6B,IAAzBJ,EAAKM,WAAWvM,KAAK6gB,KAA2B,GAChD7gB,KAAK6gB,IACP,MAGA7gB,KAAKs6D,WACPt6D,KAAKs6D,UACHrpD,EACAhF,EAAKQ,UAAUwuD,EAAiBj7D,KAAK6gB,KACrC7gB,KAAK+K,MAAMkwD,EAAiBj7D,KAAK6gB,MAGrC,MAEF,GAAO,IAAH85C,EAA0B,CAE5B,IADA,IAAIS,GAAS,IACJp7D,KAAK6gB,IAAMxU,GAElB,GACG,KAFH3L,EAAIuL,EAAKM,WAAWvM,KAAK6gB,OAGvB7gB,KAAK6gB,IAAM,EAAIxU,GACc,IAA7BJ,EAAKM,WAAWvM,KAAK6gB,IAAM,GAC3B,CACA7gB,KAAK6gB,KAAO,EACZu6C,GAAS,EACT,MAGCA,EAKMp7D,KAAKs6D,WACdt6D,KAAKs6D,UACHv2C,EAAAtF,YAAY4C,MACZpV,EAAKQ,UAAUwuD,EAAiBj7D,KAAK6gB,KACrC7gB,KAAK+K,MAAMkwD,EAAiBj7D,KAAK6gB,MARnC7gB,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfr7D,KAAK+K,MAAM/K,KAAK6gB,KAAM,MAS1B,MAEF,GAAO,IAAH85C,EAEF,QADE36D,KAAK6gB,IACApT,EAAM8rD,aAGjB,OAAO9rD,EAAM2qD,MAEf,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACE,OAAOp4D,KAAKs7D,cACR7tD,EAAM8tD,eACN9tD,EAAMstD,aAEZ,QAEE,QADE/6D,KAAK6gB,IACApT,EAAM+tD,MAEf,QAEE,QADEx7D,KAAK6gB,IACApT,EAAMguD,UAEf,QAEE,KADEz7D,KAAK6gB,IACH45C,EAAiB,GAAKz6D,KAAK6gB,IAAMxU,EAAK,CAExC,GAAO,KADHsuD,EAAM1uD,EAAKM,WAAWvM,KAAK6gB,MAG7B,QADE7gB,KAAK6gB,IAEL45C,EAAiB,GACjBz6D,KAAK6gB,IAAMxU,GACc,IAAzBJ,EAAKM,WAAWvM,KAAK6gB,QAEnB7gB,KAAK6gB,IACApT,EAAMgsD,0BAERhsD,EAAM+qD,kBAEf,GAAO,IAAHmC,EAEF,QADE36D,KAAK6gB,IACApT,EAAMmqD,gBAGjB,OAAOnqD,EAAMiqD,SAEf,QAEE,KADE13D,KAAK6gB,IACH45C,EAAiB,GAAKz6D,KAAK6gB,IAAMxU,EAAK,CAExC,GAAO,KADHsuD,EAAM1uD,EAAKM,WAAWvM,KAAK6gB,MAG7B,QADE7gB,KAAK6gB,IAEL45C,EAAiB,GACjBz6D,KAAK6gB,IAAMxU,GACc,IAAzBJ,EAAKM,WAAWvM,KAAK6gB,QAEnB7gB,KAAK6gB,IACApT,EAAMuqD,sBAERvqD,EAAMqqD,cAEf,GAAO,IAAH6C,EAEF,QADE36D,KAAK6gB,IACApT,EAAMiuD,mBAGjB,OAAOjuD,EAAMyrD,OAEf,QAEE,KADEl5D,KAAK6gB,IACH45C,EAAiB,GAAKz6D,KAAK6gB,IAAMxU,EAAK,CAExC,GAAO,KADHsuD,EAAM1uD,EAAKM,WAAWvM,KAAK6gB,MACE,CAE/B,KADE7gB,KAAK6gB,IACH45C,EAAiB,GAAKz6D,KAAK6gB,IAAMxU,EAAK,CAExC,GAAO,KADPsuD,EAAM1uD,EAAKM,WAAWvM,KAAK6gB,MAGzB,QADE7gB,KAAK6gB,IAEL45C,EAAiB,GAAKz6D,KAAK6gB,IAAMxU,GACR,IAAzBJ,EAAKM,WAAWvM,KAAK6gB,QAEnB7gB,KAAK6gB,IACApT,EAAMksD,4CAERlsD,EAAMirD,oCAEf,GAAO,IAAHiC,EAEF,QADE36D,KAAK6gB,IACApT,EAAMisD,+BAGjB,OAAOjsD,EAAMgrD,wBAEf,GAAO,IAAHkC,EAEF,QADE36D,KAAK6gB,IACApT,EAAMoqD,mBAGjB,OAAOpqD,EAAMkqD,YAEf,QAEE,QADE33D,KAAK6gB,IACApT,EAAMkuD,SAEf,QAEE,QADE37D,KAAK6gB,IACApT,EAAMmuD,YAEf,QAEE,QADE57D,KAAK6gB,IACApT,EAAMouD,aAEf,QAEE,QADE77D,KAAK6gB,IAEL45C,EAAiB,GAAKz6D,KAAK6gB,IAAMxU,GACR,IAAzBJ,EAAKM,WAAWvM,KAAK6gB,QAEnB7gB,KAAK6gB,IACApT,EAAMqsD,cAERrsD,EAAMorD,MAEf,SAEE,QADE74D,KAAK6gB,IACApT,EAAMquD,UAEf,SAEE,KADE97D,KAAK6gB,IACH45C,EAAiB,GAAKz6D,KAAK6gB,IAAMxU,EAAK,CAExC,GAAO,MADHsuD,EAAM1uD,EAAKM,WAAWvM,KAAK6gB,MAG7B,QADE7gB,KAAK6gB,IACApT,EAAMwrD,QAEf,GAAO,IAAH0B,EAEF,QADE36D,KAAK6gB,IACApT,EAAMosD,WAGjB,OAAOpsD,EAAMmrD,IAEf,SAEE,QADE54D,KAAK6gB,IACApT,EAAMsuD,WAEf,SAEE,QADE/7D,KAAK6gB,IACApT,EAAMsrD,MAEf,QAEE,QADE/4D,KAAK6gB,IACApT,EAAMuuD,GAEf,QACE,GAAInyD,EAAAoyD,kBAAkBv7D,GAAI,CACxB,GAAImJ,EAAAqyD,mBAAmBx7D,GAAI,CAEzB,IADA,IAAIy7D,EAAYn8D,KAAK6gB,MAEjB7gB,KAAK6gB,IAAMxU,GACbxC,EAAAuyD,iBAAiB17D,EAAIuL,EAAKM,WAAWvM,KAAK6gB,OAE1C,IAAKhX,EAAAqyD,mBAAmBx7D,GAEtB,OADAV,KAAK6gB,IAAMs7C,EACJ1uD,EAAMU,WAGjB,IACIkuD,EAAe7G,EADDvpD,EAAKQ,UAAU0vD,EAAWn8D,KAAK6gB,MAEjD,GACEw7C,IAAiB5uD,EAAMkZ,SACvB4zC,IAAuBhF,EAAmB+G,SAExC/B,IAAuBhF,EAAmBgH,SAC1ClF,EAAsBgF,IAGxB,OAAOA,EAETr8D,KAAK6gB,IAAMs7C,EAEb,OAAO1uD,EAAMU,WACR,GAAItE,EAAA2yD,aAAa97D,GAAI,GACxBV,KAAK6gB,IACP,MAOF,OALA7gB,KAAKqN,MACHwW,EAAApZ,eAAegyD,kBACfz8D,KAAK+K,MAAM/K,KAAK6gB,IAAK7gB,KAAK6gB,IAAM,MAEhC7gB,KAAK6gB,IACApT,EAAMkZ,SAInB,OAAOlZ,EAAMivD,WAGfzC,EAAAh4D,UAAA06D,KAAA,SACEC,EACArC,EACAsC,QAFA,IAAAD,OAAA,QACA,IAAArC,MAAyChF,EAAmBQ,cAC5D,IAAA8G,MAAyBz5D,IAAIkhD,WAE7B,IAAIr4C,EAAOjM,KAAK2L,OAAOM,KACvB,GAAIjM,KAAKm6D,UAAY,EAAG,CACtB,IAAIgC,EAAYn8D,KAAK6gB,IACjBi8C,EAAc98D,KAAKs3D,MACnByF,EAAiB/8D,KAAKk6D,SAG1B,GAFAl6D,KAAKm6D,UAAYn6D,KAAKw6D,WAAWD,EAAoBsC,GACrD78D,KAAKo6D,aAAep6D,KAAKk6D,SACrB0C,EAAgB,CAClB58D,KAAKq6D,oBAAqB,EAC1B,IAAK,IAAIx5C,EAAMs7C,EAAW9vD,EAAMrM,KAAKo6D,aAAcv5C,EAAMxU,IAAOwU,EAC9D,GAAIhX,EAAAyC,YAAYL,EAAKM,WAAWsU,IAAO,CACrC7gB,KAAKq6D,oBAAqB,EAC1B,OAINr6D,KAAK6gB,IAAMs7C,EACXn8D,KAAKs3D,MAAQwF,EACb98D,KAAKk6D,SAAW6C,EAElB,OAAO/8D,KAAKm6D,WAGdF,EAAAh4D,UAAA+6D,eAAA,SAAezC,GACb,YADa,IAAAA,MAAyChF,EAAmBgH,QAClEv8D,KAAKi9D,KAAKxvD,EAAMU,WAAYosD,IAGrCN,EAAAh4D,UAAAg7D,KAAA,SAAK3F,EAAciD,QAAA,IAAAA,MAAyChF,EAAmBQ,SAC7E,IAAIoG,EAAYn8D,KAAK6gB,IACjBi8C,EAAc98D,KAAKs3D,MACnByF,EAAiB/8D,KAAKk6D,SACtB2C,EAAoBz5D,IAAIkhD,UAC5B,OAAQgT,GACN,KAAK7pD,EAAMkqD,YACTkF,EAAoB,EAKxB,OADA78D,KAAKs3D,MAAQt3D,KAAKw6D,WAAWD,EAAoBsC,GAC7C78D,KAAKs3D,OAASA,GAChBt3D,KAAKm6D,WAAa,GACX,IAEPn6D,KAAK6gB,IAAMs7C,EACXn8D,KAAKs3D,MAAQwF,EACb98D,KAAKk6D,SAAW6C,GACT,IAIX9C,EAAAh4D,UAAAi7D,KAAA,WACE,IAAIC,EAUJ,OATIC,GACFD,EAAQC,EACRA,EAAgB,MAEhBD,EAAQ,IAAIE,EAEdF,EAAMt8C,IAAM7gB,KAAK6gB,IACjBs8C,EAAM7F,MAAQt3D,KAAKs3D,MACnB6F,EAAMjD,SAAWl6D,KAAKk6D,SACfiD,GAGTlD,EAAAh4D,UAAAq7D,QAAA,SAAQH,GACNC,EAAgBD,GAGlBlD,EAAAh4D,UAAAs7D,MAAA,SAAMJ,GACJn9D,KAAK6gB,IAAMs8C,EAAMt8C,IACjB7gB,KAAKs3D,MAAQ6F,EAAM7F,MACnBt3D,KAAKk6D,SAAWiD,EAAMjD,SACtBl6D,KAAKm6D,WAAa,GAGpBF,EAAAh4D,UAAA8I,MAAA,SAAMqB,EAAiBC,GAOrB,YAPI,IAAAD,OAAc,QAAG,IAAAC,OAAY,GAC7BD,EAAQ,GACVA,EAAQpM,KAAKk6D,SACb7tD,EAAMrM,KAAK6gB,KACFxU,EAAM,IACfA,EAAMD,GAED,IAAIsB,EAAM1N,KAAK2L,OAAQS,EAAOC,IAGvC4tD,EAAAh4D,UAAAu7D,eAAA,WAIE,IAHA,IAAIvxD,EAAOjM,KAAK2L,OAAOM,KACnBG,EAAQpM,KAAK6gB,IACbxU,EAAMrM,KAAKqM,MAEXrM,KAAK6gB,IAAMxU,GACbxC,EAAAuyD,iBAAiBnwD,EAAKM,WAAWvM,KAAK6gB,QAExC,OAAO5U,EAAKQ,UAAUL,EAAOpM,KAAK6gB,MAGpCo5C,EAAAh4D,UAAA0hD,WAAA,WAME,IALA,IAAI13C,EAAOjM,KAAK2L,OAAOM,KACnBwxD,EAAQxxD,EAAKM,WAAWvM,KAAK6gB,OAC7BzU,EAAQpM,KAAK6gB,IACbxU,EAAMrM,KAAKqM,IACXspC,EAAS,KACA,CACX,GAAI31C,KAAK6gB,KAAOxU,EAAK,CACnBspC,GAAU1pC,EAAKQ,UAAUL,EAAOpM,KAAK6gB,KACrC7gB,KAAKqN,MACHwW,EAAApZ,eAAeizD,4BACf19D,KAAK+K,MAAMqB,EAAQ,EAAGC,IAExB,MAEF,IAAI3L,EAAIuL,EAAKM,WAAWvM,KAAK6gB,KAC7B,GAAIngB,GAAK+8D,EAAO,CACd9nB,GAAU1pC,EAAKQ,UAAUL,EAAOpM,KAAK6gB,OACrC,MAEF,GAAK,IAADngB,EAAJ,CAMA,GAAImJ,EAAAyC,YAAY5L,IAAW,IAAL+8D,EAA4B,CAChD9nB,GAAU1pC,EAAKQ,UAAUL,EAAOpM,KAAK6gB,KACrC7gB,KAAKqN,MACHwW,EAAApZ,eAAeizD,4BACf19D,KAAK+K,MAAMqB,EAAQ,EAAGpM,KAAK6gB,MAE7B,QAEA7gB,KAAK6gB,SAbL80B,GAAU1pC,EAAKQ,UAAUL,EAAOpM,KAAK6gB,KACrC80B,GAAU31C,KAAK29D,qBACfvxD,EAAQpM,KAAK6gB,IAajB,OAAO80B,GAGTskB,EAAAh4D,UAAA07D,mBAAA,WACE,IAAItxD,EAAMrM,KAAKqM,IACf,KAAMrM,KAAK6gB,KAAOxU,EAKhB,OAJArM,KAAKqN,MACHwW,EAAApZ,eAAemzD,uBACf59D,KAAK+K,MAAMsB,IAEN,GAGT,IAAIJ,EAAOjM,KAAK2L,OAAOM,KACnBvL,EAAIuL,EAAKM,WAAWvM,KAAK6gB,OAC7B,OAAQngB,GACN,QAAkB,MAAO,KACzB,QAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,QAA2B,MAAO,IAClC,QAA2B,MAAO,IAClC,SACE,OACEV,KAAK6gB,IAAMxU,GACc,KAAzBJ,EAAKM,WAAWvM,KAAK6gB,QAEnB7gB,KAAK6gB,IACA7gB,KAAK69D,6BAEP79D,KAAK89D,oBAEd,QAEI99D,KAAK6gB,IAAMxU,GACc,IAAzBJ,EAAKM,WAAWvM,KAAK6gB,QAEnB7gB,KAAK6gB,IAIX,QACA,UACA,UAAkC,MAAO,GACzC,QAAS,OAAO7Z,OAAO+2D,aAAar9D,KAIxCu5D,EAAAh4D,UAAA+7D,kBAAA,WAKE,IAJA,IAAI/xD,EAAOjM,KAAK2L,OAAOM,KACnBG,EAAQpM,KAAK6gB,IACbxU,EAAMrM,KAAKqM,IACX4xD,GAAU,IACD,CACX,GAAIj+D,KAAK6gB,KAAOxU,EAAK,CACnBrM,KAAKqN,MACHwW,EAAApZ,eAAeyzD,wCACfl+D,KAAK+K,MAAMqB,EAAOC,IAEpB,MAEF,GAA6B,IAAzBJ,EAAKM,WAAWvM,KAAK6gB,KAAzB,CAKA,IAAIngB,EAAIuL,EAAKM,WAAWvM,KAAK6gB,KAC7B,IAAKo9C,GAAY,IAADv9D,EAAqB,MACrC,GAAImJ,EAAAyC,YAAY5L,GAAI,CAClBV,KAAKqN,MACHwW,EAAApZ,eAAeyzD,wCACfl+D,KAAK+K,MAAMqB,EAAOpM,KAAK6gB,MAEzB,QAEA7gB,KAAK6gB,IACPo9C,GAAU,QAdNj+D,KAAK6gB,IACPo9C,GAAU,EAed,OAAOhyD,EAAKQ,UAAUL,EAAOpM,KAAK6gB,MAGpCo5C,EAAAh4D,UAAAk8D,gBAAA,WAKE,IAJA,IAAIlyD,EAAOjM,KAAK2L,OAAOM,KACnBG,EAAQpM,KAAK6gB,IACbxU,EAAMrM,KAAKqM,IACXwI,EAAQ,EACL7U,KAAK6gB,IAAMxU,GAAK,CACrB,IAAI3L,EAASuL,EAAKM,WAAWvM,KAAK6gB,KAClC,IAAKhX,EAAAuyD,iBAAiB17D,GAAI,MAI1B,SAHEV,KAAK6gB,IAGCngB,GACN,SACEmU,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,QACEA,GAAS,GAWf,OANc,GAAVA,GACF7U,KAAKqN,MACHwW,EAAApZ,eAAe2zD,iCACfp+D,KAAK+K,MAAMqB,EAAOpM,KAAK6gB,MAGpB5U,EAAKQ,UAAUL,EAAOpM,KAAK6gB,MAGpCo5C,EAAAh4D,UAAAq5D,YAAA,WACE,IAAIjvD,EAAMrM,KAAKqM,IACXJ,EAAOjM,KAAK2L,OAAOM,KACvB,GAAIjM,KAAK6gB,IAAM,EAAIxU,GAAgC,IAAzBJ,EAAKM,WAAWvM,KAAK6gB,KAC7C,OAAQ5U,EAAKM,WAAWvM,KAAK6gB,IAAM,IACjC,SACA,QACA,QACA,QACA,SACA,QAAiB,OAAO,EAI5B,IADA,IAAIA,EAAM7gB,KAAK6gB,IACRA,EAAMxU,GAAK,CAChB,IAAI3L,EAAIuL,EAAKM,WAAWsU,GACxB,GAAK,IAADngB,GAAsB,KAADA,GAAoB,IAADA,EAAiB,OAAO,EACpE,IAAKA,EAAC,IAAkBA,EAAC,KAAoB,IAADA,EAAiB,MAE7DmgB,IAEF,OAAO,GAGTo5C,EAAAh4D,UAAAo8D,YAAA,WACE,IAAIpyD,EAAOjM,KAAK2L,OAAOM,KACvB,GAAIjM,KAAK6gB,IAAM,EAAI7gB,KAAKqM,KAAgC,IAAzBJ,EAAKM,WAAWvM,KAAK6gB,KAAqB,CACvE,OAAQ5U,EAAKM,WAAWvM,KAAK6gB,IAAM,IACjC,SACA,QAEE,OADA7gB,KAAK6gB,KAAO,EACL7gB,KAAKs+D,iBAEd,QACA,QAEE,OADAt+D,KAAK6gB,KAAO,EACL7gB,KAAKu+D,oBAEd,SACA,QAEE,OADAv+D,KAAK6gB,KAAO,EACL7gB,KAAKw+D,mBAGhB,GAAI30D,EAAA40D,aAAaxyD,EAAKM,WAAWvM,KAAK6gB,IAAM,IAAK,CAC/C,IAAIzU,EAAQpM,KAAK6gB,MACf7gB,KAAK6gB,IACP,IAAIvf,EAAQtB,KAAKw+D,mBAKjB,OAJAx+D,KAAKqN,MACHwW,EAAApZ,eAAei0D,8CACf1+D,KAAK+K,MAAMqB,EAAOpM,KAAK6gB,MAElBvf,GAGX,OAAOtB,KAAK2+D,sBAGd1E,EAAAh4D,UAAAq8D,eAAA,WAOE,IANA,IAAIryD,EAAOjM,KAAK2L,OAAOM,KACnBG,EAAQpM,KAAK6gB,IACbvf,EAAQwoB,QAAQ,GAChB80C,EAAQ90C,QAAQ,GAChB+0C,EAASzyD,EACTC,EAAMrM,KAAKqM,IACRrM,KAAK6gB,IAAMxU,GAAK,CACrB,IAAIwU,EAAM7gB,KAAK6gB,IACXngB,EAAIuL,EAAKM,WAAWsU,GACxB,GAAIngB,GAAC,IAAmBA,GAAC,GAEvBY,EAAQw9D,QACNC,QAAQz9D,EAAOs9D,GACf90C,QAAQppB,EAAC,UAEL,GAAIA,GAAC,IAAkBA,GAAC,GAE9BY,EAAQw9D,QACNC,QAAQz9D,EAAOs9D,GACf90C,QAAQ,GAAKppB,EAAC,UAEX,GAAIA,GAAC,IAAkBA,GAAC,IAE7BY,EAAQw9D,QACNC,QAAQz9D,EAAOs9D,GACf90C,QAAQ,GAAKppB,EAAC,SAEX,IAAK,IAADA,EAWT,MAVIm+D,GAAUh+C,GACZ7gB,KAAKqN,MACHwxD,GAAUzyD,EACNyX,EAAApZ,eAAeu0D,wCACfn7C,EAAApZ,eAAew0D,0DACnBj/D,KAAK+K,MAAM8V,IAGfg+C,EAASh+C,EAAM,EAIjB7gB,KAAK6gB,IAAMA,EAAM,EAanB,OAXI7gB,KAAK6gB,KAAOzU,EACdpM,KAAKqN,MACHwW,EAAApZ,eAAey0D,2BACfl/D,KAAK+K,MAAMqB,IAEJyyD,GAAU7+D,KAAK6gB,KACxB7gB,KAAKqN,MACHwW,EAAApZ,eAAeu0D,wCACfh/D,KAAK+K,MAAM8zD,EAAS,IAGjBv9D,GAGT24D,EAAAh4D,UAAA08D,mBAAA,WAOE,IANA,IAAI1yD,EAAOjM,KAAK2L,OAAOM,KACnBG,EAAQpM,KAAK6gB,IACbxU,EAAMrM,KAAKqM,IACX/K,EAAQwoB,QAAQ,GAChBq1C,EAASr1C,QAAQ,IACjB+0C,EAASzyD,EACNpM,KAAK6gB,IAAMxU,GAAK,CACrB,IAAIwU,EAAM7gB,KAAK6gB,IACXngB,EAAIuL,EAAKM,WAAWsU,GACxB,GAAIngB,GAAC,IAAmBA,GAAC,GAEvBY,EAAQw9D,QACNM,QAAQ99D,EAAO69D,GACfr1C,QAAQppB,EAAC,SAEN,IAAK,IAADA,EAWT,MAVIm+D,GAAUh+C,GACZ7gB,KAAKqN,MACHwxD,GAAUzyD,EACNyX,EAAApZ,eAAeu0D,wCACfn7C,EAAApZ,eAAew0D,0DACnBj/D,KAAK+K,MAAM8V,IAGfg+C,EAASh+C,EAAM,EAIjB7gB,KAAK6gB,IAAMA,EAAM,EAanB,OAXI7gB,KAAK6gB,KAAOzU,EACdpM,KAAKqN,MACHwW,EAAApZ,eAAe40D,eACfr/D,KAAK+K,MAAMqB,IAEJyyD,GAAU7+D,KAAK6gB,KACxB7gB,KAAKqN,MACHwW,EAAApZ,eAAeu0D,wCACfh/D,KAAK+K,MAAM8zD,EAAS,IAGjBv9D,GAGT24D,EAAAh4D,UAAAu8D,iBAAA,WAOE,IANA,IAAIvyD,EAAOjM,KAAK2L,OAAOM,KACnBG,EAAQpM,KAAK6gB,IACbvf,EAAQwoB,QAAQ,GAChBw1C,EAAQx1C,QAAQ,GAChB+0C,EAASzyD,EACTC,EAAMrM,KAAKqM,IACRrM,KAAK6gB,IAAMxU,GAAK,CACrB,IAAIwU,EAAM7gB,KAAK6gB,IACXngB,EAAIuL,EAAKM,WAAWsU,GACxB,GAAIngB,GAAC,IAAmBA,GAAC,GAEvBY,EAAQw9D,QACNC,QAAQz9D,EAAOg+D,GACfx1C,QAAQppB,EAAC,SAEN,IAAK,IAADA,EAWT,MAVIm+D,GAAUh+C,GACZ7gB,KAAKqN,MACHwxD,GAAUzyD,EACNyX,EAAApZ,eAAeu0D,wCACfn7C,EAAApZ,eAAew0D,0DACnBj/D,KAAK+K,MAAM8V,IAGfg+C,EAASh+C,EAAM,IAIf7gB,KAAK6gB,IAaT,OAXI7gB,KAAK6gB,KAAOzU,EACdpM,KAAKqN,MACHwW,EAAApZ,eAAe80D,qBACfv/D,KAAK+K,MAAMqB,IAEJyyD,GAAU7+D,KAAK6gB,KACxB7gB,KAAKqN,MACHwW,EAAApZ,eAAeu0D,wCACfh/D,KAAK+K,MAAM8zD,EAAS,IAGjBv9D,GAGT24D,EAAAh4D,UAAAs8D,kBAAA,WAOE,IANA,IAAItyD,EAAOjM,KAAK2L,OAAOM,KACnBG,EAAQpM,KAAK6gB,IACbvf,EAAQwoB,QAAQ,GAChB01C,EAAQ11C,QAAQ,GAChB+0C,EAASzyD,EACTC,EAAMrM,KAAKqM,IACRrM,KAAK6gB,IAAMxU,GAAK,CACrB,IAAIwU,EAAM7gB,KAAK6gB,IACXngB,EAAIuL,EAAKM,WAAWsU,GACxB,GAAK,IAADngB,EAEFY,EAAQy9D,QAAQz9D,EAAOk+D,QAClB,GAAK,IAAD9+D,EAETY,EAAQw9D,QACNC,QAAQz9D,EAAOk+D,GACfA,OAEG,IAAK,IAAD9+D,EAWT,MAVIm+D,GAAUh+C,GACZ7gB,KAAKqN,MACHwxD,GAAUzyD,EACNyX,EAAApZ,eAAeu0D,wCACfn7C,EAAApZ,eAAew0D,0DACnBj/D,KAAK+K,MAAM8V,IAGfg+C,EAASh+C,EAAM,EAIjB7gB,KAAK6gB,IAAMA,EAAM,EAanB,OAXI7gB,KAAK6gB,KAAOzU,EACdpM,KAAKqN,MACHwW,EAAApZ,eAAeg1D,sBACfz/D,KAAK+K,MAAMqB,IAEJyyD,GAAU7+D,KAAK6gB,KACxB7gB,KAAKqN,MACHwW,EAAApZ,eAAeu0D,wCACfh/D,KAAK+K,MAAM8zD,EAAS,IAGjBv9D,GAGT24D,EAAAh4D,UAAAy9D,UAAA,WAWE,OAAO1/D,KAAK2/D,oBAGd1F,EAAAh4D,UAAA09D,iBAAA,WAKE,IAHA,IAAIvzD,EAAQpM,KAAK6gB,IACbxU,EAAMrM,KAAKqM,IACXJ,EAAOjM,KAAK2L,OAAOM,KAChBjM,KAAK6gB,IAAMxU,GAAOxC,EAAAixD,eAAe7uD,EAAKM,WAAWvM,KAAK6gB,SACzD7gB,KAAK6gB,IAET,GAAI7gB,KAAK6gB,IAAMxU,GAAgC,IAAzBJ,EAAKM,WAAWvM,KAAK6gB,KAEzC,MADE7gB,KAAK6gB,IACA7gB,KAAK6gB,IAAMxU,GAAOxC,EAAAixD,eAAe7uD,EAAKM,WAAWvM,KAAK6gB,SACzD7gB,KAAK6gB,IAGX,GAAI7gB,KAAK6gB,IAAMxU,EAAK,CAClB,IAAI3L,EAAIuL,EAAKM,WAAWvM,KAAK6gB,KAC7B,GAAK,KAADngB,GAAoB,IAADA,EAQrB,OANIV,KAAK6gB,IAAMxU,GACkB,KAA9B3L,EAAIuL,EAAKM,WAAWvM,KAAK6gB,OAA4B,IAADngB,GACrDmJ,EAAAixD,eAAe7uD,EAAKM,WAAWvM,KAAK6gB,IAAM,QAExC7gB,KAAK6gB,IAEF7gB,KAAK6gB,IAAMxU,GAAOxC,EAAAixD,eAAe7uD,EAAKM,WAAWvM,KAAK6gB,SACzD7gB,KAAK6gB,IAIb,OAAO++C,WAAW3zD,EAAKQ,UAAUL,EAAOpM,KAAK6gB,OAG/Co5C,EAAAh4D,UAAA49D,aAAA,WACE,MAAM,IAAIvwC,MAAM,oBAGlB2qC,EAAAh4D,UAAA67D,kBAAA,WAKE,IAJA,IAAIgC,EAAS,EACTx+D,EAAQ,EACR+K,EAAMrM,KAAKqM,IACXJ,EAAOjM,KAAK2L,OAAOM,KAChBjM,KAAK6gB,IAAMxU,GAAK,CACrB,IAAI3L,EAAIuL,EAAKM,WAAWvM,KAAK6gB,OAC7B,GAAIngB,GAAC,IAAmBA,GAAC,GACvBY,GAASA,GAAS,GAAKZ,EAAC,QACnB,GAAIA,GAAC,IAAkBA,GAAC,GAC7BY,GAASA,GAAS,GAAKZ,GAAI,OACtB,MAAIA,GAAC,IAAkBA,GAAC,KAO7B,OAJAV,KAAKqN,MACHwW,EAAApZ,eAAey0D,2BACfl/D,KAAK+K,MAAM/K,KAAK6gB,IAAM,EAAG7gB,KAAK6gB,MAEzB,GANPvf,GAASA,GAAS,GAAKZ,GAAI,GAQ7B,GAAgB,KAAVo/D,EAAa,MAErB,OAAIA,GACF9/D,KAAKqN,MACHwW,EAAApZ,eAAemzD,uBACf59D,KAAK+K,MAAM/K,KAAK6gB,MAEX,IAEF7Z,OAAO+2D,aAAaz8D,IAGrB24D,EAAAh4D,UAAA47D,0BAAR,WACE,IAAIzxD,EAAQpM,KAAK6gB,IACbvf,EAAQtB,KAAKs+D,iBACbyB,EAAUngB,QAAQt+C,GAClB0+D,GAAU,EAEd51D,QAAQy1C,SAASv+C,IACby+D,EAAU,UACZ//D,KAAKqN,MACHwW,EAAApZ,eAAew1D,4EACfjgE,KAAK+K,MAAMqB,EAAOpM,KAAK6gB,MAEzBm/C,GAAU,GAGZ,IAAI3zD,EAAMrM,KAAKqM,IACXJ,EAAOjM,KAAK2L,OAAOM,KAiBvB,OAhBIjM,KAAK6gB,KAAOxU,GACdrM,KAAKqN,MACHwW,EAAApZ,eAAemzD,uBACf59D,KAAK+K,MAAMqB,EAAOC,IAEpB2zD,GAAU,GACwB,KAAzB/zD,EAAKM,WAAWvM,KAAK6gB,OAC5B7gB,KAAK6gB,KAEP7gB,KAAKqN,MACHwW,EAAApZ,eAAey1D,qCACflgE,KAAK+K,MAAMqB,EAAOpM,KAAK6gB,MAEzBm/C,GAAU,GAGRA,EAAgB,GACbD,EAAU,MACb/4D,OAAO+2D,aAAagC,GACpB/4D,OAAO+2D,aACsB,OAA3BgC,EAAU,QAAW,IACM,OAA3BA,EAAU,MAAS,QAI3B9F,EAAAh4D,UAAAk+D,OAAA,aAEFlG,EA5lCA,CAA+Bp2C,EAAA/W,mBAAlBpN,EAAAu6D,YA+lCb,IAAAoD,EAAA,aAAa39D,EAAA29D,QAUb,IAAID,EAA8B,oBC5lDlC,IAAAgD,EAGAA,EAAA,WACA,OAAApgE,KADA,GAIA,IAEAogE,KAAA,IAAAt3C,SAAA,iBACC,MAAAu3C,GAED,iBAAAC,SAAAF,EAAAE,QAOA3gE,EAAAD,QAAA0gE,44BCdA,IAoFYG,EApFZ18C,EAAA1jB,EAAA,GAKA2xD,EAAA3xD,EAAA,GAuBA4jB,EAAA5jB,EAAA,GA6BA2jB,EAAA3jB,EAAA,GAQAoN,EAAApN,EAAA,GAKA0J,EAAA1J,EAAA,GAKAqN,EAAArN,EAAA,GAIAqgE,EAAArgE,EAAA,KAKA,SAAYogE,GAEVA,IAAA,mBAEAA,IAAA,qBAJF,CAAYA,EAAA7gE,EAAA6gE,aAAA7gE,EAAA6gE,WAAU,KAQtB,IAAAv4C,EAAA,SAAAxL,GAWE,SAAAwL,EAEEuO,GAFF,IAAA7Z,EAIEF,EAAAhc,KAAAR,KAAMu2B,EAAQxpB,cAAY/M,YAT5B0c,EAAA+jD,sBAA2C,KAE3C/jD,EAAAgkD,yBAA+C,KAQ7ChkD,EAAK6Z,QAAUA,IAmwDnB,OAnxD8B9Z,EAAAuL,EAAAxL,GAsB5BwL,EAAA/lB,UAAA0+D,YAAA,SAEE5vD,EAEA6vD,EAEAC,EAEAC,GAEA,YAJA,IAAAD,MAAA,WAEA,IAAAC,MAAyBP,EAAWQ,QAE5BhwD,EAAKlD,MACX,KAAKkW,EAAApW,SAASkP,UACZ,OAAO7c,KAAKghE,iBACKjwD,EACf6vD,EACAC,EACAC,GAGJ,KAAK/8C,EAAApW,SAASmP,aACZ,OAAO9c,KAAKihE,oBACQlwD,EAClB6vD,EACAC,EACAC,GAGJ,QAAS12D,QAAO,GAElB,OAAO,MAID4d,EAAA/lB,UAAA++D,iBAAR,SAEEjwD,EAEA6vD,EAEAC,EAEAC,QAFA,IAAAD,MAAA,WAEA,IAAAC,MAAyBP,EAAWQ,QAEpC,IAAIG,EAAWnwD,EAAKnQ,KAChBugE,EAAoBpwD,EAAK3B,cACzBgyD,GAAgBF,EAASlyD,KAG7B,GAAIoyD,EAAc,CAChB,IAAIC,EAAaH,EAASnyD,WAAW9C,KACrC,GAAiB,OAAb40D,GAAqBA,EAAS53C,IAAIo4C,GAAa,CACjD,IAAI/xD,EAAOuxD,EAAS3/D,IAAImgE,GASxB,OAR0B,OAAtBF,GAA8BA,EAAkBh1D,QAC9C20D,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAe62D,sBACfvwD,EAAKhG,MAAOuE,EAAK5D,YAInBqF,EAAK1B,YACFC,EAAK+N,GAAE,MACNyjD,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAe82D,gCACfxwD,EAAKhG,MAAOuE,EAAK5D,YAIhB4D,EAAK4jD,cAEP5jD,GAKX,IAAI2D,EAAUjT,KAAKyuB,gBAAgByyC,EAAUN,EAAYE,GACzD,IAAK7tD,EAAS,OAAO,KAGrB,GAAIA,EAAQujB,WACVvjB,EAAUA,EAAQujB,eAEb,CAGL,GAAIvjB,EAAQpF,MAAQikD,EAAAlrC,YAAYiR,KAiB9B,OAhB0B,OAAtBspC,GAA8BA,EAAkBh1D,QAC9C20D,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAe62D,sBACfvwD,EAAKhG,MAAOkI,EAAQ6U,cAItB/W,EAAK1B,YACHyxD,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAe82D,gCACfxwD,EAAKhG,MAAOkI,EAAQrS,KAAO,QAI1BkjB,EAAAuF,KAAKjmB,IAId,GAAI6P,EAAQpF,MAAQikD,EAAAlrC,YAAY+G,gBAAiB,CAC/C,IAAIsL,EAAWj5B,KAAKwhE,8BACFvuD,EAChBkuD,EACAP,EACA/2D,EAAA43D,QAAqBZ,GACrB9vD,EACA+vD,GAEF,OAAK7nC,EACEloB,EAAK1B,WAAa4pB,EAAS3pB,KAAK4jD,aAAej6B,EAAS3pB,KADzC,MAM1B,GAAI2D,EAAQpF,MAAQikD,EAAAlrC,YAAY8Q,eAAgB,CAG9C,GAAIzkB,EAAQoK,GAAG9P,EAAAlL,YAAY20B,UAAW,CACV,OAAtBmqC,GAA8BA,EAAkBh1D,QAC9C20D,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAe62D,sBACfvwD,EAAKhG,MAAOkI,EAAQ6U,cAI1B,IAAI45C,EAAwBzuD,EAAS3D,KACrC,GAAIyB,EAAK1B,WAAY,CACnB,GAAKqyD,EAAKrkD,GAAE,KAQV,OAAOqkD,EAAKxO,aAPR4N,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAe82D,gCACfL,EAASn2D,MAAOm2D,EAASnyD,WAAW9C,MAO5C,OAAOy1D,EAIT,GAAIN,EACF,OAAQF,EAASnyD,WAAWsC,QAC1B,KAAK9D,EAAAvK,cAAc8B,OAAQ,OAAO9E,KAAK2hE,yBAAyB5wD,EAAM6vD,EAAYC,EAAUC,GAC5F,KAAKvzD,EAAAvK,cAAc+B,QAAS,OAAO/E,KAAK4hE,0BAA0B7wD,EAAM6vD,EAAYC,EAAUC,GAC9F,KAAKvzD,EAAAvK,cAAcgC,QAAS,OAAOhF,KAAK6hE,0BAA0B9wD,EAAM6vD,EAAYC,EAAUC,GAKlG,IAAIxjC,EAAsCrqB,EAASqqB,mBAEnD,GAAIA,GASF,IARgBt9B,KAAK8hE,qBACnBxkC,EACA6jC,EACAP,EACAC,EAAWh3D,EAAA43D,QAAQZ,GACnB9vD,EACA+vD,GAEkB,OAAO,UAClBK,GAAqBA,EAAkBh1D,QAChDnM,KAAKqN,MACHwW,EAAApZ,eAAe62D,sBACfvwD,EAAKhG,MAAOm2D,EAASnyD,WAAW9C,MASpC,KANIqD,EAAOtP,KAAK2gE,YACG1tD,EAAS8uD,SAC1B9uD,EACA4tD,EACAC,IAES,OAAO,KAClB,GAAI/vD,EAAK1B,WAAY,CACnB,GAAKC,EAAK+N,GAAE,KAQV,OAAO/N,EAAK4jD,aAPR4N,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAe82D,gCACfL,EAASn2D,MAAOm2D,EAASnyD,WAAW9C,MAO5C,OAAOqD,EAQT,OANIwxD,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAeu3D,mBACfd,EAASn2D,MAAOm2D,EAASnyD,WAAW9C,MAGjC,MAID+b,EAAA/lB,UAAAg/D,oBAAR,SAEElwD,EAEA6vD,EAEAC,EAEAC,QAFA,IAAAD,MAAA,WAEA,IAAAC,MAAyBP,EAAWQ,QAEpC,IAAIpxD,EAAmBoB,EAAKpB,iBACxB8qB,EAAwB,KAC5B,GAAI9qB,KACF8qB,EAAWz6B,KAAK2gE,YACdhxD,EACAixD,EACAC,EACAC,IAEa,OAAO,KAQxB,IANA,IAAImB,EAAiBlxD,EAAKtB,WACtBqlD,EAAgBmN,EAAe91D,OAC/BuuB,EAAiB,IAAIzzB,MAAY6tD,GACjCT,EAAiB,IAAIptD,MAAc6tD,GACnCR,EAAqB,EACrBC,GAAU,EACLl0D,EAAI,EAAGA,EAAIy0D,IAAiBz0D,EAAG,CACtC,IAAI6hE,EAAgBD,EAAe5hE,GACnC,OAAQ6hE,EAAc5xD,eACpB,KAAKyT,EAAA/G,cAAc+4C,QACjBzB,EAAqBj0D,EAAI,EACzB,MAEF,KAAK0jB,EAAA/G,cAAcmlD,KACjB/3D,OAAO/J,GAAKy0D,GACZP,GAAU,EAId,IAAI6N,EAAoBF,EAAc5yD,KACtC,GAAIyU,EAAAJ,cAAcy+C,GAOhB,OANItB,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAe43D,cACfD,EAAkBr3D,OAGf,KAET,IAAI4vB,EAAgB36B,KAAK2gE,YACvByB,EACAxB,EACAC,EACAC,GAEF,IAAKnmC,EAAe,OAAO,KAC3BD,EAAer6B,GAAKs6B,EACpB05B,EAAeh0D,GAAK6hE,EAActhE,KAAKqL,KAEzC,IACIyD,EADA4yD,EAAiBvxD,EAAKrB,WAE1B,GAAIqU,EAAAJ,cAAc2+C,GACZxB,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAe43D,cACfC,EAAev3D,OAGnB2E,EAAaoU,EAAAuF,KAAKG,UAQlB,KANA9Z,EAAa1P,KAAK2gE,YAChB2B,EACA1B,EACAC,EACAC,IAEe,OAAO,KAE1B,IAAI5mD,EAAY,IAAI4J,EAAAoT,UAAUl3B,KAAKu2B,QAASmE,EAAgBhrB,EAAY+qB,GAIxE,OAHAvgB,EAAUm6C,eAAiBA,EAC3Bn6C,EAAUo6C,mBAAqBA,EAC/Bp6C,EAAUq6C,QAAUA,EACbxjD,EAAK1B,WAAa6K,EAAU5K,KAAK4jD,aAAeh5C,EAAU5K,MAG3D0Y,EAAA/lB,UAAA0/D,yBAAR,SAEE5wD,EAEA6vD,EAEAC,EAEAC,QAFA,IAAAD,MAAA,WAEA,IAAAC,MAAyBP,EAAWQ,QAEpC,IAAII,EAAoBpwD,EAAK3B,cAC7B,IAAM+xD,GAAiD,GAA5BA,EAAkBh1D,OAO3C,OANI20D,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAe83D,oCACfxxD,EAAKhG,MAAO,KAAMo2D,EAAoBA,EAAkBh1D,OAAS,GAAGT,SAAS,KAG1E,KAET,IAAI82D,EAAexiE,KAAK2gE,YAAYQ,EAAkB,GAAIP,EAAYC,EAAUC,GAChF,IAAK0B,EAAc,OAAO,KAC1B,OAAQA,EAAa30D,MACnB,OACA,OACA,OAAmB,OAAOiW,EAAAuF,KAAKjmB,IAC/B,OAAqB,IAAKpD,KAAKu2B,QAAQpN,QAAQY,SAAU,OAAOjG,EAAAuF,KAAKjmB,IACrE,OAAmB,OAAO0gB,EAAAuF,KAAKhmB,IAC/B,OACA,OACA,OACA,QAAoB,OAAOygB,EAAAuF,KAAK5lB,IAChC,OAAqB,IAAKzD,KAAKu2B,QAAQpN,QAAQY,SAAU,OAAOjG,EAAAuF,KAAK5lB,IACrE,OAAmB,OAAOqgB,EAAAuF,KAAK3lB,IAC/B,QAAmB,OAAOogB,EAAAuF,KAAKxlB,IAC/B,QAAmB,OAAOigB,EAAAuF,KAAKvlB,IAC/B,QAAoB,OAAOggB,EAAAuF,KAAKtlB,KAChC,QAAoB,OAAO+f,EAAAuF,KAAKG,KAChC,QAASpf,QAAO,GAElB,OAAO,MAGD4d,EAAA/lB,UAAA2/D,0BAAR,SAEE7wD,EAEA6vD,EAEAC,EAEAC,QAFA,IAAAD,MAAA,WAEA,IAAAC,MAAyBP,EAAWQ,QAEpC,IAAII,EAAoBpwD,EAAK3B,cAC7B,IAAM+xD,GAAiD,GAA5BA,EAAkBh1D,OAO3C,OANI20D,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAe83D,oCACfxxD,EAAKhG,MAAO,KAAMo2D,EAAoBA,EAAkBh1D,OAAS,GAAGT,SAAS,KAG1E,KAET,IAAI82D,EAAexiE,KAAK2gE,YAAYQ,EAAkB,GAAIP,EAAYC,EAAUC,GAChF,IAAK0B,EAAc,OAAO,KAC1B,IAAIvjC,EAAiBujC,EAAavjC,eAClC,IAAKA,EAOH,OANI6hC,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAeg4D,qCACftB,EAAkB,GAAGp2D,MAAOy3D,EAAa92D,YAGtC,KAET,IAAIoyB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAaiB,aAC1D,OAAIiZ,EACEA,EAASzgB,GAAG9P,EAAAlL,YAAY4xB,SAC1B7pB,OAAmD,GAA5C0zB,EAAS5jB,UAAUwgB,eAAevuB,QAClC2xB,EAAS5jB,UAAUwgB,eAAe,KAEzCtwB,OAAmD,GAA5C0zB,EAAS5jB,UAAUwgB,eAAevuB,QAClC2xB,EAAS5jB,UAAUwgB,eAAe,KAGzComC,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAeg4D,qCACftB,EAAkB,GAAGp2D,MAAOy3D,EAAa92D,YAGtC,OAGDsc,EAAA/lB,UAAA4/D,0BAAR,SAEE9wD,EAEA6vD,EAEAC,EAEAC,QAFA,IAAAD,MAAA,WAEA,IAAAC,MAAyBP,EAAWQ,QAEpC,IAAII,EAAoBpwD,EAAK3B,cAC7B,IAAM+xD,GAAiD,GAA5BA,EAAkBh1D,OAO3C,OANI20D,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAe83D,oCACfxxD,EAAKhG,MAAO,KAAMo2D,EAAoBA,EAAkBh1D,OAAS,GAAGT,SAAS,KAG1E,KAET,IAAI82D,EAAexiE,KAAK2gE,YAAYQ,EAAkB,GAAIP,EAAYC,EAAUC,GAChF,IAAK0B,EAAc,OAAO,KAC1B,IAAIvjC,EAAiBujC,EAAavjC,eAClC,IAAKA,EAOH,OANI6hC,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAeg4D,qCACftB,EAAkB,GAAGp2D,MAAOy3D,EAAa92D,YAGtC,KAGT,IAAIoyB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAaiB,aAC1D,OAAIiZ,EAAiBA,EAAS5jB,UAAUxK,YACpCoxD,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAeg4D,qCACftB,EAAkB,GAAGp2D,MAAOy3D,EAAa92D,YAGtC,OAITsc,EAAA/lB,UAAAwsB,gBAAA,SAEE1d,EAEA6vD,EAEAE,QAAA,IAAAA,MAAaP,EAAWQ,QAExB,IAAI9tD,EAAU2tD,EAAWxpC,OAAOrmB,EAAKhC,WAAW9C,MAChD,IAAKgH,EAOH,OANI6tD,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAeu3D,mBACfjxD,EAAKhG,MAAOgG,EAAKhC,WAAW9C,MAGzB,KAIT,IAFA,IAAIy2D,EAAO3xD,EACP/B,EAAO+B,EAAK/B,KACTA,GAAM,CACX,KAAMiE,EAAUA,EAAQga,aAAaje,EAAKD,WAAW9C,OAOnD,OANI60D,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAek4D,oCACf3zD,EAAKjE,MAAOiE,EAAKD,WAAW9C,KAAMy2D,EAAK3zD,WAAW9C,MAG/C,KAETy2D,EAAO1zD,EACPA,EAAOA,EAAKA,KAEd,OAAOiE,GAIT+U,EAAA/lB,UAAA6/D,qBAAA,SAEErrD,EAEA0qD,EAEAP,EAEAC,EAEA+B,EAEA9B,QAJA,IAAAD,MAA6Bh3D,EAAA43D,gBAE7B,IAAAmB,MAAA,WAEA,IAAA9B,MAAyBP,EAAWQ,QAIpC,IAFA,IAAI8B,EAAoB,EACpBC,EAAoB,EACfziE,EAAI,EAAGojB,EAAIhN,EAAetK,OAAQ9L,EAAIojB,IAAKpjB,EAC7CoW,EAAepW,GAAG2P,eAAe6yD,IACpCC,EAEJ,IAAIC,EAAgB5B,EAAoBA,EAAkBh1D,OAAS,EACnE,GAAI42D,EAAgBF,GAAqBE,EAAgBD,EAYvD,OAXA9iE,KAAKqN,MACHwW,EAAApZ,eAAe83D,oCACfQ,EACIh/C,EAAArW,MAAMf,KACcw0D,EAAmB,GAAGp2D,MACtBo2D,EAAmB4B,EAAgB,GAAGh4D,OAE1DX,OAAOw4D,GAAuB73D,OACjCg4D,EAAgBF,EAAoBA,EAAoBC,GAAmBp3D,SAAS,IACrFq3D,EAAcr3D,SAAS,KAElB,KAET,IAAI0D,EAAgB,IAAInI,MAAY67D,GACpC,IAASziE,EAAI,EAAGA,EAAIyiE,IAAqBziE,EAAG,CAC1C,IAAIiP,EAAOjP,EAAI0iE,EACX/iE,KAAK2gE,YACeQ,EAAmB9gE,GACrCugE,EACAC,EACAC,GAEF9gE,KAAK2gE,YACHv2D,OAAOqM,EAAepW,GAAG2P,aACzB4wD,EACAC,EACAC,GAEN,IAAKxxD,EAAM,OAAO,KAElBuxD,EAASrjD,IAAI/G,EAAepW,GAAGO,KAAKqL,KAAMqD,GAC1CF,EAAc/O,GAAKiP,EAErB,OAAOF,GAMT4Y,EAAA/lB,UAAA+gE,kBAAA,SAEEjyD,EAEAkyD,EAEAC,EAEApC,GAEA,SAJA,IAAAoC,MAAgBp/C,EAAAuF,KAAKupC,WAErB,IAAAkO,MAAyBP,EAAWQ,QAE7BhwD,EAAKlD,MAAQkW,EAAApW,SAASY,eAC3BwC,EAAiCA,EAAMc,WAEzC,OAAQd,EAAKlD,MACX,KAAKkW,EAAApW,SAASS,UACZ,OAAOpO,KAAKmjE,2BACWpyD,EACrBkyD,EAASC,EAASpC,GAGtB,KAAK/8C,EAAApW,SAASwS,YACZ,OAAOngB,KAAKojE,6BACaryD,EACvBkyD,EAASC,EAASpC,GAGtB,KAAK/8C,EAAApW,SAASuS,aACZ,OAAOlgB,KAAKqjE,8BACctyD,EACxBkyD,EAASC,EAASpC,GAGtB,KAAK/8C,EAAApW,SAASsR,OACZ,OAAOjf,KAAKsjE,wBACQvyD,EAClBkyD,EAASC,EAASpC,GAGtB,KAAK/8C,EAAApW,SAASqS,KACZ,OAAOhgB,KAAKujE,sBACMxyD,EAChBkyD,EAASC,EAASpC,GAGtB,KAAK/8C,EAAApW,SAASc,MACZ,OAAOzO,KAAKwjE,uBACOzyD,EACjBkyD,EAASC,EAASpC,GAGtB,KAAK/8C,EAAApW,SAASQ,WACZ,OAAOnO,KAAKyjE,kBACY1yD,EACtBkyD,EAASA,EAAQS,eAAgB5C,GAGrC,KAAK/8C,EAAApW,SAASG,QACZ,OAAO9N,KAAK2jE,yBACS5yD,EACnBkyD,EAASC,EAASpC,GAGtB,KAAK/8C,EAAApW,SAASa,eACZ,OAAOxO,KAAK4jE,gCACgB7yD,EAC1BkyD,EAASC,EAASpC,GAGtB,KAAK/8C,EAAApW,SAASW,cACZ,OAAOtO,KAAK6jE,+BACe9yD,EACzBkyD,EAASC,EAASpC,GAGtB,KAAK/8C,EAAApW,SAASU,KACZ,OAAOrO,KAAK8jE,sBACM/yD,EAChBkyD,EAASC,EAASpC,GAWxB,OANIA,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf1iB,EAAKhG,OAGF,MAITid,EAAA/lB,UAAAwhE,kBAAA,SAEE1yD,EAEAkyD,EAEArC,EAEAE,QAFA,IAAAF,MAAsBqC,EAAQS,qBAE9B,IAAA5C,MAAyBP,EAAWQ,QAEpC,IACI9tD,EADArS,EAAOmQ,EAAK9E,KAEhB,OAAIgH,EAAUgwD,EAAQ7rC,OAAOx2B,KAC3BZ,KAAKygE,sBAAwB,KAC7BzgE,KAAK0gE,yBAA2B,KACzBztD,IAELA,EAAU2tD,EAAWxpC,OAAOx2B,KAC9BZ,KAAKygE,sBAAwB,KAC7BzgE,KAAK0gE,yBAA2B,KACzBztD,IAELA,EAAUjT,KAAKu2B,QAAQpJ,aAAavsB,KACtCZ,KAAKygE,sBAAwB,KAC7BzgE,KAAK0gE,yBAA2B,KACzBztD,IAEL6tD,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAeu3D,mBACfjxD,EAAKhG,MAAOnK,GAGT,OAIDonB,EAAA/lB,UAAA8hE,yBAAR,SAAiC5xC,EAAgB2uC,GAC/C,QAD+C,IAAAA,MAAyBP,EAAWQ,QAC/E5uC,EAAO9U,GAAG9P,EAAAlL,YAAY20B,UAAW,OAAO,EAC5C,IAAI+qC,EAAW5vC,EAAO4vC,SACtB,IAAKA,EAAU,OAAO,EACtB,IAAIzyD,EAAOtP,KAAK2gE,YACdoB,EACA5vC,EAAO3R,OACP,KACAsgD,GAEF,QAAKxxD,IACL6iB,EAAOJ,QAAQziB,IACR,IAIT0Y,EAAA/lB,UAAA2hE,gCAAA,SAEE7yD,EAEAkyD,EAEAC,EAEApC,QAAA,IAAAA,MAAyBP,EAAWQ,QAEpC,IAAIiD,EAAajzD,EAAKc,WAClB8rB,EAAS39B,KAAKgjE,kBAAkBgB,EAAYf,EAASC,EAASpC,GAClE,IAAKnjC,EAAQ,OAAO,KACpB,IAAIsmC,EAAelzD,EAAK/O,SAASiK,KAGjC,OAAQ0xB,EAAO9vB,MACb,KAAKikD,EAAAlrC,YAAYhJ,OAAQ,IAAK5d,KAAK+jE,yBAAiCpmC,EAAQmjC,GAAa,OAAO,KAChG,KAAKhP,EAAAlrC,YAAY6R,MACjB,KAAKq5B,EAAAlrC,YAAYgL,MACf,IAAItiB,EAA6BquB,EAAQruB,KAEzC,GAF+ClF,OAAOkF,GAAQwU,EAAAuF,KAAKG,QAC/DyV,EAAiB3vB,EAAK2vB,gBACL,CACnB,IAAI5X,EAAcrnB,KAAKu2B,QAAQlP,YAC/B,GAAK/X,EAAK+N,GAAE,OAAyBgK,EAAY4B,IAAI3Z,EAAKzB,MAOxD,OAJA7N,KAAKqN,MACHwW,EAAApZ,eAAek4D,oCACf5xD,EAAK/O,SAAS+I,MAAOk5D,EAAoCtmC,EAAQruB,KAAK5D,YAEjE,KANPuzB,EAAiB5X,EAAYnmB,IAAIoO,EAAKzB,MAS1C8vB,EAASsB,EACT,MAEF,KAAK6yB,EAAAlrC,YAAY4K,mBAOf,KANIyK,EAAiBj8B,KAAKkxB,gBACxB9mB,OAA2BuzB,EAAQlM,iBACnC,KACA5nB,EAAA43D,UACAX,IAEmB,OAAO,KAE5B,KADI7hC,EAAiBhD,EAAe/hB,UAAUxK,WAAWuvB,gBAMvD,OAJAj/B,KAAKqN,MACHwW,EAAApZ,eAAek4D,oCACf5xD,EAAK/O,SAAS+I,MAAOk5D,EAAchoC,EAAe/hB,UAAUxK,WAAWhE,YAElE,KAETiyB,EAASsB,EACT,MAEF,KAAK6yB,EAAAlrC,YAAY+K,SACf,IAAIsK,EAEJ,KADIgD,GADAhD,EAAiB7xB,OAAkBuzB,EAAQ1B,iBACX/hB,UAAUxK,WAAWuvB,gBAMvD,OAJAj/B,KAAKqN,MACHwW,EAAApZ,eAAek4D,oCACf5xD,EAAK/O,SAAS+I,MAAOk5D,EAAchoC,EAAe/hB,UAAUxK,WAAWhE,YAElE,KAETiyB,EAASsB,EACT,MAEF,KAAK6yB,EAAAlrC,YAAYxH,MACf,IAAIjM,EAAoBnT,KAAK0gE,yBAC7B,GAAIvtD,EAAmB,CACrB,IAAI+wD,EAAqBvmC,EAAQF,eAAeq0B,EAAAluC,aAAaiB,aAC7D,IAAKq/C,EAKH,OAJAlkE,KAAKqN,MACHwW,EAAApZ,eAAeg4D,qCACftvD,EAAkBpI,MAAe4yB,EAAQ7V,cAEpC,KAET,IAAIq8C,EAAYD,EAAWhqD,UAAUxK,WAErC,KADIuvB,EAAiBklC,EAAUllC,gBACV,CACf5X,EAAcrnB,KAAKu2B,QAAQlP,YAC/B,GAAK88C,EAAU9mD,GAAE,OAAyBgK,EAAY4B,IAAIk7C,EAAUt2D,MAOlE,OAJA7N,KAAKqN,MACHwW,EAAApZ,eAAek4D,oCACf5xD,EAAK/O,SAAS+I,MAAOk5D,EAAcE,EAAUz4D,YAExC,KANPuzB,EAAiB5X,EAAYnmB,IAAIijE,EAAUt2D,MAS/C8vB,EAASsB,EAEX,MAEF,KAAK6yB,EAAAlrC,YAAYqK,mBACf,IAAIuF,EAAamH,EAAOnH,WACxB,GAAIA,EAAY,CACd,IAAKA,EAAWnZ,GAAG9P,EAAAlL,YAAY20B,UAAW,CACxC,IAAIotC,EAAepkE,KAAK2gE,YAAYnqC,EAAWurC,SAAUvrC,EAAWhW,OAAQ,KAAMsgD,GAC9EsD,GAAc5tC,EAAWzE,QAAQqyC,GAEvC,IAAInlC,KAAiBzI,EAAWlnB,KAAK2vB,kBACjBtB,EAASsB,EAAeh9B,WAC5C,OAMN,OAAQ07B,EAAO9vB,MACb,KAAKikD,EAAAlrC,YAAY+G,gBACjB,KAAKmkC,EAAAlrC,YAAYxH,MACf,OAAG,CAED,IADIzI,EAAUgnB,EAAOhnB,UACNA,EAAQsS,IAAIg7C,GAGzB,OAFAjkE,KAAKygE,sBAAwBuD,EAC7BhkE,KAAK0gE,yBAA2B,KACzB/pD,EAAQzV,IAAI+iE,GAGrB,GAAItmC,EAAO9vB,MAAQikD,EAAAlrC,YAAY+G,gBAAiB,CAC9C,IAAqBgQ,EAAQjP,cAG3B,MAFAiP,EAA0CA,EAAQjP,kBAK/C,IAAIiP,EAAO9vB,MAAQikD,EAAAlrC,YAAYxH,MAOpC,MANA,IAAYue,EAAQlB,KAGlB,MAFAkB,EAAwBA,EAAQlB,MAQtC,MAEF,QACE,IAAI9lB,EACJ,IADIA,EAAUgnB,EAAOhnB,UACNA,EAAQsS,IAAIg7C,GAGzB,OAFAjkE,KAAKygE,sBAAwBuD,EAC7BhkE,KAAK0gE,yBAA2B,KACzB/pD,EAAQzV,IAAI+iE,GAUzB,OAJAjkE,KAAKqN,MACHwW,EAAApZ,eAAek4D,oCACf5xD,EAAK/O,SAAS+I,MAAOk5D,EAActmC,EAAO7V,cAErC,MAITE,EAAA/lB,UAAA4hE,+BAAA,SAEE9yD,EAEAkyD,EAEAC,EAEApC,QAAA,IAAAA,MAAyBP,EAAWQ,QAEpC,IAAIsD,EAAmBtzD,EAAKc,WACxB8rB,EAAS39B,KAAKgjE,kBAAkBqB,EAAkBpB,EAASC,EAASpC,GACxE,IAAKnjC,EAAQ,OAAO,KACpB,OAAQA,EAAO9vB,MACb,KAAKikD,EAAAlrC,YAAYhJ,OAAQ,IAAK5d,KAAK+jE,yBAAiCpmC,EAAQmjC,GAAa,OAAO,KAChG,KAAKhP,EAAAlrC,YAAY6R,MACjB,KAAKq5B,EAAAlrC,YAAYgL,MAEf,GAAI+L,EAD6BA,EAAQruB,KACvB2vB,eAGhB,OAFAj/B,KAAKygE,sBAAwB4D,EAC7BrkE,KAAK0gE,yBAA2B3vD,EAAKoC,kBAC9BwqB,EAET,MAEF,KAAKm0B,EAAAlrC,YAAYxH,MACf,IAAI8kD,EAAqBvmC,EAAQF,eAAeq0B,EAAAluC,aAAaiB,aAC7D,IAAKq/C,EAOH,OANIpD,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAeg4D,qCACf1xD,EAAKhG,MAAe4yB,EAAQ7V,cAGzB,KAET,IAAIq8C,EAAYD,EAAWhqD,UAAUxK,WACrC,OAAI20D,EAAiBx2D,MAAQkW,EAAApW,SAASW,eAChCqvB,EAASwmC,EAAUllC,iBACrBj/B,KAAKygE,sBAAwB4D,EAC7BrkE,KAAK0gE,yBAA2B3vD,EAAKoC,kBAC9BwqB,GAEF,MAET39B,KAAKygE,sBAAwB4D,EAC7BrkE,KAAK0gE,yBAA2B3vD,EAAKoC,kBAC9BwqB,GASX,OANImjC,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf4wC,EAAiBt5D,OAGd,MAITid,EAAA/lB,UAAAqiE,4BAAA,SAEEC,EAEArB,GAEA,IAAKA,EAAQ7lD,GAAE,KAEb,OAAQ6lD,EAAQr1D,MACd,OACE,GAAI22D,UAAUD,GAAW,OAAOzgD,EAAAuF,KAAKnmB,GACrC,MAEF,OACE,GAAIuhE,UAAUF,GAAW,OAAOzgD,EAAAuF,KAAK9lB,GACrC,MAEF,OACE,GAAImhE,WAAWH,GAAW,OAAOzgD,EAAAuF,KAAKlmB,IACtC,MAEF,OACE,GAAIwhE,WAAWJ,GAAW,OAAOzgD,EAAAuF,KAAK7lB,IACtC,MAEF,OACE,GAAIohE,WAAWL,GAAW,OAAOzgD,EAAAuF,KAAKjmB,IACtC,MAEF,OACE,GAAIyhE,WAAWN,GAAW,OAAOzgD,EAAAuF,KAAK5lB,IACtC,MAEF,QACE,GAAIqhE,YAAYP,GAAW,OAAOzgD,EAAAuF,KAAKzlB,KACvC,MAEF,OACE,IAAK5D,KAAKu2B,QAAQpN,QAAQY,SAAU,CAClC,GAAI66C,WAAWL,GAAW,OAAOzgD,EAAAuF,KAAKopC,QACtC,MAEF,OAAO3uC,EAAAuF,KAAKmpC,QAEd,OACE,IAAKxyD,KAAKu2B,QAAQpN,QAAQY,SAAU,CAClC,GAAI86C,WAAWN,GAAW,OAAOzgD,EAAAuF,KAAKspC,QACtC,MAEF,OAAO7uC,EAAAuF,KAAKqpC,QAEd,OAAmB,OAAO5uC,EAAAuF,KAAKhmB,IAC/B,OAAmB,OAAOygB,EAAAuF,KAAK3lB,IAC/B,QAAmB,OAAOogB,EAAAuF,KAAKxlB,IAC/B,QAAmB,OAAOigB,EAAAuF,KAAKvlB,IAC/B,QAAoB,MACpB,QAASsG,QAAO,GAIpB,OAAIw6D,WAAWL,GAAkBzgD,EAAAuF,KAAKjmB,IAClCyhE,WAAWN,GAAkBzgD,EAAAuF,KAAK5lB,IAC/BqgB,EAAAuF,KAAKhmB,KAId2kB,EAAA/lB,UAAAkhE,2BAAA,SAEEpyD,EAEAkyD,EAEAC,EAEApC,GAEA,QAJA,IAAAoC,MAAgBp/C,EAAAuF,KAAKupC,WAErB,IAAAkO,MAAyBP,EAAWQ,QAEhChwD,EAAKa,eAAiBmS,EAAA/E,cAAc+lD,QACtC,OAAO/kE,KAAKgjE,kBACVjyD,EAAKc,WACLoxD,EACAC,EACApC,GAGJ,IAAIxxD,EAAOtP,KAAK2gE,YACdv2D,OAAO2G,EAAKe,QACZmxD,EAAQS,eACRT,EAAQ9pC,wBACR2nC,GAEF,IAAKxxD,EAAM,OAAO,KAClB,IAAI2D,EAA0B3D,EAAK2vB,eACnC,IAAKhsB,EAAS,CACZ,IAAIiH,EAAY5K,EAAKgjD,mBACrB,IAAKp4C,EAAW,OAAO,KACvBjH,EAAUiH,EAAUs6C,iBAAiBx0D,KAAKu2B,SAI5C,OAFAv2B,KAAKygE,sBAAwB,KAC7BzgE,KAAK0gE,yBAA2B,KACzBztD,GAIT+U,EAAA/lB,UAAAmhE,6BAAA,SAEEryD,EAEAkyD,EAEAC,EAEApC,QAFA,IAAAoC,MAAgBp/C,EAAAuF,KAAKupC,WAErB,IAAAkO,MAAyBP,EAAWQ,QAEpC,IAAIjrD,EAAU/E,EAAK+E,QAEnB,OAAQ/E,EAAKkB,UACX,KAAKzE,EAAAC,MAAM4Y,MAET,GAAIvQ,EAAQjI,MAAQkW,EAAApW,SAASG,SAA+BgI,EAASgJ,aAAeiF,EAAAnF,YAAYc,QAAS,CACvG,IAAIpQ,EAAOtP,KAAKskE,4BACdU,QAAQC,SAAqCnvD,EAASxU,OACtD4hE,GAGF,OADI77C,EAAcrnB,KAAKu2B,QAAQlP,aACZ4B,IAAI3Z,EAAKzB,MAAQwZ,EAAYnmB,IAAIoO,EAAKzB,MAAS,KAEpE,OAAO7N,KAAKgjE,kBAAkBltD,EAASmtD,EAASC,EAASpC,GAE3D,KAAKtzD,EAAAC,MAAM0Y,KACX,KAAK3Y,EAAAC,MAAM6qD,UACX,KAAK9qD,EAAAC,MAAM8qD,YACT,OAAOv4D,KAAKgjE,kBAAkBjyD,EAAK+E,QAASmtD,EAASC,EAASpC,GAEhE,KAAKtzD,EAAAC,MAAMqrD,YACT,IAAIzxC,EAAcrnB,KAAKu2B,QAAQlP,YAE/B,OADAjd,OAAOid,EAAY4B,IAAG,KACf5B,EAAYnmB,IAAG,IAExB,KAAKsM,EAAAC,MAAMsrD,MAET,IADsB/4D,KAAKgjE,kBAAkBjyD,EAAK+E,QAASmtD,EAASC,EAASpC,GACvD,OAAO,KAE7B,MAEF,QAAS12D,QAAO,GAQlB,OANI02D,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf1iB,EAAKhG,OAGF,MAITid,EAAA/lB,UAAAohE,8BAAA,SAEEtyD,EAEAkyD,EAEAC,EAEApC,GAGA,YALA,IAAAoC,MAAgBp/C,EAAAuF,KAAKupC,WAErB,IAAAkO,MAAyBP,EAAWQ,QAG5BhwD,EAAKkB,UACX,KAAKzE,EAAAC,MAAM6qD,UACX,KAAK9qD,EAAAC,MAAM8qD,YACT,OAAOv4D,KAAKgjE,kBAAkBjyD,EAAK+E,QAASmtD,EAASC,EAASpC,GAEhE,QAAS12D,QAAO,GAQlB,OANI02D,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf1iB,EAAKhG,OAGF,MAITid,EAAA/lB,UAAAqhE,wBAAA,SAEE1iE,EAEAqiE,EAEAC,EAEApC,GASA,YAXA,IAAAoC,MAAgBp/C,EAAAuF,KAAKupC,WAErB,IAAAkO,MAAyBP,EAAWQ,QAGhCD,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf7yB,EAAKmK,OAGF,MAITid,EAAA/lB,UAAAshE,sBAAA,SAEExyD,EAEAkyD,EAEAC,EAEApC,GAEA,QAJA,IAAAoC,MAAgBp/C,EAAAuF,KAAKupC,WAErB,IAAAkO,MAAyBP,EAAWQ,QAEhCkC,EAAQ5lD,GAAE,OAA4B,CACxC,IAAI6nD,EAAYjC,EAAQkC,YAAY53D,EAAAvK,cAAcoC,OAClD,GAAI8/D,EAGF,OAFAllE,KAAKygE,sBAAwB,KAC7BzgE,KAAK0gE,yBAA2B,KACzBwE,EAGX,IAAI1kD,EAASyiD,EAAQS,eAAeljD,OACpC,OAAIA,GACFxgB,KAAKygE,sBAAwB,KAC7BzgE,KAAK0gE,yBAA2B,KACzBlgD,IAELsgD,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAe26D,+CACfr0D,EAAKhG,OAGF,OAITid,EAAA/lB,UAAAuhE,uBAAA,SAEEzyD,EAEAkyD,EAEAC,EAEApC,GAEA,QAJA,IAAAoC,MAAgBp/C,EAAAuF,KAAKupC,WAErB,IAAAkO,MAAyBP,EAAWQ,QAEhCkC,EAAQ5lD,GAAE,OAA4B,CACxC,IAAIgoD,EAAapC,EAAQkC,YAAY53D,EAAAvK,cAAcqC,QACnD,GAAIggE,EAGF,OAFArlE,KAAKygE,sBAAwB,KAC7BzgE,KAAK0gE,yBAA2B,KACzB2E,EAGX,IAAI7kD,EAAyByiD,EAAQS,eAAeljD,OACpD,OAAIA,GAAUA,EAAO3S,MAAQikD,EAAAlrC,YAAYxH,QAAUoB,EAAiBA,EAAQic,OAC1Ez8B,KAAKygE,sBAAwB,KAC7BzgE,KAAK0gE,yBAA2B,KACzBlgD,IAELsgD,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAe66D,iDACfv0D,EAAKhG,OAGF,OAITid,EAAA/lB,UAAA0hE,yBAAA,SAEE5yD,EAEAkyD,EAEAC,EAEApC,GAEA,YAJA,IAAAoC,MAAgBp/C,EAAAuF,KAAKupC,WAErB,IAAAkO,MAAyBP,EAAWQ,QAE5BhwD,EAAK+N,aACX,KAAKiF,EAAAnF,YAAYc,QACf1f,KAAKygE,sBAAwB1vD,EAC7B/Q,KAAK0gE,yBAA2B,KAChC,IAAI6E,EAAcvlE,KAAKskE,4BACMvzD,EAAMzP,MACjC4hE,GAGF,OADI77C,EAAcrnB,KAAKu2B,QAAQlP,aACZ4B,IAAIs8C,EAAY13D,MAAQwZ,EAAYnmB,IAAIqkE,EAAY13D,MAAS,KAElF,KAAKkW,EAAAnF,YAAYW,MACfvf,KAAKygE,sBAAwB1vD,EAC7B/Q,KAAK0gE,yBAA2B,KAChC,IACIr5C,EADAk+C,EAAcrC,GAAWp/C,EAAAuF,KAAKxlB,IAAMigB,EAAAuF,KAAKxlB,IAAMigB,EAAAuF,KAAKvlB,IAExD,OADIujB,EAAcrnB,KAAKu2B,QAAQlP,aACZ4B,IAAIs8C,EAAY13D,MAAQwZ,EAAYnmB,IAAIqkE,EAAY13D,MAAS,KAElF,KAAKkW,EAAAnF,YAAYmB,OAGf,OAFA/f,KAAKygE,sBAAwB1vD,EAC7B/Q,KAAK0gE,yBAA2B,KACzB1gE,KAAKu2B,QAAQhJ,eAWxB,OANIuzC,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf1iB,EAAKhG,OAGF,MAITid,EAAA/lB,UAAA6hE,sBAAA,SAEE/yD,EAEAkyD,EAEAC,EAEApC,QAFA,IAAAoC,MAAgBp/C,EAAAuF,KAAKG,WAErB,IAAAs3C,MAAyBP,EAAWQ,QAEpC,IAAIsD,EAAmBtzD,EAAKc,WACxB8rB,EAAS39B,KAAKgjE,kBAChBqB,EACApB,EACAC,EACApC,GAGF,IAAKnjC,EAAQ,OAAO,KACpB,GAAIA,EAAO9vB,MAAQikD,EAAAlrC,YAAYqK,mBAAoB,CAEjD,GACsB0M,EAAQ7V,cAAgB04C,EAAAgF,eAAe5nC,WAC3D7sB,EAAKJ,UAAUxE,OAAS,EAExB,OAAOnM,KAAKgjE,kBAAkBjyD,EAAKJ,UAAU,GAAIsyD,EAASC,EAASpC,GAGrE,IAAI7nC,EAAWj5B,KAAKylE,iCACC9nC,EACnB5sB,EAAK3B,cACL6zD,EAAQS,eACR75D,EAAA43D,QAAQwB,EAAQ9pC,yBAChBpoB,EACA+vD,GAEF,IAAK7nC,EAAU,OAAO,KACtB,IAAIvpB,EAAaupB,EAAS/e,UAAUxK,WAChCujD,EAAYvjD,EAAWuvB,eAC3B,GAAIg0B,EAGF,OAAOA,EAEP,IAAI/4C,EAAYxK,EAAW4iD,mBAC3B,GAAIp4C,EAIF,OAHqBA,EAAUs6C,iBAAiBx0D,KAAKu2B,SAKrD,IAAIlP,EAAcrnB,KAAKu2B,QAAQlP,YAC/B,OAAK3X,EAAW2N,GAAE,MAAyBgK,EAAY4B,IAAIvZ,EAAW7B,MAC7DwZ,EAAYnmB,IAAIwO,EAAW7B,OAIpCizD,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAei7D,uGACfrB,EAAiBt5D,MAAO4yB,EAAO7V,cAG5B,MAQT,OANIg5C,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf1iB,EAAKhG,OAGF,MAMTid,EAAA/lB,UAAAivB,gBAAA,SAEEjvB,EAEAmN,EAEAyxD,EAEAC,QAFA,IAAAD,MAA6Bh3D,EAAA43D,gBAE7B,IAAAX,MAAyBP,EAAWQ,QAEpC,IAAI4E,EAAe1jE,EAAUue,OAAO3S,MAAQikD,EAAAlrC,YAAY4K,mBACpDvvB,EAAUue,OAAOA,OACjBve,EAAUue,OACV4H,EAA8B,KAC9B2Q,EAAc3pB,EAAgB0U,EAAAowC,cAAc9kD,GAAiB,GAGjE,GAAInN,EAAUob,GAAG9P,EAAAlL,YAAY2zB,UAAW,CAMtC,GALA5rB,OAAOu7D,EAAa93D,MAAQikD,EAAAlrC,YAAYxH,OACxCgJ,EAAuBu9C,EAGnBC,EAAmB3jE,EAAU62B,oBAAoBC,GAC/B,OAAO6sC,EAG7B,IAAIC,EAAqBz9C,EAAchZ,cACvC,GAAIy2D,EAAoB,CACtB,IAAIC,EAAsB17D,OAAOge,EAAcnmB,UAAUq7B,oBACrDyoC,EAAwBD,EAAoB35D,OAChD/B,OAAO27D,GAAyBD,EAAoB35D,QACpD,IAAK,IAAI9L,EAAI,EAAGA,EAAI0lE,IAAyB1lE,EAAG,CAC9C,IAAI2lE,EAAyBF,EAAoBzlE,GAAGO,KAAKqL,KACpD40D,EAAS53C,IAAI+8C,IAChBnF,EAASrjD,IACPwoD,EACAH,EAAmBxlE,UAKtB,CAEL,IAAIulE,EACJ,GAFAx7D,OAAOu7D,EAAa93D,MAAQikD,EAAAlrC,YAAYxH,OACpCwmD,EAAmB3jE,EAAU62B,oBAAoBC,GAC/B,OAAO6sC,EAI/B,IAEIK,EAFAC,EAAgBjkE,EAAUkkE,iBAC1B7oC,EAAqBr7B,EAAUq7B,mBAEnC,GAAIluB,IAAkB62D,EAA2B72D,EAAcjD,QAAS,CACtE/B,OAAOkzB,GAAsB2oC,GAA4B3oC,EAAmBnxB,QAC5E,IAAS9L,EAAI,EAAGA,EAAI4lE,IAA4B5lE,EAC9CwgE,EAASrjD,IACe8f,EAAoBj9B,GAAGO,KAAKqL,KAClDmD,EAAc/O,SAIlB+J,QAAQkzB,GAAmD,GAA7BA,EAAmBnxB,QAInD,IAAIsuB,EAAwB,KACxB9qB,EAAmBu2D,EAAcv2D,iBACrC,GAAIA,EAAkB,CAOpB,KANA8qB,EAAWz6B,KAAK2gE,YACdhxD,EACA1N,EAAUue,OACVqgD,EACAC,IAEa,OAAO,KACtBD,EAASrjD,IAAIjQ,EAAAvK,cAAcoC,MAAOq1B,QACzBrS,IACTqS,EAAWrS,EAAc9Y,KACzBuxD,EAASrjD,IAAIjQ,EAAAvK,cAAcoC,MAAOq1B,IAIpC,IAgCI/qB,EAhCA02D,EAAsBF,EAAcz2D,WACpC42D,EAAyBD,EAAoBj6D,OAC7CuuB,EAAiB,IAAIzzB,MAAYo/D,GACjChS,EAAiB,IAAIptD,MAAco/D,GACnC/R,EAAqB,EACzB,IAASj0D,EAAI,EAAGA,EAAIgmE,IAA0BhmE,EAAG,CAC/C,IAAIimE,EAAuBF,EAAoB/lE,GAC3CimE,EAAqBh2D,eAAiByT,EAAA/G,cAAc+4C,UACtDzB,EAAqBj0D,EAAI,GAE3B,IAAI0hE,EAAWuE,EAAqBh3D,KACpC,GAAIyU,EAAAJ,cAAco+C,GAOhB,OANIjB,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAe43D,cACfN,EAASh3D,OAGN,KAET,IAAI4vB,EAAgB36B,KAAK2gE,YACvBoB,EACA9/D,EAAUue,OACVqgD,EACAC,GAEF,IAAKnmC,EAAe,OAAO,KAC3BD,EAAer6B,GAAKs6B,EACpB05B,EAAeh0D,GAAKimE,EAAqB1lE,KAAKqL,KAKhD,GAAIhK,EAAUob,GAAG9P,EAAAlL,YAAYyxB,KAC3BpkB,EAAaoU,EAAAuF,KAAKG,UACb,GAAIvnB,EAAUob,GAAG9P,EAAAlL,YAAYid,aAClC5P,EAAatF,OAAOge,GAAe9Y,SAC9B,CACDyyD,EAAWmE,EAAcx2D,WAC7B,GAAIqU,EAAAJ,cAAco+C,GAOhB,OANIjB,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAe43D,cACfN,EAASh3D,OAGN,KAET,IAAIuE,EAAOtP,KAAK2gE,YACdoB,EACA9/D,EAAUue,OACVqgD,EACAC,GAEF,IAAKxxD,EAAM,OAAO,KAClBI,EAAaJ,EAGf,IAAI4K,EAAY,IAAI4J,EAAAoT,UAAUl3B,KAAKu2B,QAASmE,EAAgBhrB,EAAY+qB,GACxEvgB,EAAUm6C,eAAiBA,EAC3Bn6C,EAAUo6C,mBAAqBA,EAE/B,IAAIp7B,EAAyBj3B,EAAUrB,KACnCm4B,EAAY5sB,SAAQ+sB,GAA0B,IAAMH,EAAc,KACtE,IAAIE,EAAW,IAAI64B,EAAAhpC,SACjBoQ,EACAj3B,EACAiY,EACA2mD,GAGF,OADA5+D,EAAU+2B,oBAAoBD,EAAaE,GACpCA,GAITjR,EAAA/lB,UAAAwjE,iCAAA,SAEExjE,EAEAk/D,EAEAP,EAEAC,EAEA0F,EAEAzF,QAAA,IAAAA,MAAyBP,EAAWQ,QAEpC,IAAI4E,EAAe1jE,EAAUue,OAAO3S,MAAQikD,EAAAlrC,YAAY4K,mBACpDvvB,EAAUue,OAAOA,OACjBve,EAAUue,OACVgmD,EAAuC,KAG3C,GAAIvkE,EAAUob,GAAG9P,EAAAlL,YAAYsnB,SAAU,CAGrC,GAAI1nB,EAAUob,GAAG9P,EAAAlL,YAAY2zB,UAAW,CACtC5rB,OAAOu7D,EAAa93D,MAAQikD,EAAAlrC,YAAYxH,OACxC,IAAIymD,EAA6BF,EAAcv2D,cAC/C,GAAIy2D,EAAoB,CACtB,IAAIvoC,EAAqBlzB,OAAeu7D,EAAc1jE,UAAUq7B,oBAC5DyoC,EAAwBF,EAAmB15D,OAC/C/B,OAAO27D,GAAyBzoC,EAAmBnxB,QACnD,IAAK,IAAI9L,EAAI,EAAGA,EAAI0lE,IAAyB1lE,EAC3CwgE,EAASrjD,IACP8f,EAAmBj9B,GAAGO,KAAKqL,KAC3B45D,EAAmBxlE,KAc3B,KARAmmE,EAAwBxmE,KAAK8hE,qBAC3B13D,OAAOnI,EAAUq7B,oBACjB6jC,EACAP,EACAC,EACA0F,EACAzF,IAE0B,OAAO,UAInC,GAA0B,OAAtBK,GAA8BA,EAAkBh1D,OAOlD,OANI20D,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAe62D,sBACfiF,EAAWx7D,MAAO9I,EAAU6lB,cAGzB,KAKX,OAAO9nB,KAAKkxB,gBACVjvB,EACAukE,EACA3F,EACAC,IAKJ94C,EAAA/lB,UAAA+uB,aAAA,SAEE/uB,EAEAmN,EAEAyxD,EAEAC,wBAFA,IAAAD,MAA6Bh3D,EAAA43D,gBAE7B,IAAAX,MAAyBP,EAAWQ,QAEpC,IAAIhoC,EAAc3pB,EAAgB0U,EAAAowC,cAAc9kD,GAAiB,GAG7D6pB,EAAWh3B,EAAU62B,oBAAoBC,GAC7C,GAAIE,EAAU,OAAOA,EAIrB,GAAI7pB,EAAe,CACjB,IACIq3D,GADAnpC,EAAqBlzB,OAAOnI,EAAUq7B,qBACCnxB,OACvC+S,EAAmB9P,EAAcjD,OACrC/B,OAAO8U,GAAoBunD,GAC3B,IAAK,IAAIpmE,EAAI,EAAGA,EAAI6e,IAAoB7e,EACtCwgE,EAASrjD,IAAI8f,EAAmBj9B,GAAGO,KAAKqL,KAAMmD,EAAc/O,QAEzD,CACL,IAAIi9B,EAAqBr7B,EAAUq7B,mBACnClzB,SAASkzB,GAAsBA,EAAmBnxB,SAIpD,IAAIuiB,EAAgBzsB,EAAUysB,cAC1Bg4C,EAA0B,KAC9B,GAAIh4C,EAAe,CACjB,IAAIH,EAAcnkB,OAAOnI,EAAUssB,aASnC,KARAm4C,EAAY1mE,KAAKwhE,8BACf9yC,EACAH,EAAYnf,cACZnN,EAAUue,OACV3W,EAAA43D,QAAQZ,GACRtyC,EACAuyC,IAEc,OAAO,KAIzB,IAAI6F,EAAwB1kE,EAAUrB,KAClCm4B,EAAY5sB,SAAQw6D,GAAyB,IAAM5tC,EAAc,MACrEE,EAAW,IAAI64B,EAAAt1B,MAAMmqC,EAAuB1kE,EAAWmN,EAAes3D,IAC7DvtC,wBAA0B0nC,EACnC5+D,EAAU+2B,oBAAoBD,EAAaE,GAG3C,IAAI6C,EAAoB,EACxB,GAAI4qC,EAAW,CAEb,GADIE,EAAcF,EAAU/vD,QACX,EACXya,EAAkB6H,EAAStiB,WACTsiB,EAAStiB,QAAUya,EAAkB,IAAIhqB,SAC/D,IAAyC,IAAAy/D,EAAAr7C,EAAAo7C,GAAWE,EAAAD,EAAA73D,QAAA83D,EAAAp7C,KAAAo7C,EAAAD,EAAA73D,OAAE,CAA7C,IAAAsiB,EAAA1F,EAAAk7C,EAAAxlE,MAAA,GAACylE,EAAAz1C,EAAA,GAAgB01C,EAAA11C,EAAA,GACxBF,EAAgB5T,IAAIupD,EAAgBC,sGAGxClrC,EAAe4qC,EAAU/pC,oBAI3B,IAAIsqC,EAA2BhlE,EAAUmvB,gBACzC,GAAI61C,MACF,IAAmB,IAAAp1C,EAAArG,EAAAy7C,EAAyB5yD,UAAQyd,EAAAD,EAAA7iB,QAAA8iB,EAAApG,KAAAoG,EAAAD,EAAA7iB,OAAE,CAAjD,IAAIuiB,EAAMO,EAAAxwB,MACb,OAAQiwB,EAAO1jB,MAGb,KAAKikD,EAAAlrC,YAAYgV,gBACf,IAAIxK,EACJ,GADIA,EAAkB6H,EAAStiB,SAE1B,GAAIya,EAAgBnI,IAAIsI,EAAO3wB,MAAO,CACzCZ,KAAKqN,MACHwW,EAAApZ,eAAemoB,uBACErB,EAAQ1C,eAAe9jB,MACxCwmB,EAAO3wB,MAET,YAPoBq4B,EAAStiB,QAAUya,EAAkB,IAAIhqB,IAS/D,IAAI8/D,EAAiC31C,EAAQwwC,SACzCoF,EAAyB,KAE7B,GAAKD,EAoBHC,EAAYnnE,KAAK2gE,YACfuG,EACAjlE,EAAUue,OACVyY,EAASE,wBACT2nC,OAxBgB,CAEhB,IAAI8F,EADN,GAAIF,EAEF,IADIE,EAAcF,EAAU/vD,UACTiwD,EAAY39C,IAAqBsI,EAAQ3wB,MAAO,CACjE,IAAIwmE,EAAYR,EAAY1lE,IAAqBqwB,EAAQ3wB,MACpDwmE,EAAU/pD,GAAG9P,EAAAlL,YAAYw0D,WAC5BzsD,OAAOg9D,EAAUv5D,MAAQikD,EAAAlrC,YAAYgL,OACrCu1C,EAAoBC,EAAW93D,MAIhC63D,GACCrG,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAe43D,cACE9wC,EAAQ1C,eAAe9jB,MAAMs8D,OAYtD,IAAKF,EAAW,MAChB,IAAIG,EAAgB,IAAIxV,EAAAj2B,MAAsBtK,EAAQ0H,EAAUkuC,GAChE/8D,OAAOP,EAAAJ,WAAW09D,EAAU/U,WAC5B,IAAIhW,EAAO+qB,EAAU/U,SAAW,EAC5Bt2B,EAAesgB,IAAMtgB,EAAuC,GAAvBA,EAAesgB,IACxDkrB,EAAcxrC,aAAeA,EAC7BA,GAAgBqrC,EAAU/U,SAC1Bn5B,EAASxP,IAAI8H,EAAO3wB,KAAM0mE,GAC1B,MAEF,KAAKxV,EAAAlrC,YAAYqK,mBACf,IAAIs2C,EAAqCh2C,EAAQqH,QAAQK,GACzDA,EAASxP,IAAI89C,EAAe3mE,KAAM2mE,GAClC,MAEF,KAAKzV,EAAAlrC,YAAY4K,mBACf,IAAIg2C,EAAmB,IAAI1V,EAAA91B,SAA4BzK,EAAQ0H,GAC3DxH,EAAsCF,EAAQE,gBAClD,GAAIA,EAAiB,CACnB,IAAIwK,EAAiBj8B,KAAKkxB,gBACxBO,EAAgBmH,QAAQK,GACxB,KACApvB,EAAA43D,QAAQxoC,EAASE,yBACjB2nC,GAEE7kC,IACFurC,EAAiBvrC,eAAiBA,EAClCurC,EAAiBz1C,QAAQkK,EAAe/hB,UAAUxK,aAGtD,IAAIgiB,EAAsCH,EAAQG,gBAClD,GAAIA,EAAiB,CACnB,IAAIwK,EAAiBl8B,KAAKkxB,gBACxBQ,EAAgBkH,QAAQK,GACxB,KACApvB,EAAA43D,QAAQxoC,EAASE,yBACjB2nC,GAEE5kC,IACFsrC,EAAiBtrC,eAAiBA,EAC7BsrC,EAAiBnqD,GAAG9P,EAAAlL,YAAY20B,YACnC5sB,OAAyD,GAAlD8xB,EAAehiB,UAAUwgB,eAAevuB,QAC/Cq7D,EAAiBz1C,QAAQmK,EAAehiB,UAAUwgB,eAAe,MAIvEzB,EAASxP,IAAI+9C,EAAiB5mE,KAAM4mE,GACpC,MAEF,QAASp9D,QAAO,sGAMtB6uB,EAAS0D,oBAAsBb,EAI7B,IAAI2rC,EAAgBxuC,EAAShM,aAAa1f,EAAAvK,cAAcsC,aACxD,GAAImiE,GAAiBA,EAAcjnD,SAAWyY,EAAU,CACtD7uB,OAAOq9D,EAAc55D,MAAQikD,EAAAlrC,YAAYqK,oBACzC,IAAIy2C,EAAe1nE,KAAKkxB,gBACHu2C,EACnB,KACAxuC,EAASE,wBACT2nC,GAEE4G,IAAczuC,EAAS2D,oBAAgC8qC,OAK/D,IAAsC,IAAA/7C,EAAAH,EAAAvpB,EAAU4yB,oBAAkBpI,GAAAd,EAAA3c,QAAAyd,GAAAf,KAAAe,GAAAd,EAAA3c,OAAE,CAA3D,IAAA6d,GAAAjB,EAAAa,GAAAnrB,MAAA,GAACuM,GAAAgf,GAAA,GAAM86C,GAAA96C,GAAA,GACdziB,OAAOyD,IAAQikD,EAAAluC,aAAa+C,SAC5B,IAAIihD,QAAgB,EACpB,GAAID,GAAkBtqD,GAAG9P,EAAAlL,YAAY2zB,UAAW,CAC1CuxC,EAAiBI,GAAkB/uC,QAAQK,GAC/C2uC,GAAmB5nE,KAAKkxB,gBACtBq2C,EACA,KACA19D,EAAA43D,UACAX,QAGF8G,GAAmB5nE,KAAKkxB,gBACtBy2C,GACA,KACA99D,EAAA43D,UACAX,GAGJ,GAAK8G,GAAL,CACA,IAAIhzC,GAAYqE,EAASrE,UACpBA,KAAWqE,EAASrE,UAAYA,GAAY,IAAIxtB,KACrDwtB,GAAUpX,IAAI3P,GAAM+5D,yGAEtB,OAAO3uC,GAITjR,EAAA/lB,UAAAu/D,8BAAA,SAEEv/D,EAEAk/D,EAEAP,EAEAC,EAEA0F,EAEAzF,QAAA,IAAAA,MAAyBP,EAAWQ,QAEpC,IAAIyF,EAAuC,KAG3C,GAAIvkE,EAAUob,GAAG9P,EAAAlL,YAAYsnB,UAS3B,KARA68C,EAAwBxmE,KAAK8hE,qBAC3B13D,OAAOnI,EAAUq7B,oBACjB6jC,EACAP,EACAC,EACA0F,EACAzF,IAE0B,OAAO,UAInC,GAA0B,OAAtBK,GAA8BA,EAAkBh1D,OAOlD,OANI20D,GAAcP,EAAWQ,QAC3B/gE,KAAKqN,MACHwW,EAAApZ,eAAe62D,sBACfiF,EAAWx7D,MAAO9I,EAAU6lB,cAGzB,KAKX,OAAO9nB,KAAKgxB,aACV/uB,EACAukE,EACA3F,EACAC,IAGN94C,EAnxDA,CAA8BnE,EAAA/W,mBAAjBpN,EAAAsoB,4RC5Fb,IAuIY6/C,EAvIZ/jD,EAAA3jB,EAAA,GAMA2xD,EAAA3xD,EAAA,GAQA4xD,EAAA5xD,EAAA,GAuCAoN,EAAApN,EAAA,GAIA0jB,EAAA1jB,EAAA,IASA,SAAkB2nE,GAEhBA,IAAA,eAKAA,IAAA,qBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,mBAEAA,IAAA,oBAEAA,IAAA,0BAEAA,IAAA,0BAEAA,IAAA,+BAEAA,IAAA,6BAKAA,IAAA,mDAEAA,IAAA,kDAEAA,IAAA,0DAEAA,IAAA,kDAEAA,IAAA,wDAEAA,IAAA,yDAKAA,IAAA,uCAEAA,IAAA,6CAKAA,IAAA,uCAWAA,IAAA,yCA7DF,CAAkBpoE,EAAAooE,YAAApoE,EAAAooE,UAAS,KAqE3B,SAAYD,GAEVA,IAAA,eAGAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,0BAEAA,IAAA,wBAGAA,IAAA,oDAEAA,IAAA,uDAEAA,IAAA,qDAGAA,IAAA,sCAQAA,IAAA,uCAMAA,IAAA,iCAvCF,CAAYA,EAAAnoE,EAAAmoE,aAAAnoE,EAAAmoE,WAAU,KA0CtB,SAAiBA,GACCA,EAAAl7D,KAAhB,SAAqBuF,EAAkBC,GACrC,OAASD,EAAO21D,EAAWE,gBAAoB51D,EAAQ01D,EAAWE,gBACzD71D,EAAO21D,EAAWG,gBAAoB71D,EAAQ01D,EAAWG,iBAHtE,CAAiBH,EAAAnoE,EAAAmoE,aAAAnoE,EAAAmoE,WAAU,KAQ3B,SAAYI,GAEVA,IAAA,eAGAA,IAAA,6BAEAA,IAAA,yDAGAA,IAAA,qCAGAA,IAAA,qCAbF,CAAYvoE,EAAAuoE,aAAAvoE,EAAAuoE,WAAU,KAetB,SAAiBA,GACCA,EAAAt7D,KAAhB,SAAqBuF,EAAkBC,GACrC,OAASD,EAAO+1D,EAAWF,gBAAoB51D,EAAQ81D,EAAWF,gBACzD71D,EAAO+1D,EAAWD,gBAAoB71D,EAAQ81D,EAAWD,iBAHtE,CAAiBtoE,EAAAuoE,aAAAvoE,EAAAuoE,WAAU,KAQ3B,IAAAltC,EAAA,WAsDE,SAAAA,IArCA/6B,KAAAkoE,aAAyC,KAIzCloE,KAAAmoE,WAA4C,KA6yB9C,OAtyBSptC,EAAAp5B,OAAP,SAAcymE,GACZ,IAAIttC,EAAO,IAAIC,EAWf,OAVAD,EAAKta,OAAS,KACdsa,EAAKjmB,MAAK,EACVimB,EAAKstC,eAAiBA,EACtBttC,EAAKutC,cAAgB,KACrBvtC,EAAKT,WAAa,KAClBS,EAAKprB,WAAa04D,EAAeluD,UAAUxK,WAC3CorB,EAAK3B,wBAA0BivC,EAAejvC,wBAC9C2B,EAAKwtC,WAAa,GAClBxtC,EAAKytC,eAAiB,KACtBztC,EAAK0tC,kBAAoB,KAClB1tC,GAIFC,EAAA0tC,aAAP,SAAoBL,EAA0BG,GAC5C,IAAIztC,EAAOC,EAAKp5B,OAAOymE,GAMvB,OALAttC,EAAKtd,IAAG,OACRsd,EAAKytC,eAAiBA,EACtBztC,EAAK0tC,kBAAoBD,EAAezgD,aAAe,aAAeygD,EAAe5uC,gBAAgBjuB,SAAS,IAC9GovB,EAAKprB,WAAa64D,EAAeruD,UAAUxK,WAC3CorB,EAAK3B,wBAA0BovC,EAAepvC,wBACvC2B,GAMT/5B,OAAAC,eAAI+5B,EAAA94B,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKuoE,gBAAkBvoE,KAAKooE,gDAIrCrtC,EAAA94B,UAAAob,GAAA,SAAGC,GAAyB,OAAQtd,KAAK6U,MAAQyI,IAASA,GAE1Dyd,EAAA94B,UAAAsb,MAAA,SAAMD,GAAyB,OAA8B,IAAtBtd,KAAK6U,MAAQyI,IAEpDyd,EAAA94B,UAAAub,IAAA,SAAIF,GAAyBtd,KAAK6U,OAASyI,GAE3Cyd,EAAA94B,UAAA00B,MAAA,SAAMrZ,GAAyBtd,KAAK6U,QAAUyI,GAG9Cyd,EAAA94B,UAAAymE,KAAA,WACE,IAAIC,EAAS,IAAI5tC,EAWjB,OAVA4tC,EAAOnoD,OAASxgB,KAChB2oE,EAAO9zD,MAAQ7U,KAAK6U,MACpB8zD,EAAOP,eAAiBpoE,KAAKooE,eAC7BO,EAAON,cAAgBroE,KAAKqoE,cAC5BM,EAAOtuC,WAAar6B,KAAKq6B,WACzBsuC,EAAOj5D,WAAa1P,KAAK0P,WACzBi5D,EAAOxvC,wBAA0Bn5B,KAAKm5B,wBACtCwvC,EAAOL,WAAatoE,KAAKsoE,WAAWM,QACpCD,EAAOJ,eAAiBvoE,KAAKuoE,eAC7BI,EAAOH,kBAAoBxoE,KAAKwoE,kBACzBG,GAIT5tC,EAAA94B,UAAA4mE,aAAA,SAAav5D,EAAY0vB,QAAA,IAAAA,MAAA,MACvB,IACI8pC,EASAtuC,EAVA4tC,EAAiBpoE,KAAKooE,eAE1B,OAAQ94D,EAAKqkD,gBACX,KAAK5B,EAAAjyB,WAAW15B,IAAO0iE,EAAQV,EAAetuC,SAAU,MACxD,KAAKi4B,EAAAjyB,WAAWz5B,IAAOyiE,EAAQV,EAAeruC,SAAU,MACxD,KAAKg4B,EAAAjyB,WAAWj5B,IAAOiiE,EAAQV,EAAepuC,SAAU,MACxD,KAAK+3B,EAAAjyB,WAAWh5B,IAAOgiE,EAAQV,EAAenuC,SAAU,MACxD,KAAK83B,EAAAjyB,WAAW/4B,KAAQ+hE,EAAQV,EAAeluC,UAAW,MAC1D,QAAS,MAAM,IAAI5K,MAAM,0BAG3B,GAAI0P,EAAQ,CACV,GAAI8pC,GAASA,EAAM38D,OACjB,IAAK,IAAI9L,EAAI,EAAGojB,EAAIqlD,EAAM38D,OAAQ9L,EAAIojB,IAAKpjB,EACzC,IAAK2+B,EAAO/V,IAAI6/C,EAAMzoE,GAAGm4B,OAAQ,CAC/BgC,EAAQsuC,EAAMzoE,GAEd,IADA,IAAI0oE,EAAID,EAAM38D,OAAS,EAChB9L,EAAI0oE,GAAGnrC,UAAUkrC,EAAMzoE,GAAKyoE,EAAY,EAANzoE,MAKzC,OAJAyoE,EAAM38D,OAAS48D,EACfvuC,EAAMlrB,KAAOA,EACbkrB,EAAM3lB,MAAQtH,EAAAlL,YAAY+a,KAC1Bpd,KAAKgpE,eAAexuC,EAAMhC,OAAO,GAC1BgC,EAIbA,EAAQ4tC,EAAentC,SAAS3rB,QAE5Bw5D,GAASA,EAAM38D,SACjBquB,EAAQsuC,EAAMG,OACR35D,KAAOA,EACbkrB,EAAM3lB,MAAQtH,EAAAlL,YAAY+a,MAE1Bod,EAAQ4tC,EAAentC,SAAS3rB,GAIpC,OADAtP,KAAKgpE,eAAexuC,EAAMhC,OAAO,GAC1BgC,GAITO,EAAA94B,UAAAinE,oBAAA,SAAoB55D,EAAY0vB,QAAA,IAAAA,MAAA,MAC9B,IAAIxE,EAAQx6B,KAAK6oE,aAAav5D,EAAM0vB,GACpCxE,EAAMhd,IAAIjQ,EAAAlL,YAAY8mE,QACtB,IAAIjB,EAAeloE,KAAKkoE,aAIxB,OAHKA,IAAcloE,KAAKkoE,aAAeA,EAAe,IAAI9gE,KAC1D8gE,EAAa1qD,IAAI,QAAWxd,KAAKooE,eAAevuC,oBAAsBW,GACtEx6B,KAAKopE,aAAa5uC,EAAMhC,MAAOqvC,EAAWwB,UACnC7uC,GAITO,EAAA94B,UAAAqnE,cAAA,SAAc9uC,GACZ,IAAIA,EAAMnd,GAAG9P,EAAAlL,YAAY61B,SAAzB,CACA9tB,OAAOowB,EAAMhC,OAAS,GACtB,IACIswC,EADAV,EAAiBpoE,KAAKooE,eAG1B,OADAh+D,OAAqB,MAAdowB,EAAMlrB,MACEkrB,EAAMlrB,KAAMqkD,gBACzB,KAAK5B,EAAAjyB,WAAW15B,IACd0iE,EAAQV,EAAetuC,WAAasuC,EAAetuC,SAAW,IAC9D,MAEF,KAAKi4B,EAAAjyB,WAAWz5B,IACdyiE,EAAQV,EAAeruC,WAAaquC,EAAeruC,SAAW,IAC9D,MAEF,KAAKg4B,EAAAjyB,WAAWj5B,IACdiiE,EAAQV,EAAepuC,WAAaouC,EAAepuC,SAAW,IAC9D,MAEF,KAAK+3B,EAAAjyB,WAAWh5B,IACdgiE,EAAQV,EAAenuC,WAAamuC,EAAenuC,SAAW,IAC9D,MAEF,KAAK83B,EAAAjyB,WAAW/4B,KACd+hE,EAAQV,EAAeluC,YAAckuC,EAAeluC,UAAY,IAChE,MAEF,QAAS,MAAM,IAAI5K,MAAM,0BAE3BllB,OAAOowB,EAAMhC,OAAS,GACtBswC,EAAMp8D,KAAK8tB,KAIbO,EAAA94B,UAAAsnE,oBAAA,SAAoBj6D,EAAY0vB,QAAA,IAAAA,MAAA,MAC9B,IAAIxE,EAAQx6B,KAAK6oE,aAAav5D,EAAM0vB,GAEpC,OADAh/B,KAAKspE,cAAc9uC,GACZA,GAITO,EAAA94B,UAAAunE,eAAA,SAAe5oE,GACb,IAAIsnE,EAAeloE,KAAKkoE,aACxB,OAAIA,GAAgBA,EAAaj/C,IAAIroB,GAAcsnE,EAAahnE,IAAIN,GAC7D,MAITm6B,EAAA94B,UAAAwnE,eAAA,SAAe7oE,EAAc0O,EAAY0vB,QAAA,IAAAA,MAAA,MACvC,IAAI0qC,EAAc1pE,KAAK6oE,aAAav5D,EAAM0vB,GACtCkpC,EAAeloE,KAAKkoE,aAKxB,OAJKA,EACA99D,QAAQ89D,EAAaj/C,IAAIroB,IADXZ,KAAKkoE,aAAeA,EAAe,IAAI9gE,IAE1DsiE,EAAYlsD,IAAIjQ,EAAAlL,YAAY8mE,QAC5BjB,EAAa1qD,IAAI5c,EAAM8oE,GAChBA,GAIT3uC,EAAA94B,UAAA0nE,eAAA,SAAe/oE,EAAc0O,EAAYkpB,EAAY+tC,GACnD,QADmD,IAAAA,MAAA,MAC9CvmE,KAAKkoE,aACL,CACH,IAAI0B,EAAgB5pE,KAAKkoE,aAAahnE,IAAIN,GAC1C,GAAIgpE,EAOF,OANIrD,GACFvmE,KAAKooE,eAAe7xC,QAAQlpB,MAC1BwW,EAAApZ,eAAemoB,uBACf2zC,EAAWx7D,OAGR6+D,OAVa5pE,KAAKkoE,aAAe,IAAI9gE,IAahDgD,OAAOouB,EAAQx4B,KAAKooE,eAAe/uC,cAAcltB,QACjD,IAAI09D,EAAc,IAAI/X,EAAAv5B,MAAM33B,EAAM43B,EAAOlpB,EAAMtP,KAAKooE,gBAGpD,OADApoE,KAAKkoE,aAAa1qD,IAAI5c,EAAMipE,GACrBA,GAIT9uC,EAAA94B,UAAA6nE,iBAAA,mBACE,GAAI9pE,KAAKkoE,aAAc,KACrB,IAAwB,IAAA1wC,EAAAhM,EAAAxrB,KAAKkoE,aAAa7zD,UAAQgd,EAAAmG,EAAAxoB,QAAAqiB,EAAA3F,KAAA2F,EAAAmG,EAAAxoB,OAAE,CAA/C,IAAI06D,EAAWr4C,EAAA/vB,MACdooE,EAAYrsD,GAAG9P,EAAAlL,YAAY8mE,SAC7BnpE,KAAKspE,cAAcI,qGAGvB1pE,KAAKkoE,aAAe,OAKxBntC,EAAA94B,UAAAkjE,YAAA,SAAYvkE,GACV,IACImpE,EADArzC,EAAuB12B,KAE3B,GAAG,IAAK+pE,EAAQrzC,EAAQwxC,eAAkB6B,EAAM9gD,IAAIroB,GAAQ,OAAOmpE,EAAM7oE,IAAIN,SACtE81B,EAAUA,EAAQlW,QACzB,OAAOxgB,KAAKooE,eAAehvC,aAAal4B,IAAIN,IAI9Cm6B,EAAA94B,UAAAm1B,OAAA,SAAOx2B,GACL,IAAIqS,EAAUjT,KAAKmlE,YAAYvkE,GAC/B,OAAIqS,GACGjT,KAAK0jE,eAAetsC,OAAOx2B,IAIpCm6B,EAAA94B,UAAA+nE,YAAA,SAAYxxC,EAAYlb,EAAkB2sD,GACxC,YADwC,IAAAA,OAAA,GACpCzxC,EAAQ,EAAUyxC,EAEfzxC,EADUx4B,KAAKsoE,WACIn8D,SAAWyxB,UAAU59B,KAAKsoE,WAAW9vC,IAAUlb,IAASA,GAIpFyd,EAAA94B,UAAAioE,eAAA,SAAe1xC,EAAYlb,EAAkB2sD,GAC3C,YAD2C,IAAAA,OAAA,GACvCzxC,EAAQ,EAAUyxC,EAEfzxC,EADUx4B,KAAKsoE,WACIn8D,QAAwD,IAA7CyxB,UAAU59B,KAAKsoE,WAAW9vC,IAAUlb,IAI3Eyd,EAAA94B,UAAAmnE,aAAA,SAAa5wC,EAAYlb,GACvB,KAAIkb,EAAQ,GAAZ,CACA,IAAI8vC,EAAatoE,KAAKsoE,WAClBzzD,EAAQ2jB,EAAQ8vC,EAAWn8D,OAASyxB,UAAU0qC,EAAW9vC,IAAU,EACvEx4B,KAAKsoE,WAAW9vC,GAAS3jB,EAAQyI,IAInCyd,EAAA94B,UAAA+mE,eAAA,SAAexwC,EAAYlb,GACzB,KAAIkb,EAAQ,GAAZ,CACA,IAAI8vC,EAAatoE,KAAKsoE,WAClBzzD,EAAQ2jB,EAAQ8vC,EAAWn8D,OAASyxB,UAAU0qC,EAAW9vC,IAAU,EACvEx4B,KAAKsoE,WAAW9vC,GAAS3jB,GAASyI,IAIpCyd,EAAA94B,UAAAkoE,eAAA,WACE,IAAI/B,EAAiBpoE,KAAKooE,eACtB7/C,EAAK6/C,EAAejuC,cACpBiwC,EAAQhC,EAAehuC,WAG3B,OAFKgwC,EACAA,EAAM19D,KAAK6b,GADJ6/C,EAAehuC,WAAa,CAAE7R,GAEnC6/C,EAAe/tC,WAAa9R,EAAG7c,SAAS,KAIjDqvB,EAAA94B,UAAAooE,cAAA,WACE,IAAIjC,EAAiBpoE,KAAKooE,eACtBgC,EAAQhgE,OAAOg+D,EAAehuC,YAC9BjuB,EAAS/B,OAAOggE,EAAMj+D,QAC1Bi+D,EAAMnB,MACF98D,EAAS,EACXi8D,EAAe/tC,WAAa+vC,EAAMj+D,EAAS,GAAGT,SAAS,KAEvD08D,EAAe/tC,WAAa,KAC5B+tC,EAAehuC,WAAa,OAKhCW,EAAA94B,UAAAqoE,QAAA,SAAQvrC,GACN/+B,KAAK6U,OAAuB,MAAdkqB,EAAMlqB,MACpB7U,KAAKsoE,WAAavpC,EAAMupC,YAI1BvtC,EAAA94B,UAAAsoE,mBAAA,SAAmBxrC,GACbA,EAAM1hB,GAAE,IACVrd,KAAKwd,IAAG,KAENuhB,EAAM1hB,GAAE,IACVrd,KAAKwd,IAAG,MAENuhB,EAAM1hB,GAAE,KAAsB0hB,EAAM1E,YAAcr6B,KAAKq6B,YACzDr6B,KAAKwd,IAAG,MAENuhB,EAAM1hB,GAAE,KAAyB0hB,EAAMspC,eAAiBroE,KAAKqoE,eAC/DroE,KAAKwd,IAAG,MAENuhB,EAAM1hB,GAAE,KACVrd,KAAKwd,IAAG,OAGV,IADA,IAAI8qD,EAAavpC,EAAMupC,WACdjoE,EAAI,EAAGojB,EAAI6kD,EAAWn8D,OAAQ9L,EAAIojB,IAAKpjB,EAAG,CACjD,IAAIwU,EAAQyzD,EAAWjoE,GACnBwU,EAAQgzD,EAAWwB,UAAUrpE,KAAKopE,aAAa/oE,EAAGwnE,EAAW2C,wBAC7D31D,EAAQgzD,EAAW4C,UAAUzqE,KAAKopE,aAAa/oE,EAAGwnE,EAAW6C,wBAC7D71D,EAAQgzD,EAAW8C,WAAW3qE,KAAKopE,aAAa/oE,EAAGwnE,EAAW+C,2BAKtE7vC,EAAA94B,UAAA4oE,cAAA,SAAc34D,EAAYC,GAExBnS,KAAKwd,IAAItL,EAAK2C,MAAQ1C,EAAM0C,MAAK,KAGjC7U,KAAKwd,IAAc,MAAVtL,EAAK2C,OACd7U,KAAKwd,IAAe,MAAXrL,EAAM0C,OAGf7U,KAAKuqE,mBAAmBr4D,GACxBlS,KAAKuqE,mBAAmBp4D,GAQxB,IALA,IAAI24D,EAAiB54D,EAAKo2D,WACtByC,EAAoBD,EAAe3+D,OACnC6+D,EAAkB74D,EAAMm2D,WACxB2C,EAAqBD,EAAgB7+D,OACrC++D,EAAgB,IAAIjkE,MAAkBkkE,IAASJ,EAAmBE,IAC7D5qE,EAAI,EAAGA,EAAI0qE,IAAqB1qE,EACvC6qE,EAAc7qE,GAAKwnE,EAAWl7D,KAC5BixB,UAAUktC,EAAezqE,IACzBA,EAAI4qE,EACArtC,UAAUotC,EAAgB3qE,IAC1B,GAGR,IAASA,EAAI0qE,EAAmB1qE,EAAI4qE,IAAsB5qE,EACxD6qE,EAAc7qE,GAAKwnE,EAAWl7D,KAC5B,EACAixB,UAAUotC,EAAgB3qE,KAG9BL,KAAKsoE,WAAa4C,GAIpBnwC,EAAA94B,UAAAmpE,UAAA,SAAUj6D,EAAqB7B,GAC7B,IAAKA,EAAK+N,GAAE,KAAsB,OAAO,EAIzC,OAAQ00C,EAAApL,gBAAgBx1C,IACtB,KAAK4gD,EAAAhyB,aAAa8uB,SAChB,IAAKkD,EAAAxK,WAAWp2C,GAAO,MAEvB,QADIqpB,EAAQx6B,KAAKooE,eAAe/uC,cAAc04B,EAAA5K,iBAAiBh2C,KACjD7B,KAAK+N,GAAE,MAAwBrd,KAAKgqE,YAAYxvC,EAAMhC,MAAOqvC,EAAW9C,SAAS,GAEjG,KAAKhT,EAAAhyB,aAAaglB,SAChB,IAAIvqB,EACJ,QADIA,EAAQx6B,KAAKooE,eAAe/uC,cAAc04B,EAAA7K,iBAAiB/1C,KACjD7B,KAAK+N,GAAE,MAAwBrd,KAAKgqE,YAAYxvC,EAAMhC,MAAOqvC,EAAW9C,SAAS,GAGnG,OAAO,GAIThqC,EAAA94B,UAAAopE,qBAAA,SAAqBl6D,GAEnB,OAAQ4gD,EAAApL,gBAAgBx1C,IACtB,KAAK4gD,EAAAhyB,aAAa8uB,SAChB,IAAKkD,EAAAxK,WAAWp2C,GAAO,MACvB,IAAIqpB,EAAQx6B,KAAKooE,eAAe/uC,cAAc04B,EAAA5K,iBAAiBh2C,IAC/DnR,KAAKopE,aAAa5uC,EAAMhC,MAAOqvC,EAAW9C,SAC1C/kE,KAAKqrE,qBAAqBtZ,EAAA1K,iBAAiBl2C,IAC3C,MAEF,KAAK4gD,EAAAhyB,aAAaglB,SACZvqB,EAAQx6B,KAAKooE,eAAe/uC,cAAc04B,EAAA7K,iBAAiB/1C,IAC/DnR,KAAKopE,aAAa5uC,EAAMhC,MAAOqvC,EAAW9C,SAC1C,MAEF,KAAKhT,EAAAhyB,aAAasuB,GAChB,IAAIt1C,EAAUg5C,EAAA1I,WAAWl4C,GACzB,IAAK4H,EAAS,MACVg5C,EAAApL,gBAAgB5tC,IAAYg5C,EAAAhyB,aAAa0kB,QAIxCsN,EAAAnL,kBAAkB7tC,IAAYg5C,EAAAjyB,WAAW15B,KAAoC,GAA7B2rD,EAAAlL,iBAAiB9tC,IACjEg5C,EAAAnL,kBAAkB7tC,IAAYg5C,EAAAjyB,WAAWz5B,KAAuC,GAAhC0rD,EAAAjL,oBAAoB/tC,IAAkD,GAAjCg5C,EAAAhL,qBAAqBhuC,MAE3G/Y,KAAKqrE,qBAAqBtZ,EAAA9I,eAAe93C,IACzCnR,KAAKqrE,qBAAqBtZ,EAAA5I,UAAUh4C,KAGxC,MAEF,KAAK4gD,EAAAhyB,aAAa4lB,MAChB,OAAQoM,EAAAlK,WAAW12C,IACjB,KAAK4gD,EAAA3uB,QAAQkoC,OACb,KAAKvZ,EAAA3uB,QAAQmoC,OACXvrE,KAAKwrE,sBAAsBzZ,EAAAjK,cAAc32C,IAI7C,MAEF,KAAK4gD,EAAAhyB,aAAa+lB,OAChB,OAAQiM,EAAArK,YAAYv2C,IAClB,KAAK4gD,EAAArpB,SAAS+iC,MACZ,IAAIv5D,EAAO6/C,EAAApK,cAAcx2C,GACrBgB,EAAQ4/C,EAAAnK,eAAez2C,GACvB4gD,EAAApL,gBAAgBz0C,IAAS6/C,EAAAhyB,aAAa0kB,OAAmC,GAA1BsN,EAAAlL,iBAAiB30C,GAClElS,KAAKqrE,qBAAqBl5D,GACjB4/C,EAAApL,gBAAgBx0C,IAAU4/C,EAAAhyB,aAAa0kB,OAAoC,GAA3BsN,EAAAlL,iBAAiB10C,IAC1EnS,KAAKqrE,qBAAqBn5D,GAE5B,MAEF,KAAK6/C,EAAArpB,SAASgjC,MACRx5D,EAAO6/C,EAAApK,cAAcx2C,GACrBgB,EAAQ4/C,EAAAnK,eAAez2C,GACvB4gD,EAAApL,gBAAgBz0C,IAAS6/C,EAAAhyB,aAAa0kB,OAAuC,GAA7BsN,EAAAjL,oBAAoB50C,IAA4C,GAA9B6/C,EAAAhL,qBAAqB70C,GAEhG6/C,EAAApL,gBAAgBx0C,IAAU4/C,EAAAhyB,aAAa0kB,OAAwC,GAA9BsN,EAAAjL,oBAAoB30C,IAA8C,GAA/B4/C,EAAAhL,qBAAqB50C,IAClHnS,KAAKqrE,qBAAqBn5D,GAF1BlS,KAAKqrE,qBAAqBl5D,GAI5B,MAEF,KAAK4/C,EAAArpB,SAASijC,MACRz5D,EAAO6/C,EAAApK,cAAcx2C,GACrBgB,EAAQ4/C,EAAAnK,eAAez2C,GACvB4gD,EAAApL,gBAAgBz0C,IAAS6/C,EAAAhyB,aAAa0kB,OAAmC,GAA1BsN,EAAAlL,iBAAiB30C,GAClElS,KAAKqrE,qBAAqBl5D,GACjB4/C,EAAApL,gBAAgBx0C,IAAU4/C,EAAAhyB,aAAa0kB,OAAoC,GAA3BsN,EAAAlL,iBAAiB10C,IAC1EnS,KAAKqrE,qBAAqBn5D,GAE5B,MAEF,KAAK6/C,EAAArpB,SAASkjC,MACR15D,EAAO6/C,EAAApK,cAAcx2C,GACrBgB,EAAQ4/C,EAAAnK,eAAez2C,GACvB4gD,EAAApL,gBAAgBz0C,IAAS6/C,EAAAhyB,aAAa0kB,OAAsC,GAA7BsN,EAAAjL,oBAAoB50C,IAA4C,GAA9B6/C,EAAAhL,qBAAqB70C,GACxGlS,KAAKqrE,qBAAqBl5D,GACjB4/C,EAAApL,gBAAgBx0C,IAAU4/C,EAAAhyB,aAAa0kB,OAAuC,GAA9BsN,EAAAjL,oBAAoB30C,IAA8C,GAA/B4/C,EAAAhL,qBAAqB50C,IACjHnS,KAAKqrE,qBAAqBn5D,GAKhC,MAEF,KAAK6/C,EAAAhyB,aAAa0uB,KAGhB,OAFWsD,EAAAvH,cAAcr5C,IAGvB,KAFYnR,KAAKooE,eAAe7xC,QAEnBtG,eAAenI,aAC1B9nB,KAAKqrE,qBAAqBtZ,EAAAnH,eAAez5C,EAAM,OAUzD4pB,EAAA94B,UAAAupE,sBAAA,SAAsBr6D,GAEpB,OAAQ4gD,EAAApL,gBAAgBx1C,IACtB,KAAK4gD,EAAAhyB,aAAa4lB,MAChB,OAAQoM,EAAAlK,WAAW12C,IACjB,KAAK4gD,EAAA3uB,QAAQkoC,OACb,KAAKvZ,EAAA3uB,QAAQmoC,OACXvrE,KAAKqrE,qBAAqBtZ,EAAAjK,cAAc32C,IAI5C,MAEF,KAAK4gD,EAAAhyB,aAAasuB,GAChB,IAAIv1C,EAASi5C,EAAA5I,UAAUh4C,GACvB,GAAI4gD,EAAApL,gBAAgB7tC,IAAWi5C,EAAAhyB,aAAa0kB,MAAO,CAEjD,IADcsN,EAAA1I,WAAWl4C,GACX,OAIX4gD,EAAAnL,kBAAkB9tC,IAAWi5C,EAAAjyB,WAAW15B,KAAmC,GAA5B2rD,EAAAlL,iBAAiB/tC,IAChEi5C,EAAAnL,kBAAkB9tC,IAAWi5C,EAAAjyB,WAAWz5B,MAAuC,GAA/B0rD,EAAAjL,oBAAoBhuC,IAAgD,GAAhCi5C,EAAAhL,qBAAqBjuC,OAE1G9Y,KAAKwrE,sBAAsBzZ,EAAA9I,eAAe93C,IAC1CnR,KAAKwrE,sBAAsBzZ,EAAA1I,WAAWl4C,KAI1C,MAEF,KAAK4gD,EAAAhyB,aAAa+lB,OAChB,OAAQiM,EAAArK,YAAYv2C,IAElB,KAAK4gD,EAAArpB,SAAS+iC,MACZ,IAAIv5D,EAAO6/C,EAAApK,cAAcx2C,GACrBgB,EAAQ4/C,EAAAnK,eAAez2C,GACvB4gD,EAAApL,gBAAgBz0C,IAAS6/C,EAAAhyB,aAAa0kB,OAAmC,GAA1BsN,EAAAlL,iBAAiB30C,GAClElS,KAAKqrE,qBAAqBl5D,GACjB4/C,EAAApL,gBAAgBx0C,IAAU4/C,EAAAhyB,aAAa0kB,OAAoC,GAA3BsN,EAAAlL,iBAAiB10C,IAC1EnS,KAAKqrE,qBAAqBn5D,GAE5B,MAEF,KAAK6/C,EAAArpB,SAASgjC,MACRx5D,EAAO6/C,EAAApK,cAAcx2C,GACrBgB,EAAQ4/C,EAAAnK,eAAez2C,GACvB4gD,EAAApL,gBAAgBz0C,IAAS6/C,EAAAhyB,aAAa0kB,OAAsC,GAA7BsN,EAAAjL,oBAAoB50C,IAA4C,GAA9B6/C,EAAAhL,qBAAqB70C,GACxGlS,KAAKqrE,qBAAqBl5D,GACjB4/C,EAAApL,gBAAgBx0C,IAAU4/C,EAAAhyB,aAAa0kB,OAAuC,GAA9BsN,EAAAjL,oBAAoB30C,IAA8C,GAA/B4/C,EAAAhL,qBAAqB50C,IACjHnS,KAAKqrE,qBAAqBn5D,GAE5B,MAEF,KAAK6/C,EAAArpB,SAASijC,MACRz5D,EAAO6/C,EAAApK,cAAcx2C,GACrBgB,EAAQ4/C,EAAAnK,eAAez2C,GACvB4gD,EAAApL,gBAAgBz0C,IAAS6/C,EAAAhyB,aAAa0kB,OAAmC,GAA1BsN,EAAAlL,iBAAiB30C,GAClElS,KAAKqrE,qBAAqBl5D,GACjB4/C,EAAApL,gBAAgBx0C,IAAU4/C,EAAAhyB,aAAa0kB,OAAoC,GAA3BsN,EAAAlL,iBAAiB10C,IAC1EnS,KAAKqrE,qBAAqBn5D,GAE5B,MAEF,KAAK6/C,EAAArpB,SAASkjC,MACR15D,EAAO6/C,EAAApK,cAAcx2C,GACrBgB,EAAQ4/C,EAAAnK,eAAez2C,GACvB4gD,EAAApL,gBAAgBz0C,IAAS6/C,EAAAhyB,aAAa0kB,OAAuC,GAA7BsN,EAAAjL,oBAAoB50C,IAA4C,GAA9B6/C,EAAAhL,qBAAqB70C,GAEhG6/C,EAAApL,gBAAgBx0C,IAAU4/C,EAAAhyB,aAAa0kB,OAAwC,GAA9BsN,EAAAjL,oBAAoB30C,IAA8C,GAA/B4/C,EAAAhL,qBAAqB50C,IAClHnS,KAAKqrE,qBAAqBn5D,GAF1BlS,KAAKqrE,qBAAqBl5D,MAiBtC4oB,EAAA94B,UAAA4pE,YAAA,SAAY16D,EAAqB7B,GAM/B,GAHAlF,OAAOkF,GAAQwU,EAAAuF,KAAKG,OAGfla,EAAK+N,GAAG,IAAsC,OAAO,EAE1D,IAAIvH,EACJ,OAAQi8C,EAAApL,gBAAgBx1C,IAGtB,KAAK4gD,EAAAhyB,aAAaglB,SAChB,IAAIvqB,EAAQx6B,KAAKooE,eAAe/uC,cAAc04B,EAAA7K,iBAAiB/1C,IAC/D,OAAQnR,KAAKgqE,YAAYxvC,EAAMhC,MAAOqvC,EAAWiE,SAAS,IACnDC,EAAsBvxC,EAAMlrB,KAAMA,GAI3C,KAAKyiD,EAAAhyB,aAAa8uB,SAEhB,OADAzkD,OAAO2nD,EAAAxK,WAAWp2C,IACXnR,KAAK6rE,YAAY9Z,EAAA1K,iBAAiBl2C,GAAO7B,GAIlD,KAAKyiD,EAAAhyB,aAAaklB,UAEhB,IAAI+mB,EAAS5hE,OAAOpK,KAAKooE,eAAe7xC,QAAQrP,eAAehmB,IAAIkJ,OAAO2nD,EAAAtK,iBAAiBt2C,MAE3F,OADA/G,OAAO4hE,EAAOn+D,MAAQikD,EAAAlrC,YAAYhJ,QAC3BmuD,EAAsB3hE,OAAgB4hE,EAAQ18D,MAAOA,GAG9D,KAAKyiD,EAAAhyB,aAAa+lB,OAChB,OAAQiM,EAAArK,YAAYv2C,IAGlB,KAAK4gD,EAAArpB,SAAS+iC,MACd,KAAK1Z,EAAArpB,SAASgjC,MACd,KAAK3Z,EAAArpB,SAASujC,MACd,KAAKla,EAAArpB,SAASwjC,MACd,KAAKna,EAAArpB,SAASijC,MACd,KAAK5Z,EAAArpB,SAASkjC,MACd,KAAK7Z,EAAArpB,SAASyjC,MACd,KAAKpa,EAAArpB,SAAS0jC,MACd,KAAKra,EAAArpB,SAAS2jC,MACd,KAAKta,EAAArpB,SAAS4jC,MACd,KAAKva,EAAArpB,SAAS6jC,MACd,KAAKxa,EAAArpB,SAAS8jC,MACd,KAAKza,EAAArpB,SAAS+jC,MACd,KAAK1a,EAAArpB,SAASgkC,MACd,KAAK3a,EAAArpB,SAASikC,MACd,KAAK5a,EAAArpB,SAASkkC,MACd,KAAK7a,EAAArpB,SAASmkC,MACd,KAAK9a,EAAArpB,SAASokC,MACd,KAAK/a,EAAArpB,SAASqkC,MACd,KAAKhb,EAAArpB,SAASskC,MACd,KAAKjb,EAAArpB,SAASukC,MACd,KAAKlb,EAAArpB,SAASwkC,MACd,KAAKnb,EAAArpB,SAASykC,MACd,KAAKpb,EAAArpB,SAAS0kC,MACd,KAAKrb,EAAArpB,SAAS2kC,MACd,KAAKtb,EAAArpB,SAAS4kC,MACd,KAAKvb,EAAArpB,SAAS6kC,MACd,KAAKxb,EAAArpB,SAAS8kC,MACd,KAAKzb,EAAArpB,SAAS+kC,MACd,KAAK1b,EAAArpB,SAASglC,MACd,KAAK3b,EAAArpB,SAASilC,MACd,KAAK5b,EAAArpB,SAASklC,MAAO,OAAO,EAG5B,KAAK7b,EAAArpB,SAASmlC,OACZ,QAEI9b,EAAApL,gBAAgB7wC,EAAUi8C,EAAApK,cAAcx2C,KAAU4gD,EAAAhyB,aAAa0kB,QAEhC,GAA7BsN,EAAAlL,iBAAiB/wC,IAEc,GAA7Bi8C,EAAAlL,iBAAiB/wC,KAChB9V,KAAK6rE,YAAY9Z,EAAAnK,eAAez2C,GAAO7B,KAI5CyiD,EAAApL,gBAAgB7wC,EAAUi8C,EAAAnK,eAAez2C,KAAU4gD,EAAAhyB,aAAa0kB,QAEjC,GAA7BsN,EAAAlL,iBAAiB/wC,IAEc,GAA7Bi8C,EAAAlL,iBAAiB/wC,KAChB9V,KAAK6rE,YAAY9Z,EAAApK,cAAcx2C,GAAO7B,KASjD,KAAKyiD,EAAArpB,SAASolC,OAGZ,QAGM/b,EAAApL,gBAAgB7wC,EAAUi8C,EAAApK,cAAcx2C,KAAU4gD,EAAAhyB,aAAa0kB,OAC/DsN,EAAAlL,iBAAiB/wC,IAAYxG,EAAK0jD,wBAAwBlvC,EAAAuF,KAAKjmB,OAC3DpD,KAAK6rE,YAAY/1D,EAASxG,IAG9ByiD,EAAApL,gBAAgB7wC,EAAUi8C,EAAAnK,eAAez2C,KAAU4gD,EAAAhyB,aAAa0kB,OAChEsN,EAAAlL,iBAAiB/wC,IAAYxG,EAAK0jD,wBAAwBlvC,EAAAuF,KAAKjmB,OAC3DpD,KAAK6rE,YAAY/1D,EAASxG,IAMtC,KAAKyiD,EAAArpB,SAASqlC,OACZ,IAAIrxB,EAAQ,GAAKptC,EAAKisC,KACtB,OAAOwW,EAAApL,gBAAgB7wC,EAAUi8C,EAAAnK,eAAez2C,KAAU4gD,EAAAhyB,aAAa0kB,OAChEsN,EAAAlL,iBAAiB/wC,GAAW4mC,EAIrC,KAAKqV,EAAArpB,SAASslC,OACRtxB,EAAQ,GAAKptC,EAAKisC,KACtB,OAAOv7C,KAAK6rE,YAAY9Z,EAAApK,cAAcx2C,GAAO7B,KAC3CyiD,EAAApL,gBAAgB7wC,EAAUi8C,EAAAnK,eAAez2C,KAAU4gD,EAAAhyB,aAAa0kB,OAChEsN,EAAAlL,iBAAiB/wC,GAAW4mC,GAMhC,KAAKqV,EAAArpB,SAASulC,OACRvxB,EAAQ,GAAKptC,EAAKisC,KACtB,OAAOjsC,EAAK+N,GAAE,KAER00C,EAAApL,gBAAgB7wC,EAAUi8C,EAAAnK,eAAez2C,KAAU4gD,EAAAhyB,aAAa0kB,OAChEsN,EAAAlL,iBAAiB/wC,GAAW4mC,GAE9B18C,KAAK6rE,YAAY9Z,EAAApK,cAAcx2C,GAAO7B,MACpCyiD,EAAApL,gBAAgB7wC,EAAUi8C,EAAAnK,eAAez2C,KAAU4gD,EAAAhyB,aAAa0kB,OAChEsN,EAAAlL,iBAAiB/wC,IAAY4mC,GAKrC,KAAKqV,EAAArpB,SAASwlC,OACd,KAAKnc,EAAArpB,SAASylC,OACd,KAAKpc,EAAArpB,SAAS0lC,OACZ,OAAOpuE,KAAK6rE,YAAY9Z,EAAApK,cAAcx2C,GAAO7B,IACtCtP,KAAK6rE,YAAY9Z,EAAAnK,eAAez2C,GAAO7B,GAGlD,MAGF,KAAKyiD,EAAAhyB,aAAa4lB,MAChB,OAAQoM,EAAAlK,WAAW12C,IAGjB,KAAK4gD,EAAA3uB,QAAQkoC,OACb,KAAKvZ,EAAA3uB,QAAQmoC,OAAQ,OAAO,EAG5B,KAAKxZ,EAAA3uB,QAAQirC,OACb,KAAKtc,EAAA3uB,QAAQkrC,OACb,KAAKvc,EAAA3uB,QAAQmrC,UAAW,OAAOj/D,EAAKisC,KAAO,EAE7C,MAIF,KAAKwW,EAAAhyB,aAAa0kB,MAChB,IAAInjD,EAAa,EACjB,OAAQywD,EAAAnL,kBAAkBz1C,IACxB,KAAK4gD,EAAAjyB,WAAW15B,IAAO9E,EAAQywD,EAAAlL,iBAAiB11C,GAAO,MACvD,KAAK4gD,EAAAjyB,WAAWz5B,IAAO/E,EAAQywD,EAAAjL,oBAAoB31C,GAAO,MAC1D,KAAK4gD,EAAAjyB,WAAWj5B,IAAOvF,EAAQ8B,IAAI2uD,EAAA/K,iBAAiB71C,IAAQ,MAC5D,KAAK4gD,EAAAjyB,WAAWh5B,IAAOxF,EAAQ8B,IAAI2uD,EAAA9K,iBAAiB91C,IAAQ,MAC5D,QAAS/G,QAAO,GAElB,OAAQkF,EAAKzB,MACX,OAAkB,OAAOvM,EAAQ4B,GAAGsrE,WAAaltE,EAAQ4B,GAAGohD,UAC5D,OAAmB,OAAOhjD,EAAQ6B,IAAIqrE,WAAaltE,EAAQ6B,IAAImhD,UAC/D,OAAkB,OAAOhjD,EAAQ,GAAKA,EAAQiC,GAAG+gD,UACjD,OAAmB,OAAOhjD,EAAQ,GAAKA,EAAQkC,IAAI8gD,UACnD,QAAoB,OAAuB,KAAP,EAARhjD,GAE9B,MAIF,KAAKywD,EAAAhyB,aAAaqlB,KAChB,IAAIqpB,OAAQ,EACRz2B,EAAS+Z,EAAA7J,aAAa/2C,GAC1B,OAAQ4gD,EAAAhK,aAAa52C,IACnB,KAAK,EAAMs9D,EAAWz2B,EAASl0B,EAAAuF,KAAKnmB,GAAM4gB,EAAAuF,KAAK9lB,GAAK,MACpD,KAAK,EAAMkrE,EAAWz2B,EAASl0B,EAAAuF,KAAKlmB,IAAM2gB,EAAAuF,KAAK7lB,IAAK,MACpD,QAAWirE,EAAWz2B,EAASl0B,EAAAuF,KAAKjmB,IAAM0gB,EAAAuF,KAAK5lB,IAEjD,OAAOsoE,EAAsB0C,EAAUn/D,GAMzC,KAAKyiD,EAAAhyB,aAAakuB,MAChB,IAAK8D,EAAApJ,aAAax3C,GAAO,CACvB,IAAIoqC,EAAOnxC,OAAO2nD,EAAAlJ,mBAAmB13C,IACjCu9D,EAAO3c,EAAAhJ,cAAc53C,EAAMoqC,EAAO,GACtC,OAAOv7C,KAAK6rE,YAAY6C,EAAMp/D,GAEhC,MAIF,KAAKyiD,EAAAhyB,aAAasuB,GAChB,OAAOruD,KAAK6rE,YAAY9Z,EAAA5I,UAAUh4C,GAAO7B,IAClCtP,KAAK6rE,YAAYzhE,OAAO2nD,EAAA1I,WAAWl4C,IAAQ7B,GAIpD,KAAKyiD,EAAAhyB,aAAa2xB,OAChB,OAAO1xD,KAAK6rE,YAAY9Z,EAAAhI,cAAc54C,GAAO7B,IACtCtP,KAAK6rE,YAAY9Z,EAAA9H,cAAc94C,GAAO7B,GAI/C,KAAKyiD,EAAAhyB,aAAa0uB,KAChB,IACIrnC,EADUpnB,KAAKooE,eAAe7xC,QACJnP,gBAC1BunD,EAAevkE,OAAO2nD,EAAAvH,cAAcr5C,IACxC,GAAIiW,EAAgB6B,IAAI0lD,GAAe,CACrC,IAAI11C,EAAW7R,EAAgBlmB,IAAIytE,GACnCvkE,OAAO6uB,EAASprB,MAAQikD,EAAAlrC,YAAYpH,UACpC,IAAI9P,EAAwBupB,EAAU/e,UAAUxK,WAChD,OAAmBupB,EAAU6B,KAAKzd,GAAE,IAC7B0uD,EAAsBr8D,EAAYJ,GAE3C,OAAO,EAIT,KAAKyiD,EAAAhyB,aAAaguB,YAAa,OAAO,EAExC,OAAO,GAGThzB,EAAA94B,UAAAyJ,SAAA,WAGE,IAFA,IAAIkjE,EAAS,EACTpuD,EAASxgB,KAAKwgB,OACXA,GACLA,EAASA,EAAOA,SACdouD,EAEJ,MAAO,QAAU5uE,KAAK0jE,eAAiB,KAAOkL,EAAOljE,WAAa,KAEtEqvB,EAl0BA,GAq0BA,SAASgxC,EAAsB0C,EAAgB38D,GAC7C,OAAQ28D,EAASpxD,GAAE,IACZoxD,EAASlzB,KAAOzpC,EAAOypC,MACvBkzB,EAASpxD,GAAE,IAAsBvL,EAAOuL,GAAE,GAUnD,SAASwxD,EAAoB19D,EAAqB29D,GAChD,OAAQ/c,EAAApL,gBAAgBx1C,IACtB,KAAK4gD,EAAAhyB,aAAaglB,SAChB+pB,EAAKrlD,IAAIsoC,EAAA7K,iBAAiB/1C,IAC1B,MAEF,KAAK4gD,EAAAhyB,aAAa8uB,SAChBigB,EAAKrlD,IAAIsoC,EAAA5K,iBAAiBh2C,IAG5B,QAAS4gD,EAAA5D,SAASh9C,EAAM29D,EAAMD,IA51BrBnvE,EAAAq7B,OA40Bbr7B,EAAAqvE,eAAA,SAA+B59D,EAAqB29D,GAElD,YAFkD,IAAAA,MAAA,IAAqB3nE,KACvE4qD,EAAA5D,SAASh9C,EAAM29D,EAAMD,GACdC,64BC9hCT,IAAAtO,EAAArgE,EAAA,IASA0jB,EAAA1jB,EAAA,GAKA4xD,EAAA5xD,EAAA,GA4BAoN,EAAApN,EAAA,GAYA2xD,EAAA3xD,EAAA,GAwBA8jB,EAAA9jB,EAAA,IAOA6jB,EAAA7jB,EAAA,GAIAqN,EAAArN,EAAA,GAKA4jB,EAAA5jB,EAAA,GAgEA2jB,EAAA3jB,EAAA,GAQA0J,EAAA1J,EAAA,GAWA6uE,EAAA,oBAAAA,IAGEhvE,KAAA29B,OAAiBpwB,EAAAnE,OAAO6gB,OAExBjqB,KAAAkqB,UAAiB,EAEjBlqB,KAAAivE,cAAqB,EAErBjvE,KAAAkvE,aAAoB,EAEpBlvE,KAAAmvE,aAAoB,EAEpBnvE,KAAAo7B,WAAkB,EAElBp7B,KAAAovE,eAAsB,EAEtBpvE,KAAAmqB,WAAkB,EAElBnqB,KAAAgvB,cAA2C,KAE3ChvB,KAAAqvE,SAAQ,EAERrvE,KAAAsvE,UAAiB,EAGjBtvE,KAAAoqB,kBAAyB,EAEzBpqB,KAAAqqB,gBAAuB,EA0BzB,OAvBEtpB,OAAAC,eAAIguE,EAAA/sE,UAAA,WAAQ,KAAZ,WACE,OAAOjC,KAAK29B,QAAUpwB,EAAAnE,OAAO4gB,wCAI/BjpB,OAAAC,eAAIguE,EAAA/sE,UAAA,YAAS,KAAb,WACE,OAAOjC,KAAK29B,QAAUpwB,EAAAnE,OAAO4gB,OAASlG,EAAAuF,KAAKqpC,QAAU5uC,EAAAuF,KAAKspC,yCAI5D5xD,OAAAC,eAAIguE,EAAA/sE,UAAA,YAAS,KAAb,WACE,OAAOjC,KAAK29B,QAAUpwB,EAAAnE,OAAO4gB,OAASlG,EAAAuF,KAAKmpC,QAAU1uC,EAAAuF,KAAKopC,yCAI5D1xD,OAAAC,eAAIguE,EAAA/sE,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAK29B,QAAUpwB,EAAAnE,OAAO4gB,OAAS+nC,EAAAjyB,WAAWz5B,IAAM0rD,EAAAjyB,WAAW15B,qCAIpE4oE,EAAA/sE,UAAA2nB,WAAA,SAAW2lD,GACT,OAAoC,IAA5BvvE,KAAKqvE,SAAWE,IAE5BP,EAtDA,GAAatvE,EAAAsvE,UAyDb,SAAkBQ,GAChBA,IAAA,eAGAA,IAAA,iCAEAA,IAAA,iCAEAA,IAAA,yBAGAA,IAAA,yBAEAA,IAAA,8BAEAA,IAAA,kCAfF,CAAkB9vE,EAAA8vE,cAAA9vE,EAAA8vE,YAAW,KAmB7B,SAAkBC,GAChBA,IAAA,eAEAA,IAAA,eAEAA,IAAA,eAEAA,IAAA,+BAEAA,IAAA,+BATF,CAAkB/vE,EAAA+vE,kBAAA/vE,EAAA+vE,gBAAe,KAajC,IA8lRIC,EACAC,EA/lRJC,EAAA,SAAApzD,GA2CE,SAAAozD,EAAYr5C,EAAkBpN,QAAA,IAAAA,MAAA,MAA9B,IAAAzM,EACEF,EAAAhc,KAAAR,KAAMu2B,EAAQxpB,cAAY/M,KA/B5B0c,EAAAmzD,uBAAqC,GAErCnzD,EAAAozD,YAA2B,KAE3BpzD,EAAAqzD,YAAoBjsD,EAAAuF,KAAKG,KAMzB9M,EAAAszD,eAAkC,GAElCtzD,EAAAuzD,eAA4C,IAAI7oE,IAEhDsV,EAAAwzD,cAA0B,CAAE,QAE5BxzD,EAAAyzD,QAAqB,EAErBzzD,EAAA0zD,QAAuB,EAEvB1zD,EAAA2zD,gBAAe,EAEf3zD,EAAA4zD,oBAA0C,IAAInpE,IA0wFtCuV,EAAA6zD,eAAkC,KAClC7zD,EAAA8zD,eAAkC,KAClC9zD,EAAA+zD,eAAkC,KAClC/zD,EAAAg0D,eAAkC,KAnwFxCh0D,EAAK6Z,QAAUA,EACVpN,IAASA,EAAU,IAAI6lD,GAC5BtyD,EAAKyM,QAAUA,EACfzM,EAAKof,aAAehS,QAGlBqhD,IAAIhiD,EAAQgB,WAAY,IAE1BzN,EAAK/c,OAASoyD,EAAAnd,OAAOjzC,SACrB,IAAI6/C,EAAqC,SACrC9kC,EAAKyM,QAAQS,WAAU,MAAmB43B,GAAgBuQ,EAAAvxB,aAAamwC,SACvEj0D,EAAKyM,QAAQS,WAAU,KAA0B43B,GAAgBuQ,EAAAvxB,aAAaowC,gBAE9El0D,EAAKyM,QAAQS,WAAU,KAAgB43B,GAAgBuQ,EAAAvxB,aAAaqwC,SACpEn0D,EAAKyM,QAAQS,WAAU,KAAuB43B,GAAgBuQ,EAAAvxB,aAAaswC,YAC3Ep0D,EAAKyM,QAAQS,WAAU,KAA0B43B,GAAgBuQ,EAAAvxB,aAAauwC,SAElFr0D,EAAK/c,OAAO4hD,YAAYC,KAu+Q5B,OAriR8B/kC,EAAAmzD,EAAApzD,GAK5Bzb,OAAAC,eAAI4uE,EAAA3tE,UAAA,WAAQ,KAAZ,WAA2B,OAAOjC,KAAKu2B,QAAQxO,0CAiCxC6nD,EAAAoB,QAAP,SAAez6C,EAAkBpN,GAC/B,YAD+B,IAAAA,MAAA,MACxB,IAAIymD,EAASr5C,EAASpN,GAAS6nD,WA2BxCpB,EAAA3tE,UAAA+uE,QAAA,uBACM7nD,EAAUnpB,KAAKmpB,QACfxpB,EAASK,KAAKL,OACd42B,EAAUv2B,KAAKu2B,QAGnBA,EAAQrN,WAAWC,GAGnB,IAAI8nD,EAAwB16C,EAAQ3N,mBAAmB,QAAS,IAAI9E,EAAAoT,UAAUX,EAAS,GAAIzS,EAAAuF,KAAKG,OAChGynD,EAAsBnpD,aAAe,QACrC,IAAIopD,EAAoB,IAAIjqE,MAC5BjH,KAAKmxE,YAAcF,EAAsBn2C,KACzC96B,KAAKoxE,YAAcF,EAGf/nD,EAAQY,UACVpqB,EAAOi9C,UAAU4jB,EAAAgF,eAAe6L,UAAWtf,EAAAjyB,WAAWz5B,KAAK,EAAM1G,EAAO0D,IAAI,IAC5E1D,EAAOi9C,UAAU4jB,EAAAgF,eAAe8L,UAAWvf,EAAAjyB,WAAWz5B,KAAK,EAAM1G,EAAO0D,IAAI,MAE5E1D,EAAOi9C,UAAU4jB,EAAAgF,eAAe6L,UAAWtf,EAAAjyB,WAAW15B,KAAK,EAAMzG,EAAOyD,IAAI,IAC5EzD,EAAOi9C,UAAU4jB,EAAAgF,eAAe8L,UAAWvf,EAAAjyB,WAAW15B,KAAK,EAAMzG,EAAOyD,IAAI,KAI9E,IAAImuE,EAAQh7C,EAAQtP,gBACpB,IAAiB,IAAAoK,EAAA7F,EAAA+lD,EAAMl9D,UAAQid,EAAAD,EAAAriB,QAAAsiB,EAAA5F,KAAA4F,EAAAD,EAAAriB,OAAE,EAAxB2b,EAAI2G,EAAAhwB,OACFqK,OAAOiV,YAAcmD,EAAA3D,WAAWsQ,aACvC1wB,KAAKwxE,YAAY7mD,GACjB3qB,KAAKyxE,eAAe9mD,sGAKxB,IAAI+mD,GAAgBR,EAAkB/kE,OAClCijE,EAAgBjmD,EAAQimD,cAC5B,IAAKsC,GAAgBtC,EAAe,CAClC,IAAIl1D,EAAY+2D,EAAsB/2D,WACjCw3D,GAAgBtC,IACnBzvE,EAAOi9C,UAAU4jB,EAAAgF,eAAemM,QAAS5f,EAAAjyB,WAAW15B,KAAK,EAAMzG,EAAOyD,IAAI,IAC1E8tE,EAAkBU,QAChBjyE,EAAOy6C,GACLz6C,EAAOk4C,WAAW2oB,EAAAgF,eAAemM,QAAS5f,EAAAjyB,WAAW15B,KACrDzG,EAAO66C,SACP76C,EAAO85C,WAAW+mB,EAAAgF,eAAemM,QAAShyE,EAAOyD,IAAI,OAI3D,IAAIyuE,EAAUlyE,EAAOs9C,YACnBg0B,EAAsBnpD,aACtB9nB,KAAK8xE,mBACH53D,EAAUwgB,eACVxgB,EAAUxK,WACVwK,EAAUugB,UAEZ3W,EAAAiwC,mBAAmBkd,EAAsB33C,kBACzC35B,EAAOg6C,MAAM,KAAMu3B,IAErBD,EAAsB91C,SAASx7B,EAAQkyE,GAClCzC,EACAzvE,EAAO+9C,kBAAkBuzB,EAAsBnpD,aAAc,WAD9CnoB,EAAO2gD,SAASuxB,GAKd,EAApB7xE,KAAKqwE,iBAAgD7P,EAAAuR,oBAAoB/xE,MACrD,EAApBA,KAAKqwE,iBAAgD7P,EAAAwR,oBAAoBhyE,MAC7EL,EAAOo9C,aAAayjB,EAAAgF,eAAe8L,WACX,EAApBtxE,KAAKqwE,iBAAwC7P,EAAAyR,YAAYjyE,MAG7D,IAAI87B,EAAe97B,KAAK87B,aACxBA,EAAeo2C,UAAUp2C,EAAc3S,EAAQI,UAAU6oC,UACzDpyD,KAAK87B,aAAeA,EACpBn8B,EAAOo9C,aAAayjB,EAAAgF,eAAe6L,WACX,EAApBrxE,KAAKqwE,kBACHlnD,EAAQY,SACVpqB,EAAOi9C,UACL4jB,EAAAgF,eAAe6L,UACftf,EAAAjyB,WAAWz5B,KACX,EACA1G,EAAO0D,IAAIu8C,QAAQ9jB,GAAe+jB,SAAS/jB,KAG7Cn8B,EAAOi9C,UACL4jB,EAAAgF,eAAe6L,UACftf,EAAAjyB,WAAW15B,KACX,EACAzG,EAAOyD,IAAIw8C,QAAQ9jB,MAMzB,IAAIq2C,EAAiBhpD,EAAQS,WAAU,KAAqBT,EAAQ+lD,aAAe,EACnFvvE,EAAOy/C,UACLp/C,KAAKmpB,QAAQgB,YAAiCnqB,KAAKgwE,eAAe7jE,OAC9DyzC,QAAQwyB,UAAUF,UAAUp2C,EAAc,OAAUhS,QAAQ,GAAI,KAChE,EACJqoD,EAAiBhpD,EAAQ+lD,aAAend,EAAAnd,OAAO8R,iBAC/C1mD,KAAKgwE,eACL7mD,EAAQwU,OACR,SACAw0C,GAIEhpD,EAAQ8lD,cAActvE,EAAOm/C,gBAAgB,IAAK,MAAO,SAAUqzB,GAGvE,IAAIjC,EAAgBlwE,KAAKkwE,cACzBvwE,EAAOwgD,iBAAiB+vB,EAAc/jE,OAAQ,WAAY+jE,GAC1DvwE,EAAOs9C,YAAY,OAAQj9C,KAAK8xE,mBAAmB,KAAMhuD,EAAAuF,KAAKG,MAAO,KAAM7pB,EAAOg6C,MAAM,KAAM,KAG1FxwB,EAAQgmD,aAAaxvE,EAAOi/C,eAAe,IAAK,MAAO,aAG3D,IAAiB,IAAA/sB,EAAArG,EAAAxrB,KAAKu2B,QAAQtP,YAAY5S,UAAQyd,EAAAD,EAAA7iB,QAAA8iB,EAAApG,KAAAoG,EAAAD,EAAA7iB,OAAE,CAA/C,IAAI2b,KAAImH,EAAAxwB,OACFqK,OAAOiV,YAAcmD,EAAA3D,WAAWsQ,YAAY1wB,KAAKqyE,oBAAoB1nD,qGAEhF,OAAOhrB,GAMDiwE,EAAA3tE,UAAAowE,oBAAR,SAA4B1nD,WACtBhU,EAAUgU,EAAKjrB,QACnB,GAAIiX,MAAS,IAA2B,IAAA27D,EAAA9mD,EAAA7U,GAAO47D,EAAAD,EAAAtjE,QAAAujE,EAAA7mD,KAAA6mD,EAAAD,EAAAtjE,OAAA,CAAzB,IAAAwoB,EAAA5L,EAAA2mD,EAAAjxE,MAAA,GAACV,EAAA42B,EAAA,GAAMjG,EAAAiG,EAAA,GAAoBx3B,KAAKwyE,mBAAmB5xE,EAAM2wB,qGAC/E,IAAI1F,EAAclB,EAAKkB,YACvB,GAAIA,EACF,IAAK,IAAIxrB,EAAI,EAAGojB,EAAIoI,EAAY1f,OAAQ9L,EAAIojB,IAAKpjB,EAAGL,KAAKqyE,oBAAoBxmD,EAAYxrB,KAKrFuvE,EAAA3tE,UAAAuwE,mBAAR,SAA2B5xE,EAAcqS,EAAkBw/D,uBACzD,YADyD,IAAAA,MAAA,IACjDx/D,EAAQpF,MAGd,KAAKikD,EAAAlrC,YAAYqK,mBAEf,GADIyH,EAAgCzlB,EAASylB,cAE3C,IAAqB,IAAA7G,EAAArG,EAAAkN,EAAUrkB,UAAQyd,EAAAD,EAAA7iB,QAAA8iB,EAAApG,KAAAoG,EAAAD,EAAA7iB,OAAE,CAApC,IAAIiqB,EAAQnH,EAAAxwB,MACXqtE,EAAe/tE,EACnB,GAAIq4B,EAAS5b,GAAG9P,EAAAlL,YAAYsnB,SAE1BglD,IADI+D,EAAWz5C,EAASnR,cACCrb,UAAUimE,EAAS5xD,YAAY,MAE1D9gB,KAAKwyE,mBAAmB7D,EAAc11C,EAAUw5C,qGAGpD,MAEF,KAAK3gB,EAAAlrC,YAAY+G,gBACf,IAAI+K,EACJ,GADIA,EAA6BzlB,EAASylB,cAExC,IAAqB,IAAA/M,EAAAH,EAAAkN,EAAUrkB,UAAQoY,EAAAd,EAAA3c,QAAAyd,EAAAf,KAAAe,EAAAd,EAAA3c,OAAE,CAApC,IAGG0jE,EAHCz5C,EAAQxM,EAAAnrB,MACXqtE,EAAe/tE,EACnB,GAAIq4B,EAAS5b,GAAG9P,EAAAlL,YAAYsnB,SAE1BglD,IADI+D,EAAWz5C,EAASnR,cACCrb,UAAUimE,EAAS5xD,YAAY,MAE1D9gB,KAAKwyE,mBAAmB7D,EAAc11C,EAAUw5C,qGAGpD,MAEF,KAAK3gB,EAAAlrC,YAAY4K,mBACf,IAAI3wB,EAA6BoS,EAASwe,gBACtCkhD,EAA6B1/D,EAASye,gBACtC7wB,GAAQb,KAAKwyE,mBAAmBjlE,EAAA/K,cAAgB5B,EAAMC,EAAQ4xE,GAC9DE,GAAQ3yE,KAAKwyE,mBAAmBjlE,EAAA9K,cAAgB7B,EAAM+xE,EAAQF,GAClE,MAIF,KAAK3gB,EAAAlrC,YAAYhJ,OACD3K,EAAQoK,GAAG9P,EAAAlL,YAAYgwB,QAAUpf,EAAQoK,GAAG9P,EAAAlL,YAAY4xB,OAAS1mB,EAAAlL,YAAY8xB,WAC1En0B,KAAKmpB,QAAQS,WAAU,GAMtC5pB,KAAKL,OAAOu+C,gBAAgBjrC,EAAQ6U,aAAc2qD,EAAS7xE,GAL3DZ,KAAKqN,MACHwW,EAAApZ,eAAemoE,+BACN3/D,EAAS4b,eAAe9jB,OAKrC,MAEF,KAAK+mD,EAAAlrC,YAAYwR,UACEnlB,EAASolB,aAAgBr4B,KAAKmpB,QAAQS,WAAU,GAM/D5pB,KAAKL,OAAOu+C,gBAAgBjrC,EAAQ6U,aAAc2qD,EAAS7xE,GAL3DZ,KAAKqN,MACHwW,EAAApZ,eAAemoE,+BACH3/D,EAAS4b,eAAe9jB,OAKxC,MAEF,KAAK+mD,EAAAlrC,YAAYpH,SACf,IACItF,GADA+e,EAAqBhmB,GACAiH,UACrBA,EAAUo6C,mBAAqBp6C,EAAUwgB,eAAevuB,SAE1D8sB,EAAWj5B,KAAK6yE,iBAAiB55C,GACjCj5B,KAAK8yE,iBAEH75C,EAAS5b,GAAG9P,EAAAlL,YAAY0wE,WAAW/yE,KAAKL,OAAO+9C,kBAAkBzkB,EAASnR,aAAc2qD,EAAS7xE,GACrG,MAEF,KAAKkxD,EAAAlrC,YAAY+K,UACX9wB,EAAoBoS,EAASgpB,iBACrBj8B,KAAKwyE,mBAAmBjlE,EAAA/K,cAAgB5B,EAAMC,EAAQ4xE,IAC9DE,EAAoB1/D,EAASipB,iBACrBl8B,KAAKwyE,mBAAmBjlE,EAAA9K,cAAgB7B,EAAM+xE,EAAQF,GAClE,MAEF,KAAK3gB,EAAAlrC,YAAYgL,MACf5xB,KAAKgzE,wBAAwBP,EAASllE,EAAA/K,cAAgB5B,EAAaqS,GAC9DA,EAAQoK,GAAG9P,EAAAlL,YAAY8xB,WAC1Bn0B,KAAKizE,wBAAwBR,EAASllE,EAAA9K,cAAgB7B,EAAaqS,GAErE,MAEF,KAAK6+C,EAAAlrC,YAAYxH,MAEf,IAAanM,EAAS3D,KAAK4jE,YAAa,CACtC,IAAIvzE,EAASK,KAAKL,OACdmoB,EAAuB7U,EAAS6U,aACpCnoB,EAAOi9C,UAAU90B,EAAciqC,EAAAjyB,WAAW15B,KAAK,EAAOzG,EAAOyD,IAAY6P,EAASsV,KAClF5oB,EAAOu+C,gBAAgBp2B,EAAc2qD,EAAS7xE,GAEhD,MAIF,KAAKkxD,EAAAlrC,YAAYiR,KACjB,KAAKi6B,EAAAlrC,YAAYgR,UACjB,KAAKk6B,EAAAlrC,YAAY6P,KACjB,KAAKq7B,EAAAlrC,YAAY8Q,eAAgB,MAEjC,QAASttB,QAAO,GAIlB,IAAIuM,EAAU1D,EAAQ0D,QACtB,GAAIA,EAAS,CACX,IAAIw8D,EAAYV,EAAS7xE,GAAQqS,EAAQpF,MAAQikD,EAAAlrC,YAAYxH,MACzD7R,EAAA7K,mBACA6K,EAAA5K,kBAEJ,GACEsQ,EAAQpF,MAAQikD,EAAAlrC,YAAYgR,WAC5B3kB,EAAQpF,MAAQikD,EAAAlrC,YAAY6P,SAE5B,IAAmB,IAAA5J,EAAArB,EAAA7U,EAAQtC,UAAQ8a,EAAAtC,EAAA7d,QAAAmgB,EAAAzD,KAAAyD,EAAAtC,EAAA7d,OAAE,EAA5BuiB,EAAMpC,EAAA7tB,OACD+b,GAAG9P,EAAAlL,YAAYyf,SAC3B9hB,KAAKwyE,mBAAmBjhD,EAAO3wB,KAAM2wB,EAAQ4hD,8GAG/C,IAAmB,IAAA3iD,EAAAhF,EAAA7U,EAAQtC,UAAQoc,EAAAD,EAAAxhB,QAAAyhB,EAAA/E,KAAA+E,EAAAD,EAAAxhB,OAAE,CAAhC,IAAIuiB,KAAMd,EAAAnvB,OACF+b,GAAG9P,EAAAlL,YAAYw0D,UAC1B72D,KAAKwyE,mBAAmBjhD,EAAO3wB,KAAM2wB,EAAQ4hD,wGAO7CvD,EAAA3tE,UAAA+wE,wBAAR,SAAgCpyE,EAAcq9B,GAC5C,IAAIt+B,EAASK,KAAKL,OACd2P,EAAO2uB,EAAM3uB,KACbia,EAAYvpB,KAAKmpB,QAAQI,UACzB6pD,EAAWzzE,EAAOo4C,KAAKzoC,EAAK8iD,SAAU9iD,EAAK+N,GAAE,GAC/C1d,EAAO83C,UAAU,EAAGluB,EAAUoqC,gBAC9BrkD,EAAKqkD,eAAgB11B,EAAMnC,cAGzBxsB,EAAK+jE,YAAWD,EAAWpzE,KAAKszE,WAAWF,IAC/CzzE,EAAOs9C,YACLr8C,EACAZ,KAAK8xE,mBAAmB,KAAMxiE,EAAMia,GACpC,KACA6pD,GAEFzzE,EAAO+9C,kBAAkB98C,EAAMA,IAIzBgvE,EAAA3tE,UAAAgxE,wBAAR,SAAgCryE,EAAcq9B,GAC5C,IAAIt+B,EAASK,KAAKL,OACd2P,EAAO2uB,EAAM3uB,KACbikE,EAAajkE,EAAKqkD,eAClBpqC,EAAYvpB,KAAKmpB,QAAQI,UACzBiqD,EAAiBjqD,EAAUoqC,eAC3B8f,EAAY9zE,EAAO83C,UAAU,EAAG87B,GAChCjkE,EAAK+jE,YACPI,EAAYzzE,KAAK0zE,kBACf/zE,EAAOo4C,KAAKzoC,EAAK8iD,UAAU,EACzBzyD,EAAO83C,UAAU,EAAG+7B,GACpBD,EAAYt1C,EAAMnC,cAEpB23C,IAGJ9zE,EAAOs9C,YACLr8C,EACAZ,KAAK8xE,mBAAmB,CAAExiE,GAAQwU,EAAAuF,KAAKG,KAAMD,GAC7C,KACA5pB,EAAOm3C,MACLxnC,EAAK8iD,SACLzyD,EAAO83C,UAAU,EAAG+7B,GACpBC,EACAF,EACAt1C,EAAMnC,eAGVn8B,EAAO+9C,kBAAkB98C,EAAMA,IAMjCgvE,EAAA3tE,UAAA0xE,eAAA,SAAe1gE,EAAkB2gE,GAC/B,YAD+B,IAAAA,OAAA,GACvB3gE,EAAQpF,MACd,KAAKikD,EAAAlrC,YAAYhJ,OACf5d,KAAK6zE,cAAsB5gE,GAC3B,MAEF,KAAK6+C,EAAAlrC,YAAYiR,KACf73B,KAAK8zE,YAAkB7gE,GACvB,MAEF,KAAK6+C,EAAAlrC,YAAYqK,mBACVhe,EAAQoK,GAAG9P,EAAAlL,YAAYsnB,UAC1B3pB,KAAK+zE,kCAAqD9gE,EAAS,IAErE,MAEF,KAAK6+C,EAAAlrC,YAAY+G,gBACV1a,EAAQoK,GAAG9P,EAAAlL,YAAYsnB,UAC1B3pB,KAAKg0E,+BAA+C/gE,EAAS,IAE/D,MAEF,KAAK6+C,EAAAlrC,YAAY4K,mBACf,IAAIC,EAAsCxe,EAASwe,gBAC/CA,GACFzxB,KAAK+zE,kCAAkCtiD,EAAiB,IAE1D,IAAIC,EAAsCze,EAASye,gBAC/CA,GACF1xB,KAAK+zE,kCAAkCriD,EAAiB,IAE1D,MAEF,KAAKogC,EAAAlrC,YAAYgR,UACjB,KAAKk6B,EAAAlrC,YAAY8Q,eACjB,KAAKo6B,EAAAlrC,YAAYwR,UAAW,MAC5B,QAAShuB,QAAO,EAAO0nD,EAAAlrC,YAAY3T,EAAQpF,OAEzC+lE,GAAgB5zE,KAAK4zE,eAAe3gE,IAI1C28D,EAAA3tE,UAAA2xE,eAAA,SAAe3gE,WACT0D,EAAU1D,EAAQ0D,QACtB,GAAIA,MAAS,IAAoB,IAAA6gB,EAAAhM,EAAA7U,EAAQtC,UAAQgd,EAAAmG,EAAAxoB,QAAAqiB,EAAA3F,KAAA2F,EAAAmG,EAAAxoB,OAAA,CAA/B,IAAIilE,EAAO5iD,EAAA/vB,MAAsBtB,KAAK2zE,eAAeM,uGAIzErE,EAAA3tE,UAAAwvE,eAAA,SAAe9mD,eACTjrB,EAAUirB,EAAKjrB,QACnB,GAAIA,MAAS,IAAoB,IAAA2xB,EAAA7F,EAAA9rB,EAAQ2U,UAAQid,EAAAD,EAAAriB,QAAAsiB,EAAA5F,KAAA4F,EAAAD,EAAAriB,OAAA,CAA/B,IAAIiE,EAAOqe,EAAAhwB,MAAsBtB,KAAK2zE,eAAe1gE,qGACvE,IAAI4Y,EAAclB,EAAKkB,YACvB,GAAIA,MACF,IAAuB,IAAAqoD,EAAA1oD,EAAAK,GAAWsoD,EAAAD,EAAAllE,QAAAmlE,EAAAzoD,KAAAyoD,EAAAD,EAAAllE,OAAE,CAA/B,IAAI8c,EAAUqoD,EAAA7yE,MACjBtB,KAAKwxE,YAAY1lD,GACjB9rB,KAAKyxE,eAAe3lD,uGAQ1B8jD,EAAA3tE,UAAAmyE,kBAAA,SAAkBC,EAAwC9N,GACxD,IAAI57C,EAEA2pD,EADArtD,EAAcjnB,KAAKu2B,QAAQtP,YAE/B,GAAIA,EAAYgC,IAAIorD,GAClB1pD,EAAO1D,EAAY/lB,IAAImzE,OAClB,KAAIptD,EAAYgC,IAAIqrD,EAAgBD,EAAiC9mE,EAAAxK,cAO1E,YAJA/C,KAAKqN,MACHwW,EAAApZ,eAAeyhB,iBACfq6C,EAAWx7D,MAAOspE,GAJpB1pD,EAAO1D,EAAY/lB,IAAIozE,GAQzBt0E,KAAKwxE,YAAY7mD,IAInBilD,EAAA3tE,UAAAuvE,YAAA,SAAY7mD,GACV,IAAIA,EAAKtN,GAAG9P,EAAAlL,YAAY0wE,UAAxB,CACApoD,EAAKnN,IAAIjQ,EAAAlL,YAAY0wE,UAGrB,IAAI97C,EAAgBtM,EAAKsM,cACrBs9C,EAAev0E,KAAKoxE,YACpBF,EAAoB,IAAIjqE,MAC5BjH,KAAKoxE,YAAcF,EAGnB,IAAIsD,EAAex0E,KAAKmxE,YACpBr2C,EAAO7D,EAAc6D,KACzB96B,KAAKmxE,YAAcr2C,EACnB,IAAK,IAAI3kB,EAAawU,EAAKhf,OAAOwK,WAAY9V,EAAI,EAAGojB,EAAItN,EAAWhK,OAAQ9L,EAAIojB,IAAKpjB,EACnFL,KAAKy0E,yBAAyBt+D,EAAW9V,GAAI6wE,GAO/C,GALAlxE,KAAK00E,mBAAmB55C,EAAMo2C,GAC9BlxE,KAAKmxE,YAAcqD,EACnBx0E,KAAKoxE,YAAcmD,EAGfrD,EAAkB/kE,OAAQ,CAC5B,IAAIxM,EAASK,KAAKL,OACdu7B,EAASjE,EAAcoC,cACvBs7C,EAAYz5C,EAAO/uB,OACnB+wC,EAAW,IAAIj2C,MAAkB0tE,GACrC,IAASt0E,EAAI,EAAGA,EAAIs0E,IAAat0E,EAAG68C,EAAS78C,GAAK66B,EAAO76B,GAAGiP,KAAKqkD,eACjEh0D,EAAOs9C,YACLhmB,EAAcnP,aACd9nB,KAAK8xE,mBAAmB76C,EAAc/c,UAAUwgB,eAAgBzD,EAAc/c,UAAUxK,YACxFwtC,EACAg0B,EAAkB/kE,OAAS,EACvBxM,EAAOg6C,MAAM,KAAMu3B,GACnBA,EAAkB,IAExBqD,EAAa7nE,KACX/M,EAAOa,KAAKy2B,EAAcnP,aAAc,KAAMiqC,EAAAjyB,WAAWsY,UAO/Dw3B,EAAA3tE,UAAA4xE,cAAA,SAAc1hD,GACZ,GAAIA,EAAO9U,GAAG9P,EAAAlL,YAAY0wE,UAAW,OAAO,EAC5C5gD,EAAO3U,IAAIjQ,EAAAlL,YAAY0wE,UAEvB,IAAIpzE,EAASK,KAAKL,OACdi1E,EAA0B,EAC1BC,GAA+B,EAC/B9S,EAAW5vC,EAAO4vC,SAClB+S,EAAkB3iD,EAAO2iD,gBAE7B,IAAK3iD,EAAO9U,GAAG9P,EAAAlL,YAAY20B,UAGzB,GAAI+qC,EAAU,CACZ,IAAIqC,EAAepkE,KAAK+nB,SAAS44C,YAAYoB,EAAU5vC,EAAO3R,QAC9D,IAAK4jD,EAAc,OAAO,EAC1B,GAAIA,GAAgBtgD,EAAAuF,KAAKG,KAKvB,OAJAxpB,KAAKqN,MACHwW,EAAApZ,eAAe43D,cACfN,EAASh3D,QAEJ,EAETonB,EAAOJ,QAAQqyC,OAGV,KAAI0Q,EAyBT,OAJA90E,KAAKqN,MACHwW,EAAApZ,eAAe43D,cACflwC,EAAOtD,eAAe9jB,MAAMs8D,QAEvB,EAxBP,IAAImN,EAAex0E,KAAKmxE,YASxB,GARIh/C,EAAOxD,aAAamjC,EAAAjrC,eAAe/I,QACrC9d,KAAKmxE,YAAch/C,EAAOxH,KAAKsM,cAAc6D,MAE/C85C,EAAW50E,KAAK+0E,kBAAkBD,EAAiBhxD,EAAAuF,KAAKupC,KACtD,IAEE5yD,KAAKswE,oBAAoBrnD,IAAI2rD,KAAWC,GAAyB,GACrE70E,KAAKmxE,YAAcqD,EACfx0E,KAAK+vE,aAAejsD,EAAAuF,KAAKG,KAK3B,OAJAxpB,KAAKqN,MACHwW,EAAApZ,eAAeuqE,mCACfF,EAAgB/pE,MAAO/K,KAAK+vE,YAAYrkE,WAAY,WAE/C,EAETymB,EAAOJ,QAAQ/xB,KAAK+vE,aAaxB,GAAI59C,EAAO9U,GAAG9P,EAAAlL,YAAY0zB,UAAY5D,EAAOxD,aAAamjC,EAAAjrC,eAAenJ,SAGvE,OAFIyU,EAAOrK,cAAgB04C,EAAAgF,eAAe6L,UAAWrxE,KAAKqwE,iBAAe,EAChEl+C,EAAOrK,cAAgB04C,EAAAgF,eAAe8L,YAAWtxE,KAAKqwE,iBAAe,IACvE,EAGT,IAAI/gE,EAAO6iB,EAAO7iB,KACdikE,EAAajkE,EAAKqkD,eAClBshB,EAAqB9iD,EAAO9U,GAAG9P,EAAAlL,YAAYgwB,QAAUF,EAAO9U,GAAG9P,EAAAlL,YAAY4xB,OAAS1mB,EAAAlL,YAAY8xB,UAChG+gD,EAAmB/iD,EAAOxD,aAAamjC,EAAAjrC,eAAehJ,QAG1D,GAAIsU,EAAO9U,GAAG9P,EAAAlL,YAAY0zB,SAGxB,OAAIk/C,GAAsBj1E,KAAKmpB,QAAQS,WAAU,IAC/CuI,EAAO3U,IAAIjQ,EAAAlL,YAAY8yE,eACvBC,EAAiBjjD,EAAQA,EAAO1f,aAChC9S,EAAOs/C,gBACL9sB,EAAOrK,aACP4nD,EACAC,EACA4D,GAEFphD,EAAO3U,IAAIjQ,EAAAlL,YAAY0wE,WAChB,IAIP/yE,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACftB,EAAO1f,YAAY1H,QAGhB,GAKT,IAAIsqE,GAAoB,EAGxB,GAAIP,EAAiB,CACnB,IAAKF,EAAU,CACTJ,EAAex0E,KAAKmxE,YACpBh/C,EAAOxD,aAAamjC,EAAAjrC,eAAe/I,QACrC9d,KAAKmxE,YAAch/C,EAAOxH,KAAKsM,cAAc6D,MAE/C85C,EAAW50E,KAAK+0E,kBAAkBD,EAAiBxlE,EACjD,IAEEtP,KAAKswE,oBAAoBrnD,IAAI2rD,KAAWC,GAAyB,GACrE70E,KAAKmxE,YAAcqD,EAarB,GAVIziB,EAAApL,gBAAgBiuB,IAAa7iB,EAAAhyB,aAAa0kB,QACxCwwB,GACFL,EAAWj1E,EAAOuiD,qBAAqB0yB,GACnC7iB,EAAApL,gBAAgBiuB,IAAa7iB,EAAAhyB,aAAa0kB,QAAO4wB,GAAoB,IAEzEA,GAAoB,GAKpBH,EACF,GAAIG,EACFr1E,KAAKmN,QACH0W,EAAApZ,eAAe6qE,gCACfR,EAAgB/pE,WAEb,CAGL,OAFAX,OAAO2nD,EAAApL,gBAAgBiuB,IAAa7iB,EAAAhyB,aAAa0kB,OAClCsN,EAAAnL,kBAAkBguB,IAE/B,KAAK7iB,EAAAjyB,WAAW15B,IACd+rB,EAAO6F,kBAAiB,EACxB7F,EAAO8F,qBAAuBnO,QAAQioC,EAAAlL,iBAAiB+tB,GAAW,GAClE,MAEF,KAAK7iB,EAAAjyB,WAAWz5B,IACd8rB,EAAO6F,kBAAiB,EACxB7F,EAAO8F,qBAAuBnO,QAC5BioC,EAAAjL,oBAAoB8tB,GACpB7iB,EAAAhL,qBAAqB6tB,IAEvB,MAEF,KAAK7iB,EAAAjyB,WAAWj5B,IACdsrB,EAAO6F,kBAAiB,EACxB7F,EAAOgG,mBAAqB45B,EAAA/K,iBAAiB4tB,GAC7C,MAEF,KAAK7iB,EAAAjyB,WAAWh5B,IACdqrB,EAAO6F,kBAAiB,EACxB7F,EAAOgG,mBAAqB45B,EAAA9K,iBAAiB2tB,GAC7C,MAEF,QAEE,OADAxqE,QAAO,IACA,EAGX+nB,EAAO3U,IAAIjQ,EAAAlL,YAAY61B,eAM3B08C,EAAWtlE,EAAKskD,aAAaj0D,GAG/B,IAAImoB,EAAeqK,EAAOrK,aAiB1B,OAfIutD,GACEH,GACFl1E,KAAKqN,MACHwW,EAAApZ,eAAe2oB,8BACfhpB,OAAO2Z,EAAAP,cAAcO,EAAA9G,cAAcY,OAAQsU,EAAOojD,iBAAiBxqE,MAAO,UAG9EpL,EAAOi9C,UAAU90B,EAAcyrD,GAAY,EAAMjkE,EAAKskD,aAAaj0D,IAC/D2P,EAAK+jE,YAAcwB,IAAwBD,EAAW50E,KAAKszE,WAAWsB,IAC1E50E,KAAKoxE,YAAY1kE,KACf/M,EAAO85C,WAAW3xB,EAAc8sD,KAExBM,GACVv1E,EAAOi9C,UAAU90B,EAAcyrD,GAAa0B,EAAoBL,IAE3D,GAKThF,EAAA3tE,UAAA6xE,YAAA,SAAY7gE,WACV,GAAIA,EAAQoK,GAAG9P,EAAAlL,YAAY0wE,UAAW,OAAO,EAC7C9/D,EAAQuK,IAAIjQ,EAAAlL,YAAY0wE,UAExB,IAAIpzE,EAASK,KAAKL,OAClBK,KAAK8vE,YAAc78D,EACnB,IAAIuiE,EAAkC,KAClCC,GAAqB,EACrBC,EAAWziE,EAAQoK,GAAG9P,EAAAlL,YAAYgwB,QAAUpf,EAAQ0b,aAAamjC,EAAAjrC,eAAehJ,QAEpF,GAAI5K,EAAQ0D,YACV,IAAmB,IAAA6gB,EAAAhM,EAAAvY,EAAQ0D,QAAQtC,UAAQgd,EAAAmG,EAAAxoB,QAAAqiB,EAAA3F,KAAA2F,EAAAmG,EAAAxoB,OAAE,CAAxC,IAAIuiB,EAAMF,EAAA/vB,MACb,GAAIiwB,EAAO1jB,MAAQikD,EAAAlrC,YAAYwR,UAA/B,CACA,IAAIu9C,GAAc,EACdxoB,EAAiB57B,EACjBqkD,EAAYzoB,EAAIyoB,UACpBzoB,EAAI3vC,IAAIjQ,EAAAlL,YAAY0wE,UACpB,IAAIyB,EAAex0E,KAAKmxE,YACpBl+D,EAAQ0b,aAAamjC,EAAAjrC,eAAe/I,QACtC9d,KAAKmxE,YAAcl+D,EAAQ0X,KAAKsM,cAAc6D,MAEhD,IAAI85C,OAAQ,EACRgB,GACFhB,EAAW50E,KAAK+0E,kBAAkBa,EAAW9xD,EAAAuF,KAAKjmB,IAAG,GAGjD2uD,EAAApL,gBAAgBiuB,IAAa7iB,EAAAhyB,aAAa0kB,QAC5CmwB,EAAWj1E,EAAOuiD,qBAAqB0yB,GACnC7iB,EAAApL,gBAAgBiuB,IAAa7iB,EAAAhyB,aAAa0kB,QACxCxxC,EAAQoK,GAAG9P,EAAAlL,YAAYgwB,QACzBryB,KAAKqN,MACHwW,EAAApZ,eAAeorE,0EACfD,EAAU7qE,OAGd4qE,GAAc,KAGQ,MAAjBH,EACTZ,EAAWj1E,EAAOyD,IAAI,IAElBqyE,GACFz1E,KAAKqN,MACHwW,EAAApZ,eAAeqrE,kCACHvkD,EAAQ1C,eAAe9jB,MAAMs8D,OAG7CuN,EAAWj1E,EAAOw3C,OAAO4a,EAAArpB,SAASqtC,OAChCp2E,EAAOk4C,WAAW29B,EAAc1tD,aAAciqC,EAAAjyB,WAAW15B,KACzDzG,EAAOyD,IAAI,IAEbwxE,EAAWj1E,EAAOuiD,qBAAqB0yB,GACnC7iB,EAAApL,gBAAgBiuB,IAAa7iB,EAAAhyB,aAAa0kB,QACxCxxC,EAAQoK,GAAG9P,EAAAlL,YAAYgwB,QACzBryB,KAAKqN,MACHwW,EAAApZ,eAAeorE,0EACftkD,EAAO9e,YAAY1H,OAGvB4qE,GAAc,IAGlB31E,KAAKmxE,YAAcqD,EACfmB,GACFh2E,EAAOi9C,UAAUuQ,EAAIrlC,aAAciqC,EAAAjyB,WAAW15B,KAAK,EAAMzG,EAAOyD,IAAI,IACpEpD,KAAKoxE,YAAY1kE,KACf1M,KAAKg2E,qBAAqB7oB,EAAKynB,GAAU,IAE3Ca,GAAqB,IAEjBC,GACFvoB,EAAI76B,wBAAwBxI,QAAQioC,EAAAlL,iBAAiB+tB,IAAY9wD,EAAAuF,KAAKjmB,KAClE+pD,EAAI9vC,GAAG9P,EAAAlL,YAAY8uB,gBACrBxxB,EAAOi9C,UAAUuQ,EAAIrlC,aAAciqC,EAAAjyB,WAAW15B,KAAK,EAAOwuE,IAG5Dj1E,EAAOi9C,UAAUuQ,EAAIrlC,aAAciqC,EAAAjyB,WAAW15B,KAAK,EAAOwuE,GAE5DznB,EAAI90B,aAAc,EAClBo9C,GAAqB,GAEvBD,EAA2BroB,qGAI/B,OADAntD,KAAK8vE,YAAc,MACZ,GAMTF,EAAA3tE,UAAA8xE,kCAAA,SACE9xE,EACAmN,EACA+pB,EACAypC,GAEA,QAHA,IAAAzpC,MAA4CtvB,EAAA43D,gBAC5C,IAAAmB,MAAA,MAEI3gE,EAAU0sB,aAAamjC,EAAAjrC,eAAenJ,SAAU,OAAO,KAC3D,IAAIub,EAAWj5B,KAAK+nB,SAAS09C,iCAC3BxjE,EACAmN,EACAnN,EAAUue,OACV2Y,EACAypC,GAAyB3gE,EAAUwQ,aAErC,OAAKwmB,GACAj5B,KAAKi2E,gBAAgBh9C,GACnBA,EAFe,MAMxB22C,EAAA3tE,UAAA6vE,mBAAA,SACEp3C,EACAhrB,EACA+qB,QAAA,IAAAA,MAAA,MAEA,IACImb,EADAkf,EAAgBp6B,EAAiBA,EAAevuB,OAAS,EAEzDqsB,EAAQ,EAQZ,GAPIiC,IACFmb,EAAa,IAAI3uC,MAAM,EAAI6tD,IAChB,GAAKr6B,EAASk5B,eACzBn7B,EAAQ,GAERod,EAAa,IAAI3uC,MAAM6tD,GAErBp6B,EACF,IAAK,IAAIr6B,EAAI,EAAGA,EAAIy0D,IAAiBz0D,IAAKm4B,EACxCod,EAAWpd,GAASkC,EAAer6B,GAAGszD,eAG1C,IAAIuiB,EAAaxmE,EAAWikD,eACxBh0D,EAASK,KAAKL,OACd69C,EAAU79C,EAAOs2C,2BAA2BigC,EAAYtgC,GAC5D,IAAK4H,EAAS,CACZ,IAAI58C,EAAOkjB,EAAAoT,UAAUi+B,oBAAoBz6B,EAAgBhrB,EAAY+qB,GACrE+iB,EAAU79C,EAAO+1C,gBAAgB90C,EAAMs1E,EAAYtgC,GAErD,OAAO4H,GAIToyB,EAAA3tE,UAAAk0E,oBAAA,SAEEl9C,EAEAm9C,QAAA,IAAAA,MAAA,MAEA,IAAIz2E,EAASK,KAAKL,OACd02E,EAAWjsE,OAAO6uB,EAASh3B,UAAUo0E,UACrC3mE,EAAaupB,EAAS/e,UAAUxK,WAChCorB,EAAO96B,KAAKmxE,YAGhB,GAAIkF,EAASxoE,MAAQkW,EAAApW,SAAS0T,MAC5B+0D,EAAQp2E,KAAKs2E,kBAAmCD,EAAUlgE,YAAY,EAAMigE,OACvE,CAELhsE,OAAOisE,EAASxoE,MAAQkW,EAAApW,SAASqU,YAGjC5X,OAAO6uB,EAASh3B,UAAUmY,WAG1BhQ,QAAQ6uB,EAAS1b,MAAMhQ,EAAAlL,YAAYid,YAAc/R,EAAAlL,YAAYwxB,IAAMtmB,EAAAlL,YAAYyxB,IAAMvmB,EAAAlL,YAAYk0E,OAEjG,IAAIplE,EAAOnR,KAAK+0E,kBAAwCsB,EAAUxkE,WAAYnC,EAAU,GAKxF,GAFK0mE,EACAA,EAAM1pE,KAAKyE,GADJilE,EAAQ,CAAEjlE,IAEjB2pB,EAAKzd,GAAE,KAAwB,CAClC,IAAIm5D,EAAcJ,EAAMjqE,OACxBnM,KAAKy2E,oBAAoB37C,EAAMs7C,GAC/Bp2E,KAAK00E,mBAAmB55C,EAAMs7C,GAC9B,IAAIvK,EAAc/wC,EAAK+wC,YAAY16D,EAAMzB,GACrCgnE,EAAU57C,EAAKswC,UAAUj6D,EAAMzB,GACnC,GAAI0mE,EAAMjqE,OAASqqE,EAAa,CAC9B,IAAIG,EAAO77C,EAAKyuC,oBAAoB75D,GAC/Bm8D,GAAa/wC,EAAKsuC,aAAauN,EAAKn+C,MAAOvU,EAAA4jD,WAAWiE,SACvD4K,GAAS57C,EAAKsuC,aAAauN,EAAKn+C,MAAOvU,EAAA4jD,WAAW9C,SACtDqR,EAAMI,EAAc,GAAK72E,EAAO45C,UAAUo9B,EAAKn+C,MAAOrnB,GACtDilE,EAAM1pE,KAAK/M,EAAO83C,UAAUk/B,EAAKn+C,MAAO9oB,EAAWikD,iBAEhDkY,GAAa/wC,EAAKtd,IAAG,GACtBk5D,GAAS57C,EAAKtd,IAAG,GACrBsd,EAAKtd,IAAI,MAKb,GAAIyb,EAAS5b,GAAG9P,EAAAlL,YAAYid,aAAc,CACxC,IAAIk0D,EAAiBxzE,KAAKmpB,QAAQqqD,eAClCppE,OAAO6uB,EAAS5b,GAAG9P,EAAAlL,YAAY2zB,WAC/B,IAAI5N,EAAgBhe,OAAO6uB,EAASzY,QAEpC,GAF6CpW,OAAOge,EAAcva,MAAQikD,EAAAlrC,YAAYxH,QAEjF0b,EAAKzd,GAAE,KAAwB,CAClC,IAAI6nD,EAAY96D,OAAO0wB,EAAKqqC,YAAY53D,EAAAvK,cAAcoC,QAGjD01B,EAAKzd,GAAE,MAMV+4D,EAAM1pE,KACJ/M,EAAOy6C,GACLz6C,EAAOq3C,MAAMw8B,GAAkBzhB,EAAAjyB,WAAWz5B,IAAM0rD,EAAA3uB,QAAQmoC,OAASxZ,EAAA3uB,QAAQkoC,OACvE3rE,EAAO83C,UAAUytB,EAAU1sC,MAAOg7C,IAEpC7zE,EAAO45C,UAAU2rB,EAAU1sC,MACzBx4B,KAAKszE,WACHtzE,KAAK42E,eAAsBxuD,OAKnCpoB,KAAK62E,wBAA+BzuD,EAAeguD,IAErDp2E,KAAKy2E,oBAAoB37C,EAAMs7C,GAC/Bp2E,KAAK00E,mBAAmB55C,EAAMs7C,GAC9BA,EAAM1pE,KAAK/M,EAAO83C,UAAUytB,EAAU1sC,MAAOx4B,KAAKmpB,QAAQqqD,iBAC1D14C,EAAKtd,IAAI,KAIC4K,EAAeqU,OAAS3B,EAAKzd,GAAE,MACzCrd,KAAKqN,MACHwW,EAAApZ,eAAeqsE,2DACf79C,EAASh3B,UAAUwQ,YAAY1H,YAK1B2E,GAAcoU,EAAAuF,KAAKG,MAASsR,EAAKzd,GAAE,MAC5Crd,KAAKqN,MACHwW,EAAApZ,eAAessE,+DACf99C,EAASh3B,UAAUkkE,iBAAiBz2D,WAAW3E,OAInD,OAAOqrE,GAITxG,EAAA3tE,UAAAg0E,gBAAA,SAAgBh9C,GACd,GAAIA,EAAS5b,GAAG9P,EAAAlL,YAAY0wE,UAAW,OAAO,EAC9C3oE,SAAS6uB,EAAS5b,GAAG9P,EAAAlL,YAAY0zB,UAAYkD,EAAStK,aAAamjC,EAAAjrC,eAAenJ,WAElF,IAAIs5D,EAAeh3E,KAAK+vE,YACxB92C,EAASzb,IAAIjQ,EAAAlL,YAAY0wE,UAEzB,IAKIlB,EALAlyE,EAASK,KAAKL,OACdua,EAAY+e,EAAS/e,UACrBm8D,EAAWp9C,EAASh3B,UAAUo0E,SAE9B74B,EAAUx9C,KAAK8xE,mBAAmB53D,EAAUwgB,eAAgBxgB,EAAUxK,WAAYwK,EAAUugB,UAIhG,GAAI47C,EAAU,CAWZ,GARIp9C,EAAS5b,GAAG9P,EAAAlL,YAAY0zB,UAC1B/1B,KAAKqN,MACHwW,EAAApZ,eAAewsE,yDACfh+C,EAASpK,eAAe9jB,OAKxBkuB,EAAStK,aAAamjC,EAAAjrC,eAAelJ,UAAW,CAClD,IAAI43D,EAAiBt8C,EAASs8C,eAC1B7xD,EAAYtZ,OAAO2Z,EAAAP,cAAcO,EAAA9G,cAAcU,SAAU43D,IAC7Dv1E,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf/P,EAAU3Y,OAKd,IAAIypE,EAAex0E,KAAKmxE,YACpBr2C,EAAO7B,EAAS6B,KACpB96B,KAAKmxE,YAAcr2C,EACnB,IAAIs7C,EAAQ,IAAInvE,MAGZuxB,EAAQ,EACGte,EAAUugB,YAGrBjC,EAGJ,IADA,IAAIkC,EAAiBxgB,EAAUwgB,eACtBr6B,EAAI,EAAGojB,EAAIiX,EAAevuB,OAAQ9L,EAAIojB,IAAKpjB,IAAKm4B,EAAO,CAC9D,IAAIlpB,EAAOorB,EAAer6B,GACtBiP,EAAK+jE,YACP+C,EAAM1pE,KACJ/M,EAAOq6C,KACLh6C,KAAKszE,WACH3zE,EAAO83C,UAAUjf,EAAOlpB,EAAKqkD,mBAInC74B,EAAKsuC,aAAa5wC,EAAOvU,EAAA4jD,WAAWwB,WAIxCrpE,KAAKm2E,oBAAoBl9C,EAAUm9C,GAC9Bt7C,EAAKzd,GAAE,OACVrd,KAAKy2E,oBAAoB37C,EAAMs7C,GAC/Bp2E,KAAK00E,mBAAmB55C,EAAMs7C,IAEhCp2E,KAAKmxE,YAAcqD,EAGnB3C,EAAUlyE,EAAOs9C,YACfhkB,EAASnR,aACT01B,EACA15B,EAAAiwC,mBAAmB96B,EAASK,kBAC5B49C,EAAQv3E,EAAQy2E,EAAOn9C,EAAS/e,UAAUxK,WAAWikD,sBAKlD16B,EAAS5b,GAAG9P,EAAAlL,YAAY0zB,UAC3B/1B,KAAKqN,MACHwW,EAAApZ,eAAe0sE,gFACfl+C,EAASpK,eAAe9jB,OAI5BkuB,EAASzb,IAAIjQ,EAAAlL,YAAY8yE,eACzBC,EAAiBn8C,EAAUA,EAASxmB,aAGpCo/D,EAAUlyE,EAAO2+C,kBACfrlB,EAASnR,aACT4nD,EACAC,EACAnyB,GAMJ,OAFAvkB,EAASkC,SAASx7B,EAAQkyE,GAC1B7xE,KAAK+vE,YAAciH,GACZ,GAKTpH,EAAA3tE,UAAA+xE,+BAAA,SACE/xE,EACAmN,EACA+pB,EACAypC,QADA,IAAAzpC,MAA4CtvB,EAAA43D,gBAC5C,IAAAmB,MAAA,MAEA,IAAI3pC,EAAWj5B,KAAK+nB,SAASy5C,8BAC3Bv/D,EACAmN,EACAnN,EAAUue,OACV2Y,EACAypC,GAAyB3gE,EAAUwQ,aAEhCwmB,GACLj5B,KAAKo3E,aAAan+C,IAGpB22C,EAAA3tE,UAAAm1E,aAAA,SAAan+C,eACX,GAAIA,EAAS5b,GAAG9P,EAAAlL,YAAY0wE,UAAW,OAAO,EAC9C95C,EAASzb,IAAIjQ,EAAAlL,YAAY0wE,UACzB,IACIsE,EADYp+C,EAASh3B,UACuB0U,QAChD,GAAI0gE,MACF,IAAoB,IAAAhmD,EAAA7F,EAAA6rD,EAAchjE,UAAQid,EAAAD,EAAAriB,QAAAsiB,EAAA5F,KAAA4F,EAAAD,EAAAriB,OAAE,CAC1C,QADOiE,EAAOqe,EAAAhwB,OACEuM,MACd,KAAKikD,EAAAlrC,YAAYhJ,OACf5d,KAAK6zE,cAAsB5gE,GAC3B,MAEF,KAAK6+C,EAAAlrC,YAAYqK,mBAEQhe,EAASoK,GAAG9P,EAAAlL,YAAYsnB,UAE7C3pB,KAAK+zE,kCACgB9gE,EACnB,GACApJ,EAAA43D,UACoBxuD,EAAS4b,gBAGjC,MAEF,KAAKijC,EAAAlrC,YAAY4K,oBACX3wB,EAA6BoS,EAASwe,kBAExCzxB,KAAK+zE,kCACHlzE,EACA,GACAgJ,EAAA43D,UACA5gE,EAAOguB,iBAGP8jD,EAA6B1/D,EAASye,kBAExC1xB,KAAK+zE,kCACHpB,EACA,GACA9oE,EAAA43D,UACAkR,EAAO9jD,gBAGX,MAEF,KAAKijC,EAAAlrC,YAAY+K,6GAKvB,IAAI+1C,EAAezuC,EAAS2D,oBACxB8qC,GAAc1nE,KAAKi2E,gBAAgBvO,GACvC,IAAIt2C,EAAkB6H,EAAStiB,QAC/B,GAAIya,MACF,IAAoB,IAAAS,EAAArG,EAAA4F,EAAgB/c,UAAQyd,EAAAD,EAAA7iB,QAAA8iB,EAAApG,KAAAoG,EAAAD,EAAA7iB,OAAE,CAAzC,IAAIiE,EACP,QADOA,EAAO6e,EAAAxwB,OACEuM,MACd,KAAKikD,EAAAlrC,YAAYqK,mBAEQhe,EAASoK,GAAG9P,EAAAlL,YAAYsnB,UAE7C3pB,KAAK+zE,kCACgB9gE,EACnB,GACApJ,EAAA43D,QAAqBxoC,EAASE,yBACVlmB,EAASR,YAAY7R,MAG7C,MAEF,KAAKkxD,EAAAlrC,YAAYgV,gBACf3oB,EAAQuK,IAAIjQ,EAAAlL,YAAY0wE,UACxB,MAEF,KAAKjhB,EAAAlrC,YAAY+K,SACf,IAAI9wB,EAEA8xE,GAFA9xE,EAAoBoS,EAASgpB,iBACrBj8B,KAAKi2E,gBAAgBp1E,IAC7B8xE,EAAoB1/D,EAASipB,iBACrBl8B,KAAKi2E,gBAAgBtD,sGAMzC,OAAO,GAGT/C,EAAA3tE,UAAAq1E,4BAAA,SACE7kE,EACArD,EACA+pB,EACAypC,QADA,IAAAzpC,MAAA,WACA,IAAAypC,MAAA,MAGA5iE,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACfhhB,EAAY1H,QAOhB6kE,EAAA3tE,UAAAs1E,iBAAA,SAAiBrvD,EAAoBsvD,QAAA,IAAAA,MAAA,GACnC,IAAI17C,EAAeo2C,UAAUlyE,KAAK87B,aAAc07C,GAC5C7iC,EAAUod,EAAArd,cAAc/yC,OAAOumB,EAAQ4T,GAG3C,OAFA97B,KAAKgwE,eAAetjE,KAAKioC,GACzB30C,KAAK87B,aAAegjC,QAAQhjC,EAAchS,QAAQ5B,EAAO/b,OAAQ,IAC1DwoC,GAITi7B,EAAA3tE,UAAAw1E,mBAAA,SAAmBC,GACjB,IAGIC,EAHAphD,EAAUv2B,KAAKu2B,QACfqhD,EAAerhD,EAAQshD,kBACvBtqD,EAAiBnjB,OAAOmsB,EAAQhJ,gBAEhCgyB,EAAWv/C,KAAKiwE,eACpB,GAAI1wB,EAASt2B,IAAIyuD,GACfC,EAAgBp4B,EAASr+C,IAAIw2E,OACxB,CACL,IAAIvrE,EAASurE,EAAYvrE,OACrB+b,EAAS,IAAIrgB,WAAW+vE,GAAgBzrE,GAAU,IACtDoqB,EAAQtO,mBAAmBC,EAAQ,EAAGqF,EAAgBphB,GAAU,GAChE,IAAK,IAAI9L,EAAI,EAAGA,EAAI8L,IAAU9L,EAC5BwJ,EAAAw0B,SAASq5C,EAAYnrE,WAAWlM,GAAI6nB,EAAQ0vD,GAAgBv3E,GAAK,IAEnEs3E,EAAgB33E,KAAKu3E,iBAAiBrvD,GACtCq3B,EAAS/hC,IAAIk6D,EAAaC,GAE5B,IAAIn+C,EAAMslC,QAAQ6Y,EAAcxvD,OAAQ2B,QAAQ8tD,IAEhD,OADA53E,KAAK+vE,YAAcxiD,EAAeje,KAC9BtP,KAAKmpB,QAAQY,SACR/pB,KAAKL,OAAO0D,IAAIu8C,QAAQpmB,GAAMqmB,SAASrmB,KAE9CpvB,OAAOy6D,WAAWrrC,IACXx5B,KAAKL,OAAOyD,IAAIw8C,QAAQpmB,MAInCo2C,EAAA3tE,UAAA61E,wBAAA,SAAwBC,EAAmB1jE,GACzC,IAAIkiB,EAAUv2B,KAAKu2B,QACfpqB,EAASkI,EAAOlI,OAChBimD,EAAW2lB,EAAY3lB,SACvB4lB,EAAa7rE,EAASimD,EACtB6lB,EAAiB7tE,OAAOmsB,EAAQlJ,qBAChCwqD,EAAoBthD,EAAQshD,kBAE5BK,EAAM,IAAIrwE,WAAWgwE,EAAoBG,GAC7CzhD,EAAQtO,mBAAmBiwD,EAAK,EAAGD,EAAgBD,GACnD,IAAIn3D,EAAMg3D,EACNtE,EAAawE,EAAYpkB,eAC7B,OAAQ4f,GACN,KAAKxhB,EAAAjyB,WAAW15B,IACd,OAAQgsD,GACN,KAAK,EACH,IAAK,IAAI/xD,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC/B,IAAIiB,EAAQ+S,EAAOhU,GACnB+J,OAAO2nD,EAAAnL,kBAAkBtlD,IAAUiyE,GACnCnpE,OAAO2nD,EAAApL,gBAAgBrlD,IAAUywD,EAAAhyB,aAAa0kB,OAC9C56C,EAAAu0B,QAAQ2zB,EAAAlL,iBAAiBvlD,GAAQ42E,EAAKr3D,GACtCA,GAAO,EAET,MAEF,KAAK,EACH,IAASxgB,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC3BiB,EAAQ+S,EAAOhU,GACnB+J,OAAO2nD,EAAAnL,kBAAkBtlD,IAAUiyE,GACnCnpE,OAAO2nD,EAAApL,gBAAgBrlD,IAAUywD,EAAAhyB,aAAa0kB,OAC9C56C,EAAAw0B,SAAS0zB,EAAAlL,iBAAiBvlD,GAAQ42E,EAAKr3D,GACvCA,GAAO,EAET,MAEF,KAAK,EACH,IAASxgB,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC3BiB,EAAQ+S,EAAOhU,GACnB+J,OAAO2nD,EAAAnL,kBAAkBtlD,IAAUiyE,GACnCnpE,OAAO2nD,EAAApL,gBAAgBrlD,IAAUywD,EAAAhyB,aAAa0kB,OAC9C56C,EAAAye,SAASypC,EAAAlL,iBAAiBvlD,GAAQ42E,EAAKr3D,GACvCA,GAAO,EAET,MAEF,QAASzW,QAAO,GAElB,MAEF,KAAK2nD,EAAAjyB,WAAWz5B,IACd,IAAShG,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC3BiB,EAAQ+S,EAAOhU,GACnB+J,OAAO2nD,EAAAnL,kBAAkBtlD,IAAUiyE,GACnCnpE,OAAO2nD,EAAApL,gBAAgBrlD,IAAUywD,EAAAhyB,aAAa0kB,OAC9C56C,EAAAsuE,SAASruD,QAAQioC,EAAAjL,oBAAoBxlD,GAAQywD,EAAAhL,qBAAqBzlD,IAAS42E,EAAKr3D,GAChFA,GAAO,EAET,MAEF,KAAKkxC,EAAAjyB,WAAWj5B,IACd,IAASxG,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC3BiB,EAAQ+S,EAAOhU,GACnB+J,OAAO2nD,EAAAnL,kBAAkBtlD,IAAUiyE,GACnCnpE,OAAO2nD,EAAApL,gBAAgBrlD,IAAUywD,EAAAhyB,aAAa0kB,OAC9C56C,EAAAy0B,SAASyzB,EAAA/K,iBAAiB1lD,GAAQ42E,EAAKr3D,GACvCA,GAAO,EAET,MAEF,KAAKkxC,EAAAjyB,WAAWh5B,IACd,IAASzG,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC3BiB,EAAQ+S,EAAOhU,GACnB+J,OAAO2nD,EAAAnL,kBAAkBtlD,IAAUiyE,GACnCnpE,OAAO2nD,EAAApL,gBAAgBrlD,IAAUywD,EAAAhyB,aAAa0kB,OAC9C56C,EAAA00B,SAASwzB,EAAA9K,iBAAiB3lD,GAAQ42E,EAAKr3D,GACvCA,GAAO,EAET,MAEF,QAASzW,QAAO,GAIlB,OAFAA,OAAOyW,GAAOq3D,EAAI/rE,QAEXnM,KAAKu3E,iBAAiBW,IAG/BtI,EAAA3tE,UAAAm2E,wBAAA,SAAwBL,EAAmBM,GACzC,IAAI9hD,EAAUv2B,KAAKu2B,QACfshD,EAAoBthD,EAAQshD,kBAC5BtoD,EAAiBnlB,OAAOmsB,EAAQhH,gBAChC+oD,EAAgBluE,OAAOpK,KAAK+nB,SAASiJ,aAAazB,EAAgB,CAAEwoD,KACpEQ,EAAoBD,EAAc37C,oBAClC67C,EAAeH,EAAcnwD,OAAO/b,OAAS0rE,EAC7CY,EAAcr1E,IAAIo1E,EAAeT,EAAY3lB,UAE7C8lB,EAAM,IAAIrwE,WAAWgwE,EAAoBU,GAC7ChiD,EAAQtO,mBAAmBiwD,EAAK,EAAGI,EAAeC,GAElD,IAAIG,EAAkB94B,QAAQy4B,EAAclwD,QAAU0vD,EAOtD,OANAztE,QAAQmsB,EAAQpN,QAAQY,UACxB3f,OAAOkuE,EAAcp6C,WAAW,OAAQw6C,EAAiBR,EAAKL,IAC9DztE,OAAOkuE,EAAcp6C,WAAW,YAAaw6C,EAAiBR,EAAKL,IACnEztE,OAAOkuE,EAAcp6C,WAAW,aAAcs6C,EAAcN,EAAKL,IACjEztE,OAAOkuE,EAAcp6C,WAAW,UAAWu6C,EAAaP,EAAKL,IAEtD73E,KAAKu3E,iBAAiBW,IAM/BtI,EAAA3tE,UAAA02E,yBAAA,SAAyBp4B,GAEvB,GADAn2C,OAAOm2C,EAAKljC,GAAG9P,EAAAlL,YAAY0wE,WACvBxyB,EAAK9mB,oBAAsB,EAC7B,OAAO8mB,EAAK9mB,mBAEd,IAAIy2C,EAAgBlwE,KAAKkwE,cACrB13C,EAAQ03C,EAAc/jE,OAO1B,OANKo0C,EAAKljC,GAAG9P,EAAAlL,YAAYu2E,aAAer4B,EAAKrmC,UAAUo6C,mBAAqB/T,EAAKrmC,UAAUwgB,eAAevuB,SAExGo0C,EAAOvgD,KAAK6yE,iBAAiBtyB,IAE/B2vB,EAAcxjE,KAAK6zC,EAAKz4B,cACxBy4B,EAAK9mB,mBAAqBjB,EACnBA,GAKTo3C,EAAA3tE,UAAAwyE,yBAAA,SAAyBx9D,EAAsBkD,GAI7C,OAHIlD,EAAUpJ,MAAQkW,EAAApW,SAASoU,gBAC7B9K,EAAqCA,EAAWxE,aAE1CwE,EAAUpJ,MAChB,KAAKkW,EAAApW,SAAS4T,iBAEZ,IADA,IACSlhB,EAAI,EAAGojB,GADZo1D,EAAsC5hE,EAAWN,SAChBxK,OAAQ9L,EAAIojB,IAAKpjB,EACpDL,KAAKy0E,yBAAyBoE,EAAiBx4E,GAAI8Z,GAErD,MAEF,KAAK4J,EAAApW,SAAS+T,gBACZ,IAAIzO,EAAUjT,KAAKu2B,QAAQvN,wBAAyC/R,GACpE7M,OAAO6I,EAAQpF,MAAQikD,EAAAlrC,YAAYiR,MAC9B5kB,EAAQ0b,aAAamjC,EAAAjrC,eAAe/I,OAAO9d,KAAK8zE,YAAkB7gE,GACvE,MAEF,KAAK8Q,EAAApW,SAASiV,qBACZ,IAAIi2D,EACJ,IAASx4E,EAAI,EAAGojB,GADZo1D,EAA0C5hE,EAAWN,SACpBxK,OAAQ9L,EAAIojB,IAAKpjB,EACpDL,KAAKy0E,yBAAyBoE,EAAiBx4E,GAAI8Z,GAErD,MAEF,KAAK4J,EAAApW,SAASyV,SACZ,IAAIhK,EAAmCnC,EAAWmC,aAClD,IAAS/Y,EAAI,EAAGojB,EAAIrK,EAAajN,OAAQ9L,EAAIojB,IAAKpjB,EAAG,CAC/C4S,EAAUjT,KAAKu2B,QAAQvN,wBAAwB5P,EAAa/Y,IAChE+J,OAAO6I,EAAQpF,MAAQikD,EAAAlrC,YAAYhJ,QAEhC3K,EAAQoK,GAAG9P,EAAAlL,YAAY0zB,UACvB9iB,EAAQ0b,aAAamjC,EAAAjrC,eAAe/I,OACrC9d,KAAK6zE,cAAsB5gE,GAE/B,MAEF,KAAK8Q,EAAApW,SAASsU,kBACRhP,EAAUjT,KAAKu2B,QAAQvN,wBAA0C/R,IACzDpJ,MAAQikD,EAAAlrC,YAAYhJ,SACzB3K,EAAQ0b,aAAamjC,EAAAjrC,eAAe/I,OAAO9d,KAAK6zE,cAAsB5gE,IAE7E,MAEF,KAAK8Q,EAAApW,SAASmU,OACuC,MAA7B7K,EAAWrL,gBAC/B5L,KAAKo0E,kBACuBn9D,EAAWrL,eACMqL,EAAWS,MAG1D,MAEF,KAAKqM,EAAApW,SAAS8U,OACZziB,KAAKo0E,kBACen9D,EAAWrL,eACXqL,EAAWS,MAE/B,MAEF,KAAKqM,EAAApW,SAAS0U,oBACd,KAAK0B,EAAApW,SAASgV,kBACd,KAAKoB,EAAApW,SAAS+U,qBACd,KAAKqB,EAAApW,SAASwT,0BACd,KAAK4C,EAAApW,SAASuV,gBAAiB,MAC/B,QACE,IAAIzS,EAAOzQ,KAAK84E,iBAAiB7hE,GAC7B86C,EAAApL,gBAAgBl2C,IAASshD,EAAAhyB,aAAa8xB,KAAK13C,EAAKzN,KAAK+D,KAM/Dm/D,EAAA3tE,UAAA62E,iBAAA,SACE7hE,EACA8hE,QAAA,IAAAA,OAAA,GAEA,IACItoE,EADA9Q,EAASK,KAAKL,OAElB,OAAQsX,EAAUpJ,MAChB,KAAKkW,EAAApW,SAAS0T,MACZ5Q,EAAOzQ,KAAKg5E,sBAAsC/hE,GAClD,MAEF,KAAK8M,EAAApW,SAAS2T,MACZ7Q,EAAOzQ,KAAKi5E,sBAAsChiE,GAClD,MAEF,KAAK8M,EAAApW,SAAS6T,SACZ/Q,EAAOzQ,KAAKk5E,yBAA4CjiE,GACxD,MAEF,KAAK8M,EAAApW,SAAS8T,GACZhR,EAAOzQ,KAAKm5E,mBAAgCliE,GAC5C,MAEF,KAAK8M,EAAApW,SAAS1K,MACZwN,EAAOzQ,KAAKo5E,sBAAsCniE,GAClD,MAEF,KAAK8M,EAAApW,SAASqU,WACZvR,EAAOzQ,KAAKq5E,2BAAgDpiE,GAC5D,MAEF,KAAK8M,EAAApW,SAASwU,IACZ1R,EAAOzQ,KAAKs5E,oBAAkCriE,GAC9C,MAEF,KAAK8M,EAAApW,SAAS4U,GACZ9R,EAAOzQ,KAAKu5E,mBAAgCtiE,GAC5C,MAEF,KAAK8M,EAAApW,SAASkV,OACZpS,EAAOzQ,KAAKw5E,uBAAwCviE,EAAW8hE,GAC/D,MAEF,KAAKh1D,EAAApW,SAASoV,OACZtS,EAAOzQ,KAAKy5E,uBAAwCxiE,GACpD,MAEF,KAAK8M,EAAApW,SAASqV,MACZvS,EAAOzQ,KAAK05E,sBAAsCziE,GAClD,MAEF,KAAK8M,EAAApW,SAASsV,IACZxS,EAAOzQ,KAAK25E,oBAAkC1iE,GAC9C,MAEF,KAAK8M,EAAApW,SAASyV,UACZ3S,EAAOzQ,KAAK45E,yBAA4C3iE,MAC7CxG,EAAO9Q,EAAO26C,OACzB,MAEF,KAAKv2B,EAAApW,SAAS0V,KACZ5S,EAAOzQ,KAAK65E,qBAAoC5iE,GAChD,MAEF,KAAK8M,EAAApW,SAAS2V,MACZ7S,EAAOzQ,KAAK85E,sBAAsC7iE,GAClD,MAEF,KAAK8M,EAAApW,SAASuV,gBAEZljB,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACfxc,EAAUlM,OAEZ0F,EAAO9Q,EAAOy7C,cACd,MAEF,QACEhxC,QAAO,GACPqG,EAAO9Q,EAAOy7C,cAIlB,OADIp7C,KAAKmpB,QAAQiS,WAAWp7B,KAAK+5E,iBAAiBtpE,EAAMwG,EAAUlM,OAC3D0F,GAGTm/D,EAAA3tE,UAAAq0E,kBAAA,SACEngE,EACA6jE,EACA5D,QADA,IAAA4D,OAAA,QACA,IAAA5D,MAAA,MAEA,IAAI6D,EAAgB9jE,EAAWhK,OAC1BiqE,KACHA,EAAQ,IAAInvE,MAAqBgzE,IAC3B9tE,OAAS,GAIjB,IAFA,IAAIxM,EAASK,KAAKL,OACdm7B,EAAO96B,KAAKmxE,YACP9wE,EAAI,EAAGA,EAAI45E,IAAiB55E,EAAG,CACtC,IAAIoQ,EAAOzQ,KAAK84E,iBAAiB3iE,EAAW9V,GAAI25E,GAAU35E,GAAK45E,EAAgB,GAC/E,OAAQloB,EAAApL,gBAAgBl2C,IACtB,KAAKshD,EAAAhyB,aAAakuB,MAChB,IAAK8D,EAAApJ,aAAal4C,GAAO,CACvB,IAAK,IAAIma,EAAI,EAAGnH,EAAIsuC,EAAAlJ,mBAAmBp4C,GAAOma,EAAInH,IAAKmH,EAAGwrD,EAAM1pE,KAAKqlD,EAAAhJ,cAAct4C,EAAMma,IACzF,MAIJ,QAASwrD,EAAM1pE,KAAK+D,GACpB,KAAKshD,EAAAhyB,aAAa8xB,KAEpB,GAAI/2B,EAAKvd,MAAM,KAA0C,CACnDw0C,EAAAjE,yBAAyBr9C,IAAO2lE,EAAM1pE,KAAK/M,EAAOy7C,eACtD,OAGJ,OAAOg7B,GAGTxG,EAAA3tE,UAAA+2E,sBAAA,SACE/hE,GAEA,IAAId,EAAac,EAAUd,WACvB+jE,EAAYl6E,KAAKmxE,YACjBgJ,EAAYD,EAAUxR,OAC1B1oE,KAAKmxE,YAAcgJ,EAEnB,IAAI/D,EAAQp2E,KAAKs2E,kBAAkBngE,GAKnC,OAJKgkE,EAAU58D,MAAM,MAA0Cvd,KAAKy2E,oBAAoB0D,EAAW/D,GACnG+D,EAAUrQ,mBACVoQ,EAAU5P,QAAQ6P,GAClBn6E,KAAKmxE,YAAc+I,EACZhD,EAAQl3E,KAAKL,OAAQy2E,EAAOrkB,EAAAjyB,WAAWsY,OAGhDw3B,EAAA3tE,UAAAg3E,sBAAA,SACEhiE,GAEA,IAAItX,EAASK,KAAKL,OAClB,GAAIsX,EAAUX,MAKZ,OAJAtW,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACfxc,EAAUX,MAAMvL,OAEXpL,EAAOy7C,cAEhB,IAAItgB,EAAO96B,KAAKmxE,YACZ92C,EAAaS,EAAKT,WACtB,GAAkB,MAAdA,EAKF,OAJAr6B,KAAKqN,MACHwW,EAAApZ,eAAe2vE,qFACfnjE,EAAUlM,OAELpL,EAAOy7C,cAEhB,IAAIg7B,EAAQ,IAAInvE,MAChBjH,KAAKy2E,oBAAoB37C,EAAMs7C,GAE/B,IADA,IAAI51D,EAASsa,EAAKta,OACA,OAAXA,GAAmBA,EAAO6Z,YAAcA,GAC7Cr6B,KAAKy2E,oBAAoBj2D,EAAQ41D,GAAwB,GACzD51D,EAASA,EAAOA,OAKlB,OAHAsa,EAAKgvC,mBACLsM,EAAM1pE,KAAK/M,EAAOm6C,GAAGzf,IACrBS,EAAKtd,IAAG,IACD05D,EAAQv3E,EAAQy2E,EAAOrkB,EAAAjyB,WAAWsY,OAG3Cw3B,EAAA3tE,UAAAi3E,yBAAA,SACEjiE,GAEA,IAAItX,EAASK,KAAKL,OACd2W,EAAQW,EAAUX,MACtB,GAAIA,EAKF,OAJAtW,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACfnd,EAAMvL,OAEDpL,EAAOy7C,cAGhB,IAAItgB,EAAO96B,KAAKmxE,YACZ9I,EAAgBvtC,EAAKutC,cACzB,GAAqB,MAAjBA,EAKF,OAJAroE,KAAKqN,MACHwW,EAAApZ,eAAe4vE,8EACfpjE,EAAUlM,OAELpL,EAAOy7C,cAEhBtgB,EAAKtd,IAAI,KACT,IAAI44D,EAAQ,IAAInvE,MAChBjH,KAAKy2E,oBAAoB37C,EAAMs7C,GAE/B,IADA,IAAI1/C,EAAuBoE,EAAKta,OACzBkW,GAAWA,EAAQ2xC,gBAAkBA,GAC1CroE,KAAKy2E,oBAAoB//C,EAAS0/C,GAAwB,GAC1D1/C,EAAUA,EAAQlW,OAIpB,OAFAsa,EAAKgvC,mBACLsM,EAAM1pE,KAAK/M,EAAOm6C,GAAGuuB,IACd6O,EAAQv3E,EAAQy2E,EAAOrkB,EAAAjyB,WAAWsY,OAG3Cw3B,EAAA3tE,UAAAk3E,mBAAA,SACEliE,GAEA,IAAItX,EAASK,KAAKL,OAEdu6E,EAAYl6E,KAAKmxE,YACjB76D,EAAQ4jE,EAAU/P,iBAClBgQ,EAAYD,EAAUxR,OAC1B1oE,KAAKmxE,YAAcgJ,EACnB,IAAI9/C,EAAa,SAAW/jB,EAC5B6jE,EAAU9/C,WAAaA,EACvB,IAAIguC,EAAgB,YAAc/xD,EAClC6jE,EAAU9R,cAAgBA,EAE1B,IAAI+N,EAAQ,IAAInvE,MACZgQ,EAAUA,UAAUpJ,MAAQkW,EAAApW,SAAS0T,MACvCrhB,KAAKs2E,kBAAmCr/D,EAAUA,UAAWd,YAAY,EAAOigE,GAEhFA,EAAM1pE,KACJ1M,KAAK84E,iBAAiB7hE,EAAUA,YAGpC,IAAIqjE,EAAW36E,EAAOuiD,qBACpBliD,KAAKu6E,cACHv6E,KAAK+0E,kBAAkB99D,EAAUhC,UAAW6O,EAAAuF,KAAKjmB,KACjDpD,KAAK+vE,cAGLyK,GAAc,EACdzoB,EAAApL,gBAAgB2zB,IAAavoB,EAAAhyB,aAAa0kB,QAC5Cr6C,OAAO2nD,EAAAnL,kBAAkB0zB,IAAavoB,EAAAjyB,WAAW15B,KAC5C2rD,EAAAlL,iBAAiByzB,KAAWE,GAAc,IAEjD,IAAIC,EAAaN,EAAU98D,GAAE,KACzBq9D,EAAYP,EAAU58D,MAAM,MAC5Bo9D,EAASR,EAAU58D,MAAM,MAQzBq9D,GAAgBH,IAAeN,EAAU98D,GAAE,IAE3Cu9D,IAAiBJ,GACnBpE,EAAM1pE,KAAK/M,EAAOm6C,GAAGuuB,EAAeiS,IAEtC,IAAInpE,EAAO+lE,EAAQv3E,EAAQy2E,EAAOrkB,EAAAjyB,WAAWsY,MAoB7C,OAnBIwiC,IAAiBJ,GAAeE,KAClCvpE,EAAOxR,EAAOu6C,KAAKmuB,EAAel3D,IAEhCwpE,IACFxpE,EAAOxR,EAAOg6C,MAAMtf,EAAY,CAAElpB,KAI/BspE,GAAYz6E,KAAKy2E,oBAAoB0D,EAAW/D,GACrD+D,EAAUrQ,mBACVoQ,EAAU7P,gBACV8P,EAAUxjD,MACR,OAKFujD,EAAU5P,QAAQ6P,GAClBn6E,KAAKmxE,YAAc+I,EACZ/oE,GAGTy+D,EAAA3tE,UAAAm3E,sBAAA,SACEniE,GAEA,OAAOjX,KAAKL,OAAO26C,OAGrBs1B,EAAA3tE,UAAAo3E,2BAAA,SACEpiE,GAEA,OAAOjX,KAAK+0E,kBAAkB99D,EAAUpF,WAAYiS,EAAAuF,KAAKG,KAAI,IAG/DomD,EAAA3tE,UAAAq3E,oBAAA,SACEriE,GAEA,IAAItX,EAASK,KAAKL,OAGdu6E,EAAYl6E,KAAKmxE,YACjB76D,EAAQ4jE,EAAU/P,iBAClBgQ,EAAYD,EAAUxR,OAC1B1oE,KAAKmxE,YAAcgJ,EAGnB,IAAI/pE,EAAc6G,EAAU7G,YACxBwkE,EAA0B,EAC1BxkE,IAAawkE,EAAW50E,KAAK84E,iBAAiB1oE,IAGlD,IAAIkqE,EAA0B,EAC1BO,GAAa,EACjB,GAAI5jE,EAAUhC,WAQZ,GAPAqlE,EAAW36E,EAAOuiD,qBAChBliD,KAAKu6E,cACHv6E,KAAK+0E,kBAA8B99D,EAAUhC,UAAW6O,EAAAuF,KAAKzlB,MAC7D5D,KAAK+vE,cAILhe,EAAApL,gBAAgB2zB,IAAavoB,EAAAhyB,aAAa0kB,MAAO,CAEnD,GADAr6C,OAAO2nD,EAAAnL,kBAAkB0zB,IAAavoB,EAAAjyB,WAAW15B,KACH,GAA1C2rD,EAAAlL,iBAAiByzB,GAA4B,CAC/C,IAAIQ,EAAQ,IAAI7zE,MAMhB,OALI2tE,GAAUkG,EAAMpuE,KAAKkoE,GACzB50E,KAAKy2E,oBAAoB0D,EAAWW,GACpCX,EAAUrQ,mBACVoQ,EAAU7P,gBACVrqE,KAAKmxE,YAAc+I,EACZhD,EAAQv3E,EAAQm7E,EAAO/oB,EAAAjyB,WAAWsY,MAE3CyiC,GAAa,QAGfP,EAAW36E,EAAOyD,IAAI,GACtBy3E,GAAa,EAEfV,EAAU9O,qBAAqBiP,GAG/B,IAAIvgE,EAAc9C,EAAU8C,YACxBghE,EAA0B,EAC1BhhE,IAAaghE,EAAW/6E,KAAK+0E,kBAAkBh7D,EAAa+J,EAAAuF,KAAKG,KAAM,IAG3E,IAAI6Q,EAAa8/C,EAAU9/C,WAAa,SAAW/jB,EAAO6jE,EAAU9/C,WAAaA,EACjF8/C,EAAU9/C,WAAaA,EACvB,IAAIguC,EAAgB,YAAc/xD,EAClC6jE,EAAU9R,cAAgBA,EAC1B,IAAI2S,EAAY,QAAU1kE,EACtB2kE,EAAgBhkE,EAAUA,UAC1Bm/D,EAAQ,IAAInvE,MACZg0E,EAAcptE,MAAQkW,EAAApW,SAAS0T,MACjCrhB,KAAKs2E,kBAAmC2E,EAAe9kE,YAAY,EAAOigE,GAE1EA,EAAM1pE,KAAK1M,KAAK84E,iBAAiBmC,IAEnC,IA6BI9pE,EA7BAspE,EAAaN,EAAU98D,GAAE,KACzBq9D,EAAYP,EAAU58D,MAAM,MAC5Bo9D,EAASR,EAAU58D,MAAM,MAazBq9D,GAAgBH,IAAeN,EAAU98D,GAAE,IAC3C69D,GAAcL,GAAcF,EAE5BzgC,EAAO,IAAIjzC,MAIf,GAHK4zE,GACH3gC,EAAKxtC,KAAK/M,EAAOm6C,GAAGzf,EAAY16B,EAAOq3C,MAAM+a,EAAA3uB,QAAQkoC,OAAQgP,KAE3DI,GACEtE,EAAMjqE,OAAS,GAAK4lD,EAAApL,gBAAgByvB,EAAM,KAAOrkB,EAAAhyB,aAAaiuB,QAChE9T,EAAKxtC,KAAK/M,EAAOg6C,MAAM0uB,EAAe+N,SAGxC,IAAK,IAAI/1E,EAAI,EAAGojB,EAAI2yD,EAAMjqE,OAAQ9L,EAAIojB,IAAKpjB,EAAG65C,EAAKxtC,KAAK0pE,EAAM/1E,IAmChE,OAhCIu6E,GAAgBF,GACdK,GAAU7gC,EAAKxtC,KAAKquE,GACxB/6E,KAAKy2E,oBAAoB0D,EAAWjgC,GACpCA,EAAKxtC,KAAK/M,EAAOm6C,GAAGkhC,IAElB7pE,EADEyjE,EACKj1E,EAAOg6C,MAAMuhC,EAAa7gD,EAAa,KAAM,CAClDu6C,EACAj1E,EAAOu6C,KAAK8gC,EAAWr7E,EAAOg6C,MAAM,KAAMO,MAGrCv6C,EAAOg6C,MAAMuhC,EAAa7gD,EAAa,KAAM,CAClD16B,EAAOu6C,KAAK8gC,EAAW9D,EAAQv3E,EAAQu6C,EAAM6X,EAAAjyB,WAAWsY,WAIxDw8B,GAAU16B,EAAK03B,QAAQgD,GAC3B50E,KAAKy2E,oBAAoB0D,EAAWjgC,GACpC/oC,EAAOxR,EAAOg6C,MAAMuhC,EAAa7gD,EAAa,KAAM6f,IAItDigC,EAAUrQ,mBACVoQ,EAAU7P,gBACV8P,EAAUxjD,MACR,OAKEkkD,EAAYX,EAAU5P,QAAQ6P,GAC7BD,EAAU3P,mBAAmB4P,GAClCn6E,KAAKmxE,YAAc+I,EACZ/oE,GAGTy+D,EAAA3tE,UAAAs3E,mBAAA,SACEtiE,GAEA,IAAItX,EAASK,KAAKL,OACdmZ,EAAS7B,EAAU6B,OACnBC,EAAU9B,EAAU8B,QACpBmhE,EAAYl6E,KAAKmxE,YAGjBmJ,EAAW36E,EAAOuiD,qBACpBliD,KAAKu6E,cACHv6E,KAAK+0E,kBAAkB99D,EAAUhC,UAAW6O,EAAAuF,KAAKzlB,MACjD5D,KAAK+vE,cAKT,GACEhe,EAAApL,gBAAgB2zB,IAAavoB,EAAAhyB,aAAa0kB,OAC1CsN,EAAAnL,kBAAkB0zB,IAAavoB,EAAAjyB,WAAW15B,IAE1C,OAAO2rD,EAAAlL,iBAAiByzB,GACpBt6E,KAAK84E,iBAAiBhgE,GACtBC,EACE/Y,KAAK84E,iBAAiB//D,GACtBpZ,EAAO26C,MAIf,IAAI6gC,EAAc,IAAIl0E,MAClBm0E,EAAalB,EAAUxR,OAY3B,GAXA1oE,KAAKmxE,YAAciK,EACnBA,EAAW/P,qBAAqBiP,GAC5BxhE,EAAOjL,MAAQkW,EAAApW,SAAS0T,MAC1BrhB,KAAKs2E,kBAAmCx9D,EAAQ3C,YAAY,EAAOglE,GAEnEA,EAAYzuE,KAAK1M,KAAK84E,iBAAiBhgE,IAEpCsiE,EAAW79D,MAAM,MAA0Cvd,KAAKy2E,oBAAoB2E,EAAYD,GACrGC,EAAWtR,mBACX9pE,KAAKmxE,YAAc+I,EAEfnhE,EAAS,CACX,IAAIsiE,EAAcnB,EAAUxR,OAC5B1oE,KAAKmxE,YAAckK,EACnBA,EAAY7P,sBAAsB8O,GAClC,IAAIgB,EAAe,IAAIr0E,MAUvB,OATI8R,EAAQlL,MAAQkW,EAAApW,SAAS0T,MAC3BrhB,KAAKs2E,kBAAmCv9D,EAAS5C,YAAY,EAAOmlE,GAEpEA,EAAa5uE,KAAK1M,KAAK84E,iBAAiB//D,IAErCsiE,EAAY99D,MAAM,MAA0Cvd,KAAKy2E,oBAAoB4E,EAAaC,GACvGD,EAAYvR,mBACZ9pE,KAAKmxE,YAAc+I,EACnBA,EAAUrP,cAAcuQ,EAAYC,GAC7B17E,EAAOy6C,GAAGkgC,EACfpD,EAAQv3E,EAAQw7E,EAAappB,EAAAjyB,WAAWsY,MACxC8+B,EAAQv3E,EAAQ27E,EAAcvpB,EAAAjyB,WAAWsY,OAK3C,OAFA8hC,EAAU3P,mBAAmB6Q,GACzBA,EAAW/9D,GAAE,MAAwB68D,EAAU1O,sBAAsB8O,GAClE36E,EAAOy6C,GAAGkgC,EACfpD,EAAQv3E,EAAQw7E,EAAappB,EAAAjyB,WAAWsY,QAU9Cw3B,EAAA3tE,UAAAu3E,uBAAA,SACEviE,EACA8hE,GAEA,IAAIp5E,EAASK,KAAKL,OACdwR,EAAsB,EACtB2pB,EAAO96B,KAAKmxE,YACZzhE,EAAaorB,EAAKprB,WAGtBorB,EAAKtd,IAAI,KAET,IAAI+9D,EAAkBtkE,EAAU3V,MAChC,GAAIi6E,EAAiB,CACnB,GAAI7rE,GAAcoU,EAAAuF,KAAKG,KAMrB,OALAxpB,KAAKqN,MACHwW,EAAApZ,eAAeuqE,mCACfuG,EAAgBxwE,MAAO/K,KAAK+vE,YAAYrkE,WAAYgE,EAAWhE,YAEjE1L,KAAK+vE,YAAcjsD,EAAAuF,KAAKG,KACjB7pB,EAAOy7C,cAEhB,IAAIogC,EAAW,EACX1gD,EAAK4oC,eAAermD,GAAG9P,EAAAlL,YAAY8uB,iBAAgBqqD,GAAW,GAClErqE,EAAOnR,KAAK+0E,kBAAkBwG,EAAiB7rE,EAAuB,GAAX8rE,GAItDx7E,KAAKswE,oBAAoBrnD,IAAI9X,IAC5BzB,EAAW2jE,WACTthB,EAAApL,gBAAgBx1C,IAAS4gD,EAAAhyB,aAAaglB,UACpCjqB,EAAKovC,eAAenY,EAAA7K,iBAAiB/1C,GAAO8S,EAAA4jD,WAAW4T,gBACzD3gD,EAAKkuC,eAAejX,EAAA7K,iBAAiB/1C,GAAO8S,EAAA4jD,WAAW4T,cACvDz7E,KAAKswE,oBAAoB7mD,IAAItY,IAOhC2pB,EAAK+wC,YAAY16D,EAAMzB,IAAaorB,EAAKtd,IAAG,GAC7Csd,EAAKswC,UAAUj6D,EAAMzB,IAAaorB,EAAKtd,IAAG,QAErC9N,GAAcoU,EAAAuF,KAAKG,OAC5BxpB,KAAKqN,MACHwW,EAAApZ,eAAeuqE,mCACf/9D,EAAUlM,MAAO,OAAQ2E,EAAWhE,YAEtCyF,EAAOxR,EAAOy7C,eAGhB,IAAIg7B,EAAQ,IAAInvE,MAOhB,GANAjH,KAAKy2E,oBAAoB37C,EAAMs7C,GAC/Bp2E,KAAK00E,mBAAmB55C,EAAMs7C,GAG1B1mE,EAAW2jE,YAAcrzE,KAAKswE,oBAAoBrnD,IAAI9X,KAAOA,EAAOnR,KAAKszE,WAAWniE,IAEpFzB,GAAcoU,EAAAuF,KAAKG,MAAQ4sD,EAAMjqE,OAAQ,CAC3C,IAAIwqE,EAAO77C,EAAKyuC,oBAAoB75D,GAChCorB,EAAKswC,UAAUj6D,EAAMzB,IAAaorB,EAAKsuC,aAAauN,EAAKn+C,MAAOvU,EAAA4jD,WAAW9C,SAC/EqR,EAAMxE,QACJjyE,EAAO45C,UAAUo9B,EAAKn+C,MAAOrnB,IAE/BA,EAAOxR,EAAO83C,UAAUk/B,EAAKn+C,MAAO9oB,EAAWikD,gBAKjD,OAHA74B,EAAKgvC,mBAGDiP,GAAgB5nE,GAAQzB,GAAcoU,EAAAuF,KAAKG,KACxC4sD,EAAMjqE,QACXiqE,EAAM1pE,KAAKyE,GACJxR,EAAOg6C,MAAM,KAAMy8B,EAAO1mE,EAAWikD,iBAFlBxiD,EAMxB2pB,EAAKzd,GAAE,OACJ+4D,EAAMjqE,QACXiqE,EAAM1pE,KAAK/M,EAAOm6C,GAAG1vC,OAAO0wB,EAAK0tC,mBAAoB,EAAGr3D,IAEjDxR,EAAOg6C,MAAM,KAAMy8B,IAHAz2E,EAAOm6C,GAAG1vC,OAAO0wB,EAAK0tC,mBAAoB,EAAGr3D,GAOpEilE,EAAMjqE,QACXiqE,EAAM1pE,KAAK/M,EAAO66C,OAAOrpC,IAClBxR,EAAOg6C,MAAM,KAAMy8B,IAFAz2E,EAAO66C,OAAOrpC,IAK1Cy+D,EAAA3tE,UAAAw3E,uBAAA,SACExiE,GAEA,IAAItX,EAASK,KAAKL,OAEdsb,EAAQhE,EAAUgE,MAClBygE,EAAWzgE,EAAM9O,OACrB,IAAKuvE,EACH,OAAO17E,KAAK+0E,kBAAkB99D,EAAUhC,UAAW6O,EAAAuF,KAAKG,KAAI,GAM9D,IAAI0wD,EAAYl6E,KAAKmxE,YACjBwK,EAAUzB,EAAU/P,iBAGpByR,EAAY1B,EAAUrR,aAAa/kD,EAAAuF,KAAK5lB,KACxCo4E,EAAiBD,EAAUpjD,MAG3BmiD,EAAS,IAAI1zE,MAAqB,EAAIy0E,GAC1Cf,EAAO,GAAKh7E,EAAO45C,UACjBsiC,EACA77E,KAAK+0E,kBAAkB99D,EAAUhC,UAAW6O,EAAAuF,KAAK5lB,IAAG,IAQtD,IAFA,IAAIq4E,EAAa,EACbC,GAAgB,EACX17E,EAAI,EAAGA,EAAIq7E,IAAYr7E,EAAG,CACjC,IACIiW,EADQ2E,EAAM5a,GACAiW,MACdA,EACFqkE,EAAOmB,KAAgBn8E,EAAOm6C,GAAG,OAASz5C,EAAEqL,SAAS,IAAM,IAAMiwE,EAC/Dh8E,EAAOw3C,OAAO4a,EAAArpB,SAAS+iC,MACrB9rE,EAAO83C,UAAUokC,EAAgB9pB,EAAAjyB,WAAW15B,KAC5CpG,KAAK+0E,kBAAkBz+D,EAAOwN,EAAAuF,KAAK5lB,IAAG,KAM1Cs4E,EAAe17E,EAInB65E,EAAU5Q,cAAcsS,GAGxBjB,EAAOmB,GAAcn8E,EAAOm6C,IAAIiiC,GAAgB,EAC1C,OAASA,EAAarwE,SAAS,IAC/B,SACA,IAAMiwE,GAGZ,IAAIK,EAAer8E,EAAOg6C,MAAM,SAAWgiC,EAAShB,EAAQ5oB,EAAAjyB,WAAWsY,MACnE6jC,EAAiB,IACjBC,EAAoB,EACxB,IAAS77E,EAAI,EAAGA,EAAIq7E,IAAYr7E,EAAG,CACjC,IACI8V,EADQ8E,EAAM5a,GACK8V,WACnB8jE,EAAgB9jE,EAAWhK,OAG3BguE,EAAYD,EAAUxR,OAC1B1oE,KAAKmxE,YAAcgJ,EACnB,IAAI9/C,EAAa,SAAWshD,EAC5BxB,EAAU9/C,WAAaA,EAEvB,IAAI8hD,EAAS97E,GAAKq7E,EAAW,EACzBU,EAAYD,EAAS9hD,EAAa,QAAUh6B,EAAI,GAAGqL,SAAS,IAAM,IAAMiwE,EACxEvF,EAAQ,IAAInvE,MAAqB,EAAIgzE,GACzC7D,EAAM,GAAK4F,EAGX,IAFA,IAAIK,EAAQ,EACR5B,GAAa,EACR7vD,EAAI,EAAGA,EAAIqvD,IAAiBrvD,EAAG,CACtC,IAAIna,EAAOzQ,KAAK84E,iBAAiB3iE,EAAWyU,IAI5C,GAHImnC,EAAApL,gBAAgBl2C,IAASshD,EAAAhyB,aAAa8xB,MACxCukB,EAAMiG,KAAW5rE,GAEf0pE,EAAU58D,MAAM,KAA0C,CACxD48D,EAAU98D,GAAE,OAAwBo9D,GAAa,GACrD,OAGJrE,EAAMjqE,OAASkwE,GACX5B,GAAc0B,GAAUhC,EAAU58D,MAAM,SAC1C0+D,GAAqB9B,EAAUtlE,OAEjCqnE,GAAoC,MAAf/B,EAAUtlE,MAG1B4lE,GAAYz6E,KAAKy2E,oBAAoB0D,EAAW/D,GACrD+D,EAAUxjD,MACR,MAGFwjD,EAAUrQ,mBACV9pE,KAAKmxE,YAAc+I,EACnB8B,EAAer8E,EAAOg6C,MAAMyiC,EAAWhG,EAAOrkB,EAAAjyB,WAAWsY,MAQ3D,OANA8hC,EAAU7P,gBAGN0R,GAAgB,IAAG7B,EAAUrlE,QAA6B,GAApBonE,GAC1C/B,EAAUrlE,QAA6B,KAApBqnE,EAEZF,GAGTpM,EAAA3tE,UAAAy3E,sBAAA,SACEziE,GAEA,IAAI6jB,EAAO96B,KAAKmxE,YAGhBr2C,EAAKtd,IAAI,KAET,IAAI44D,EAAQ,IAAInvE,MAChBjH,KAAK00E,mBAAmB55C,EAAMs7C,GAG9B,IAAI90E,EAAQ2V,EAAU3V,MAClBwJ,EAA6B,KACjC,GAAIxJ,EAAMuM,MAAQkW,EAAApW,SAASgS,IAAK,CAC9B,IAAI28D,EAA0Bh7E,EAAOqP,UACjC2rE,EAAQnwE,SAAQrB,EAAUwxE,EAAQ,IAIxC,OAFAlG,EAAM1pE,KAAK8zD,EAAA+b,aAAav8E,KAAM8K,EAASmM,IAEhCigE,EAAQl3E,KAAKL,OAAQy2E,EAAOrkB,EAAAjyB,WAAWsY,OAGhDw3B,EAAA3tE,UAAA03E,oBAAA,SACE1iE,GAQA,OAJAjX,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACfxc,EAAUlM,OAEL/K,KAAKL,OAAOy7C,eAIrBw0B,EAAA3tE,UAAA23E,yBAAA,SACE3iE,GASA,IAPA,IAAItX,EAASK,KAAKL,OACdyZ,EAAenC,EAAUmC,aACzBojE,EAAkBpjE,EAAajN,OAC/B2uB,EAAO96B,KAAKmxE,YACZsL,EAAe,IAAIx1E,MACnB8gB,EAAW/nB,KAAK+nB,SAEX1nB,EAAI,EAAGA,EAAIm8E,IAAmBn8E,EAAG,CACxC,IAAIoS,EAAc2G,EAAa/Y,GAC3BO,EAAO6R,EAAY7R,KAAKqL,KACxBqD,EAAoB,KACpBslE,EAA0B,EAC1BC,GAAyB,EAG7B,GAAIpiE,EAAYnD,KAAM,CAMpB,KALAA,EAAOyY,EAAS44C,YACdluD,EAAYnD,KACZwrB,EAAK4oC,eACL5oC,EAAK3B,0BAEI,SACP1mB,EAAYrC,cACdwkE,EAAW50E,KAAK+0E,kBAAkBtiE,EAAYrC,YAAad,EACzD,IAEFulE,EAAyB70E,KAAKswE,oBAAoBrnD,IAAI2rD,QAInD,KAAIniE,EAAYrC,YAehB,CACLpQ,KAAKqN,MACHwW,EAAApZ,eAAe43D,cACf5vD,EAAY7R,KAAKmK,MAAMs8D,OAEzB,SAfA,GAJAuN,EAAW50E,KAAK+0E,kBAAkBtiE,EAAYrC,YAAa0T,EAAAuF,KAAKupC,KAAI,IAGpEiiB,EAAyB70E,KAAKswE,oBAAoBrnD,IAAI2rD,GAClD50E,KAAK+vE,aAAejsD,EAAAuF,KAAKG,KAAM,CACjCxpB,KAAKqN,MACHwW,EAAApZ,eAAeuqE,mCACfviE,EAAY1H,MAAO/K,KAAK+vE,YAAYrkE,WAAY,UAElD,SAEF4D,EAAOtP,KAAK+vE,YAYd,IAAI2M,EAAUjqE,EAAY4K,GAAG9P,EAAAlL,YAAYgwB,OACrCkC,GAAW,EACf,GAAImoD,EACF,GAAI9H,GAEF,GADAA,EAAWj1E,EAAOuiD,qBAAqB0yB,GACnC7iB,EAAApL,gBAAgBiuB,IAAa7iB,EAAAhyB,aAAa0kB,MAAO,CACnD,IAAIjqB,EAAQ,IAAIs3B,EAAAv5B,MAAM33B,GAAO,EAAG0O,EAAMwrB,EAAKstC,gBAC3C,OAAQrW,EAAAnL,kBAAkBguB,IACxB,KAAK7iB,EAAAjyB,WAAW15B,IACdo0B,EAAMlI,wBACJxI,QACEioC,EAAAlL,iBAAiB+tB,GACjB,GAEFtlE,GAEF,MAEF,KAAKyiD,EAAAjyB,WAAWz5B,IACdm0B,EAAMlI,wBACJxI,QACEioC,EAAAjL,oBAAoB8tB,GACpB7iB,EAAAhL,qBAAqB6tB,IAEvBtlE,GAEF,MAEF,KAAKyiD,EAAAjyB,WAAWj5B,IACd2zB,EAAMhI,sBAA2Bu/B,EAAA/K,iBAAiB4tB,GAAWtlE,GAC7D,MAEF,KAAKyiD,EAAAjyB,WAAWh5B,IACd0zB,EAAMhI,sBAAsBu/B,EAAA9K,iBAAiB2tB,GAAWtlE,GACxD,MAEF,QAEE,OADAlF,QAAO,GACAzK,EAAOy7C,cAIlB,IAAI8sB,EAAeptC,EAAKotC,aACxB,GAAKA,GACA,GAAIA,EAAaj/C,IAAIroB,GAKxB,OAJAZ,KAAKqN,MACHwW,EAAApZ,eAAemoB,uBACfngB,EAAY7R,KAAKmK,MAAOnK,GAEnBZ,KAAKL,OAAOy7C,mBANFtgB,EAAKotC,aAAeA,EAAe,IAAI9gE,IAQ1D8gE,EAAa1qD,IAAI5c,EAAM45B,GACvBjG,GAAW,QAGbv0B,KAAKqN,MACHwW,EAAApZ,eAAekyE,wCACflqE,EAAY1H,OAMlB,IAAKwpB,EAAU,CACTiG,OAAK,EACT,GACE/nB,EAAY8K,MAAMhQ,EAAAlL,YAAYo0D,IAAMlpD,EAAAlL,YAAYgwB,QAChDyI,EAAKzd,GAAE,OACP,CACA,IAAIusD,EAAgB9uC,EAAK0uC,eAAe5oE,GACpCgpE,GACF5pE,KAAKqN,MACHwW,EAAApZ,eAAemoB,uBACfngB,EAAY7R,KAAKmK,MAAO0H,EAAY7R,KAAKqL,MAE3CuuB,EAAQovC,GAERpvC,EAAQM,EAAK2uC,eAAe7oE,EAAM0O,GAEhCotE,GAAS5hD,EAAKsuC,aAAa5uC,EAAMhC,MAAOvU,EAAA4jD,WAAW+U,cAClD,CACL,GAAI9hD,EAAKqqC,YAAYvkE,GAAO,CAC1BZ,KAAKqN,MACHwW,EAAApZ,eAAemoB,uBACfngB,EAAY7R,KAAKmK,MAAOnK,GAE1B,SAEF45B,EAAQM,EAAKstC,eAAentC,SAAS3rB,EAAM1O,EAAM6R,GAC7CiqE,GAAS5hD,EAAKsuC,aAAa5uC,EAAMhC,MAAOvU,EAAA4jD,WAAW+U,UAEzD,IAAIvJ,EAAY/jE,EAAK+jE,UACjBuB,GACE95C,EAAKswC,UAAUwJ,EAAUtlE,IAAOwrB,EAAKsuC,aAAa5uC,EAAMhC,MAAOvU,EAAA4jD,WAAW9C,SAC1EsO,GACFv4C,EAAKsuC,aAAa5uC,EAAMhC,MAAOvU,EAAA4jD,WAAWwB,UAC1CoT,EAAa/vE,KACX/M,EAAO45C,UAAU/e,EAAMhC,MACrBq8C,EACID,EACA50E,KAAKszE,WAAWsB,OAIxB6H,EAAa/vE,KACX/M,EAAO45C,UAAU/e,EAAMhC,MAAOo8C,IAE5Bp6C,EAAMlrB,KAAK+N,GAAG,MACXyd,EAAK+wC,YAAY+I,EAAUtlE,GAC3BwrB,EAAKkuC,eAAexuC,EAAMhC,MAAOvU,EAAA4jD,WAAWiE,SADVhxC,EAAKsuC,aAAa5uC,EAAMhC,MAAOvU,EAAA4jD,WAAWiE,YAKjFuH,GAMFoJ,EAAa/vE,KACX/M,EAAO45C,UAAU/e,EAAMhC,MACrBlpB,EAAKskD,aAAaj0D,KAGtBm7B,EAAKsuC,aAAa5uC,EAAMhC,MAAOvU,EAAA4jD,WAAW2C,yBACjChwC,EAAMlrB,KAAK+N,GAAG,KACvByd,EAAKsuC,aAAa5uC,EAAMhC,MAAOvU,EAAA4jD,WAAWiE,UAKlD,OAA8B,GAAvB2Q,EAAatwE,OAChB,EACA+qE,EAAQv3E,EAAQ88E,EAAc1qB,EAAAjyB,WAAWsY,OAG/Cw3B,EAAA3tE,UAAA43E,qBAAA,SACE5iE,GAEA,OAAOjX,KAAK+0E,kBAAkB99D,EAAUpF,WAAYiS,EAAAuF,KAAKG,KACvD,KAIJomD,EAAA3tE,UAAA63E,sBAAA,SACE7iE,GAEA,IAAItX,EAASK,KAAKL,OACdu6E,EAAYl6E,KAAKmxE,YAGjBmJ,EAAW36E,EAAOuiD,qBACpBliD,KAAKu6E,cACHv6E,KAAK+0E,kBAAkB99D,EAAUhC,UAAW6O,EAAAuF,KAAKzlB,MACjD5D,KAAK+vE,cAKL8K,GAAa,EACjB,GAAI9oB,EAAApL,gBAAgB2zB,IAAavoB,EAAAhyB,aAAa0kB,MAAO,CAEnD,GADAr6C,OAAO2nD,EAAAnL,kBAAkB0zB,IAAavoB,EAAAjyB,WAAW15B,MAC5C2rD,EAAAlL,iBAAiByzB,GAAW,OAAO36E,EAAO26C,MAC/CugC,GAAa,EAIf,IAAIvkE,EAAQ4jE,EAAU/P,iBAClBgQ,EAAYD,EAAUxR,OAC1B1oE,KAAKmxE,YAAcgJ,EACnB,IAAI9/C,EAAa,SAAW/jB,EAC5B6jE,EAAU9/C,WAAaA,EACvB,IAAIguC,EAAgB,YAAc/xD,EAClC6jE,EAAU9R,cAAgBA,EAC1B8R,EAAU9O,qBAAqBiP,GAC/B,IAAIlE,EAAQ,IAAInvE,MACZgQ,EAAUA,UAAUpJ,MAAQkW,EAAApW,SAAS0T,MACvCrhB,KAAKs2E,kBAAmCr/D,EAAUA,UAAWd,YAAY,EAAOigE,GAEhFA,EAAM1pE,KAAK1M,KAAK84E,iBAAiB7hE,EAAUA,YAE7C,IASI2jE,GATaT,EAAU98D,GAAE,OASM88D,EAAU98D,GAAE,IAE3Cu9D,IACF56E,KAAKy2E,oBAAoB0D,EAAW/D,GACpCA,EAAM1pE,KAAK/M,EAAOm6C,GAAGuuB,KAElBwS,GACHzE,EAAMxE,QAAQjyE,EAAOm6C,GAAGzf,EAAY16B,EAAOq3C,MAAM+a,EAAA3uB,QAAQkoC,OAAQgP,KAEnE,IAAInpE,EAAO+lE,EAAQv3E,EAAQy2E,EAAOrkB,EAAAjyB,WAAWsY,MAoB7C,OAnBIwiC,GAAgBT,EAAU58D,MAAM,SAClCpM,EAAOxR,EAAOu6C,KAAKmuB,EAAel3D,IAE/B0pE,IAAcV,EAAU58D,MAAM,QACjCpM,EAAOxR,EAAOg6C,MAAMtf,EAAY,CAAElpB,KAIpCgpE,EAAUrQ,mBACVoQ,EAAU7P,gBACV8P,EAAUxjD,MACR,OAKEkkD,EAAYX,EAAU5P,QAAQ6P,GAC7BD,EAAU3P,mBAAmB4P,GAClCn6E,KAAKmxE,YAAc+I,EACZ/oE,GAMTy+D,EAAA3tE,UAAA46E,sBAAA,SACE5pE,EACA6pE,EACAtB,GAEApxE,OAAO6I,EAAQoK,GAAG9P,EAAAlL,YAAY61B,UAC9B,IAAI5oB,EAAO2D,EAAQ3D,KACnB,SACkB,EAAdksE,IACFlsE,EAAK+N,GAAE,IACPy/D,EAAez/D,GAAE,IACjB/N,EAAKisC,KAAOuhC,EAAevhC,MACtBv7C,KAAK+vE,YAAc+M,GAAgBjvE,MACnC7N,KAAK+vE,YAAczgE,GAAMzB,MAE9B,OACA,OACE,IAAI6uC,EAAQptC,EAAKwjD,yBAAyBhvC,EAAAuF,KAAKjmB,KAC/C,OAAOpD,KAAKL,OAAOyD,IACQ,GAAzB6P,EAAQ+kB,kBACJ4nB,QAAQ3sC,EAAQglB,uBAAyBykB,GAASA,EAClD,GAGR,OACA,OACA,QACE,IAAIN,EAAOnpC,EAAQ3D,KAAK0jD,wBAAwBlvC,EAAAuF,KAAKjmB,KACrD,OAAOpD,KAAKL,OAAOyD,IACQ,GAAzB6P,EAAQ+kB,kBACJ4nB,QAAQ3sC,EAAQglB,sBAAwBmkB,EACxC,GAGR,OACA,OACE,OAAOp8C,KAAKL,OAAOyD,IACQ,GAAzB6P,EAAQ+kB,kBACJ4nB,QAAQ3sC,EAAQglB,sBAChB,GAGR,OACA,OACE,IAAKhlB,EAAQsjB,QAAQpN,QAAQY,SAC3B,OAAO/pB,KAAKL,OAAOyD,IACQ,GAAzB6P,EAAQ+kB,kBACJ4nB,QAAQ3sC,EAAQglB,sBAChB,GAKV,OACA,OACE,OAAgC,GAAzBhlB,EAAQ+kB,kBACXh4B,KAAKL,OAAO0D,IACVu8C,QAAQ3sC,EAAQglB,sBAChB4nB,SAAS5sC,EAAQglB,uBAEnBj4B,KAAKL,OAAO0D,IAAI,GAEtB,QAEE,IAAM4P,EAAQ0b,aAAamjC,EAAAjrC,eAAenJ,UAAYo/D,GAAkBh5D,EAAAuF,KAAKxlB,IAC3E,OAAO7D,KAAKL,OAAOmE,IAA0BmP,EAASklB,oBAGxDn4B,KAAK+vE,YAAcjsD,EAAAuF,KAAKxlB,IAE1B,QACE,OAAO7D,KAAKL,OAAOkE,IAA0BoP,EAASklB,oBAExD,QAEE,OADA/tB,QAAO,GACApK,KAAKL,OAAOy7C,gBAKzBw0B,EAAA3tE,UAAA8yE,kBAAA,SACEljE,EACAirE,EACAtB,GAGA,IAAIrqE,EAEJ,YALA,IAAAqqE,MAAA,GAEAx7E,KAAK+vE,YAAc+M,EAEfA,GAAkBh5D,EAAAuF,KAAKG,OAAMgyD,GAAW,GACpC3pE,EAAWhE,MACjB,KAAKkW,EAAApW,SAASS,UACZ+C,EAAOnR,KAAK+8E,2BAAgDlrE,EAAYirE,EAAgBtB,GACxF,MAEF,KAAKz3D,EAAApW,SAASsR,OACZ9N,EAAOnR,KAAKg9E,wBAA0CnrE,EAAYirE,EAAgBtB,GAClF,MAEF,KAAKz3D,EAAApW,SAASU,KACZ8C,EAAOnR,KAAKi9E,sBAAsCprE,EAAYirE,EAAgBtB,GAC9E,MAEF,KAAKz3D,EAAApW,SAAS0R,MACZlO,EAAOnR,KAAKk9E,uBAAwCrrE,EAAYirE,EAAgBtB,GAChF,MAEF,KAAKz3D,EAAApW,SAASW,cACZ6C,EAAOnR,KAAKm9E,+BAAwDtrE,EAAYirE,EAAgBtB,GAChG,MAEF,KAAKz3D,EAAApW,SAAS6R,SACZrO,EAAOnR,KAAKo9E,0BAA8CvrE,EAAYirE,EAAexqB,mBAAoBkpB,GACzG,MAEF,KAAKz3D,EAAApW,SAASQ,WACd,KAAK4V,EAAApW,SAASM,MACd,KAAK8V,EAAApW,SAASI,KACd,KAAKgW,EAAApW,SAASqS,KACd,KAAK+D,EAAApW,SAASc,MACd,KAAKsV,EAAApW,SAASK,KACZmD,EAAOnR,KAAKq9E,4BAAkDxrE,EAAYirE,EAAgBtB,GAC1F,MAEF,KAAKz3D,EAAApW,SAAS8R,WACZtO,EAAOnR,KAAKs9E,4BAAkDzrE,EAAYirE,EAAgBtB,GAC1F,MAEF,KAAKz3D,EAAApW,SAASG,QACZqD,EAAOnR,KAAKu9E,yBAA4C1rE,EAAYirE,EAAgBtB,GACpF,MAEF,KAAKz3D,EAAApW,SAASgS,IACZxO,EAAOnR,KAAKw9E,qBAAoC3rE,EAAYirE,EAAgBtB,GAC5E,MAEF,KAAKz3D,EAAApW,SAASY,cACZ4C,EAAOnR,KAAK+0E,kBAA4CljE,EAAYA,WAAYirE,EAAgBtB,GAChG,MAEF,KAAKz3D,EAAApW,SAASa,eACZ2C,EAAOnR,KAAKy9E,gCAA0D5rE,EAAYirE,EAAgBtB,GAClG,MAEF,KAAKz3D,EAAApW,SAASmS,QACZ3O,EAAOnR,KAAK09E,yBAA4C7rE,EAAYirE,EAAgBtB,GACpF,MAEF,KAAKz3D,EAAApW,SAASuS,aACZ/O,EAAOnR,KAAK29E,8BAAsD9rE,EAAYirE,EAAgBtB,GAC9F,MAEF,KAAKz3D,EAAApW,SAASwS,YACZhP,EAAOnR,KAAK49E,6BAAoD/rE,EAAYirE,EAAgBtB,GAC5F,MAEF,QACEx7E,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEboG,EAAOnR,KAAKL,OAAOy7C,cAIvB,IAAI20B,EAAc/vE,KAAK+vE,YACnB8N,EAAgD,IAA7B,EAAXrC,GAgBZ,OAfIzL,GAAe+M,IACF,EAAXtB,GACFrqE,EAAOnR,KAAK89E,kBAAkB3sE,EAAM4+D,EAAa+M,GAAgB,EAAMe,EAAMhsE,GAC7EgsE,GAAO,EACP79E,KAAK+vE,YAAc+M,GACC,EAAXtB,IACTrqE,EAAOnR,KAAK89E,kBAAkB3sE,EAAM4+D,EAAa+M,GAAgB,EAAOe,EAAMhsE,GAC9EgsE,GAAO,EACP79E,KAAK+vE,YAAc+M,IAGnBe,IAAM1sE,EAAOnR,KAAK+9E,uBAAuB5sE,EAAM4+D,IAG/C/vE,KAAKmpB,QAAQiS,WAAWp7B,KAAK+5E,iBAAiB5oE,EAAMU,EAAW9G,OAC5DoG,GAITy+D,EAAA3tE,UAAAigD,qBAAA,SACErwC,EACAirE,EACAtB,GAEA,YAFA,IAAAA,MAAA,GAEOx7E,KAAKL,OAAOuiD,qBACjBliD,KAAK+0E,kBAAkBljE,EAAYirE,EAAgBtB,KAIvD5L,EAAA3tE,UAAA67E,kBAAA,SACE3sE,EAEAs9D,EAEA38D,EAEAksE,EAEAH,EACAtX,GAEA,IAAI5mE,EAASK,KAAKL,OAGlB,OAAiB,IAAb8uE,EAAS5gE,MACXzD,OAAkB,IAAX0H,EAAOjE,MACd7N,KAAKqN,MACHwW,EAAApZ,eAAeuqE,mCACfzO,EAAWx7D,MAAO0jE,EAAS/iE,WAAYoG,EAAOpG,YAEzC/L,EAAOy7C,eAID,IAAXtpC,EAAOjE,KAA8BlO,EAAOq6C,KAAK7oC,IAEjDnR,KAAKmxE,YAAY/F,UAAUj6D,EAAMs9D,KAAWA,EAAWA,EAASlc,iBAE/Dkc,EAAS/wC,eAAe5rB,IACtBksE,IACCvP,EAASlc,iBAAmBzgD,EAC9B9R,KAAKqN,MACHwW,EAAApZ,eAAewzE,wBACf1X,EAAWx7D,OAGb/K,KAAKqN,MACHwW,EAAApZ,eAAeyzE,sDACf3X,EAAWx7D,MAAO0jE,EAAS/iE,WAAYoG,EAAOpG,aAMlD+iE,EAASpxD,GAAE,GAGTvL,EAAOuL,GAAE,GACM,IAAboxD,EAAS5gE,KAGI,IAAXiE,EAAOjE,OACTsD,EAAOxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQ+6C,WAAYhtE,IAMtB,IAAXW,EAAOjE,OAChBsD,EAAOxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQg7C,UAAWjtE,IAMhCW,EAAOuL,GAAE,GAGD,IAAboxD,EAAS5gE,KACPiE,GAAUgS,EAAAuF,KAAKzlB,MACjBuN,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASyjC,MAAOh7D,EAAMxR,EAAOkE,IAAI,IACtDg6E,GAAO,GAGL1sE,EAFOW,EAAOuL,GAAE,GACdvL,EAAOuL,GAAE,IACJ1d,EAAOq3C,MAAM+a,EAAA3uB,QAAQi7C,cAAeltE,GAEpCxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQk7C,cAAentE,GAGzCW,EAAOuL,GAAE,IACJ1d,EAAOq3C,MAAM+a,EAAA3uB,QAAQm7C,cAAeptE,GAEpCxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQo7C,cAAertE,GAM3CW,GAAUgS,EAAAuF,KAAKzlB,MACjBuN,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS0jC,MAAOj7D,EAAMxR,EAAOmE,IAAI,IACtD+5E,GAAO,GAGL1sE,EAFOW,EAAOuL,GAAE,GACdvL,EAAOuL,GAAE,IACJ1d,EAAOq3C,MAAM+a,EAAA3uB,QAAQq7C,cAAettE,GAEpCxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQs7C,cAAevtE,GAGzCW,EAAOuL,GAAE,IACJ1d,EAAOq3C,MAAM+a,EAAA3uB,QAAQu7C,cAAextE,GAEpCxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQw7C,cAAeztE,IAOjD/G,OAAmB,GAAZ0H,EAAO+C,MAAyB,sBACvC1D,EAAOxR,EAAOq6C,KAAK7oC,IAIZs9D,EAASpxD,GAAE,IAAuBvL,EAAOuL,GAAE,GAKhDlM,EAFW,IAAXW,EAAOjE,KACL4gE,EAASpxD,GAAE,IACN1d,EAAOq3C,MACZy3B,EAASpxD,GAAE,GACP00C,EAAA3uB,QAAQy7C,gBACR9sB,EAAA3uB,QAAQ07C,gBACZ3tE,GAGKxR,EAAOq3C,MACZy3B,EAASpxD,GAAE,GACP00C,EAAA3uB,QAAQ27C,gBACRhtB,EAAA3uB,QAAQ47C,gBACZ7tE,GAMAs9D,EAASpxD,GAAE,IACN1d,EAAOq3C,MACZy3B,EAASpxD,GAAE,GACP00C,EAAA3uB,QAAQ67C,gBACRltB,EAAA3uB,QAAQ87C,gBACZ/tE,GAGKxR,EAAOq3C,MACZy3B,EAASpxD,GAAE,GACP00C,EAAA3uB,QAAQ+7C,gBACRptB,EAAA3uB,QAAQg8C,gBACZjuE,GAQFs9D,EAASpxD,GAAE,IAGTvL,GAAUgS,EAAAuF,KAAKzlB,MACjBuN,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASkjC,MAAOz6D,EAAMxR,EAAO0D,IAAI,IACtDw6E,GAAO,GACG/rE,EAAOuL,GAAE,MACnBlM,EAAOxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQi8C,QAASluE,IAI9BW,EAAOuL,GAAE,KAClBlM,EAAOxR,EAAOq3C,MACZy3B,EAASpxD,GAAE,GAAqB00C,EAAA3uB,QAAQk8C,UAAYvtB,EAAA3uB,QAAQm8C,UAC5Dv/E,KAAK+9E,uBAAuB5sE,EAAMs9D,IAEpCoP,GAAO,GAKHpP,EAASpxD,GAAE,KAEToxD,EAASlzB,KAAOzpC,EAAOypC,OACzBpqC,EAAOnR,KAAK+9E,uBAAuB5sE,EAAMs9D,GACzCoP,GAAO,GAMf79E,KAAK+vE,YAAcj+D,EACZ+rE,EACH79E,KAAK+9E,uBAAuB5sE,EAAMW,GAClCX,IAGNy+D,EAAA3tE,UAAA86E,2BAAA,SACElrE,EACAirE,EACAtB,GAEA,IAAIgE,GAAqC,EAAdhE,EAC3B,OAAQ3pE,EAAWD,eACjB,KAAKmS,EAAA/E,cAAcygE,OACnB,KAAK17D,EAAA/E,cAAcy2C,GACjB,IAAI36B,EAAO96B,KAAKmxE,YACZr/D,EAAS9R,KAAK+nB,SAAS44C,YACzBv2D,OAAOyH,EAAWC,QAClBgpB,EAAK4oC,eACL5oC,EAAK3B,yBAEP,OAAKrnB,EACE9R,KAAK+0E,kBAAkBljE,EAAWA,WAAYC,EAA4B,EAApB0tE,GADzCx/E,KAAKL,OAAOy7C,cAGlC,KAAKr3B,EAAA/E,cAAc+lD,QACjB36D,QAAQyH,EAAWC,QACnB,IAAIX,EAAOnR,KAAK+0E,kBAAkBljE,EAAWA,WAAYirE,EAAe4C,WAAYF,GAChFlwE,EAAOtP,KAAK+vE,YAChB,GAAI/vE,KAAKmxE,YAAY/F,UAAUj6D,EAAM7B,GACnCtP,KAAKiN,KACH4W,EAAApZ,eAAek1E,yBACf9tE,EAAWA,WAAW9G,YAEnB,IAAK/K,KAAKmpB,QAAQe,SAAU,CACjC,IAAIvqB,EAASK,KAAKL,OAEdigF,GADA9kD,EAAO96B,KAAKmxE,aACK5H,oBAAoBj6D,GAAMkpB,MAC1CsC,EAAK+wC,YAAY16D,EAAM7B,IAAOwrB,EAAKsuC,aAAawW,EAAW37D,EAAA4jD,WAAWiE,SAC3EhxC,EAAKsuC,aAAawW,EAAW37D,EAAA4jD,WAAW9C,SACxC5zD,EAAOxR,EAAOy6C,GACZz6C,EAAOg4C,UAAUioC,EAAWzuE,GAC5BxR,EAAO83C,UAAUmoC,EAAWtwE,EAAKqkD,gBACjCh0D,EAAOy7C,eAIX,OADAp7C,KAAK+vE,YAAc/vE,KAAK+vE,YAAYxd,gBAC7BphD,EAET,QAAS/G,QAAO,GAElB,OAAOpK,KAAKL,OAAOy7C,eAQrBw0B,EAAA3tE,UAAA+6E,wBAAA,SACEnrE,EACAirE,EACAtB,GAEA,IAIIqE,EACAC,EACAC,EACAC,EACAC,EAEA9uE,EAVAxR,EAASK,KAAKL,OACduS,EAAOL,EAAWK,KAClBC,EAAQN,EAAWM,MASnB+tE,GAAW,EAEXjuE,EAAWJ,EAAWI,SAC1B,OAAQA,GACN,KAAKzE,EAAAC,MAAMiqD,SAKT,GAJAmoB,EAAW7/E,KAAK+0E,kBAAkB7iE,EAAM4qE,GACxCgD,EAAW9/E,KAAK+vE,YAGZ/vE,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAE5C,GADI4hB,EAAiB6gD,EAAS7gD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAaoC,IAC5C,CACZ7U,EAAOnR,KAAKmgF,sBAAsBriD,EAAU5rB,EAAM2tE,EAAU1tE,EAAON,GACnE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEN/K,KAAKL,OAAOy7C,cAKrB,GAFA2kC,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,GAC1CE,EAAYhgF,KAAK+vE,cACbkQ,EAAan8D,EAAAuF,KAAKoqC,kBAAkBqsB,EAAUE,GAAW,IAiB3D,OALAhgF,KAAKqN,MACHwW,EAAApZ,eAAe21E,8CACfvuE,EAAW9G,MAAO,IAAK+0E,EAASp0E,WAAYs0E,EAAUt0E,YAExD1L,KAAK+vE,YAAc+M,EACZn9E,EAAOy7C,cAEhB,OAlBEykC,EAAW7/E,KAAK89E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP/tE,GAEF6tE,EAAY//E,KAAK89E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP9tE,GAUI8tE,EAAWpyE,MACjB,OACA,OACA,OACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS2jC,MAAOwT,EAAUE,GAC/C,MAEF,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS6jC,MAAOsT,EAAUE,GAC/C,MAEF,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAAS6jC,MACTxa,EAAArpB,SAAS2jC,MACbwT,EACAE,GAEF,MAEF,OACA,OACA,OACA,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS4jC,MAAOuT,EAAUE,GAC/C,MAEF,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAAS8jC,MACTza,EAAArpB,SAAS4jC,MACbuT,EACAE,GAEF,MAEF,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS8jC,MAAOqT,EAAUE,GAC/C,MAEF,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS+jC,MAAOoT,EAAUE,GAC/C,MAEF,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASgkC,MAAOmT,EAAUE,GAC/C,MAEF,QACE31E,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlBp7C,KAAK+vE,YAAcjsD,EAAAuF,KAAKzlB,KACxB,MAEF,KAAK4J,EAAAC,MAAMkqD,YAKT,GAJAkoB,EAAW7/E,KAAK+0E,kBAAkB7iE,EAAM4qE,GACxCgD,EAAW9/E,KAAK+vE,YAGZ/vE,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAE5C,GADI4hB,EAAiB6gD,EAAS7gD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAagC,IAC5C,CACZzU,EAAOnR,KAAKmgF,sBAAsBriD,EAAU5rB,EAAM2tE,EAAU1tE,EAAON,GACnE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEN/K,KAAKL,OAAOy7C,cAKrB,GAFA2kC,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,GAC1CE,EAAYhgF,KAAK+vE,cACbkQ,EAAan8D,EAAAuF,KAAKoqC,kBAAkBqsB,EAAUE,GAAW,IAiB3D,OALAhgF,KAAKqN,MACHwW,EAAApZ,eAAe21E,8CACfvuE,EAAW9G,MAAO,IAAK+0E,EAASp0E,WAAYs0E,EAAUt0E,YAExD1L,KAAK+vE,YAAc+M,EACZn9E,EAAOy7C,cAEhB,OAlBEykC,EAAW7/E,KAAK89E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP/tE,GAEF6tE,EAAY//E,KAAK89E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP9tE,GAUI8tE,EAAWpyE,MACjB,OACA,OACA,OACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASukC,MAAO4S,EAAUE,GAC/C,MAEF,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAASykC,MACTpb,EAAArpB,SAASukC,MACb4S,EACAE,GAEF,MAEF,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASykC,MAAO0S,EAAUE,GAC/C,MAEF,OACA,OACA,OACA,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASwkC,MAAO2S,EAAUE,GAC/C,MAEF,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAAS0kC,MACTrb,EAAArpB,SAASwkC,MACb2S,EACAE,GAEF,MAEF,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS0kC,MAAOyS,EAAUE,GAC/C,MAEF,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS2kC,MAAOwS,EAAUE,GAC/C,MAEF,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS4kC,MAAOuS,EAAUE,GAC/C,MAEF,QACE31E,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlBp7C,KAAK+vE,YAAcjsD,EAAAuF,KAAKzlB,KACxB,MAEF,KAAK4J,EAAAC,MAAMmqD,gBAKT,GAJAioB,EAAW7/E,KAAK+0E,kBAAkB7iE,EAAM4qE,GACxCgD,EAAW9/E,KAAK+vE,YAGZ/vE,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAE5C,GADI4hB,EAAiB6gD,EAAS7gD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAaqC,IAC5C,CACZ9U,EAAOnR,KAAKmgF,sBAAsBriD,EAAU5rB,EAAM2tE,EAAU1tE,EAAON,GACnE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEN/K,KAAKL,OAAOy7C,cAKrB,GAFA2kC,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,GAC1CE,EAAYhgF,KAAK+vE,cACbkQ,EAAan8D,EAAAuF,KAAKoqC,kBAAkBqsB,EAAUE,GAAW,IAiB3D,OALAhgF,KAAKqN,MACHwW,EAAApZ,eAAe21E,8CACfvuE,EAAW9G,MAAO,KAAM+0E,EAASp0E,WAAYs0E,EAAUt0E,YAEzD1L,KAAK+vE,YAAc+M,EACZn9E,EAAOy7C,cAEhB,OAlBEykC,EAAW7/E,KAAK89E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP/tE,GAEF6tE,EAAY//E,KAAK89E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP9tE,GAUI8tE,EAAWpyE,MACjB,OACA,OACA,OACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASikC,MAAOkT,EAAUE,GAC/C,MAEF,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAASmkC,MACT9a,EAAArpB,SAASikC,MACbkT,EACAE,GAEF,MAEF,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASmkC,MAAOgT,EAAUE,GAC/C,MAEF,OACA,OACA,OACA,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASkkC,MAAOiT,EAAUE,GAC/C,MAEF,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAASokC,MACT/a,EAAArpB,SAASkkC,MACbiT,EACAE,GAEF,MAEF,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASokC,MAAO+S,EAAUE,GAC/C,MAEF,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASqkC,MAAO8S,EAAUE,GAC/C,MAEF,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASskC,MAAO6S,EAAUE,GAC/C,MAEF,QACE31E,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlBp7C,KAAK+vE,YAAcjsD,EAAAuF,KAAKzlB,KACxB,MAEF,KAAK4J,EAAAC,MAAMoqD,mBAKT,GAJAgoB,EAAW7/E,KAAK+0E,kBAAkB7iE,EAAM4qE,GACxCgD,EAAW9/E,KAAK+vE,YAGZ/vE,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAE5C,GADI4hB,EAAiB6gD,EAAS7gD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAaiC,IAC5C,CACZ1U,EAAOnR,KAAKmgF,sBAAsBriD,EAAU5rB,EAAM2tE,EAAU1tE,EAAON,GACnE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEN/K,KAAKL,OAAOy7C,cAKrB,GAFA2kC,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,GAC1CE,EAAYhgF,KAAK+vE,cACbkQ,EAAan8D,EAAAuF,KAAKoqC,kBAAkBqsB,EAAUE,GAAW,IAiB3D,OALAhgF,KAAKqN,MACHwW,EAAApZ,eAAe21E,8CACfvuE,EAAW9G,MAAO,KAAM+0E,EAASp0E,WAAYs0E,EAAUt0E,YAEzD1L,KAAK+vE,YAAc+M,EACZn9E,EAAOy7C,cAEhB,OAlBEykC,EAAW7/E,KAAK89E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP/tE,GAEF6tE,EAAY//E,KAAK89E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP9tE,GAUI8tE,EAAWpyE,MACjB,OACA,OACA,OACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS6kC,MAAOsS,EAAUE,GAC/C,MAEF,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAAS+kC,MACT1b,EAAArpB,SAAS6kC,MACbsS,EACAE,GAEF,MAEF,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS+kC,MAAOoS,EAAUE,GAC/C,MAEF,OACA,OACA,OACA,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS8kC,MAAOqS,EAAUE,GAC/C,MAEF,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAASglC,MACT3b,EAAArpB,SAAS8kC,MACbqS,EACAE,GAEF,MAEF,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASglC,MAAOmS,EAAUE,GAC/C,MAEF,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASilC,MAAOkS,EAAUE,GAC/C,MAEF,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASklC,MAAOiS,EAAUE,GAC/C,MAEF,QACE31E,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlBp7C,KAAK+vE,YAAcjsD,EAAAuF,KAAKzlB,KACxB,MAGF,KAAK4J,EAAAC,MAAMuqD,qBACX,KAAKxqD,EAAAC,MAAMqqD,cAUT,GAJA+nB,EAAW7/E,KAAK+0E,kBAAkB7iE,EAAM4qE,GACxCgD,EAAW9/E,KAAK+vE,YAGZ99D,GAAYzE,EAAAC,MAAMqqD,eAAiB93D,KAAK+vE,YAAY1yD,GAAE,KAExD,GADI4hB,EAAiB6gD,EAAS7gD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAa8B,IAC5C,CACZvU,EAAOnR,KAAKmgF,sBAAsBriD,EAAU5rB,EAAM2tE,EAAU1tE,EAAON,GACnE,MAQN,GAFAkuE,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,GAC1CE,EAAYhgF,KAAK+vE,cACbkQ,EAAan8D,EAAAuF,KAAKoqC,kBAAkBqsB,EAAUE,GAAW,IAiB3D,OALAhgF,KAAKqN,MACHwW,EAAApZ,eAAe21E,8CACfvuE,EAAW9G,MAAOyC,EAAAgqD,sBAAsB3lD,EAAWI,UAAW6tE,EAASp0E,WAAYs0E,EAAUt0E,YAE/F1L,KAAK+vE,YAAc+M,EACZn9E,EAAOy7C,cAEhB,OAlBEykC,EAAW7/E,KAAK89E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP/tE,GAEF6tE,EAAY//E,KAAK89E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP9tE,GAUI8tE,EAAWpyE,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS+iC,MAAOoU,EAAUE,GAC/C,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAASgjC,MACT3Z,EAAArpB,SAAS+iC,MACboU,EACAE,GAEF,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASgjC,MAAOmU,EAAUE,GAC/C,MAEF,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASujC,MAAO4T,EAAUE,GAC/C,MAEF,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASwjC,MAAO2T,EAAUE,GAC/C,MAEF,QACE5uE,EAAOxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQi9C,gBAC1B1gF,EAAOw3C,OAAO4a,EAAArpB,SAAS43C,WAAYT,EAAUE,IAE/C,MAEF,QACE31E,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlBp7C,KAAK+vE,YAAcjsD,EAAAuF,KAAKzlB,KACxB,MAEF,KAAK4J,EAAAC,MAAMwqD,0BACX,KAAKzqD,EAAAC,MAAMsqD,mBAKT,GAJA8nB,EAAW7/E,KAAK+0E,kBAAkB7iE,EAAM4qE,GACxCgD,EAAW9/E,KAAK+vE,YAGZ99D,GAAYzE,EAAAC,MAAMsqD,oBAAsB/3D,KAAK+vE,YAAY1yD,GAAE,KAE7D,GADI4hB,EAAiB6gD,EAAS7gD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAa+B,IAC5C,CACZxU,EAAOnR,KAAKmgF,sBAAsBriD,EAAU5rB,EAAM2tE,EAAU1tE,EAAON,GACnE,MAQN,GAFAkuE,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,GAC1CE,EAAYhgF,KAAK+vE,cACbkQ,EAAan8D,EAAAuF,KAAKoqC,kBAAkBqsB,EAAUE,GAAW,IAiB3D,OALAhgF,KAAKqN,MACHwW,EAAApZ,eAAe21E,8CACfvuE,EAAW9G,MAAOyC,EAAAgqD,sBAAsB3lD,EAAWI,UAAW6tE,EAASp0E,WAAYs0E,EAAUt0E,YAE/F1L,KAAK+vE,YAAc+M,EACZn9E,EAAOy7C,cAEhB,OAlBEykC,EAAW7/E,KAAK89E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP/tE,GAEF6tE,EAAY//E,KAAK89E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP9tE,GAUI8tE,EAAWpyE,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASijC,MAAOkU,EAAUE,GAC/C,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAASkjC,MACT7Z,EAAArpB,SAASijC,MACbkU,EACAE,GAEF,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASkjC,MAAOiU,EAAUE,GAC/C,MAEF,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASyjC,MAAO0T,EAAUE,GAC/C,MAEF,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS0jC,MAAOyT,EAAUE,GAC/C,MAEF,QACE5uE,EAAOxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQm9C,gBAC1B5gF,EAAOw3C,OAAO4a,EAAArpB,SAAS83C,WAAYX,EAAUE,IAE/C,MAEF,QACE31E,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlBp7C,KAAK+vE,YAAcjsD,EAAAuF,KAAKzlB,KACxB,MAEF,KAAK4J,EAAAC,MAAMyrD,OACT,OAAOl5D,KAAKygF,kBAAkBvuE,EAAMC,EAAO2qE,GAE7C,KAAKtvE,EAAAC,MAAM0rD,YAAa+mB,GAAW,EACnC,KAAK1yE,EAAAC,MAAM0Y,KAKT,GAJA05D,EAAW7/E,KAAK+0E,kBAAkB7iE,EAAM4qE,GACxCgD,EAAW9/E,KAAK+vE,YAGZ/vE,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAE5C,GADI4hB,EAAiB6gD,EAAS7gD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAaqB,KAC5C,CACZ9T,EAAOnR,KAAKmgF,sBAAsBriD,EAAU5rB,EAAM2tE,EAAU1tE,EAAON,GACnE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEN/K,KAAKL,OAAOy7C,cAGrB,GAAI8kC,EACFH,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,EAAQ,OAC7C,CAGL,GAFAC,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,GAC1CE,EAAYhgF,KAAK+vE,cACbkQ,EAAan8D,EAAAuF,KAAKoqC,kBAAkBqsB,EAAUE,GAAW,IAiB3D,OALAhgF,KAAKqN,MACHwW,EAAApZ,eAAe21E,8CACfvuE,EAAW9G,MAAO,IAAK+0E,EAASp0E,WAAYs0E,EAAUt0E,YAExD1L,KAAK+vE,YAAc+M,EACZn9E,EAAOy7C,cAhBdykC,EAAW7/E,KAAK89E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP/tE,GAEF6tE,EAAY//E,KAAK89E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP9tE,GAWN,OAAQnS,KAAK+vE,YAAYliE,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASqtC,OAAQ8J,EAAUE,GAChD,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAASg4C,OACT3uB,EAAArpB,SAASqtC,OACb8J,EACAE,GAEF,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASg4C,OAAQb,EAAUE,GAChD,MAEF,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASi4C,OAAQd,EAAUE,GAChD,MAEF,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASk4C,OAAQf,EAAUE,GAChD,MAEF,QACE31E,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlB,MAEF,KAAK5tC,EAAAC,MAAM2rD,aAAc8mB,GAAW,EACpC,KAAK1yE,EAAAC,MAAM4Y,MAKT,GAJAw5D,EAAW7/E,KAAK+0E,kBAAkB7iE,EAAM4qE,GACxCgD,EAAW9/E,KAAK+vE,YAGZ/vE,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAE5C,GADI4hB,EAAiB6gD,EAAS7gD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAasB,KAC5C,CACZ/T,EAAOnR,KAAKmgF,sBAAsBriD,EAAU5rB,EAAM2tE,EAAU1tE,EAAON,GACnE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEN/K,KAAKL,OAAOy7C,cAGrB,GAAI8kC,EACFH,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,EAAQ,GAClDE,EAAYhgF,KAAK+vE,gBACZ,CAGL,GAFAgQ,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,GAC1CE,EAAYhgF,KAAK+vE,cACbkQ,EAAan8D,EAAAuF,KAAKoqC,kBAAkBqsB,EAAUE,GAAW,IAiB3D,OALAhgF,KAAKqN,MACHwW,EAAApZ,eAAe21E,8CACfvuE,EAAW9G,MAAO,IAAK+0E,EAASp0E,WAAYs0E,EAAUt0E,YAExD1L,KAAK+vE,YAAc+M,EACZn9E,EAAOy7C,cAhBdykC,EAAW7/E,KAAK89E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP/tE,GAEF6tE,EAAY//E,KAAK89E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP9tE,GAWN,OAAQnS,KAAK+vE,YAAYliE,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASm4C,OAAQhB,EAAUE,GAChD,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAASo4C,OACT/uB,EAAArpB,SAASm4C,OACbhB,EACAE,GAEF,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASo4C,OAAQjB,EAAUE,GAChD,MAEF,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASq4C,OAAQlB,EAAUE,GAChD,MAEF,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASs4C,OAAQnB,EAAUE,GAChD,MAEF,QACE31E,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlB,MAEF,KAAK5tC,EAAAC,MAAM4rD,gBAAiB6mB,GAAW,EACvC,KAAK1yE,EAAAC,MAAM0qD,SAKT,GAJA0nB,EAAW7/E,KAAK+0E,kBAAkB7iE,EAAM4qE,GACxCgD,EAAW9/E,KAAK+vE,YAGZ/vE,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAE5C,GADI4hB,EAAiB6gD,EAAS7gD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAauB,KAC5C,CACZhU,EAAOnR,KAAKmgF,sBAAsBriD,EAAU5rB,EAAM2tE,EAAU1tE,EAAON,GACnE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEN/K,KAAKL,OAAOy7C,cAGrB,GAAI8kC,EACFL,EAAW7/E,KAAK+9E,uBAAuB8B,EAAUC,GACjDC,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,EAAQ,OAC7C,CAGL,GAFAC,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,GAC1CE,EAAYhgF,KAAK+vE,cACbkQ,EAAan8D,EAAAuF,KAAKoqC,kBAAkBqsB,EAAUE,GAAW,IAiB3D,OALAhgF,KAAKqN,MACHwW,EAAApZ,eAAe21E,8CACfvuE,EAAW9G,MAAO,IAAK+0E,EAASp0E,WAAYs0E,EAAUt0E,YAExD1L,KAAK+vE,YAAc+M,EACZn9E,EAAOy7C,cAhBdykC,EAAW7/E,KAAK89E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP/tE,GAEF6tE,EAAY//E,KAAK89E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP9tE,GAWN,OAAQnS,KAAK+vE,YAAYliE,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASmlC,OAAQgS,EAAUE,GAChD,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAASu4C,OACTlvB,EAAArpB,SAASmlC,OACbgS,EACAE,GAEF,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASu4C,OAAQpB,EAAUE,GAChD,MAEF,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASw4C,OAAQrB,EAAUE,GAChD,MAEF,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASy4C,OAAQtB,EAAUE,GAChD,MAEF,QACE31E,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlB,MAEF,KAAK5tC,EAAAC,MAAM6rD,yBAA0B4mB,GAAW,EAChD,KAAK1yE,EAAAC,MAAMyqD,kBAKT,GAJA2nB,EAAW7/E,KAAK+0E,kBAAkB7iE,EAAM4qE,GACxCgD,EAAW9/E,KAAK+vE,YAGZ/vE,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAE5C,GADI4hB,EAAiB6gD,EAAS7gD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAawB,KAC5C,CACZjU,EAAOnR,KAAKmgF,sBAAsBriD,EAAU5rB,EAAM2tE,EAAU1tE,EAAON,GACnE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEN/K,KAAKL,OAAOy7C,cAGrB,IAAIniB,OAAQ,EAGZ,GAAyB,IAArBj5B,KAAK+vE,YAAYliE,MAGnB,GAFAkyE,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2R,EAAAuF,KAAKxlB,IAAG,GAClDm8E,EAAYhgF,KAAK+vE,cACX92C,EAAWj5B,KAAKywE,gBAAiB,CAErC,KADI2Q,EAAYphF,KAAKu2B,QAAQpJ,aAAa5f,EAAAvK,cAAcwE,QACxC,CACdxH,KAAKqN,MACHwW,EAAApZ,eAAeu3D,mBACfnwD,EAAW9G,MAAO,SAEpBoG,EAAOxR,EAAOy7C,cACd,MAGF,KADIn5C,EAAYm/E,EAAUzqE,QAAUyqE,EAAUzqE,QAAQzV,IAAIqM,EAAAvK,cAAcqF,KAAO,MAC/D,CACdrI,KAAKqN,MACHwW,EAAApZ,eAAeu3D,mBACfnwD,EAAW9G,MAAO,aAEpBoG,EAAOxR,EAAOy7C,cACd,MAEFhxC,OAAOnI,EAAU4L,MAAQikD,EAAAlrC,YAAYqK,oBACrCjxB,KAAKywE,eAAiBx3C,EAAWj5B,KAAK+nB,SAASmJ,gBAAmCjvB,EAAW,YAc/F,GARA49E,EAAW7/E,KAAK89E,kBAAkB+B,EAChC7/E,KAAK+vE,YAAajsD,EAAAuF,KAAKvlB,KACvB,GAAO,EACPoO,GAEF4tE,EAAW9/E,KAAK+vE,YAChBgQ,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2R,EAAAuF,KAAKvlB,IAAG,GAClDk8E,EAAYhgF,KAAK+vE,cACX92C,EAAWj5B,KAAK0wE,gBAAiB,CAErC,KADI0Q,EAAYphF,KAAKu2B,QAAQpJ,aAAa5f,EAAAvK,cAAcuE,OACxC,CACdvH,KAAKqN,MACHwW,EAAApZ,eAAeu3D,mBACfnwD,EAAW9G,MAAO,QAEpBoG,EAAOxR,EAAOy7C,cACd,MAGF,KADIn5C,EAAYm/E,EAAUzqE,QAAUyqE,EAAUzqE,QAAQzV,IAAIqM,EAAAvK,cAAcqF,KAAO,MAC/D,CACdrI,KAAKqN,MACHwW,EAAApZ,eAAeu3D,mBACfnwD,EAAW9G,MAAO,YAEpBoG,EAAOxR,EAAOy7C,cACd,MAEFhxC,OAAOnI,EAAU4L,MAAQikD,EAAAlrC,YAAYqK,oBACrCjxB,KAAK0wE,eAAiBz3C,EAAWj5B,KAAK+nB,SAASmJ,gBAAmCjvB,EAAW,MAM/FkP,EAHI8nB,GAAYj5B,KAAKi2E,gBAAgBh9C,GAG9Bj5B,KAAKqhF,eAAepoD,EAAU,CAAE4mD,EAAUE,GAAaluE,GAFvDlS,EAAOy7C,cAIhB,MAEF,KAAK5tC,EAAAC,MAAM8rD,aAAc2mB,GAAW,EACpC,KAAK1yE,EAAAC,MAAM2qD,MAKT,GAJAynB,EAAW7/E,KAAK+0E,kBAAkB7iE,EAAM4qE,GACxCgD,EAAW9/E,KAAK+vE,YAGZ/vE,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAE5C,GADI4hB,EAAiB6gD,EAAS7gD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAayB,KAC5C,CACZlU,EAAOnR,KAAKmgF,sBAAsBriD,EAAU5rB,EAAM2tE,EAAU1tE,EAAON,GACnE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEN/K,KAAKL,OAAOy7C,cAGrB,GAAI8kC,EACFL,EAAW7/E,KAAK+9E,uBAAuB8B,EAAUC,GACjDC,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,EAAQ,GAClDE,EAAYhgF,KAAK+vE,gBACZ,CAGL,GAFAgQ,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,GAC1CE,EAAYhgF,KAAK+vE,cACbkQ,EAAan8D,EAAAuF,KAAKoqC,kBAAkBqsB,EAAUE,GAAW,IAiB3D,OALAhgF,KAAKqN,MACHwW,EAAApZ,eAAe21E,8CACfvuE,EAAW9G,MAAO,IAAK+0E,EAASp0E,WAAYs0E,EAAUt0E,YAExD1L,KAAK+vE,YAAc+M,EACZn9E,EAAOy7C,cAhBdykC,EAAW7/E,KAAK89E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP/tE,GAEF6tE,EAAY//E,KAAK89E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP9tE,GAWN,OAAQnS,KAAK+vE,YAAYliE,MACvB,OACA,OACA,OACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS44C,OAAQzB,EAAUE,GAChD,MAEF,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAAS64C,OACTxvB,EAAArpB,SAAS44C,OACbzB,EACAE,GAEF,MAEF,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS64C,OAAQ1B,EAAUE,GAChD,MAEF,OACA,OACA,QAIA,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASwlC,OAAQ2R,EAAUE,GAChD,MAEF,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAAS84C,OACTzvB,EAAArpB,SAASwlC,OACb2R,EACAE,GAEF,MAEF,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS84C,OAAQ3B,EAAUE,GAChD,MAEF,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS+4C,OAAQ5B,EAAUE,GAChD,MAEF,QACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASg5C,OAAQ7B,EAAUE,GAChD,MAEF,QACE31E,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlB,MAEF,KAAK5tC,EAAAC,MAAM+rD,eAAgB0mB,GAAW,EACtC,KAAK1yE,EAAAC,MAAM4qD,QAKT,GAJAwnB,EAAW7/E,KAAK+0E,kBAAkB7iE,EAAM4qE,GACxCgD,EAAW9/E,KAAK+vE,YAGZ/vE,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAE5C,GADI4hB,EAAiB6gD,EAAS7gD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAa0B,KAC5C,CACZnU,EAAOnR,KAAKmgF,sBAAsBriD,EAAU5rB,EAAM2tE,EAAU1tE,EAAON,GACnE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEN/K,KAAKL,OAAOy7C,cAGrB,GAAI8kC,EACFL,EAAW7/E,KAAK+9E,uBAAuB8B,EAAUC,GACjDC,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,EAAQ,GAClDE,EAAYhgF,KAAK+vE,gBACZ,CAGL,GAFAgQ,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,GAC1CE,EAAYhgF,KAAK+vE,cACbkQ,EAAan8D,EAAAuF,KAAKoqC,kBAAkBqsB,EAAUE,GAAW,IAiB3D,OALAhgF,KAAKqN,MACHwW,EAAApZ,eAAe21E,8CACfvuE,EAAW9G,MAAO,IAAK+0E,EAASp0E,WAAYs0E,EAAUt0E,YAExD1L,KAAK+vE,YAAc+M,EACZn9E,EAAOy7C,cAhBdykC,EAAW7/E,KAAK89E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP/tE,GAEF6tE,EAAY//E,KAAK89E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP9tE,GAWN,OAAQnS,KAAK+vE,YAAYliE,MACvB,OACA,OAIA,OACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASylC,OAAQ0R,EAAUE,GAChD,MAEF,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAASi5C,OACT5vB,EAAArpB,SAASylC,OACb0R,EACAE,GAEF,MAEF,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASi5C,OAAQ9B,EAAUE,GAChD,MAEF,OACA,OACA,QAIA,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS0lC,OAAQyR,EAAUE,GAChD,MAEF,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAASk5C,OACT7vB,EAAArpB,SAAS0lC,OACbyR,EACAE,GAEF,MAEF,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASk5C,OAAQ/B,EAAUE,GAChD,MAEF,QAEE,KADI9mD,EAAWj5B,KAAKuwE,gBACL,CAEb,KADI6Q,EAAYphF,KAAKu2B,QAAQpJ,aAAa5f,EAAAvK,cAAcwE,QACxC,CACdxH,KAAKqN,MACHwW,EAAApZ,eAAeu3D,mBACfnwD,EAAW9G,MAAO,SAEpBoG,EAAOxR,EAAOy7C,cACd,MAGF,KADIn5C,EAAYm/E,EAAUzqE,QAAUyqE,EAAUzqE,QAAQzV,IAAIqM,EAAAvK,cAAcsF,KAAO,MAC/D,CACdtI,KAAKqN,MACHwW,EAAApZ,eAAeu3D,mBACfnwD,EAAW9G,MAAO,aAEpBoG,EAAOxR,EAAOy7C,cACd,MAEFhxC,OAAOnI,EAAU4L,MAAQikD,EAAAlrC,YAAYqK,oBACrCjxB,KAAKuwE,eAAiBt3C,EAAWj5B,KAAK+nB,SAASmJ,gBAAmCjvB,EAAW,MAK7FkP,EAHI8nB,GAAYj5B,KAAKi2E,gBAAgBh9C,GAG9Bj5B,KAAKqhF,eAAepoD,EAAU,CAAE4mD,EAAUE,GAAaluE,GAFvDlS,EAAOy7C,cAIhB,MAEF,QAEE,KADIniB,EAAWj5B,KAAKwwE,gBACL,CACb,IAAI4Q,EASAn/E,EARJ,KADIm/E,EAAYphF,KAAKu2B,QAAQpJ,aAAa5f,EAAAvK,cAAcuE,OACxC,CACdvH,KAAKqN,MACHwW,EAAApZ,eAAeu3D,mBACfnwD,EAAW9G,MAAO,QAEpBoG,EAAOxR,EAAOy7C,cACd,MAGF,KADIn5C,EAAYm/E,EAAUzqE,QAAUyqE,EAAUzqE,QAAQzV,IAAIqM,EAAAvK,cAAcsF,KAAO,MAC/D,CACdtI,KAAKqN,MACHwW,EAAApZ,eAAeu3D,mBACfnwD,EAAW9G,MAAO,YAEpBoG,EAAOxR,EAAOy7C,cACd,MAEFhxC,OAAOnI,EAAU4L,MAAQikD,EAAAlrC,YAAYqK,oBACrCjxB,KAAKwwE,eAAiBv3C,EAAWj5B,KAAK+nB,SAASmJ,gBAAmCjvB,EAAW,MAK7FkP,EAHI8nB,GAAYj5B,KAAKi2E,gBAAgBh9C,GAG9Bj5B,KAAKqhF,eAAepoD,EAAU,CAAE4mD,EAAUE,GAAaluE,GAFvDlS,EAAOy7C,cAIhB,MAEF,QACEhxC,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlB,MAEF,KAAK5tC,EAAAC,MAAMgsD,yBAA0BymB,GAAW,EAChD,KAAK1yE,EAAAC,MAAM+qD,kBAKT,GAJAqnB,EAAW7/E,KAAK+0E,kBAAkB7iE,EAAM4qE,EAAe+E,SACvD/B,EAAW9/E,KAAK+vE,YAGZ/vE,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAE5C,GADI4hB,EAAiB6gD,EAAS7gD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAasC,aAC5C,CACZ/U,EAAOnR,KAAKmgF,sBAAsBriD,EAAU5rB,EAAM2tE,EAAU1tE,EAAON,GACnE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEN/K,KAAKL,OAAOy7C,cAKrB,OAFA2kC,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,EAAQ,GAClDE,EAAYhgF,KAAK+vE,YACT/vE,KAAK+vE,YAAYliE,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASqlC,OAAQ8R,EAAUE,GAChD,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASo5C,OAAQjC,EAAUE,GAChD,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAASo5C,OACT/vB,EAAArpB,SAASqlC,OACb8R,EACAE,GAEF,MAEF,QACA,QAKE,OAJA//E,KAAKqN,MACHwW,EAAApZ,eAAes3E,2CACflwE,EAAW9G,MAAOyC,EAAAgqD,sBAAsB3lD,EAAWI,UAAWjS,KAAK+vE,YAAYrkE,YAE1E/L,EAAOy7C,cAEhB,QACEhxC,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlB,MAEF,KAAK5tC,EAAAC,MAAMisD,+BAAgCwmB,GAAW,EACtD,KAAK1yE,EAAAC,MAAMgrD,wBAKT,GAJAonB,EAAW7/E,KAAK+0E,kBAAkB7iE,EAAM4qE,EAAe+E,SACvD/B,EAAW9/E,KAAK+vE,YAGZ/vE,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAE5C,GADI4hB,EAAiB6gD,EAAS7gD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAakC,aAC5C,CACZ3U,EAAOnR,KAAKmgF,sBAAsBriD,EAAU5rB,EAAM2tE,EAAU1tE,EAAON,GACnE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEN/K,KAAKL,OAAOy7C,cAMrB,OAHAykC,EAAW7/E,KAAK+9E,uBAAuB8B,EAAUC,GACjDC,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,EAAQ,GAClDE,EAAYhgF,KAAK+vE,YACT/vE,KAAK+vE,YAAYliE,MACvB,OACA,OAIA,OACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASslC,OAAQ6R,EAAUE,GAChD,MAEF,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASs5C,OAAQnC,EAAUE,GAChD,MAEF,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAASs5C,OACTjwB,EAAArpB,SAASslC,OACb6R,EACAE,GAEF,MAEF,OACA,OACA,QAIA,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASulC,OAAQ4R,EAAUE,GAChD,MAEF,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASu5C,OAAQpC,EAAUE,GAChD,MAEF,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAASu5C,OACTlwB,EAAArpB,SAASulC,OACb4R,EACAE,GAEF,MAEF,QACA,QAKE,OAJA//E,KAAKqN,MACHwW,EAAApZ,eAAes3E,2CACflwE,EAAW9G,MAAOyC,EAAAgqD,sBAAsB3lD,EAAWI,UAAWjS,KAAK+vE,YAAYrkE,YAE1E/L,EAAOy7C,cAEhB,QACEhxC,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlB,MAEF,KAAK5tC,EAAAC,MAAMksD,2CAA4CumB,GAAW,EAClE,KAAK1yE,EAAAC,MAAMirD,oCAKT,GAJAmnB,EAAW7/E,KAAK+0E,kBAAkB7iE,EAAM4qE,EAAe+E,SACvD/B,EAAW9/E,KAAK+vE,YAGZ/vE,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAE5C,GADI4hB,EAAiB6gD,EAAS7gD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAamC,eAC5C,CACZ5U,EAAOnR,KAAKmgF,sBAAsBriD,EAAU5rB,EAAM2tE,EAAU1tE,EAAON,GACnE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEN/K,KAAKL,OAAOy7C,cAMrB,OAHAykC,EAAW7/E,KAAK+9E,uBAAuB8B,EAAUC,GACjDC,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,EAAQ,GAClDE,EAAYhgF,KAAK+vE,YACT/vE,KAAK+vE,YAAYliE,MACvB,OACA,OACA,QACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASulC,OAAQ4R,EAAUE,GAElD,OACA,OACA,OACA,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASulC,OAAQ4R,EAAUE,GAChD,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASu5C,OAAQpC,EAAUE,GAChD,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAASu5C,OACTlwB,EAAArpB,SAASulC,OACb4R,EACAE,GAEF,MAEF,QACA,QAKE,OAJA//E,KAAKqN,MACHwW,EAAApZ,eAAes3E,2CACflwE,EAAW9G,MAAOyC,EAAAgqD,sBAAsB3lD,EAAWI,UAAWjS,KAAK+vE,YAAYrkE,YAE1E/L,EAAOy7C,cAEhB,QACEhxC,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlB,MAEF,KAAK5tC,EAAAC,MAAMmsD,iBAAkBsmB,GAAW,EACxC,KAAK1yE,EAAAC,MAAMkrD,UAKT,GAJAknB,EAAW7/E,KAAK+0E,kBAAkB7iE,EAAM4qE,EAAe+E,SACvD/B,EAAW9/E,KAAK+vE,YAGZ/vE,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAE5C,GADI4hB,EAAiB6gD,EAAS7gD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAa2B,aAC5C,CACZpU,EAAOnR,KAAKmgF,sBAAsBriD,EAAU5rB,EAAM2tE,EAAU1tE,EAAON,GACnE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEN/K,KAAKL,OAAOy7C,cAGrB,GAAI8kC,EACFH,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,EAAQ,GAClDE,EAAYhgF,KAAK+vE,gBACZ,CAGL,GAFAgQ,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,GAC1CE,EAAYhgF,KAAK+vE,cACbkQ,EAAan8D,EAAAuF,KAAKoqC,kBAAkBqsB,EAAUE,GAAW,IAiB3D,OALAhgF,KAAKqN,MACHwW,EAAApZ,eAAe21E,8CACfvuE,EAAW9G,MAAO,IAAK+0E,EAASp0E,WAAYs0E,EAAUt0E,YAExD1L,KAAK+vE,YAAc+M,EACZn9E,EAAOy7C,cAhBdykC,EAAW7/E,KAAK89E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP/tE,GAEF6tE,EAAY//E,KAAK89E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP9tE,GAWN,OAAQnS,KAAK+vE,YAAYliE,MACvB,OACA,OACA,OACA,OACA,OACA,QACA,OACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASolC,OAAQ+R,EAAUE,GAChD,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASw5C,OAAQrC,EAAUE,GAChD,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAASw5C,OACTnwB,EAAArpB,SAASolC,OACb+R,EACAE,GAEF,MAEF,QACA,QAKE,OAJA//E,KAAKqN,MACHwW,EAAApZ,eAAes3E,2CACflwE,EAAW9G,MAAOyC,EAAAgqD,sBAAsB3lD,EAAWI,UAAWjS,KAAK+vE,YAAYrkE,YAE1E/L,EAAOy7C,cAEhB,QACEhxC,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlB,MAEF,KAAK5tC,EAAAC,MAAMosD,WAAYqmB,GAAW,EAClC,KAAK1yE,EAAAC,MAAMmrD,IAKT,GAJAinB,EAAW7/E,KAAK+0E,kBAAkB7iE,EAAM4qE,EAAe+E,SACvD/B,EAAW9/E,KAAK+vE,YAGZ/vE,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAE5C,GADI4hB,EAAiB6gD,EAAS7gD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAa4B,YAC5C,CACZrU,EAAOnR,KAAKmgF,sBAAsBriD,EAAU5rB,EAAM2tE,EAAU1tE,EAAON,GACnE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEN/K,KAAKL,OAAOy7C,cAGrB,GAAI8kC,EACFH,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,EAAQ,GAClDE,EAAYhgF,KAAK+vE,gBACZ,CAGL,GAFAgQ,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,GAC1CE,EAAYhgF,KAAK+vE,cACbkQ,EAAan8D,EAAAuF,KAAKoqC,kBAAkBqsB,EAAUE,GAAW,IAiB3D,OALAhgF,KAAKqN,MACHwW,EAAApZ,eAAe21E,8CACfvuE,EAAW9G,MAAO,IAAK+0E,EAASp0E,WAAYs0E,EAAUt0E,YAExD1L,KAAK+vE,YAAc+M,EACZn9E,EAAOy7C,cAhBdykC,EAAW7/E,KAAK89E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP/tE,GAEF6tE,EAAY//E,KAAK89E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP9tE,GAWN,OAAQnS,KAAK+vE,YAAYliE,MACvB,OACA,OACA,OACA,OACA,QACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASy5C,MAAOtC,EAAUE,GAC/C,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASy5C,MAAOtC,EAAUE,GAC/C,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS05C,MAAOvC,EAAUE,GAC/C,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAAS05C,MACTrwB,EAAArpB,SAASy5C,MACbtC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA//E,KAAKqN,MACHwW,EAAApZ,eAAes3E,2CACflwE,EAAW9G,MAAOyC,EAAAgqD,sBAAsB3lD,EAAWI,UAAWjS,KAAK+vE,YAAYrkE,YAE1E/L,EAAOy7C,cAEhB,QACEhxC,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlB,MAEF,KAAK5tC,EAAAC,MAAMqsD,aAAcomB,GAAW,EACpC,KAAK1yE,EAAAC,MAAMorD,MAKT,GAJAgnB,EAAW7/E,KAAK+0E,kBAAkB7iE,EAAM4qE,EAAe+E,SACvD/B,EAAW9/E,KAAK+vE,YAGZ/vE,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAC5C,IAAI4hB,EAEEnB,EADN,GADImB,EAAiB6gD,EAAS7gD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAa6B,aAC5C,CACZtU,EAAOnR,KAAKmgF,sBAAsBriD,EAAU5rB,EAAM2tE,EAAU1tE,EAAON,GACnE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEN/K,KAAKL,OAAOy7C,cAGrB,GAAI8kC,EACFH,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,EAAQ,GAClDE,EAAYhgF,KAAK+vE,gBACZ,CAGL,GAFAgQ,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,GAC1CE,EAAYhgF,KAAK+vE,cACbkQ,EAAan8D,EAAAuF,KAAKoqC,kBAAkBqsB,EAAUE,GAAW,IAiB3D,OALAhgF,KAAKqN,MACHwW,EAAApZ,eAAe21E,8CACfvuE,EAAW9G,MAAO,IAAK+0E,EAASp0E,WAAYs0E,EAAUt0E,YAExD1L,KAAK+vE,YAAc+M,EACZn9E,EAAOy7C,cAhBdykC,EAAW7/E,KAAK89E,kBAAkB+B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP/tE,GAEF6tE,EAAY//E,KAAK89E,kBAAkBiC,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP9tE,GAWN,OAAQnS,KAAK+vE,YAAYliE,MACvB,OACA,OACA,OACA,OACA,QACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS25C,OAAQxC,EAAUE,GAChD,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS25C,OAAQxC,EAAUE,GAChD,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS45C,OAAQzC,EAAUE,GAChD,MAEF,OACA,OACE5uE,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAAS45C,OACTvwB,EAAArpB,SAAS25C,OACbxC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA//E,KAAKqN,MACHwW,EAAApZ,eAAes3E,2CACflwE,EAAW9G,MAAOyC,EAAAgqD,sBAAsB3lD,EAAWI,UAAWjS,KAAK+vE,YAAYrkE,YAE1E/L,EAAOy7C,cAEhB,QACEhxC,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlB,MAKF,KAAK5tC,EAAAC,MAAMurD,oBACT,IAAIl+B,EAAO96B,KAAKmxE,YACZqO,EAAqC,GAAdhE,EAC3BqE,EAAW7/E,KAAK+0E,kBAAkB7iE,EAAM4qE,EAAe4C,WAAYF,GACnEM,EAAW9/E,KAAK+vE,YAEhB,IAAIwS,EAAYznD,EAAK4tC,OAOrB,GANA1oE,KAAKmxE,YAAcoR,EACnBA,EAAUlX,qBAAqBwU,GAC/BE,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,EAA8B,EAApBN,GACpDQ,EAAYF,EAGRhD,GAAkBh5D,EAAAuF,KAAKzlB,MAAQk5E,GAAkBh5D,EAAAuF,KAAKG,KACxDu2D,EAAY//E,KAAKwiF,6BAA6BD,EAAWxC,EAAWC,GACpEuC,EAAUzY,mBACV9pE,KAAKmxE,YAAcr2C,EACnB96B,KAAK+vE,YAAcjsD,EAAAuF,KAAKzlB,KACxBuN,EAAOxR,EAAOy6C,GACZp6C,KAAKu6E,cAAcsF,EAAUC,GAC7B9/E,KAAKu6E,cAAcwF,EAAWC,GAC9BrgF,EAAOyD,IAAI,SAIR,GAAI08E,EAASzM,UAAW,CAC7B,IAAIoP,EAAyBziF,KAAKswE,oBAAoBrnD,IAAI42D,GACtD6C,EAA0B1iF,KAAKswE,oBAAoBrnD,IAAI82D,GACvDpJ,EAAO77C,EAAK+tC,aAAaiX,GAC7BD,EAAWlgF,EAAOg4C,UAAUg/B,EAAKn+C,MAAOqnD,GAIxC,IAAI8C,GAAmB,EACnBF,GAA0BC,EACvBD,GAGH1C,EAAY//E,KAAKszE,WAAWyM,GAC5B2C,GAA0B,GAH1BC,GAAmB,EAKC,GAAXnH,IACXuE,EAAY//E,KAAK4iF,gBAAgB7C,EAAWwC,EAAWznD,IAGzD,IAAI+nD,EAAa,IAAI57E,MACjBw7E,GACFI,EAAWjR,QACT5xE,KAAK8iF,YACHnjF,EAAO83C,UAAUk/B,EAAKn+C,MAAOsnD,EAASnsB,kBAI5CosB,EAAY//E,KAAKwiF,6BAA6BD,EAAWxC,EAAWC,EAAW6C,GAC/EN,EAAUzY,mBACV9pE,KAAKmxE,YAAcr2C,EAEnB3pB,EAAOxR,EAAOy6C,GACZp6C,KAAKu6E,cAAcsF,EAAUC,GAC7BC,EACA4C,EACI3iF,KAAKszE,WACH3zE,EAAO83C,UAAUk/B,EAAKn+C,MAAOsnD,EAASnsB,iBAExCh0D,EAAO83C,UAAUk/B,EAAKn+C,MAAOsnD,EAASnsB,kBAExC8uB,GAA0BC,IAAyB1iF,KAAKswE,oBAAoB7mD,IAAItY,GAChFwlE,GAAM77C,EAAKwuC,cAAcqN,QAS7B,GALAoJ,EAAY//E,KAAKwiF,6BAA6BD,EAAWxC,EAAWC,GACpEuC,EAAUzY,mBACV9pE,KAAKmxE,YAAcr2C,EAGf3pB,EAAOxR,EAAOwkD,gBAAgB07B,GAAU,EAAM,GAChD1uE,EAAOxR,EAAOy6C,GACZp6C,KAAKu6E,cAAcsF,EAAU7/E,KAAK+vE,aAClCgQ,EACA5uE,OAIG,CACL,IAAIyqE,EAAY9gD,EAAK+tC,aAAaiX,GAC7BhlD,EAAK+wC,YAAYgU,EAAUC,IAAWhlD,EAAKsuC,aAAawS,EAAUpjD,MAAOvU,EAAA4jD,WAAWiE,SACrFhxC,EAAKswC,UAAUyU,EAAUC,IAAWhlD,EAAKsuC,aAAawS,EAAUpjD,MAAOvU,EAAA4jD,WAAW9C,SACtF5zD,EAAOxR,EAAOy6C,GACZp6C,KAAKu6E,cAAc56E,EAAOg4C,UAAUikC,EAAUpjD,MAAOqnD,GAAWC,GAChEC,EACApgF,EAAO83C,UAAUmkC,EAAUpjD,MAAOsnD,EAASnsB,iBAIjD3zD,KAAK+vE,YAAc+P,EACnB,MAEF,KAAKtyE,EAAAC,MAAMwrD,QACLn+B,EAAO96B,KAAKmxE,YACZqO,EAAqC,GAAdhE,EAC3BqE,EAAW7/E,KAAK+0E,kBAAkB7iE,EAAM4qE,EAAe4C,WAAYF,GACnEM,EAAW9/E,KAAK+vE,YAEZwS,EAAYznD,EAAK4tC,OAOrB,GANA1oE,KAAKmxE,YAAcoR,EACnBA,EAAU/W,sBAAsBqU,GAChCE,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO2tE,EAA8B,EAApBN,GACpDQ,EAAYF,EAGRhD,GAAkBh5D,EAAAuF,KAAKzlB,MAAQk5E,GAAkBh5D,EAAAuF,KAAKG,KACxDu2D,EAAY//E,KAAKwiF,6BAA6BD,EAAWxC,EAAWD,GACpEyC,EAAUzY,mBACV9pE,KAAKmxE,YAAcr2C,EACnB96B,KAAK+vE,YAAcjsD,EAAAuF,KAAKzlB,KACxBuN,EAAOxR,EAAOy6C,GACZp6C,KAAKu6E,cAAcsF,EAAUC,GAC7BngF,EAAOyD,IAAI,GACXpD,KAAKu6E,cAAcwF,EAAWC,SAI3B,GAAIF,EAASzM,UAAW,CACzBoP,EAAyBziF,KAAKswE,oBAAoBrnD,IAAI42D,GACtD6C,EAA0B1iF,KAAKswE,oBAAoBrnD,IAAI82D,GACvDpJ,EAAO77C,EAAK+tC,aAAaiX,GAC7BD,EAAWlgF,EAAOg4C,UAAUg/B,EAAKn+C,MAAOqnD,GAIxC,IAAIkD,GAAmB,EACnBN,GAA0BC,EACvBD,GAGH1C,EAAY//E,KAAKszE,WAAWyM,GAC5B2C,GAA0B,GAH1BK,GAAmB,EAKC,GAAXvH,IACXuE,EAAY//E,KAAK4iF,gBAAgB7C,EAAWwC,EAAWznD,IAGrD+nD,EAAa,IAAI57E,MACjBw7E,GAGFI,EAAWjR,QACT5xE,KAAK8iF,YACHnjF,EAAO83C,UAAUk/B,EAAKn+C,MAAOsnD,EAASnsB,kBAI5CosB,EAAY//E,KAAKwiF,6BAA6BD,EAAWxC,EAAWC,EAAW6C,GAC/EN,EAAUzY,mBACV9pE,KAAKmxE,YAAcr2C,EAEnB3pB,EAAOxR,EAAOy6C,GACZp6C,KAAKu6E,cAAcsF,EAAUC,GAC7BiD,EACI/iF,KAAKszE,WACH3zE,EAAO83C,UAAUk/B,EAAKn+C,MAAOsnD,EAASnsB,iBAExCh0D,EAAO83C,UAAUk/B,EAAKn+C,MAAOsnD,EAASnsB,gBAC1CosB,IAEE0C,GAA0BC,IAAyB1iF,KAAKswE,oBAAoB7mD,IAAItY,GAChFwlE,GAAM77C,EAAKwuC,cAAcqN,QAS7B,GALAoJ,EAAY//E,KAAKwiF,6BAA6BD,EAAWxC,EAAWC,GACpEuC,EAAUzY,mBACV9pE,KAAKmxE,YAAcr2C,EAGf3pB,EAAOxR,EAAOwkD,gBAAgB07B,GAAU,EAAM,GAChD1uE,EAAOxR,EAAOy6C,GACZp6C,KAAKu6E,cAAcsF,EAAUC,GAC7B3uE,EACA4uE,OAIG,CACDnE,EAAY9gD,EAAKyuC,oBAAoBuW,GACpChlD,EAAK+wC,YAAYgU,EAAUC,IAAWhlD,EAAKsuC,aAAawS,EAAUpjD,MAAOvU,EAAA4jD,WAAWiE,SACrFhxC,EAAKswC,UAAUyU,EAAUC,IAAWhlD,EAAKsuC,aAAawS,EAAUpjD,MAAOvU,EAAA4jD,WAAW9C,SACtF5zD,EAAOxR,EAAOy6C,GACZp6C,KAAKu6E,cAAc56E,EAAOg4C,UAAUikC,EAAUpjD,MAAOqnD,GAAWC,GAChEngF,EAAO83C,UAAUmkC,EAAUpjD,MAAOsnD,EAASnsB,gBAC3CosB,GAIN//E,KAAK+vE,YAAc+P,EACnB,MAEF,QACE11E,QAAO,GACP+G,EAAOnR,KAAKL,OAAOy7C,cAGvB,IAAK8kC,EAAU,OAAO/uE,EACtB,IAAI4W,EAAW/nB,KAAK+nB,SAChB4V,EAAS5V,EAASi7C,kBAAkB9wD,EAAMlS,KAAKmxE,aACnD,OAAKxzC,EACE39B,KAAKgjF,eACVrlD,EACAxsB,EACAe,EACA6V,EAAS04C,sBACT14C,EAAS24C,yBACToc,GAAkBh5D,EAAAuF,KAAKG,MAPL7pB,EAAOy7C,eAW7Bw0B,EAAA3tE,UAAAghF,qBAAA,SACErb,EACAtmE,EACAmyE,EACAlN,GAIA,OAAOvmE,KAAKqhF,eAAezZ,EAAkB,CAAE6L,GAAalN,GAAY,IAG1EqJ,EAAA3tE,UAAAk+E,sBAAA,SACEvY,EACA11D,EACA2tE,EACA1tE,EACAo0D,GAEA,IAAIyZ,EACJ,GAAIpY,EAAiBvqD,GAAG9P,EAAAlL,YAAY2zB,UAAW,CAC7C,IAAI5N,EAAgBhe,OAAOw9D,EAAiBpnD,QAASpW,OAAOge,EAAcva,MAAQikD,EAAAlrC,YAAYxH,OAC9F4gE,EAAYpY,EAAiB1tD,UAAUwgB,eAAe,QAUtDslD,EAAYpY,EAAiB1tD,UAAUwgB,eAAe,GAExD,IAAIqlD,EAAY//E,KAAK+0E,kBAAkB5iE,EAAO6tE,EAAS,GACvD,OAAOhgF,KAAKqhF,eAAezZ,EAAkB,CAAEiY,EAAUE,GAAaxZ,IAGxEqJ,EAAA3tE,UAAAw+E,kBAAA,SAAkB5uE,EAAwB0pE,EAA6BuB,GACrE,IACI/0D,EADU/nB,KAAKu2B,QACIxO,SACnB+S,EAAO96B,KAAKmxE,YACZxzC,EAAS5V,EAASi7C,kBAAkBnxD,EAAYipB,GACpD,IAAK6C,EAAQ,OAAO39B,KAAKL,OAAOy7C,cAChC,IAII2X,EAJAmwB,EAAiBn7D,EAAS04C,sBAC1BttD,EAAoB4U,EAAS24C,yBAIjC,OAAQ/iC,EAAO9vB,MACb,KAAKikD,EAAAlrC,YAAYhJ,OAEf,IAAK5d,KAAK6zE,cAAsBl2C,GAAS,OAAO39B,KAAKL,OAAOy7C,cAG9D,KAAK0W,EAAAlrC,YAAY6R,MACjB,KAAKq5B,EAAAlrC,YAAYgL,MACfmhC,EAAmCp1B,EAAQruB,KACvCquB,EAAOhP,aAAamjC,EAAAjrC,eAAe3I,SAASle,KAAKmjF,YAAYtxE,GACjE,MAEF,KAAKigD,EAAAlrC,YAAY4K,mBACf,IAAIE,EAAsCiM,EAAQjM,gBAClD,IAAKA,EAKH,OAJA1xB,KAAKqN,MACHwW,EAAApZ,eAAe24E,oEACfvxE,EAAW9G,MAAkB4yB,EAAQ7V,cAEhC9nB,KAAKL,OAAOy7C,cAGrB,KADIlf,EAAiBl8B,KAAK+nB,SAASmJ,gBAAgBQ,EAAiB,KAAM7nB,EAAA43D,UAAWz9C,EAAAu8C,WAAWQ,SAC3E,OAAO/gE,KAAKL,OAAOy7C,cACxChxC,OAAyD,GAAlD8xB,EAAehiB,UAAUwgB,eAAevuB,QAC/C4mD,EAAa72B,EAAehiB,UAAUwgB,eAAe,GACjDhJ,EAAgB/C,aAAamjC,EAAAjrC,eAAe3I,SAASle,KAAKmjF,YAAYtxE,GAC1E,MAEF,KAAKigD,EAAAlrC,YAAY+K,SACf,IAAIuK,EACJ,KADIA,EAA4ByB,EAAQzB,gBAMtC,OAJAl8B,KAAKqN,MACHwW,EAAApZ,eAAe24E,oEACfvxE,EAAW9G,MAAkB4yB,EAAQ7V,cAEhC9nB,KAAKL,OAAOy7C,cAErBhxC,OAAyD,GAAlD8xB,EAAehiB,UAAUwgB,eAAevuB,QAC/C4mD,EAAa72B,EAAehiB,UAAUwgB,eAAe,GACjDwB,EAAevN,aAAamjC,EAAAjrC,eAAe3I,SAASle,KAAKmjF,YAAYtxE,GACzE,MAEF,KAAKigD,EAAAlrC,YAAYxH,MACf,GAAIjM,EAAmB,CACrB,IAAIkwE,EAAcvoD,EAAKzd,GAAE,OAcrBimE,EAAqB3lD,EAAQF,eAAeq0B,EAAAluC,aAAakB,YAAau+D,GAC1E,IAAKC,EAaH,OAZyB3lD,EAAQF,eAAeq0B,EAAAluC,aAAaiB,YAAaw+D,GAOxErjF,KAAKqN,MACHwW,EAAApZ,eAAe84E,+CACf1xE,EAAW9G,MAAe4yB,EAAQ7V,cAPpC9nB,KAAKqN,MACHwW,EAAApZ,eAAeg4D,qCACf5wD,EAAW9G,MAAe4yB,EAAQ7V,cAQ/B9nB,KAAKL,OAAOy7C,cAErBhxC,OAAqD,GAA9Ck5E,EAAWppE,UAAUwgB,eAAevuB,QAC3C4mD,EAAauwB,EAAWppE,UAAUwgB,eAAe,GAC7C4oD,EAAW30D,aAAamjC,EAAAjrC,eAAe3I,SAASle,KAAKmjF,YAAYtxE,GACrE,MAIJ,QAKE,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEN/K,KAAKL,OAAOy7C,cAMvB,OADAhxC,OAAO2oD,GAAcjvC,EAAAuF,KAAKG,MACnBxpB,KAAKgjF,eACVrlD,EACA39B,KAAK+0E,kBAAkBwG,EAAiBxoB,EAAY,IACpDlhD,EACAqxE,EACA/vE,EACA2pE,GAAkBh5D,EAAAuF,KAAKG,OAK3BomD,EAAA3tE,UAAA+gF,eAAA,SAEErlD,EAEA81C,EAEA8H,EAEA2H,EAEAM,EAEAC,GAEA,IAAI9jF,EAASK,KAAKL,OACdm7B,EAAO96B,KAAKmxE,YAKhB,OAAQxzC,EAAO9vB,MACb,KAAKikD,EAAAlrC,YAAY6R,MACf,OAAIqC,EAAKkvC,YAAoBrsC,EAAQnF,MAAOvU,EAAA4jD,WAAW+U,UAAU,IAC/D58E,KAAKqN,MACHwW,EAAApZ,eAAe24E,oEACf7H,EAAgBxwE,MAAO4yB,EAAO7V,cAEhC9nB,KAAK+vE,YAAc0T,EAAc9lD,EAAQruB,KAAOwU,EAAAuF,KAAKG,KAC9C7pB,EAAOy7C,eAETp7C,KAAK0jF,oBAA2B/lD,EAAQ81C,EAAWgQ,GAE5D,KAAK3xB,EAAAlrC,YAAYhJ,OACf,OAAK5d,KAAK6zE,cAAsBl2C,GAC5BA,EAAOpgB,MAAMhQ,EAAAlL,YAAYgwB,MAAQ9kB,EAAAlL,YAAY8xB,WAC/Cn0B,KAAKqN,MACHwW,EAAApZ,eAAe24E,oEACf7H,EAAgBxwE,MAChB4yB,EAAO7V,cAET9nB,KAAK+vE,YAAc0T,EAAe9lD,EAAQruB,KAAOwU,EAAAuF,KAAKG,KAC/C7pB,EAAOy7C,eAETp7C,KAAKg2E,qBAA6Br4C,EAAQ81C,EAAWgQ,GAVZ9jF,EAAOy7C,cAYzD,KAAK0W,EAAAlrC,YAAYgL,MACf,IAAIkjD,EAA0Bn3C,EAAQm3C,gBACtC,OACUn3C,EAAQtgB,GAAG9P,EAAAlL,YAAY8xB,WAE7B2G,EAAK4oC,eAAermD,GAAG9P,EAAAlL,YAAYid,cACnCw1D,EASG90E,KAAK2jF,oBAA2BhmD,EACrC81C,EAEAzzE,KAAK+0E,kBAAkB3qE,OAAO84E,GAAiBljF,KAAKmpB,QAAQI,WAC5Dk6D,IAVAzjF,KAAKqN,MACHwW,EAAApZ,eAAe24E,oEACf7H,EAAgBxwE,MAAe4yB,EAAQ7V,cAElCnoB,EAAOy7C,eASlB,KAAK0W,EAAAlrC,YAAY4K,mBACXxxB,KAAKswE,oBAAoBrnD,IAAIwqD,KAAYA,EAAYzzE,KAAK4jF,gBAAgBnQ,EAAW34C,IACzF,IAAIpJ,EAAsCiM,EAAQjM,gBAClD,IAAKA,EAKH,OAJA1xB,KAAKqN,MACHwW,EAAApZ,eAAe24E,oEACf7H,EAAgBxwE,MAAO4yB,EAAO7V,cAEzBnoB,EAAOy7C,cAGhB,KADIlf,EAAiBl8B,KAAK+nB,SAASmJ,gBAAgBQ,EAAiB,KAAM7nB,EAAA43D,UAAWz9C,EAAAu8C,WAAWQ,SAC3E,OAAOphE,EAAOy7C,cAEnC,IAAKqoC,EAAK,OAAOzjF,KAAKqhF,eAAenlD,EAAgB,CAAEu3C,GAAa8H,GAEpE,IAAI9pD,EAAkBrnB,OAA2BuzB,EAAQlM,iBAEzD,KADIwK,EAAiBj8B,KAAK+nB,SAASmJ,gBAAgBO,EAAiB,KAAM5nB,EAAA43D,UAAWz9C,EAAAu8C,WAAWQ,SAC3E,OAAOphE,EAAOy7C,cACnC,IACIyoC,GADAn0E,EAAausB,EAAe/hB,UAAUxK,YACRikD,eAClC,OAAOh0D,EAAOg6C,MAAM,KAAM,CACxB35C,KAAKqhF,eAAenlD,EAAgB,CAAEu3C,GAAa8H,GACnDv7E,KAAKqhF,eAAeplD,EAAgB,KAAMs/C,IACzCsI,GAEL,KAAK/xB,EAAAlrC,YAAY+K,SAEf,IAAIuK,EACJ,GAFIl8B,KAAKswE,oBAAoBrnD,IAAIwqD,KAAYA,EAAYzzE,KAAK4jF,gBAAgBnQ,EAAW34C,MACrFoB,EAA4ByB,EAAQzB,gBAMtC,OAJAl8B,KAAKqN,MACHwW,EAAApZ,eAAe24E,oEACf7H,EAAgBxwE,MAAO4yB,EAAO7V,cAEzBnoB,EAAOy7C,cAGhB,IAAKqoC,EAAK,CACR,IAAIK,EAAW9jF,KAAK+0E,kBAAkB3qE,OAAO84E,GAAiBljF,KAAKmpB,QAAQI,WAC3E,OAAOvpB,KAAKqhF,eAAenlD,EAAgB,CAAE4nD,EAAUrQ,GAAa8H,GAKlEsI,GADAn0E,GADAusB,EAAiB7xB,OAAkBuzB,EAAQ1B,iBACf/hB,UAAUxK,YACRikD,eAFlC,IAAI13B,EAGA8nD,EAAW/jF,KAAK+0E,kBAAkB3qE,OAAO84E,GAAiBljF,KAAKmpB,QAAQI,WAEvEsyD,EADY/gD,EAAKyuC,oBAAoB75D,GACV8oB,MAC/B,OAAO74B,EAAOg6C,MAAM,KAAM,CACxB35C,KAAKqhF,eAAenlD,EAAgB,CAClCv8B,EAAOg4C,UAAUkkC,EAAgBkI,GACjCtQ,GACC8H,GACHv7E,KAAKqhF,eAAeplD,EAAgB,CAClCt8B,EAAO83C,UAAUokC,EAAgBgI,IAChCtI,IACFsI,GAEL,KAAK/xB,EAAAlrC,YAAYxH,MAEf,GADIpf,KAAKswE,oBAAoBrnD,IAAIwqD,KAAYA,EAAYzzE,KAAK4jF,gBAAgBnQ,EAAW34C,IACrF0oD,EAAiB,CACnB,IAAIH,EAAcvoD,EAAKzd,GAAE,OACrB6mD,EAAqBvmC,EAAQF,eAAeq0B,EAAAluC,aAAaiB,YAAaw+D,GAC1E,IAAKnf,EAKH,OAJAlkE,KAAKqN,MACHwW,EAAApZ,eAAeg4D,qCACf8Y,EAAgBxwE,MAAO4yB,EAAO7V,cAEzBnoB,EAAOy7C,cAEhB,IAAIkoC,EAAqB3lD,EAAQF,eAAeq0B,EAAAluC,aAAakB,YAAau+D,GAC1E,IAAKC,EAMH,OALAtjF,KAAKqN,MACHwW,EAAApZ,eAAe84E,+CACfhI,EAAgBxwE,MAAO4yB,EAAO7V,cAEhC9nB,KAAK+vE,YAAc0T,EAAMvf,EAAWhqD,UAAUxK,WAAaoU,EAAAuF,KAAKG,KACzD7pB,EAAOy7C,cAEhB,IAAI2X,EAAqBp1B,EAAQruB,KAE7B00E,GADAD,EAAW/jF,KAAK+0E,kBAAkB3qE,OAAO84E,GAAiBljF,KAAKmpB,QAAQI,WACzDvpB,KAAK+0E,kBAAkByO,EAAiB1/D,EAAAuF,KAAKjmB,IAAG,IAClE,GAAIqgF,EAAK,CACP,IAAIQ,EAAkBnpD,EAAK+tC,aAAa9V,GACpCmxB,EAAmBppD,EAAKyuC,oBAAoBvpE,KAAK+vE,aACjDrgE,EAAaw0D,EAAWhqD,UAAUxK,WAEtC,OADAorB,EAAKwuC,cAAc2a,GACZtkF,EAAOg6C,MAAM,KAAM,CACxB35C,KAAKqhF,eAAeiC,EAAY,CAC9B3jF,EAAOg4C,UAAUssC,EAAgBzrD,MAAOurD,GACxCpkF,EAAOg4C,UAAUusC,EAAiB1rD,MAAOwrD,GACzCvQ,GACC8H,GACHv7E,KAAKqhF,eAAend,EAAY,CAC9BvkE,EAAO83C,UAAUwsC,EAAgBzrD,MAAOyrD,EAAgB30E,KAAKqkD,gBAC7Dh0D,EAAO83C,UAAUysC,EAAiB1rD,MAAO0rD,EAAiB50E,KAAKqkD,iBAC9D4nB,IACF7rE,EAAWikD,gBAEd,OAAO3zD,KAAKqhF,eAAeiC,EAAY,CACrCS,EACAC,EACAvQ,GACC8H,IAUX,OAJAv7E,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf8nD,EAAgBxwE,OAEXpL,EAAOy7C,eAIRw0B,EAAA3tE,UAAAyhF,oBAAR,SAEElpD,EAEAi5C,EAEAgQ,GAEA,IAAIn0E,EAAOkrB,EAAMlrB,KACjBlF,OAAOkF,GAAQwU,EAAAuF,KAAKG,MACpB,IAAIsR,EAAO96B,KAAKmxE,YACZ52C,EAAaC,EAAMhC,MAQvB,GANIlpB,EAAK+N,GAAE,OACLyd,EAAKswC,UAAUqI,EAAWnkE,GAAOwrB,EAAKsuC,aAAa7uC,EAAYtW,EAAA4jD,WAAW9C,SACzEjqC,EAAKkuC,eAAezuC,EAAYtW,EAAA4jD,WAAW9C,UAElDjqC,EAAKsuC,aAAa7uC,EAAYtW,EAAA4jD,WAAW8C,WAErCr7D,EAAK+jE,UAAW,CAClB,IAAI1zE,EAASK,KAAKL,OACd4zE,EAAajkE,EAAKqkD,eAEtB,OAAI74B,EAAKovC,eAAe3vC,EAAYtW,EAAA4jD,WAAW4T,cACzCz7E,KAAKswE,oBAAoBrnD,IAAIwqD,IAC/BA,EAAYzzE,KAAKmkF,mBACfxkF,EAAO83C,UAAUld,EAAYg5C,GAC7BE,GAEEgQ,GACFzjF,KAAK+vE,YAAczgE,EACZ3P,EAAOg4C,UAAUpd,EAAYk5C,KAEpCzzE,KAAK+vE,YAAcjsD,EAAAuF,KAAKG,KACjB7pB,EAAO45C,UAAUhf,EAAYk5C,MAGtCA,EAAYzzE,KAAK0zE,kBACf/zE,EAAO83C,UAAUld,EAAYg5C,GAC7BE,GAEEgQ,GACFzjF,KAAK+vE,YAAczgE,EACZ3P,EAAOg4C,UAAUpd,EAAYk5C,KAEpCzzE,KAAK+vE,YAAcjsD,EAAAuF,KAAKG,KACjB7pB,EAAO45C,UAAUhf,EAAYk5C,MAIxC34C,EAAKkuC,eAAezuC,EAAYtW,EAAA4jD,WAAW2C,wBAC3C1vC,EAAKsuC,aAAa7uC,EAAYtW,EAAA4jD,WAAWwB,UACpCrpE,KAAKswE,oBAAoBrnD,IAAIwqD,KAAYA,EAAYzzE,KAAKszE,WAAWG,IACtEgQ,GACFzjF,KAAK+vE,YAAczgE,EACZ3P,EAAOg4C,UAAUpd,EAAYk5C,KAEpCzzE,KAAK+vE,YAAcjsD,EAAAuF,KAAKG,KACjB7pB,EAAO45C,UAAUhf,EAAYk5C,KAQxC,OAJInkE,EAAK+N,GAAG,MACLyd,EAAK+wC,YAAY4H,EAAWnkE,GAC5BwrB,EAAKkuC,eAAezuC,EAAYtW,EAAA4jD,WAAWiE,SADRhxC,EAAKsuC,aAAa7uC,EAAYtW,EAAA4jD,WAAWiE,UAG/E2X,GACFzjF,KAAK+vE,YAAczgE,EACZtP,KAAKL,OAAOg4C,UAAUpd,EAAYk5C,KAEzCzzE,KAAK+vE,YAAcjsD,EAAAuF,KAAKG,KACjBxpB,KAAKL,OAAO45C,UAAUhf,EAAYk5C,KAMvC7D,EAAA3tE,UAAA+zE,qBAAR,SAEE7jD,EAEAshD,EAEAgQ,GAEA,IAAI9jF,EAASK,KAAKL,OACd2P,EAAO6iB,EAAO7iB,KAClBlF,OAAOkF,GAAQwU,EAAAuF,KAAKG,MACpB,IAAI+pD,EAAajkE,EAAKqkD,eAEtB,OAAIrkD,EAAK+jE,UACHrzE,KAAKswE,oBAAoBrnD,IAAIwqD,GAC3BgQ,GACFzjF,KAAK+vE,YAAczgE,EACZ3P,EAAOg6C,MAAM,KAAM,CACxBh6C,EAAO85C,WAAWtnB,EAAOrK,aACvB9nB,KAAKmkF,mBACHxkF,EAAOk4C,WAAW1lB,EAAOrK,aAAcyrD,GACvCE,IAGJ9zE,EAAOk4C,WAAW1lB,EAAOrK,aAAcyrD,IACtCA,KAEHvzE,KAAK+vE,YAAcjsD,EAAAuF,KAAKG,KACjB7pB,EAAO85C,WAAWtnB,EAAOrK,aAC9B9nB,KAAKmkF,mBACHxkF,EAAOk4C,WAAW1lB,EAAOrK,aAAcyrD,GACvCE,KAKFgQ,GACFzjF,KAAK+vE,YAAczgE,EACZ3P,EAAOg6C,MAAM,KAAM,CACxBh6C,EAAO85C,WAAWtnB,EAAOrK,aACvB9nB,KAAK0zE,kBACH/zE,EAAOk4C,WAAW1lB,EAAOrK,aAAcyrD,GACvCE,IAGJ9zE,EAAOk4C,WAAW1lB,EAAOrK,aAAcyrD,IACtCA,KAEHvzE,KAAK+vE,YAAcjsD,EAAAuF,KAAKG,KACjB7pB,EAAO85C,WAAWtnB,EAAOrK,aAC9B9nB,KAAK0zE,kBACH/zE,EAAOk4C,WAAW1lB,EAAOrK,aAAcyrD,GACvCE,MAMRA,EAAYzzE,KAAK+9E,uBAAuBtK,EAAWnkE,GAC/Cm0E,GACFzjF,KAAK+vE,YAAczgE,EACZ3P,EAAOg6C,MAAM,KAAM,CACxBh6C,EAAO85C,WAAWtnB,EAAOrK,aAAc2rD,GACvC9zE,EAAOk4C,WAAW1lB,EAAOrK,aAAcyrD,IACtCA,KAEHvzE,KAAK+vE,YAAcjsD,EAAAuF,KAAKG,KACjB7pB,EAAO85C,WAAWtnB,EAAOrK,aAC9B2rD,MAOR7D,EAAA3tE,UAAA0hF,oBAAA,SAEE1lD,EAEAw1C,EAEAsQ,EAEAN,GAEA,IAAI9jF,EAASK,KAAKL,OACdm7B,EAAO96B,KAAKmxE,YACZhK,EAAYlpC,EAAM3uB,KAClB80E,EAAkBjd,EAAUxT,eAChCvpD,OAAO6zB,EAAMzd,OAAO3S,MAAQikD,EAAAlrC,YAAYxH,OACxC,IAAIqb,EAAmBwD,EAAMzd,OAAQlR,KACjC+0E,EAAiB5pD,EAASk5B,eAE9B,GAAIwT,EAAUkM,WAAa54C,EAAS44C,UAAW,CAC7C,IAAIiR,EAAWxpD,EAAK+tC,aAAapuC,GACjC,GAAIz6B,KAAKswE,oBAAoBrnD,IAAIwqD,GAAY,CAC3C,GAAIgQ,EAAK,CACP,IAAIc,EAAYzpD,EAAKyuC,oBAAoBpC,GAKzC,OAJKrsC,EAAK+wC,YAAY4H,EAAWtM,IAAYrsC,EAAKsuC,aAAamb,EAAU/rD,MAAOvU,EAAA4jD,WAAWiE,SACvFhxC,EAAKswC,UAAUqI,EAAWtM,IAAYrsC,EAAKsuC,aAAamb,EAAU/rD,MAAOvU,EAAA4jD,WAAW9C,SACxFjqC,EAAKwuC,cAAcgb,GACnBtkF,KAAK+vE,YAAc5I,EACZxnE,EAAOg6C,MAAM,KAAM,CACxBh6C,EAAOm3C,MAAMqwB,EAAU/U,SACrBzyD,EAAOg4C,UAAU2sC,EAAS9rD,MAAOurD,GACjC/jF,KAAKmkF,mBACHxkF,EAAOo4C,KAAKovB,EAAU/U,SAAU+U,EAAU9pD,GAAE,GAC1C1d,EAAO83C,UAAU6sC,EAAS9rD,MAAO6rD,GACjCD,EAAiBnmD,EAAMnC,cAEzBn8B,EAAOg4C,UAAU4sC,EAAU/rD,MAAOi7C,IAEpC2Q,EAAiBnmD,EAAMnC,cAEzBn8B,EAAO83C,UAAU8sC,EAAU/rD,MAAO4rD,IACjCA,GAIH,OAFAtpD,EAAKwuC,cAAcgb,GACnBtkF,KAAK+vE,YAAcjsD,EAAAuF,KAAKG,KACjB7pB,EAAOm3C,MAAMqwB,EAAU/U,SAC5BzyD,EAAOg4C,UAAU2sC,EAAS9rD,MAAOurD,GACjC/jF,KAAKmkF,mBACHxkF,EAAOo4C,KAAKovB,EAAU/U,SAAU+U,EAAU9pD,GAAE,GAC1C1d,EAAO83C,UAAU6sC,EAAS9rD,MAAO6rD,GACjCD,EAAiBnmD,EAAMnC,cAEzB23C,GAEF2Q,EAAiBnmD,EAAMnC,cAI3B,GAAI2nD,EAAK,CACHc,EAAYzpD,EAAKyuC,oBAAoBpC,GAKzC,OAJKrsC,EAAK+wC,YAAY4H,EAAWtM,IAAYrsC,EAAKsuC,aAAamb,EAAU/rD,MAAOvU,EAAA4jD,WAAWiE,SACvFhxC,EAAKswC,UAAUqI,EAAWtM,IAAYrsC,EAAKsuC,aAAamb,EAAU/rD,MAAOvU,EAAA4jD,WAAW9C,SACxFjqC,EAAKwuC,cAAcgb,GACnBtkF,KAAK+vE,YAAc5I,EACZxnE,EAAOg6C,MAAM,KAAM,CACxBh6C,EAAOm3C,MAAMqwB,EAAU/U,SACrBzyD,EAAOg4C,UAAU2sC,EAAS9rD,MAAOurD,GACjC/jF,KAAK0zE,kBACH/zE,EAAOo4C,KAAKovB,EAAU/U,SAAU+U,EAAU9pD,GAAE,GAC1C1d,EAAO83C,UAAU6sC,EAAS9rD,MAAO6rD,GACjCD,EAAiBnmD,EAAMnC,cAEzBn8B,EAAOg4C,UAAU4sC,EAAU/rD,MAAOi7C,IAEpC2Q,EAAiBnmD,EAAMnC,cAEzBn8B,EAAO83C,UAAU8sC,EAAU/rD,MAAO4rD,IACjCA,GAIH,OAFAtpD,EAAKwuC,cAAcgb,GACnBtkF,KAAK+vE,YAAcjsD,EAAAuF,KAAKG,KACjB7pB,EAAOm3C,MAAMqwB,EAAU/U,SAC5BzyD,EAAOg4C,UAAU2sC,EAAS9rD,MAAOurD,GACjC/jF,KAAK0zE,kBACH/zE,EAAOo4C,KAAKovB,EAAU/U,SAAU+U,EAAU9pD,GAAE,GAC1C1d,EAAO83C,UAAU6sC,EAAS9rD,MAAO6rD,GACjCD,EAAiBnmD,EAAMnC,cAEzB23C,GAEF2Q,EAAiBnmD,EAAMnC,cAK7B,GAAI2nD,EAAK,CACHc,EAAYzpD,EAAKyuC,oBAAoBpC,GAIzC,OAHKrsC,EAAK+wC,YAAY4H,EAAWtM,IAAYrsC,EAAKsuC,aAAamb,EAAU/rD,MAAOvU,EAAA4jD,WAAWiE,SACvFhxC,EAAKswC,UAAUqI,EAAWtM,IAAYrsC,EAAKsuC,aAAamb,EAAU/rD,MAAOvU,EAAA4jD,WAAW9C,SACxF/kE,KAAK+vE,YAAc5I,EACZxnE,EAAOg6C,MAAM,KAAM,CACxBh6C,EAAOm3C,MAAMqwB,EAAU/U,SACrB2xB,EACApkF,EAAOg4C,UAAU4sC,EAAU/rD,MAAOi7C,GAClC2Q,EAAiBnmD,EAAMnC,cAEzBn8B,EAAO83C,UAAU8sC,EAAU/rD,MAAO4rD,IACjCA,GAGH,OADApkF,KAAK+vE,YAAcjsD,EAAAuF,KAAKG,KACjB7pB,EAAOm3C,MAAMqwB,EAAU/U,SAC5B2xB,EACAtQ,EACA2Q,EAAiBnmD,EAAMnC,eAO/B8zC,EAAA3tE,UAAAg7E,sBAAA,SAEEprE,EAEAirE,EAEAtB,GAGA,IAAI77E,EAASK,KAAKL,OACdm7B,EAAO96B,KAAKmxE,YAGhB,GAAIt/D,EAAWA,WAAWhE,MAAQkW,EAAApW,SAASc,MAAO,CAChD,IAAI+1E,EAAOxkF,KAAKmxE,YACZzN,EAAiB8gB,EAAK9gB,eAC1B,IAAKA,EAAermD,GAAG9P,EAAAlL,YAAYid,aAKjC,OAJAtf,KAAKqN,MACHwW,EAAApZ,eAAeg6E,8FACf5yE,EAAW9G,OAENpL,EAAOy7C,cAGhB,IAAIhzB,EAAgBhe,OAAOs5D,EAAeljD,QAASpW,OAAOge,EAAcva,MAAQikD,EAAAlrC,YAAYxH,OAC5F,IAAIslE,EAAoBt6E,OAAege,EAAeqU,MAClDyoC,EAAY96D,OAAOo6E,EAAKrf,YAAY53D,EAAAvK,cAAcoC,QAClDouE,EAAiBxzE,KAAKmpB,QAAQqqD,eAO9BmR,EAAU3kF,KAAK4kF,kBACjB5kF,KAAK6kF,kBAAkBH,EAAmB7yE,GAC1CA,EAAWlB,UACXkB,EACAlS,EAAOy6C,GACLz6C,EAAO83C,UAAUytB,EAAU1sC,MAAOg7C,GAClC7zE,EAAO83C,UAAUytB,EAAU1sC,MAAOg7C,GAClCxzE,KAAKszE,WACHtzE,KAAK42E,eAAsBxuD,KAE9B,IAGHhe,OAAOpK,KAAKswE,oBAAoBrnD,IAAI07D,IACpC,IAAIvO,EAAyB,CAC3Bz2E,EAAO45C,UAAU2rB,EAAU1sC,MAAOmsD,IAKpC,OAHA3kF,KAAK62E,wBAA+BzuD,EAAeguD,GAG/CoO,EAAKjnE,MACP,QAGAvd,KAAKqN,MACHwW,EAAApZ,eAAeq6E,kFACfjzE,EAAW9G,OAENpL,EAAOy7C,gBAEhBopC,EAAKhnE,IAAI,KACTxd,KAAK+vE,YAAcjsD,EAAAuF,KAAKG,KACjB7pB,EAAOg6C,MAAM,KAAMy8B,IAI5B,IAGIl8D,EACA6qE,EAJApnD,EAAS39B,KAAK+nB,SAASi7C,kBAAkBnxD,EAAWA,WAAYipB,GACpE,IAAK6C,EAAQ,OAAOh+B,EAAOy7C,cAI3B,OAAQzd,EAAO9vB,MAGb,KAAKikD,EAAAlrC,YAAYqK,mBACf,IAAIhvB,EAA+B07B,EAC/BvuB,EAAgByC,EAAWzC,cAG/B,GAAInN,EAAU0sB,aAAamjC,EAAAjrC,eAAenJ,SACxC,OAAO1d,KAAKglF,6BAA6B/iF,EAAW4P,EAAYirE,GAGlE,IAAI7jD,EAA4B,KAGhC,GAAI7pB,EAAe,CACjB,IAAKnN,EAAUob,GAAG9P,EAAAlL,YAAYsnB,SAK5B,OAJA3pB,KAAKqN,MACHwW,EAAApZ,eAAe62D,sBACfzvD,EAAWA,WAAW9G,MAAO9I,EAAU6lB,cAElCnoB,EAAOy7C,cAEhBniB,EAAWj5B,KAAK+nB,SAAS09C,iCACvBxjE,EACAmN,EACA0rB,EAAK4oC,eAAeljD,OACpB3W,EAAA43D,QAAqB3mC,EAAK3B,yBAC1BtnB,OAIG,IAAI5P,EAAUob,GAAG9P,EAAAlL,YAAYsnB,SAAU,CAI5C,IAHA,IAAIs7D,EAAgB,IAAI79E,IACpBk2B,EAAqBlzB,OAAOnI,EAAUq7B,oBACtCmpC,EAAoBnpC,EAAmBnxB,OAClC9L,EAAI,EAAGA,EAAIomE,IAAqBpmE,EACvC4kF,EAAcznE,IAAI8f,EAAmBj9B,GAAGO,KAAKqL,KAAM,MAGrD,IAAIg2D,EAAiBhgE,EAAUkkE,iBAAiB12D,WAC5CqlD,EAAgBmN,EAAe91D,OAC/B+4E,EAAgBrzE,EAAWlB,UAC3BwO,EAAe+lE,EAAc/4E,OAC7Bg5E,EAAgB,IAAIl+E,MAAqBkY,GAC7C,IAAS9e,EAAI,EAAGA,EAAIy0D,IAAiBz0D,EAAG,CACtC,IAAI0hE,EAAWE,EAAe5hE,GAAGiP,KAC7B81E,EAAerjB,EAASl0D,MAAQkW,EAAApW,SAASkP,WAA8BklD,EAAUnhE,KAAKoO,KAEtF,KADgB+yD,EAAUnhE,KAAKmO,WAAW9C,KAE1Co5E,EAAqBhlF,EAAI8e,EACzB+lE,EAAc7kF,GACd4hE,EAAe5hE,GAAG+P,YACtB,IAAKi1E,EAKH,OAJArlF,KAAKqN,MACHwW,EAAApZ,eAAewqB,+BACfpjB,EAAW9G,MAAO+pD,EAAcppD,SAAS,IAAKyT,EAAazT,SAAS,KAE/D/L,EAAOy7C,cAEhB,GAAqB,OAAjBgqC,GAAyBH,EAAch8D,IAAIm8D,GAAe,CAE5D,GADIE,EAAeL,EAAc/jF,IAAIkkF,GACnB,CAChBD,EAAc9kF,GAAKL,KAAK+0E,kBAAkBsQ,EAAoBC,GAC9D,IAAIrF,OAAU,EACd,KAAMA,EAAan8D,EAAAuF,KAAKoqC,kBAAkB6xB,EAActlF,KAAK+vE,aAAa,OAClEkQ,EAAan8D,EAAAuF,KAAKoqC,kBAAkB6xB,EAActlF,KAAK+vE,aAAa,IAKxE,OAJA/vE,KAAKqN,MACHwW,EAAApZ,eAAeuqE,mCACf/S,EAAe5hE,GAAGiP,KAAKvE,MAAO/K,KAAK+vE,YAAYrkE,WAAY45E,EAAa55E,YAEnE/L,EAAOy7C,cAGlBkqC,EAAerF,OAEfkF,EAAc9kF,GAAKL,KAAK+0E,kBAAkBsQ,EAAoBvhE,EAAAuF,KAAKupC,MACnE0yB,EAAetlF,KAAK+vE,YAGtBkV,EAAcznE,IAAI4nE,EAAcE,OAC3B,CACL,IAAIC,EAAevlF,KAAK+nB,SAAS44C,YAC/BsB,EAAe5hE,GAAGiP,KAClBwrB,EAAK4oC,eACL5oC,EAAK3B,yBAEP,IAAKosD,EAAc,OAAO5lF,EAAOy7C,cACjC+pC,EAAc9kF,GAAKL,KAAK+0E,kBAAkBsQ,EAAoBE,EAAY,IAG9E,IAAI/e,EAAwB,IAAIv/D,MAAYw/D,GAC5C,IAASpmE,EAAI,EAAGA,EAAIomE,IAAqBpmE,EAAG,CAC1C,IAAIilF,EAAel7E,OAAO66E,EAAc/jF,IAAIo8B,EAAmBj9B,GAAGO,KAAKqL,OACvEu6D,EAAsBnmE,GAAKilF,EAO7B,OALArsD,EAAWj5B,KAAK+nB,SAASmJ,gBACvBjvB,EACAukE,EACA38D,EAAA43D,QAAqB3mC,EAAK3B,4BAGxBl3B,EAAU0sB,aAAamjC,EAAAjrC,eAAe3I,SAASle,KAAKmjF,YAAYtxE,GAC7D7R,KAAKqhF,eAAepoD,EAAUksD,EAAetzE,EAAYirE,GAAkBh5D,EAAAuF,KAAKG,OAFjExpB,KAAKL,OAAOy7C,cASlCniB,EAAWj5B,KAAK+nB,SAASmJ,gBAAgBjvB,EAAW,MAEtD,IAAKg3B,EAAU,OAAOj5B,KAAKL,OAAOy7C,cAGlC,IAAI2oC,EAA0B,EAK9B,OAJI9qD,EAAS5b,GAAG9P,EAAAlL,YAAY2zB,YAC1B+tD,EAAW/jF,KAAK+0E,kBAAkB3qE,OAAOpK,KAAK+nB,SAAS04C,uBAAwBzgE,KAAKmpB,QAAQI,YAGvFvpB,KAAK4kF,kBACV3rD,EACApnB,EAAWlB,UACXkB,EACAkyE,EACAvI,GAKJ,KAAK1pB,EAAAlrC,YAAY6R,MACf,GAAIve,EAAoByjB,EAAQruB,KAAKgjD,mBAAoB,CAErDyyB,EADUpnD,EAAQtgB,GAAG9P,EAAAlL,YAAY61B,SACtBv4B,EAAOyD,IAAIw8C,QAAgBjiB,EAAQ1F,uBAEnCt4B,EAAO83C,UAAkB9Z,EAAQnF,MAAOu5B,EAAAjyB,WAAW15B,KAEhE,MAMA,OAJApG,KAAKqN,MACHwW,EAAApZ,eAAei7D,uGACf7zD,EAAW9G,MAAe4yB,EAAQruB,KAAK5D,YAElC/L,EAAOy7C,cAGlB,KAAK0W,EAAAlrC,YAAYhJ,OACf,GAAI1D,EAAqByjB,EAAQruB,KAAKgjD,mBAAoB,CACxDyyB,EAAWplF,EAAOk4C,WAAoBla,EAAQ7V,aAAuB6V,EAAQruB,KAAKqkD,gBAClF,MAMA,OAJA3zD,KAAKqN,MACHwW,EAAApZ,eAAei7D,uGACf7zD,EAAW9G,MAAgB4yB,EAAQruB,KAAK5D,YAEnC/L,EAAOy7C,cAGlB,KAAK0W,EAAAlrC,YAAYgL,MACf,IAAItiB,EAAequB,EAAQruB,KAC3B,GAAI4K,EAAY5K,EAAKgjD,mBAAoB,CACvC,IAAI4wB,EAAiB94E,OAAOpK,KAAK+nB,SAAS04C,uBACtCsjB,EAAW/jF,KAAK+0E,kBAAkBmO,EAAgBljF,KAAKmpB,QAAQI,WACnEw7D,EAAWplF,EAAOo4C,KAChB,GACA,EACAgsC,EACAhyB,EAAAjyB,WAAW15B,IACHu3B,EAAQ7B,cAElB,MAMA,OAJA97B,KAAKqN,MACHwW,EAAApZ,eAAei7D,uGACf7zD,EAAW9G,MAAOuE,EAAK5D,YAElB/L,EAAOy7C,cAGlB,KAAK0W,EAAAlrC,YAAY8U,gBACfxhB,EAA6ByjB,EAAQzjB,UACrC6qE,EAAW/kF,KAAK+0E,kBAAkBljE,EAAWA,WAA6B8rB,EAAQruB,KAAI,GACtF,MAGF,KAAKwiD,EAAAlrC,YAAY4K,mBACf,IAAIC,EAAkBrnB,OAA2BuzB,EAAQlM,iBAEzD,KADIwK,EAAiBj8B,KAAK+nB,SAASmJ,gBAAgBO,EAAiB,OAC/C,OAAO9xB,EAAOy7C,cAGnC,GAFA2pC,EAAW/kF,KAAK4kF,kBAAkB3oD,EAAgB,GAAIpqB,EAAWA,cACjEqI,EAAYla,KAAK+vE,YAAYzd,oBAM3B,OAJAtyD,KAAKqN,MACHwW,EAAApZ,eAAei7D,uGACf7zD,EAAW9G,MAAO/K,KAAK+vE,YAAYrkE,YAE9B/L,EAAOy7C,cAEhB,MAEF,KAAK0W,EAAAlrC,YAAY+K,SACf,IAAIsK,EAAiB7xB,OAAkBuzB,EAAQ1B,gBAK/C,GAJA8oD,EAAW/kF,KAAK4kF,kBAAkB3oD,EAAgB,GAAIpqB,EAAWA,WAC/D7R,KAAK+0E,kBAAkB3qE,OAAOpK,KAAK+nB,SAAS04C,uBAAwBzgE,KAAKmpB,QAAQI,cAEnFrP,EAAYla,KAAK+vE,YAAYzd,oBAM3B,OAJAtyD,KAAKqN,MACHwW,EAAApZ,eAAei7D,uGACf7zD,EAAW9G,MAAO/K,KAAK+vE,YAAYrkE,YAE9B/L,EAAOy7C,cAEhB,MAIF,QAKE,OAJAp7C,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAENpL,EAAOy7C,cAGlB,OAAOp7C,KAAKwlF,oBACVtrE,EACA6qE,EACAlzE,EAAWlB,UACXkB,EACA,EACAirE,GAAkBh5D,EAAAuF,KAAKG,OAInBomD,EAAA3tE,UAAA+iF,6BAAR,SACE/iF,EACA4P,EACAirE,GAEI76E,EAAU0sB,aAAamjC,EAAAjrC,eAAe3I,SAASle,KAAKmjF,YAAYtxE,GAEpE,IAAIzC,EAA+B,KAI/BkuB,EAAqBr7B,EAAUq7B,mBAC/B6jC,EAAoBtvD,EAAWzC,cAC/ByC,EAAWzC,gBACRnN,EAAUob,GAAG9P,EAAAlL,YAAYsnB,UAC5B3pB,KAAKqN,MACHwW,EAAApZ,eAAe62D,sBACfzvD,EAAW9G,MAAO9I,EAAU6lB,cAGhC1Y,EAAgBpP,KAAK+nB,SAAS+5C,qBAC5B13D,OAAOkzB,GACP6jC,EACAnhE,KAAKmxE,YAAYzN,eAAeljD,OAChC3W,EAAA43D,QAAqBzhE,KAAKmxE,YAAYh4C,yBACtCtnB,IAKJ,IAAIV,EAAOqvD,EAAAilB,YACTzlF,KACAiC,EACAmN,EACAyC,EAAWlB,UACXmsE,EACAjrE,GAEF,OAAKV,IACHnR,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEN/K,KAAKL,OAAOy7C,gBASvBw0B,EAAA3tE,UAAAyjF,mBAAA,SACExrE,EACAiF,EACAwmE,EACApf,GAKA,GAAIof,IAAwB,MADbzrE,EAAUugB,UAMvB,OAJAz6B,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf8yC,EAAWx7D,QAEN,EAIT,IAAIwpD,EAAUr6C,EAAUq6C,QACxB,GAAIA,EAKF,OAJAv0D,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf8yC,EAAWx7D,QAEN,EAGT,IAAI66E,EAAU1rE,EAAUo6C,mBACpBhV,EAAUplC,EAAUwgB,eAAevuB,OAGvC,OAAIgT,EAAeymE,GACjB5lF,KAAKqN,MACHu4E,EAAUtmC,EACNz7B,EAAApZ,eAAeo7E,wCACfhiE,EAAApZ,eAAewqB,+BACnBsxC,EAAWx7D,MAAO66E,EAAQl6E,WAAYyT,EAAazT,aAE9C,KAILyT,EAAemgC,IAAYiV,KAC7Bv0D,KAAKqN,MACHwW,EAAApZ,eAAewqB,+BACfsxC,EAAWx7D,MAAOu0C,EAAQ5zC,WAAYyT,EAAazT,aAE9C,IAOHkkE,EAAA3tE,UAAAkhF,YAAR,SAAoB5c,GAEdvmE,KAAKmpB,QAAQmmD,WAAa/I,EAAWx7D,MAAMY,OAAOwnB,WACpDnzB,KAAKqN,MACHwW,EAAApZ,eAAeq7E,qBACfvf,EAAWx7D,QAMjB6kE,EAAA3tE,UAAA2iF,kBAAA,SACE3rD,EACA8sD,EACAxf,EACAyf,EACAxK,QADA,IAAAwK,MAAA,QACA,IAAAxK,MAAA,GAEA,IAAIr8D,EAAe4mE,EAAoB55E,OACnC+N,EAAY+e,EAAS/e,UACzB,IAAKla,KAAK0lF,mBACRxrE,EACAiF,EACW,GAAX6mE,EACAzf,GAGA,OADAvmE,KAAK+vE,YAAc71D,EAAUxK,WACtB1P,KAAKL,OAAOy7C,cAKrB,GAHIniB,EAAStK,aAAamjC,EAAAjrC,eAAe3I,SAASle,KAAKmjF,YAAY5c,GAG/DttC,EAAStK,aAAamjC,EAAAjrC,eAAehJ,QAAS,CAEhD,GADAzT,QAAQ6uB,EAAS5b,GAAG9P,EAAAlL,YAAYu2E,cAC5B54E,KAAK6vE,uBAAuBx4C,SAAS4B,GAKlC,CACLj5B,KAAK6vE,uBAAuBnjE,KAAKusB,GACjC,IAAIgtD,EAAiB/rE,EAAUwgB,eAC/BtwB,OAAO+U,GAAgB8mE,EAAe95E,QAGtC,IADA,IAAIqE,EAAO,IAAIvJ,MAAqBkY,GAC3B9e,EAAI,EAAGA,EAAI8e,IAAgB9e,EAClCmQ,EAAKnQ,GAAKL,KAAK+0E,kBAAkBgR,EAAoB1lF,GAAI4lF,EAAe5lF,GACtE,IAIJ,IAAI8Q,EAAOnR,KAAKkmF,eAAejtD,EAAUzoB,EAAMw1E,EAAkD,IAA7B,EAAXxK,IASzD,OARIx7E,KAAK+vE,YAAYsD,YACF,GAAXmI,EAGJx7E,KAAKswE,oBAAoB7mD,IAAItY,GAF7BA,EAAOnR,KAAK4jF,gBAAgBzyE,EAAMnR,KAAKmxE,cAK3CnxE,KAAK6vE,uBAAuB5G,MACrB93D,EAzBPnR,KAAKmN,QACH0W,EAAApZ,eAAe07E,yCACf5f,EAAWx7D,MAAOkuB,EAASnR,cA4BjC,IAAIs+D,EAAuBJ,EAAU7mE,EAAe,EAAIA,EACpDm4B,EAAW,IAAIrwC,MAAqBm/E,GACpC5tD,EAAQ,EACRwtD,IACF1uC,EAAS,GAAK0uC,EACdxtD,EAAQ,GAEV,IAAIkC,EAAiBxgB,EAAUwgB,eAC/B,IAASr6B,EAAI,EAAGA,EAAI8e,IAAgB9e,IAAKm4B,EACvC8e,EAAS9e,GAASx4B,KAAK+0E,kBAAkBgR,EAAoB1lF,GAAIq6B,EAAer6B,GAAE,GAKpF,GADA+J,OAAOouB,GAAS4tD,GACZlsE,EAAUxK,WAAW2jE,UAAW,CAClC,GAAe,EAAXmI,EAEF,OAAOx7E,KAAKqhF,eAAepoD,EAAUqe,EAAUivB,GAAY,GACtD,GAAe,GAAXiV,EAAuC,CAE5CrqE,EAAOnR,KAAKqhF,eAAepoD,EAAUqe,EAAUivB,GAAY,GAAO,GAEtE,OADAvmE,KAAKswE,oBAAoB7mD,IAAItY,GACtBA,EAEP,OAAOnR,KAAKqhF,eAAepoD,EAAUqe,EAAUivB,GAAY,GAAO,GAGtE,OAAOvmE,KAAKqhF,eAAepoD,EAAUqe,EAAUivB,EACJ,IAA7B,EAAXiV,KAIL5L,EAAA3tE,UAAAikF,eAAA,SACEjtD,EACAqe,EACA0uC,EACAK,QADA,IAAAL,MAAA,QACA,IAAAK,OAAA,GAeA,IAbA,IAAI1mF,EAASK,KAAKL,OACdwf,EAAem4B,EAAWA,EAASnrC,OAAS,EAC5C+N,EAAY+e,EAAS/e,UACrBwgB,EAAiBxgB,EAAUwgB,eAC3Bo6B,EAAgBp6B,EAAevuB,OAG/BqoE,EAAex0E,KAAKmxE,YACpBr2C,EAAO7W,EAAA8W,KAAK0tC,aAAa+L,EAAapM,eAAgBnvC,GACtD9e,EAAO,GACPmsE,EAAa,IAAIn/E,IAGZ9G,EAAI8e,EAAe,EAAG9e,GAAK,IAAKA,EAAG,CAM1C,IAAIkmF,EAAYjvC,EAAUj3C,GACtBmmF,EAAY9rD,EAAer6B,GAC3BomF,EAAgB3rD,EAAK2uC,eAAevvD,EAAU2gB,iBAAiBx6B,GAAImmF,EAAWF,GAClFriE,EAAA8qD,eAAewX,EAAWD,GAErB9R,EAAa3I,YAAY0a,EAAWC,IAAY1rD,EAAKsuC,aAAaqd,EAAcjuD,MAAOvU,EAAA4jD,WAAWiE,SACnGhxC,EAAKswC,UAAUmb,EAAWC,IAAY1rD,EAAKsuC,aAAaqd,EAAcjuD,MAAOvU,EAAA4jD,WAAW9C,SAExFyhB,EAAUnT,YACPrzE,KAAKswE,oBAAoBrnD,IAAIs9D,KAAYA,EAAYvmF,KAAKszE,WAAWiT,IAC1EzrD,EAAKsuC,aAAaqd,EAAcjuD,MAAOvU,EAAA4jD,WAAWwB,WAEpDlvD,EAAKy3D,QACHjyE,EAAO45C,UAAUktC,EAAcjuD,MAAO+tD,IAG1C,GAAIP,EAAS,CACX,IAAI59D,EAAgBhe,OAAO6uB,EAASzY,QAASpW,OAAOge,EAAcva,MAAQikD,EAAAlrC,YAAYxH,OACtF,IAAIqb,EAAWrwB,OAAO6uB,EAAS/e,UAAUugB,UACrCyqC,EAAYpqC,EAAK2uC,eAAel8D,EAAAvK,cAAcoC,MAAOq1B,EAAU6rD,GAEnEnsE,EAAKy3D,QACHjyE,EAAO45C,UAAU2rB,EAAU1sC,MAAOwtD,IAEpC,IAAIU,EAAuBt+D,EAAeqU,KACtCiqD,GAAc5rD,EAAK6uC,eAAep8D,EAAAvK,cAAcqC,OAAQqhF,EAAap3E,KAAM41D,EAAU1sC,YAEzFpuB,QAAQ6uB,EAAS/e,UAAUugB,UAK7Bz6B,KAAKmxE,YAAcr2C,EACnB,IAASz6B,EAAI8e,EAAc9e,EAAIy0D,IAAiBz0D,EAAG,CACjD,IAAIsmF,EAAWjsD,EAAer6B,GAC1Bu0E,EAAW50E,KAAK+0E,kBAClB3qE,OAAO6uB,EAASh3B,UAAUkkE,iBAAiB12D,WAAWpP,GAAG+P,aACzDu2E,EAAQ,GAGNF,EAAgB3rD,EAAK2uC,eAAevvD,EAAU2gB,iBAAiBx6B,GAAIsmF,GAClE7rD,EAAK+wC,YAAY+I,EAAU+R,IAAW7rD,EAAKsuC,aAAaqd,EAAcjuD,MAAOvU,EAAA4jD,WAAWiE,SACzFhxC,EAAKswC,UAAUwJ,EAAU+R,IAAW7rD,EAAKsuC,aAAaqd,EAAcjuD,MAAOvU,EAAA4jD,WAAW9C,SACtF4hB,EAAStT,WACXv4C,EAAKsuC,aAAaqd,EAAcjuD,MAAOvU,EAAA4jD,WAAWwB,UAClDlvD,EAAKzN,KACH/M,EAAO45C,UAAUktC,EAAcjuD,MAC7Bx4B,KAAKszE,WAAWsB,MAIpBz6D,EAAKzN,KACH/M,EAAO45C,UAAUktC,EAAcjuD,MAAOo8C,IAM5C50E,KAAKm2E,oBAAoBl9C,EAAU9e,GAG9B2gB,EAAKzd,GAAE,OACVrd,KAAKy2E,oBAAoB37C,EAAM3gB,GAC/Bna,KAAK00E,mBAAmB55C,EAAM3gB,IAEhC2gB,EAAKgvC,mBACL,IAAIp6D,EAAaorB,EAAKprB,WACtB1P,KAAKmxE,YAAcqD,EAGnB,IAAIrjE,EAAOxR,EAAOg6C,MAAM7e,EAAK0tC,kBAAmBruD,EAAMzK,EAAWikD,gBAQjE,OAPA3zD,KAAK+vE,YAAcrgE,EACfA,EAAW2jE,WACTgT,IACFl1E,EAAOnR,KAAK8iF,YAAY3xE,GACxBnR,KAAK+vE,YAAcjsD,EAAAuF,KAAKG,MAGrBrY,GAITy+D,EAAA3tE,UAAA4wE,iBAAA,SAAiB38C,GAQf,IAAIwD,EAAaxD,EAASwD,WAC1B,GAAIA,EAAY,OAAOA,EAEvB,IAAIktD,EAAoB1wD,EAAShc,UAC7B2sE,EAAe3wD,EAASpO,aACxBg/D,EAAyBF,EAAkBlsD,eAC3CqsD,EAAgC7wD,EAASj0B,UAAUkkE,iBAAiB12D,WACpEC,EAAak3E,EAAkBl3E,WAC/B+qB,EAAWmsD,EAAkBnsD,SAC7BmF,EAAa1J,EAAS7Y,GAAG9P,EAAAlL,YAAY2zB,UAGrCgxD,EAAeJ,EAAkBtyB,mBACjC2yB,EAAcD,EACdE,EAAeJ,EAAuB36E,OACtCg7E,EAAcD,EACdtnD,MACAqnD,IACAE,GAEJ,IAAIC,EAAch9E,OAAO+8E,EAAcF,GAEnCI,EAAoB,IAAIpgF,MAAqBggF,GAC7CK,EAAe,EAGf3nF,EAASK,KAAKL,OACdigC,IACFynD,EAAkB,GAAK1nF,EAAO83C,UAAU,EAAGz3C,KAAKmpB,QAAQqqD,gBACxD8T,EAAe,GAIjB,IAAK,IAAIjnF,EAAI,EAAGA,EAAI2mF,IAAgB3mF,IAAKinF,EACvCD,EAAkBC,GAAgB3nF,EAAO83C,UAAU6vC,EAAcR,EAAuBzmF,GAAGszD,gBAE7FvpD,OAAOk9E,GAAgBL,GAGvB,IAAIM,EAAsB,IAAIzjE,EAAAoT,UAAUl3B,KAAKu2B,QAASuwD,EAAwBp3E,EAAY+qB,GAC1F8sD,EAAoBjzB,mBAAqB4yB,EACzCK,EAAoBlzB,eAAiBuyB,EAAkBvyB,gBACvD36B,EAAa,IAAIo4B,EAAAhpC,SACfoN,EAASt1B,KAAO,cAChBs1B,EAASj0B,UACTslF,EACArxD,EAASiD,0BAEA3b,IAAI0Y,EAASrhB,MAAQtH,EAAAlL,YAAYu2E,WAAarrE,EAAAlL,YAAY0wE,UACrE78C,EAASwD,WAAaA,EAItB,IAAI86C,EAAex0E,KAAKmxE,YACpBr2C,EAAOpB,EAAWoB,KACtB96B,KAAKmxE,YAAcr2C,EAGnB,IAAIggB,EAAWssC,EAAc,EACzBhzE,EAAQ,IAAInN,MAAc6zC,GAC1B0sC,EAAM,KAAOJ,EAAY17E,SAAS,IACtC,IAASrL,EAAI,EAAGA,EAAIy6C,IAAYz6C,EAAG,CACjC,IAAIiW,EAAQjW,EAAEqL,SAAS,IAAM87E,EAC7BpzE,EAAM/T,GAAKiW,EAEb,IAAI6D,EAAOxa,EAAOg6C,MAAMvlC,EAAM,GAAI,CAChCzU,EAAOg6C,MAAM,aAAc,CACzBh6C,EAAOi7C,OAAOxmC,EAAO,aAEnB4yE,EACIrnF,EAAOw3C,OACL4a,EAAArpB,SAASm4C,OACTlhF,EAAOk4C,WAAW2oB,EAAAgF,eAAeiiB,KAAM11B,EAAAjyB,WAAW15B,KAClDzG,EAAOyD,IAAI4jF,IAEbrnF,EAAOk4C,WAAW2oB,EAAAgF,eAAeiiB,KAAM11B,EAAAjyB,WAAW15B,QAG1DzG,EAAOy7C,gBAET,IAAS/6C,EAAI,EAAGA,EAAI+mF,IAAe/mF,IAAKinF,EAAc,CACpD,IAAIh4E,EAAOw3E,EAAuBE,EAAe3mF,GAC7CoS,EAAcs0E,EAA8BC,EAAe3mF,GAC3D+P,EAAcqC,EAAYrC,YAC1BwkE,OAAQ,EACRxkE,EACFwkE,EAAWj1E,EAAO45C,UAAU+tC,EAC1BtnF,KAAK+0E,kBACH3kE,EACAd,EAAI,KAKRtP,KAAKqN,MACHwW,EAAApZ,eAAei9E,4CACfj1E,EAAY1H,OAEd6pE,EAAWj1E,EAAOy7C,eAEpBjhC,EAAOxa,EAAOg6C,MAAMvlC,EAAM/T,EAAI,GAAI,CAChC8Z,EACAy6D,IAEFyS,EAAkBC,GAAgB3nF,EAAO83C,UAAU6vC,EAAch4E,EAAKqkD,gBAExEvpD,OAAOk9E,GAAgBH,GAEvB,IAAI/Q,EAAyB,CAAEj8D,GAC3BwqE,EAAUhlF,EAAOa,KAAKqmF,EAAcQ,EAAmB33E,EAAWikD,gBAClEjkD,GAAcoU,EAAAuF,KAAKG,KACrBxpB,KAAKwiF,6BAA6B1nD,EAAM6pD,EAASj1E,EAAY0mE,IAE7DA,EAAM1pE,KAAKi4E,GACX3kF,KAAKy2E,oBAAoB37C,EAAMs7C,IAEjCt7C,EAAKgvC,mBACL9pE,KAAKmxE,YAAcqD,EAEnB,IAAI3C,EAAUlyE,EAAOs9C,YACnBvjB,EAAW5R,aACX9nB,KAAK8xE,mBACHyV,EAAoB7sD,eACpBhrB,EACA+qB,GAEF3W,EAAAiwC,mBAAmBr6B,EAAWJ,kBAC9B35B,EAAOg6C,MAAM,KAAMy8B,EAAO1mE,EAAWikD,iBAGvC,OADAj6B,EAAWyB,SAASx7B,EAAQkyE,GACrBn4C,GAIDk2C,EAAA3tE,UAAA0lF,cAAR,WACE,IAAK3nF,KAAKmwE,QAAS,CACjB,IAAIxwE,EAASK,KAAKL,OAClBK,KAAKmwE,QAAUxwE,EAAOi9C,UACpB4jB,EAAAgF,eAAeiiB,KACf11B,EAAAjyB,WAAW15B,KACX,EACAzG,EAAOyD,IAAI,IAGf,OAAOo9D,EAAAgF,eAAeiiB,MAIhB7X,EAAA3tE,UAAA6wE,cAAR,WACE,IAAK9yE,KAAKowE,QAAS,CACjB,IAAIzwE,EAASK,KAAKL,OAClBK,KAAKowE,QAAUzwE,EAAOs9C,YAAYujB,EAAAgF,eAAeoiB,QAC/C5nF,KAAK8xE,mBAAmB,CAAEhuD,EAAAuF,KAAK5lB,KAAOqgB,EAAAuF,KAAKG,MAC3C,KACA7pB,EAAO85C,WAAWz5C,KAAK2nF,gBACrBhoF,EAAO83C,UAAU,EAAGsa,EAAAjyB,WAAW15B,OAGnCzG,EAAO+9C,kBAAkB8iB,EAAAgF,eAAeoiB,QAAS,aAEnD,OAAOpnB,EAAAgF,eAAeoiB,SAMxBhY,EAAA3tE,UAAAqxE,WAAA,SAAWniE,GACT,IAAI8e,EAAiBjwB,KAAKu2B,QAAQtG,eAElC,OADAjwB,KAAKi2E,gBAAgBhmD,GACdjwB,KAAKL,OAAOa,KAAKyvB,EAAenI,aAAc,CAAE3W,GAAQnR,KAAKmpB,QAAQqqD,iBAI9E5D,EAAA3tE,UAAAyxE,kBAAA,SAAkBmU,EAAwBC,GAKxC,IAAInoF,EAASK,KAAKL,OACdm7B,EAAO96B,KAAKmxE,YACZ5nD,EAAYvpB,KAAKmpB,QAAQI,UACzBiqD,EAAiBxzE,KAAKmpB,QAAQqqD,eAC9BuU,EAAQjtD,EAAK+tC,aAAat/C,EAAWtF,EAAA8qD,eAAe8Y,IACpDG,EAAQltD,EAAKyuC,oBAAoBhgD,GAErC,OADAuR,EAAKwuC,cAAcye,GACZpoF,EAAOg6C,MAAM,KAAM,CACxBh6C,EAAOy6C,GACLz6C,EAAOw3C,OAAOq8B,GAAkBzhB,EAAAjyB,WAAWz5B,IAAM0rD,EAAArpB,SAASkjC,MAAQ7Z,EAAArpB,SAASijC,MACzEhsE,EAAOg4C,UAAUowC,EAAMvvD,MAAOsvD,GAC9BnoF,EAAOg4C,UAAUqwC,EAAMxvD,MAAOqvD,IAEhCloF,EAAOg6C,MAAM,KAAM,CACjBh6C,EAAOq6C,KACLh6C,KAAKszE,WAAW3zE,EAAO83C,UAAUswC,EAAMvvD,MAAOg7C,KAEhDxzE,KAAK8iF,YAAYnjF,EAAO83C,UAAUuwC,EAAMxvD,MAAOg7C,OAGnD7zE,EAAO83C,UAAUswC,EAAMvvD,MAAOg7C,IAC7BA,IAIL5D,EAAA3tE,UAAAkiF,mBAAA,SAAmB0D,EAAwBC,GAGzC,IAAInoF,EAASK,KAAKL,OACdm7B,EAAO96B,KAAKmxE,YACZ5nD,EAAYvpB,KAAKmpB,QAAQI,UACzBiqD,EAAiBxzE,KAAKmpB,QAAQqqD,eAC9BmD,EAAO77C,EAAKyuC,oBAAoBhgD,EAAWtF,EAAA8qD,eAAe8Y,IAC9D,OAAOloF,EAAOg6C,MAAM,KAAM,CACxBh6C,EAAO45C,UAAUo9B,EAAKn+C,MAAOsvD,GAC7B9nF,KAAK8iF,YAAY+E,GACjBloF,EAAO83C,UAAUk/B,EAAKn+C,MAAOg7C,IAC5BA,IAIL5D,EAAA3tE,UAAA6gF,YAAA,SAAY3xE,GACV,IAAI+e,EAAkBlwB,KAAKu2B,QAAQrG,gBAEnC,OADAlwB,KAAKi2E,gBAAgB/lD,GACdlwB,KAAKL,OAAOa,KAAK0vB,EAAgBpI,aAAc,CAAE3W,GAAQ4gD,EAAAjyB,WAAWsY,OAI7Ew3B,EAAA3tE,UAAA2hF,gBAAA,SAAgBzyE,EAAqB2pB,GAEnC,YAFmC,IAAAA,MAAa96B,KAAKmxE,aAE9CnxE,KAAKL,OAAOg4C,UAAU7c,EAAKouC,oBAAoBlpE,KAAKmpB,QAAQI,WAAWiP,MAAOrnB,IAIvFy+D,EAAA3tE,UAAAgmF,gBAAA,SAAgB92E,EAAqB2pB,GAInC,OAAQi3B,EAAApL,gBAAgBx1C,IACtB,KAAK4gD,EAAAhyB,aAAa8uB,SAChB,GAAIkD,EAAAxK,WAAWp2C,GAAO,CACpB,IAAIqnB,EAAQu5B,EAAA5K,iBAAiBh2C,GAC7B,GAAI2pB,EAAKovC,eAAe1xC,EAAOvU,EAAA4jD,WAAW4T,cAKxC,OADA3gD,EAAKkuC,eAAexwC,EAAOvU,EAAA4jD,WAAW4T,cAC/BjjD,EAGX,MAEF,KAAKu5B,EAAAhyB,aAAakuB,MAChB,GAA2B,OAAvB8D,EAAApJ,aAAax3C,GAAgB,CAC/B,IAAIkrE,EAAQtqB,EAAAlJ,mBAAmB13C,GAC/B,GAAIkrE,EACF,OAAOr8E,KAAKioF,gBAAgBl2B,EAAAhJ,cAAc53C,EAAMkrE,EAAQ,GAAIvhD,IAMpE,OAAQ,GAQV80C,EAAA3tE,UAAA2gF,gBAAA,SAAgBzxE,EAAqB+2E,EAAqBC,GAKxD,OADYnoF,KAAKioF,gBAAgB92E,EAAM+2E,GAEnCloF,KAAK4jF,gBAAgBzyE,EAAMg3E,GAC3BnoF,KAAK4jF,gBAAgB5jF,KAAKszE,WAAWniE,GAAOg3E,IAIlDvY,EAAA3tE,UAAAw0E,oBAAA,SAAoB37C,EAAYs7C,EAAwBgS,gBAAA,IAAAA,OAAA,GACtD,IAAIlgB,EAAeptC,EAAKotC,aACxB,GAAIA,EAAc,CAChB,IAAIvoE,EAASK,KAAKL,WAClB,IAAkB,IAAA63B,EAAAhM,EAAA08C,EAAa7zD,UAAQgd,EAAAmG,EAAAxoB,QAAAqiB,EAAA3F,KAAA2F,EAAAmG,EAAAxoB,OAAE,CAApC,IAAIwrB,EAAKnJ,EAAA/vB,MACZ,GAAIk5B,EAAMnd,GAAG9P,EAAAlL,YAAY8mE,QAAS,CAChC,IAAI5uC,EAAaC,EAAMhC,MACnBsC,EAAKovC,eAAe3vC,EAAYtW,EAAA4jD,WAAW4T,gBACzC2M,GAAYttD,EAAKkuC,eAAezuC,EAAYtW,EAAA4jD,WAAW4T,cAC3DrF,EAAM1pE,KACJ1M,KAAK8iF,YACHnjF,EAAO83C,UAAUld,EAAYC,EAAMlrB,KAAKqkD,yHAUtDic,EAAA3tE,UAAAugF,6BAAA,SACE1nD,EACA24C,EACAj5D,EACA47D,EACAgS,QADA,IAAAhS,MAAA,WACA,IAAAgS,OAAA,GAEKhS,IAAOA,EAAQ,IAAInvE,OACxBmvE,EAAM1pE,KACJ1M,KAAKL,OAAO26C,OAEd,IAAI+tC,EAAejS,EAAMjqE,OAEzB,GADAnM,KAAKy2E,oBAAoB37C,EAAMs7C,EAAOgS,GAClChS,EAAMjqE,OAASk8E,EAAc,CAC/B,IAAI9U,EAAa/4D,EAAUm5C,eACvBgjB,EAAO77C,EAAKyuC,oBAAoB/uD,GAC/BsgB,EAAK+wC,YAAY4H,EAAWj5D,IAAYsgB,EAAKsuC,aAAauN,EAAKn+C,MAAOvU,EAAA4jD,WAAWiE,SAClFhxC,EAAKswC,UAAUqI,EAAWj5D,IAAYsgB,EAAKsuC,aAAauN,EAAKn+C,MAAOvU,EAAA4jD,WAAW9C,SACnF,IAAIplE,EAASK,KAAKL,OAKlB,OAJAy2E,EAAMiS,EAAe,GAAK1oF,EAAO45C,UAAUo9B,EAAKn+C,MAAOi7C,GACvD2C,EAAM1pE,KACJ/M,EAAO83C,UAAUk/B,EAAKn+C,MAAO+6C,IAExB5zE,EAAOg6C,MAAM,KAAMy8B,EAAO7C,GAC5B,OAAI6C,EAAMjqE,OAAS,GACxBiqE,EAAMiS,EAAe,GAAK5U,EACnBzzE,KAAKL,OAAOg6C,MAAM,KAAMy8B,EAAO57D,EAAUm5C,iBAE3C8f,GAIT7D,EAAA3tE,UAAAyyE,mBAAA,SAAmB55C,EAAYs7C,WACzBz2E,EAASK,KAAKL,OAClB,GAAIm7B,EAAKzd,GAAE,OAA4B,CAIrC,IADA,IAAImD,OAAM,EACHA,EAASsa,EAAKta,QAAQsa,EAAOta,EACpCxgB,KAAKy2E,oBAAoB37C,EAAMs7C,GAAO,YAEtC,IAAkB,IAAA5+C,EAAAhM,EAAAsP,EAAKstC,eAAe/uC,eAAahI,EAAAmG,EAAAxoB,QAAAqiB,EAAA3F,KAAA2F,EAAAmG,EAAAxoB,OAAE,CAAhD,IAAIwrB,EAAKnJ,EAAA/vB,MACRi5B,EAAaC,EAAMhC,MACnBsC,EAAKovC,eAAe3vC,EAAYtW,EAAA4jD,WAAW4T,gBAC7C3gD,EAAKkuC,eAAezuC,EAAYtW,EAAA4jD,WAAW4T,cAC3CrF,EAAM1pE,KACJ1M,KAAK8iF,YACHnjF,EAAO83C,UAAUld,EAAYC,EAAMlrB,KAAKqkD,uHAWpDic,EAAA3tE,UAAAo/E,eAAA,SACEpoD,EACAqe,EACAivB,EACA8f,EAEAiC,GAEA,QAJA,IAAAjC,OAAA,QAEA,IAAAiC,OAAA,GAEIrvD,EAAStK,aAAamjC,EAAAjrC,eAAehJ,QAAS,CAEhD,GADAzT,QAAQ6uB,EAAS5b,GAAG9P,EAAAlL,YAAYu2E,cAC5B54E,KAAK6vE,uBAAuBx4C,SAAS4B,GAKlC,CAEL,IAAIsvD,EACJ,GAFAvoF,KAAK6vE,uBAAuBnjE,KAAKusB,GAE7BA,EAAS5b,GAAG9P,EAAAlL,YAAY2zB,UAAW,CACrC,IAAIwyD,EAAcp+E,OAAOktC,GACzBltC,OAAOo+E,EAAYr8E,QACnBo8E,EAAOvoF,KAAKkmF,eAAejtD,EAAUuvD,EAAY5f,MAAM,GAAI4f,EAAY,GAAInC,QAE3EkC,EAAOvoF,KAAKkmF,eAAejtD,EAAUqe,EAAU,EAAG+uC,GAUpD,OARIrmF,KAAK+vE,YAAYsD,YACdiV,EAGHtoF,KAAKswE,oBAAoB7mD,IAAI8+D,GAF7BA,EAAOvoF,KAAK4jF,gBAAgB2E,EAAMvoF,KAAKmxE,cAK3CnxE,KAAK6vE,uBAAuB5G,MACrBsf,EAtBPvoF,KAAKmN,QACH0W,EAAApZ,eAAe07E,yCACf5f,EAAWx7D,MAAOkuB,EAASnR,cAuBjC,IAAI2gE,EAAcnxC,EAAWA,EAASnrC,OAAS,EAC3CgT,EAAespE,EAEfxB,EADehuD,EAAS/e,UAAUo6C,mBAElC4yB,EAAejuD,EAAS/e,UAAUwgB,eAAevuB,OACjDg7E,EAAcD,EACdjuD,EAAS5b,GAAG9P,EAAAlL,YAAY2zB,cACxBixD,IACAE,IACAhoE,GAEJ/U,OAAOq+E,GAAexB,GAEtB,IAAItnF,EAASK,KAAKL,OAClB,IAAKK,KAAKi2E,gBAAgBh9C,GAAW,OAAOt5B,EAAOy7C,cACnD,IAAI1rC,EAAaupB,EAAS/e,UAAUxK,WAChCg5E,EAAezvD,EAAS5b,GAAG9P,EAAAlL,YAAY8yE,eAG3C,GAAIsT,EAActB,EAAa,CACxB7vC,KACHA,EAAW,IAAIrwC,MAAMkgF,IACZh7E,OAAS,GAEpB,IAAIuuB,EAAiBzB,EAAS/e,UAAUwgB,eACpCunC,EAAiBhpC,EAASh3B,UAAUkkE,iBAAiB12D,WACzDrF,OAAO63D,EAAe91D,QAAUuuB,EAAevuB,QAE/C,IADA,IAAIw8E,GAA0B,EACrBtoF,EAAI8e,EAAc9e,EAAI6mF,IAAgB7mF,EAAG,CAChD,IAAI+P,EAAc6xD,EAAe5hE,GAAG+P,YACpC,GAAIA,EAAa,CACf,GAAI2T,EAAAnW,oBAAoBwC,EAAYvC,MAAO,CACzCypC,EAAS5qC,KAAK1M,KAAK+0E,kBACL9S,EAAe5hE,GAAG+P,YAC9BsqB,EAAer6B,GAAE,IAGnB,SAEF,IAAI0wB,EAAW/wB,KAAK+nB,SAASi7C,kBAAkB5yD,EAAa6oB,EAAS6B,KAAMJ,EAAer6B,IAC1F,GAAI0wB,GACEA,EAASljB,MAAQikD,EAAAlrC,YAAYhJ,OAAQ,CACvC,IAAIouD,EAAiBj7C,EACrB,GAAI/wB,KAAK6zE,cAAc7H,GAAS,CAC1BA,EAAO3uD,GAAG9P,EAAAlL,YAAY61B,SACxBof,EAAS5qC,KACP1M,KAAK68E,sBAAsB7Q,EAAQtxC,EAAer6B,GAAE,IAGtDi3C,EAAS5qC,KACP1M,KAAK89E,kBACHn+E,EAAOk4C,WAAWm0B,EAAOlkD,aAAckkD,EAAO18D,KAAKqkD,gBACnDqY,EAAO18D,KAAMorB,EAAer6B,IAAI,GAAO,EAAO+P,IAIpD,WAKRknC,EAAS5qC,KAAKguB,EAAer6B,GAAGuzD,aAAaj0D,IAC7CgpF,GAA0B,EAE5B,IAAKA,IACED,EAAc,CACjB,IAAIxyD,EAAW+C,EAEf,GADAA,EAAWj5B,KAAK6yE,iBAAiB55C,IAC5Bj5B,KAAKi2E,gBAAgBh9C,GAAW,OAAOt5B,EAAOy7C,cACnDniB,EAAS6B,KAAKjmB,MAAQqhB,EAAS4E,KAAKjmB,MACpC,IAAIgvE,EAAmBn0E,EAAWikD,eAC9Bi1B,EAAOjpF,EAAOa,KAAKy4B,EAASnR,aAAcwvB,EAAUusC,GAYxD,OAXA7jF,KAAK+vE,YAAcrgE,EACfA,EAAW2jE,YACTgT,GACFuC,EAAO5oF,KAAK8iF,YAAY8F,GACxB5oF,KAAK+vE,YAAcjsD,EAAAuF,KAAKG,MACd8+D,EAGVtoF,KAAKswE,oBAAoB7mD,IAAIm/D,GAF7BA,EAAO5oF,KAAK4jF,gBAAgBgF,IAKzBjpF,EAAOg6C,MAAM,KAAM,CACxBh6C,EAAO85C,WAAWz5C,KAAK2nF,gBAAiBhoF,EAAOyD,IAAI+b,IACnDypE,GACC5oF,KAAK+vE,YAAYpc,iBAQ1B,IAAIxiD,EAAOxR,EAAOa,KAAKy4B,EAASnR,aAAcwvB,EAAU5nC,EAAWikD,gBAUnE,OATA3zD,KAAK+vE,YAAcrgE,EACfA,EAAW2jE,YACTgT,GACFl1E,EAAOnR,KAAK8iF,YAAY3xE,GACxBnR,KAAK+vE,YAAcjsD,EAAAuF,KAAKG,MACd8+D,IACVn3E,EAAOnR,KAAK4jF,gBAAgBzyE,KAGzBA,GAITy+D,EAAA3tE,UAAAujF,oBAAA,SACEtrE,EACA6qE,EACAgB,EACAxf,EACAyf,EACAK,QADA,IAAAL,MAAA,QACA,IAAAK,OAAA,GAEA,IAAIlnE,EAAe4mE,EAAoB55E,OAEvC,IAAKnM,KAAK0lF,mBACRxrE,EACAiF,EACW,GAAX6mE,EACAzf,GAEA,OAAOvmE,KAAKL,OAAOy7C,cAGrB,IAAIgrC,EAAuBJ,EAAU7mE,EAAe,EAAIA,EACpDm4B,EAAW,IAAIrwC,MAAqBm/E,GACpC5tD,EAAQ,EACRwtD,IACF1uC,EAAS,GAAK0uC,EACdxtD,EAAQ,GAGV,IADA,IAAIkC,EAAiBxgB,EAAUwgB,eACtBr6B,EAAI,EAAGA,EAAI8e,IAAgB9e,IAAKm4B,EACvC8e,EAAS9e,GAASx4B,KAAK+0E,kBAAkBgR,EAAoB1lF,GAAIq6B,EAAer6B,GAAE,GAKpF,OADA+J,OAAOouB,GAAS4tD,GACTpmF,KAAK6oF,iBAAiB3uE,EAAW6qE,EAAUztC,EAAU+uC,IAI9DzW,EAAA3tE,UAAA4mF,iBAAA,SACE3uE,EACA6qE,EACAztC,EACA+uC,QADA,IAAA/uC,MAAA,WACA,IAAA+uC,OAAA,GAEA,IAAIoC,EAAcnxC,EAAWA,EAASnrC,OAAS,EAC3CgT,EAAespE,EAEfxB,EADe/sE,EAAUo6C,mBAEzB4yB,EAAehtE,EAAUwgB,eAAevuB,OACxCg7E,EAAcD,EACdhtE,EAAUugB,aACVwsD,IACAE,IACAhoE,GAEJ/U,OAAOq+E,GAAexB,GAEtBjnF,KAAK8xE,mBAAmB53D,EAAUwgB,eAAgBxgB,EAAUxK,WAAYwK,EAAUugB,UAClF,IAAI96B,EAASK,KAAKL,OAGlB,GAAI8oF,EAActB,EAAa,CACxB7vC,KACHA,EAAW,IAAIrwC,MAAMkgF,IACZh7E,OAAS,GAGpB,IADA,IAAIuuB,EAAiBxgB,EAAUwgB,eACtBr6B,EAAI8e,EAAc9e,EAAI6mF,IAAgB7mF,EAC7Ci3C,EAAS5qC,KAAKguB,EAAer6B,GAAGuzD,aAAaj0D,IAIjD,IAAI+P,EAAawK,EAAUxK,WACvByB,EAAOxR,EAAOu7C,cAAc6pC,EAAUztC,EAAUp9B,EAAUyhB,qBAU9D,OATA37B,KAAK+vE,YAAcrgE,EACfA,EAAW2jE,YACTgT,GACFl1E,EAAOnR,KAAK8iF,YAAY3xE,GACxBnR,KAAK+vE,YAAcjsD,EAAAuF,KAAKG,MAExBrY,EAAOnR,KAAK4jF,gBAAgBzyE,IAGzBxR,EAAOg6C,MAAM,KAAM,CACxBh6C,EAAO85C,WAAWz5C,KAAK2nF,gBACrBhoF,EAAOyD,IAAI+b,IAEbhO,GACCnR,KAAK+vE,YAAYpc,iBAGtBic,EAAA3tE,UAAAi7E,uBAAA,SACErrE,EACAirE,EACAtB,GAKA,IAHA,IAAI5oE,EAAcf,EAAWe,YACzBk2E,EAAiBl2E,EAAYzG,OAC7B48E,EAAQ,IAAI9hF,MAAqB6hF,KAC5BzoF,EAAI,EAAGA,EAAIyoF,IAAkBzoF,EACpC0oF,EAAM1oF,GAAKL,KAAK+0E,kBAAkBniE,EAAYvS,GAAIyjB,EAAAuF,KAAKG,KACrD,GAIJ,OADAu/D,EAAMD,GAAkB9oF,KAAK+0E,kBAAkBniE,EAAYk2E,GAAiBhM,EAAgBtB,GACrFx7E,KAAKL,OAAOg6C,MAAM,KAAMovC,EAAO/oF,KAAK+vE,YAAYpc,iBAGzDic,EAAA3tE,UAAAk7E,+BAAA,SACEtrE,EACAirE,EACAtB,GAEA,IAAI79C,EAAS39B,KAAK+nB,SAAS87C,+BACzBhyD,EACA7R,KAAKmxE,YACL2L,GAEF,IAAKn/C,EAAQ,OAAO39B,KAAKL,OAAOy7C,cAChC,OAAQzd,EAAO9vB,MACb,KAAKikD,EAAAlrC,YAAYxH,MACf,IAAI8kD,EAAqBvmC,EAAQF,eAAeq0B,EAAAluC,aAAaiB,YAAa7kB,KAAKmxE,YAAY9zD,GAAE,QAC7F,IAAK6mD,EAKH,OAJAlkE,KAAKqN,MACHwW,EAAApZ,eAAeg4D,qCACf5wD,EAAWA,WAAW9G,MAAe4yB,EAAQ7V,cAExC9nB,KAAKL,OAAOy7C,cAErB,IAAI4qC,EAAUhmF,KAAK+0E,kBAAkBljE,EAAWA,WAAoB8rB,EAAQruB,KAAI,GAGhF,OAAOtP,KAAK4kF,kBAAkB1gB,EAAY,CACxCryD,EAAWsB,mBACVtB,EAAYm0E,EAASxK,GAO5B,OAJAx7E,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEN/K,KAAKL,OAAOy7C,eAGrBw0B,EAAA3tE,UAAAm7E,0BAAA,SACEvrE,EACAm3E,EACAxN,GAEA,IAAI/oE,EAAcZ,EAAWY,YAAY6P,QACzClY,QAAQqI,EAAYgE,gBACpB,IAUIwiB,EAVA6B,EAAO96B,KAAKmxE,YACZzN,EAAiB5oC,EAAK4oC,eACtBzhE,EAAY,IAAI6vD,EAAA/oC,kBAClBtW,EAAY7R,KAAKqL,KAAKE,OAClBsG,EAAY7R,KAAKqL,KACjB,cAAgBy3D,EAAe9pC,mBAAmBluB,SAAS,IAC/Dg4D,EACAjxD,EACAq/C,EAAAjrC,eAAezJ,MAGb+b,EAA0BtvB,EAAA43D,QAAQ3mC,EAAK3B,yBAI3C,GAAI6vD,EAAqB,CACvB,IAAI9iB,EAAgBjkE,EAAUkkE,iBAC1BlE,EAAiBiE,EAAcz2D,WAC/Bw5E,EAAuBhnB,EAAe91D,OAGtCuuB,EAAiBsuD,EAAoBtuD,eACrCo6B,EAAgBp6B,EAAevuB,OACnC,GAAI88E,EAAuBn0B,EAKzB,OAJA90D,KAAKqN,MACHwW,EAAApZ,eAAewqB,+BACfpjB,EAAW9G,MAAO+pD,EAAcppD,WAAYu9E,EAAqBv9E,YAE5D1L,KAAKL,OAAOy7C,cAKrB,IADA,IAAIiZ,EAAiB,IAAIptD,MAAcgiF,GAC9B5oF,EAAI,EAAGA,EAAI4oF,IAAwB5oF,EAAG,CAC7C,IAAI6hE,EAAgBD,EAAe5hE,GAEnC,GADAg0D,EAAeh0D,GAAK6hE,EAActhE,KAAKqL,MAClC8X,EAAAJ,cAAcu+C,EAAc5yD,MAAO,CAMtC,KALI80D,EAAepkE,KAAK+nB,SAAS44C,YAC/BuB,EAAc5yD,KACdo0D,EAAeljD,OACf2Y,IAEiB,OAAOn5B,KAAKL,OAAOy7C,cACtC,IAAK1gB,EAAer6B,GAAGmzD,uBAAuB4Q,GAK5C,OAJApkE,KAAKqN,MACHwW,EAAApZ,eAAeuqE,mCACf9S,EAAcn3D,MAAO2vB,EAAer6B,GAAGqL,WAAY04D,EAAa14D,YAE3D1L,KAAKL,OAAOy7C,eAOzB,IAAI1rC,EAAas5E,EAAoBt5E,WACrC,IAAKqU,EAAAJ,cAAcuiD,EAAcx2D,YAAa,CAM5C,KALI00D,EAAepkE,KAAK+nB,SAAS44C,YAC/BuF,EAAcx2D,WACdg0D,EAAeljD,OACf2Y,IAEiB,OAAOn5B,KAAKL,OAAOy7C,cACtC,GACE1rC,GAAcoU,EAAAuF,KAAKG,KACf46C,GAAgBtgD,EAAAuF,KAAKG,MACpB46C,EAAa5Q,uBAAuB9jD,GAMzC,OAJA1P,KAAKqN,MACHwW,EAAApZ,eAAeuqE,mCACf9O,EAAcx2D,WAAW3E,MAAOq5D,EAAa14D,WAAYgE,EAAWhE,YAE/D1L,KAAKL,OAAOy7C,cAKvB,IAAI3gB,EAAWuuD,EAAoBvuD,SAC/ByuD,EAAehjB,EAAcv2D,iBACjC,GAAIu5E,EAAc,CAChB,IAAKzuD,EAKH,OAJAz6B,KAAKqN,MACHwW,EAAApZ,eAAe26D,+CACf8jB,EAAan+E,OAER/K,KAAKL,OAAOy7C,cAErB,IAAIgpB,EAKJ,KALIA,EAAepkE,KAAK+nB,SAAS44C,YAC/BuoB,EACAxlB,EAAeljD,OACf2Y,IAEiB,OAAOn5B,KAAKL,OAAOy7C,cACtC,IAAK3gB,EAAS+4B,uBAAuB4Q,GAKnC,OAJApkE,KAAKqN,MACHwW,EAAApZ,eAAeuqE,mCACfkU,EAAan+E,MAAO0vB,EAAS/uB,WAAY04D,EAAa14D,YAEjD1L,KAAKL,OAAOy7C,cAIvB,IAAIlhC,EAAY,IAAI4J,EAAAoT,UAAUl3B,KAAKu2B,QAASmE,EAAgBhrB,EAAY+qB,GASxE,GARAvgB,EAAUo6C,mBAAqBQ,EAC/B56C,EAAUm6C,eAAiBA,EAC3Bp7B,EAAW,IAAI64B,EAAAhpC,SACb7mB,EAAUrB,KACVqB,EACAiY,EACAif,IAEGn5B,KAAKi2E,gBAAgBh9C,GAAW,OAAOj5B,KAAKL,OAAOy7C,cACxDp7C,KAAK+vE,YAAciZ,EAAoB15E,SAGlC,CAML,KALA2pB,EAAWj5B,KAAK+zE,kCACd9xE,EACA,GACAk3B,IAEa,OAAOn5B,KAAKL,OAAOy7C,cAClCp7C,KAAK+vE,YAAc92C,EAAS/e,UAAU5K,KAGxC,IAAIkpB,EAAQx4B,KAAK24E,yBAAyB1/C,GAC1C,OAAOT,EAAQ,EACXx4B,KAAKL,OAAOy7C,cACZp7C,KAAKL,OAAOyD,IAAIo1B,IAIdo3C,EAAA3tE,UAAAknF,4BAAR,SAAoCt3E,GAClC,IAAImG,EAAenG,EAAW9G,MAAMY,OAAOqM,aACvCiP,EAAcjnB,KAAKu2B,QAAQtP,YAC/B7c,OAAO6c,EAAYgC,IAAIjR,IACHiP,EAAY/lB,IAAI8W,GACjBqF,GAAG9P,EAAAlL,YAAY0wE,WAChC/yE,KAAKo0E,kBAAkBp8D,EAAcnG,IASzC+9D,EAAA3tE,UAAAo7E,4BAAA,SACExrE,EACAirE,EACAtB,GAEA,IAAI77E,EAASK,KAAKL,OACdm7B,EAAO96B,KAAKmxE,YACZzN,EAAiB5oC,EAAK4oC,eAG1B,OAAQ7xD,EAAWhE,MACjB,KAAKkW,EAAApW,SAASI,KACZ,IAAIob,EAAUnpB,KAAKmpB,QACf8V,EAAiB69C,EAAe79C,eAMpC,OAFEj/B,KAAK+vE,YAHF9wC,EAGgBA,EAAe3vB,KAAK4jD,aAFpB/pC,EAAQI,UAItBJ,EAAQY,SACXpqB,EAAO0D,IAAI,GACX1D,EAAOyD,IAAI,GAEjB,KAAK2gB,EAAApW,SAASK,KAEZ,OADAhO,KAAK+vE,YAAcjsD,EAAAuF,KAAKzlB,KACjBjE,EAAOyD,IAAI,GAEpB,KAAK2gB,EAAApW,SAASM,MAEZ,OADAjO,KAAK+vE,YAAcjsD,EAAAuF,KAAKzlB,KACjBjE,EAAOyD,IAAI,GAEpB,KAAK2gB,EAAApW,SAASqS,KACZ,GAAI0jD,EAAermD,GAAG9P,EAAAlL,YAAY2zB,UAAW,CAC3C,IAAIkvC,EAAY96D,OAAO0wB,EAAKqqC,YAAY53D,EAAAvK,cAAcoC,QAClDgjB,EAAgBhe,OAAOs5D,EAAeljD,QAASpW,OAAOge,EAAcva,MAAQikD,EAAAlrC,YAAYxH,OAC5F,IAAIo0D,EAAiBxzE,KAAKmpB,QAAQqqD,eAClC,GAAI9P,EAAermD,GAAG9P,EAAAlL,YAAYid,eAC3Bwb,EAAKzd,GAAE,IAAuB,CACjCyd,EAAKtd,IAAG,IAOR,IAAI44D,EAAyB,CAC3Bz2E,EAAOy6C,GACLz6C,EAAOq3C,MAAMw8B,GAAkBzhB,EAAAjyB,WAAWz5B,IAAM0rD,EAAA3uB,QAAQmoC,OAASxZ,EAAA3uB,QAAQkoC,OACvE3rE,EAAO83C,UAAUytB,EAAU1sC,MAAOg7C,IAEpC7zE,EAAO45C,UAAU2rB,EAAU1sC,MACzBx4B,KAAKszE,WACHtzE,KAAK42E,eAAsBxuD,OAUnC,OALApoB,KAAK62E,wBAA+BzuD,EAAeguD,GACnDA,EAAM1pE,KACJ/M,EAAO83C,UAAUytB,EAAU1sC,MAAOg7C,IAEpCxzE,KAAK+vE,YAAc7K,EAAU51D,KACtB3P,EAAOg6C,MAAM,KAAMy8B,EAAO5C,GAIrC,IAAI/4C,EAAWrwB,OAAOs5D,EAAexpD,UAAUugB,UAE/C,OADAz6B,KAAK+vE,YAAct1C,EACZ96B,EAAO83C,UAAUytB,EAAU1sC,MAAOiC,EAASk5B,gBAOpD,OALA3zD,KAAKqN,MACHwW,EAAApZ,eAAe26D,+CACfvzD,EAAW9G,OAEb/K,KAAK+vE,YAAc/vE,KAAKmpB,QAAQI,UACzB5pB,EAAOy7C,cAEhB,KAAKr3B,EAAApW,SAASc,MACZ,IAAI26E,EAAOppF,KAAKmxE,YACZkY,EAAiBD,EAAK1lB,eAU1B,GATI2lB,EAAehsE,GAAG9P,EAAAlL,YAAYid,eAC3B8pE,EAAK/rE,GAAE,MAEVrd,KAAKqN,MACHwW,EAAApZ,eAAe6+E,iGACfz3E,EAAW9G,QAIbq+E,EAAK/rE,GAAE,OAA4B,CACrC,IAAIksE,EAAaH,EAAKjkB,YAAY53D,EAAAvK,cAAcoC,OAChD,GAAImkF,EAAY,CACd,IACI9sD,EADkBryB,OAAOm/E,EAAWj6E,KAAK2vB,gBAClBxC,KAC3B,GAAIA,EAEF,OADAz8B,KAAK+vE,YAActzC,EAAKntB,KACjB3P,EAAO83C,UAAU8xC,EAAW/wD,MAAOiE,EAAKntB,KAAKqkD,iBAI1D,GAAI01B,EAAehsE,GAAG9P,EAAAlL,YAAY2zB,UAAW,CACvC5N,EAAgBhe,OAAOi/E,EAAe7oE,QAASpW,OAAOge,EAAcva,MAAQikD,EAAAlrC,YAAYxH,OAC5F,IAAIslE,EAA4Bt8D,EAAeqU,KAC/C,GAAIioD,EAAmB,CACrB,IAAI8E,EAAY9E,EAAkBp1E,KAElC,OADAtP,KAAK+vE,YAAcyZ,EACZ7pF,EAAO83C,UAAU,EAAG+xC,EAAU71B,iBAQzC,OALA3zD,KAAKqN,MACHwW,EAAApZ,eAAe66D,iDACfzzD,EAAW9G,OAEb/K,KAAK+vE,YAAc/vE,KAAKmpB,QAAQI,UACzB5pB,EAAOy7C,cAIlBp7C,KAAKmpF,4BAA4Bt3E,GAGjC,IAAI8rB,EAAS39B,KAAK+nB,SAAS07C,kBACzB5xD,EACAipB,EACA96B,KAAK8vE,aAAepM,GAEtB,IAAK/lC,EAAQ,OAAOh+B,EAAOy7C,cAE3B,OAAQzd,EAAO9vB,MACb,KAAKikD,EAAAlrC,YAAY6R,MACf,IAAInpB,EAAequB,EAAQruB,KAE3B,GADAlF,OAAOkF,GAAQwU,EAAAuF,KAAKG,MACRmU,EAAQtgB,GAAG9P,EAAAlL,YAAY61B,SACjC,OAAOl4B,KAAK68E,sBAA6Bl/C,EAAQm/C,EAAgBtB,GAEnE,IAAIjhD,EAAqBoD,EAAQnF,MAMjC,OALApuB,OAAOmwB,GAAc,GACjBjrB,EAAK+N,GAAE,MAAwByd,EAAKkvC,YAAYzvC,EAAYtW,EAAA4jD,WAAW9C,SAAS,KAClFz1D,EAAOA,EAAKijD,iBAEdvyD,KAAK+vE,YAAczgE,EACZtP,KAAKL,OAAO83C,UAAUld,EAAYjrB,EAAKqkD,gBAEhD,KAAK7B,EAAAlrC,YAAYhJ,OACf,IAAK5d,KAAK6zE,cAAsBl2C,GAC9B,OAAO39B,KAAKL,OAAOy7C,cAEjB9rC,EAAgBquB,EAAQruB,KAE5B,OADAlF,OAAOkF,GAAQwU,EAAAuF,KAAKG,MACPmU,EAAQtgB,GAAG9P,EAAAlL,YAAY61B,SAC3Bl4B,KAAK68E,sBAA8Bl/C,EAAQm/C,EAAgBtB,IAEpEx7E,KAAK+vE,YAAczgE,EACZtP,KAAKL,OAAOk4C,WAAoBla,EAAQ7V,aAAcxY,EAAKqkD,iBAEpE,KAAK7B,EAAAlrC,YAAYwR,UACf,OAAKuF,EAAOtgB,GAAG9P,EAAAlL,YAAY0wE,WAQ3B/yE,KAAK+vE,YAAcjsD,EAAAuF,KAAKjmB,IACRu6B,EAAQtgB,GAAG9P,EAAAlL,YAAY61B,UACrC9tB,OAA4C,GAAzBuzB,EAAQ3F,mBACpBh4B,KAAKL,OAAOyD,IAAIw8C,QAAoBjiB,EAAQ1F,wBAE9Cj4B,KAAKL,OAAOk4C,WAAuBla,EAAQ7V,aAAciqC,EAAAjyB,WAAW15B,OAZzEpG,KAAKqN,MACHwW,EAAApZ,eAAeg/E,+HACf53E,EAAW9G,OAEb/K,KAAK+vE,YAAcjsD,EAAAuF,KAAKjmB,IACjBpD,KAAKL,OAAOy7C,eASvB,KAAK0W,EAAAlrC,YAAYqK,mBACf,IAAIgI,EAAWj5B,KAAK+nB,SAASmJ,gBACRyM,EACnB,KACA9zB,EAAA43D,QAAqB3mC,EAAK3B,0BAE5B,IAAMF,IAAYj5B,KAAKi2E,gBAAgBh9C,GAAY,OAAOt5B,EAAOy7C,cACjE,IAAI5iB,EAAQx4B,KAAK24E,yBAAyB1/C,GAE1C,OADAj5B,KAAK+vE,YAAc92C,EAAS/e,UAAU5K,KAC/BtP,KAAKL,OAAOyD,IAAIo1B,GAO3B,OAJAx4B,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEN/K,KAAKL,OAAOy7C,eAGrBw0B,EAAA3tE,UAAAq7E,4BAAA,SACEzrE,EACAirE,EACAtB,GAEA,IAAI77E,EAASK,KAAKL,OAKdwR,EAAOnR,KAAK+0E,kBAAkBljE,EAAWA,WAAY7R,KAAKmpB,QAAQI,WAClEmgE,EAAa1pF,KAAK+vE,YAClB72B,EAAel5C,KAAK+nB,SAAS44C,YAAY9uD,EAAW8B,OAAQ3T,KAAKmxE,YAAYzN,gBAEjF,GADA1jE,KAAK+vE,YAAcjsD,EAAAuF,KAAKzlB,MACnBs1C,EAAc,OAAOv5C,EAAOy7C,cAGjC,IAAKlC,EAAa77B,GAAE,KAClB,OAAO1d,EAAOg6C,MAAM,KAAM,CACxBh6C,EAAOq6C,KAAK7oC,GACZxR,EAAOyD,IAAIsmF,GAAcxwC,EAAe,EAAI,IAC3C6Y,EAAAjyB,WAAW15B,KAIhB,IAAKsjF,EAAWrsE,GAAE,KAChB,OAAO1d,EAAOg6C,MAAM,KAAM,CACxBh6C,EAAOq6C,KAAK7oC,GACZxR,EAAOyD,IAAI,IACV2uD,EAAAjyB,WAAW15B,KAIhB,IAAIotE,EAAiBkW,EAAW/1B,eAGhC,GAAI+1B,EAAWrsE,GAAE,OAAyB67B,EAAa77B,GAAE,KAAsB,CAG7E,GAAIqsE,EAAWn3B,gBAAgB70B,eAAewb,GAC5C,OAAOv5C,EAAOw3C,OACZq8B,GAAkBzhB,EAAAjyB,WAAWz5B,IACzB0rD,EAAArpB,SAASkjC,MACT7Z,EAAArpB,SAASijC,MACbx6D,EACAu4E,EAAW91B,aAAaj0D,IAK5B,GAAIu5C,EAAaxb,eAAegsD,GAAa,CAC3C,IAAInzD,EAAUv2B,KAAKu2B,QACnB,IAAMmzD,EAAWxW,cAAeh6B,EAAag6B,YAAc,CACzD,IACI0I,EADO57E,KAAKmxE,YACK5H,oBAAoBmgB,GACrCr5D,EAAqBjmB,OAAOmsB,EAAQlG,oBAExC,OADArwB,KAAKi2E,gBAAgB5lD,GACd1wB,EAAOy6C,GACZz6C,EAAOq3C,MACLw8B,GAAkBzhB,EAAAjyB,WAAWz5B,IACzB0rD,EAAA3uB,QAAQmoC,OACRxZ,EAAA3uB,QAAQkoC,OACZ3rE,EAAOg4C,UAAUikC,EAAUpjD,MAAOrnB,IAEpCxR,EAAOyD,IAAI,GACXpD,KAAKqhF,eAAehxD,EAAoB,CACtC1wB,EAAO83C,UAAUmkC,EAAUpjD,MAAOg7C,GAClC7zE,EAAOyD,IAAI81C,EAAaja,eAAgB1W,KACvC1W,IAGL7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,YAMZ,CAGL,GAAI2+E,EAAWhsD,eAAewb,GAC5B,OAAOv5C,EAAOg6C,MAAM,KAAM,CACxB35C,KAAK89E,kBAAkB3sE,EAAMu4E,EAAY5lE,EAAAuF,KAAKG,MAAM,GAAO,EAAO3X,EAAWA,YAC7ElS,EAAOyD,IAAI,IACV2uD,EAAAjyB,WAAW15B,KAGT,GAAI8yC,EAAaxb,eAAegsD,GAAa,CAC9CnzD,EAAUv2B,KAAKu2B,QACnB,IAAMmzD,EAAWxW,cAAeh6B,EAAag6B,YAAc,CAKrD0I,EADO57E,KAAKmxE,YACK5H,oBAAoBmgB,GACrCr5D,EAAqBjmB,OAAOmsB,EAAQlG,oBAExC,OADArwB,KAAKi2E,gBAAgB5lD,GACd1wB,EAAOy6C,GACZz6C,EAAOq3C,MACLw8B,GAAkBzhB,EAAAjyB,WAAWz5B,IACzB0rD,EAAA3uB,QAAQmoC,OACRxZ,EAAA3uB,QAAQkoC,OACZ3rE,EAAOg4C,UAAUikC,EAAUpjD,MAAOrnB,IAEpCxR,EAAOyD,IAAI,GACXpD,KAAKqhF,eAAehxD,EAAoB,CACtC1wB,EAAO83C,UAAUmkC,EAAUpjD,MAAOg7C,GAClC7zE,EAAOyD,IAAI81C,EAAaja,eAAgB1W,KACvC1W,IAGL7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,QAOnB,OAAOpL,EAAOg6C,MAAM,KAAM,CACxBh6C,EAAOq6C,KAAK7oC,GACZxR,EAAOyD,IAAI,IACV2uD,EAAAjyB,WAAW15B,MAGhBwpE,EAAA3tE,UAAAs7E,yBAAA,SACE1rE,EACAirE,EACAtB,EACAmO,QAAA,IAAAA,OAAA,GAEA,IAAIhqF,EAASK,KAAKL,OAClB,OAAQkS,EAAWiN,aACjB,KAAKiF,EAAAnF,YAAYG,MACf3U,QAAQu/E,GACR,IAAI12B,EAAY6pB,EAAe79C,eAC/B,OAAIg0B,GACEA,EAAUhxD,WAAajC,KAAKu2B,QAAQhH,eAC/BvvB,KAAK4pF,oBACVx/E,OAAO6oD,EAAU7jD,eAAe,GACPyC,EAAYH,mBACrC8pE,EACA3pE,IAIN7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAENpL,EAAOy7C,eAEhB,KAAKr3B,EAAAnF,YAAYW,MACf,IAAIsqE,EAAsCh4E,EAAYvQ,MAItD,OAHIqoF,IACFE,GAAcA,GAEZ/M,GAAkBh5D,EAAAuF,KAAKxlB,IAClBlE,EAAOkE,IAASgmF,IAEzB7pF,KAAK+vE,YAAcjsD,EAAAuF,KAAKvlB,IACjBnE,EAAOmE,IAAI+lF,IAEpB,KAAK9lE,EAAAnF,YAAYc,QACf,IAAI6kD,EAAsC1yD,EAAYvQ,MAClDqoF,IACFplB,EAAWS,QACTl7C,QAAQ,GACRy6C,IAGJ,IAAIj1D,EAAOtP,KAAK+nB,SAASu8C,4BAA4BC,EAAUuY,GAE/D,OADA98E,KAAK+vE,YAAczgE,EACXA,EAAKzB,MACX,OAAqB,IAAK7N,KAAKmpB,QAAQY,SAAU,OAAOpqB,EAAOyD,IAAIw8C,QAAQ2kB,IAC3E,OAAmB,OAAO5kE,EAAO0D,IAAIu8C,QAAQ2kB,GAAW1kB,SAAS0kB,IACjE,OAAqB,IAAKvkE,KAAKmpB,QAAQY,SAAU,OAAOpqB,EAAOyD,IAAIw8C,QAAQ2kB,IAC3E,OAAmB,OAAO5kE,EAAO0D,IAAIu8C,QAAQ2kB,GAAW1kB,SAAS0kB,IACjE,QAAmB,OAAO5kE,EAAOkE,IAAIimF,WAAWvlB,IAChD,QAAmB,OAAO5kE,EAAOmE,IAAIimF,WAAWxlB,IAChD,QAAS,OAAO5kE,EAAOyD,IAAIw8C,QAAQ2kB,IAGvC,KAAKxgD,EAAAnF,YAAYmB,OAEf,OADA3V,QAAQu/E,GACD3pF,KAAKgqF,qBAA8Cn4E,GAE5D,KAAKkS,EAAAnF,YAAYgB,OAEf,OADAxV,QAAQu/E,GACD3pF,KAAKiqF,qBAA8Cp4E,EAAYirE,GAS1E,OALA98E,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAEb/K,KAAK+vE,YAAc+M,EACZn9E,EAAOy7C,eAGhBw0B,EAAA3tE,UAAA+nF,qBAAA,SAAqBn4E,GACnB,OAAO7R,KAAKy3E,mBAAmB5lE,EAAWvQ,QAG5CsuE,EAAA3tE,UAAA2nF,oBAAA,SACE7R,EACAnlE,EACA4oE,EACAjV,GAmBA,IAjBA,IAAI5mE,EAASK,KAAKL,OACd42B,EAAUv2B,KAAKu2B,QACfhH,EAAiBnlB,OAAOmsB,EAAQhH,gBAChC+oD,EAAgBluE,OAAOpK,KAAK+nB,SAASiJ,aAAazB,EAAgB,CAAEwoD,KACpE1qD,EAAsBjjB,OAAOmsB,EAAQlJ,qBACrC82C,EAAYmU,EAAchpE,KAC1BwrB,EAAO96B,KAAKmxE,YAGZmT,EAAWxpD,EAAK+tC,aAAa1E,GAC7B+lB,EAAgBpvD,EAAK+tC,aAAax7C,EAAoB/d,MAGtDnD,EAASyG,EAAYzG,OACrBkI,EAAS,IAAIpN,MAAqBkF,GAClCooB,GAAW,EACX41D,EAAoBpS,EAAYpkB,eAC3BtzD,EAAI,EAAGA,EAAI8L,IAAU9L,EAAG,CAC/B,IAAIwR,EAAae,EAAYvS,GACzB8Q,EAAOU,EACPlS,EAAOuiD,qBACLliD,KAAK+0E,kBAA8BljE,EAAYkmE,EAAW,IAI5DA,EAAYnkB,aAAaj0D,GACzBoyD,EAAApL,gBAAgBx1C,IAAS4gD,EAAAhyB,aAAa0kB,MACxCr6C,OAAO2nD,EAAAnL,kBAAkBz1C,IAASg5E,GAElC51D,GAAW,EAEblgB,EAAOhU,GAAK8Q,EAId,GAAIojB,EAAU,CACZuG,EAAKwuC,cAAcgb,GACnBxpD,EAAKwuC,cAAc4gB,GAEnB,IAAIrS,EAAoBthD,EAAQshD,kBAC5BQ,EAAgBr4E,KAAK83E,wBAAwBC,EAAa1jE,GAC1D+1E,EAAgBtrB,QAAQuZ,EAAclwD,OAAQ2B,QAAQ+tD,IAI1D,GAAe,GAAX2D,EAAyC,CAC3C,IAAI6O,EAAerqF,KAAKo4E,wBAAwBL,EAAaM,GACzDiS,EAAexrB,QAAQurB,EAAaliE,OAAQ2B,QAAQ+tD,IAExD,OADA73E,KAAK+vE,YAAc5L,EACZ5tC,EAAQpN,QAAQY,SACnB/pB,KAAKL,OAAO0D,IAAIu8C,QAAQ0qC,GAAezqC,SAASyqC,IAChDtqF,KAAKL,OAAOyD,IAAIw8C,QAAQ0qC,IAKxBn5E,EAAOnR,KAAKqhF,eAAe9qD,EAAQhG,mBAAoB,CACzD5wB,EAAOyD,IAAI+I,GACXoqB,EAAQpN,QAAQY,SACZpqB,EAAO0D,IAAI00E,EAAYwS,WACvB5qF,EAAOyD,IAAI20E,EAAYwS,WAC3B5qF,EAAOyD,IAAIk1E,EAAc/vD,IACzBgO,EAAQpN,QAAQY,SACZpqB,EAAO0D,IAAIu8C,QAAQwqC,GAAgBvqC,SAASuqC,IAC5CzqF,EAAOyD,IAAIw8C,QAAQwqC,KACtB7jB,GAEH,OADAvmE,KAAK+vE,YAAc5L,EACZnkE,KAAK4jF,gBAAgB5jF,KAAKszE,WAAWniE,IAMhD,IADamnE,EAAc76C,eAAeq0B,EAAAluC,aAAakB,aAAa,GASlE,OAPAgW,EAAKwuC,cAAcgb,GACnBxpD,EAAKwuC,cAAc4gB,GACnBlqF,KAAKqN,MACHwW,EAAApZ,eAAe84E,+CACfhd,EAAWx7D,MAAOutE,EAAcxwD,cAElC9nB,KAAK+vE,YAAc5L,EACZxkE,EAAOy7C,cAEhB,IAAIovC,EAAkBrmB,EAAUxQ,eAE5ByiB,EAAQ,IAAInvE,MAEhBmvE,EAAM1pE,KACJ/M,EAAO45C,UAAU+qC,EAAS9rD,MACxBx4B,KAAKqhF,eAAe9qD,EAAQhG,mBAAoB,CAC9C5wB,EAAOyD,IAAI+I,GACXoqB,EAAQpN,QAAQY,SACZpqB,EAAO0D,IAAI00E,EAAYwS,WACvB5qF,EAAOyD,IAAI20E,EAAYwS,WAC3B5qF,EAAOyD,IAAIk1E,EAAc/vD,IACzBgO,EAAQpN,QAAQY,SACZpqB,EAAO0D,IAAI,GACX1D,EAAOyD,IAAI,IACdmjE,KAIP,IAAIkkB,EAAYrgF,OAAOkuE,EAAcrrD,aAAa,cAClD7iB,OAAOqgF,EAAU58E,MAAQikD,EAAAlrC,YAAYgL,OACrCwkD,EAAM1pE,KACJ/M,EAAO45C,UAAU2wC,EAAc1xD,MAC7B74B,EAAOo4C,KAAKosB,EAAU/R,UAAU,EAC9BzyD,EAAO83C,UAAU6sC,EAAS9rD,MAAOgyD,GACjCA,EACQC,EAAW3uD,gBAKzB,IADA,IAAIu3C,EAAY0E,EAAY1E,UACZkX,GAAPlqF,EAAI,EAAe03E,EAAYwS,WAAWlqF,EAAI8L,IAAU9L,EAAG,CAClE,IAAIozE,EAAYp/D,EAAOhU,GACnBgzE,IAEFI,EAAYzzE,KAAKszE,WAAWG,IAG9B2C,EAAM1pE,KACJ/M,EAAOm3C,MAAMihC,EAAY3lB,SACvBzyD,EAAO83C,UAAUyyC,EAAc1xD,MAAOgyD,GACtC/W,EACA0W,EACA9pF,GAAKkqF,IAWX,OANAnU,EAAM1pE,KACJ/M,EAAO83C,UAAU6sC,EAAS9rD,MAAOgyD,IAEnC1vD,EAAKwuC,cAAcgb,GACnBxpD,EAAKwuC,cAAc4gB,GACnBlqF,KAAK+vE,YAAc5L,EACZxkE,EAAOg6C,MAAM,KAAMy8B,EAAOoU,IAGnC5a,EAAA3tE,UAAAgoF,qBAAA,SAAqBp4E,EAAqCirE,GACxD,IAAIn9E,EAASK,KAAKL,OAGds/B,EAAiB69C,EAAe79C,eACpC,IAAKA,GAAkBA,EAAe5hB,GAAG9P,EAAAlL,YAAY+xB,UAKnD,OAJAp0B,KAAKqN,MACHwW,EAAApZ,eAAeuqE,mCACfnjE,EAAW9G,MAAO,WAAY+xE,EAAepxE,YAExC/L,EAAOy7C,cAIhB,IAAIsvC,EAAOzrD,EAAerC,oBAC1B,GAAI8tD,EAAM,CAGR,GAAIA,EAAKxwE,UAAUo6C,mBAKjB,OAJAt0D,KAAKqN,MACHwW,EAAApZ,eAAekgF,sDACf94E,EAAW9G,MAAOk0B,EAAevzB,YAE5B/L,EAAOy7C,cAEhB,GAAIsvC,EAAKrtE,GAAG9P,EAAAlL,YAAYw0D,SAKtB,OAJA72D,KAAKqN,MACHwW,EAAApZ,eAAemgF,mFACf/4E,EAAW9G,MAAOk0B,EAAevzB,YAE5B/L,EAAOy7C,cAEhB,GAAIsvC,EAAKrtE,GAAG9P,EAAAlL,YAAYy0D,WAKtB,OAJA92D,KAAKqN,MACHwW,EAAApZ,eAAeogF,qFACfh5E,EAAW9G,MAAOk0B,EAAevzB,YAE5B/L,EAAOy7C,cAEZsvC,EAAK/7D,aAAamjC,EAAAjrC,eAAe3I,SAASle,KAAKmjF,YAAYtxE,GAIjE,IAAIuC,EAAQvC,EAAWuC,MACnB0mC,EAAW1mC,EAAMjI,OACjBkI,EAASxC,EAAWwC,OACpBsC,EAAUsoB,EAAetoB,QACzBm0E,GAAY,EACZ/B,EAAQ,IAAI9hF,MAAqB6zC,EAAW,GAE5C8gC,EADO57E,KAAKmxE,YACKjI,oBAAoBlpE,KAAKmpB,QAAQI,WACtDnf,OAAO0wC,GAAYzmC,EAAOlI,QAC1B,IAAK,IAAI9L,EAAI,EAAGojB,EAAIq3B,EAAUz6C,EAAIojB,IAAKpjB,EAAG,CACxC,IAAIkxB,EAAS5a,EAAUA,EAAQzV,IAAIkT,EAAM/T,GAAG4L,MAAQ,KACpD,GAAKslB,GAAUA,EAAO1jB,MAAQikD,EAAAlrC,YAAYgL,MAA1C,CAQA,IAAItiB,EAAeiiB,EAAQjiB,KAC3By5E,EAAM1oF,EAAI,GAAKL,KAAKL,OAAOm3C,MACzBxnC,EAAK8iD,SACLpyD,KAAKL,OAAO83C,UAAUmkC,EAAUpjD,MAAOx4B,KAAKmpB,QAAQqqD,gBACpDxzE,KAAK+0E,kBAAkB1gE,EAAOhU,GAAYkxB,EAAQjiB,KAAI,GACtDA,EAAKqkD,eACGpiC,EAAQuK,mBAbhB97B,KAAKqN,MACHwW,EAAApZ,eAAek4D,oCACfvuD,EAAM/T,GAAG0K,MAAOqJ,EAAM/T,GAAG4L,KAAMgzB,EAAevzB,YAEhDo/E,GAAY,EAahB,OADA9qF,KAAK+vE,YAAc9wC,EAAe3vB,KAAKijD,gBACnCu4B,EAAkBnrF,EAAOy7C,eAG7B2tC,EAAM,GAAKppF,EAAO45C,UAChBqiC,EAAUpjD,MACVx4B,KAAKszE,WACHtzE,KAAK42E,eAAe33C,KAKxB8pD,EAAMA,EAAM58E,OAAS,GAAKxM,EAAO83C,UAAUmkC,EAAUpjD,MAAOx4B,KAAKmpB,QAAQqqD,gBAEzExzE,KAAK+vE,YAAc9wC,EAAe3vB,KAC3B3P,EAAOg6C,MAAM,KAAMovC,EAAO/oF,KAAKmpB,QAAQqqD,kBAGhD5D,EAAA3tE,UAAAu7E,qBAAA,SACE3rE,EACAirE,EACAtB,GAEA,IAAI77E,EAASK,KAAKL,OACdm7B,EAAO96B,KAAKmxE,YAGZxzC,EAAS39B,KAAK+nB,SAASi7C,kBACzBnxD,EAAWA,WACXipB,GAEF,IAAK6C,EAAQ,OAAOh+B,EAAOy7C,cAC3B,GAAIzd,EAAO9vB,MAAQikD,EAAAlrC,YAAY+G,gBAK7B,OAJA3tB,KAAKqN,MACHwW,EAAApZ,eAAesgF,yEACfl5E,EAAWA,WAAW9G,OAEjB/K,KAAKL,OAAOy7C,cAErB,IAGInc,EAHAxK,EAAiCkJ,EACjCvV,EAA8B,KAC9BhZ,EAAgByC,EAAWzC,cAqB/B,OAdEgZ,GAJChZ,GACoD,QAApD6vB,EAAiB69C,EAAe79C,iBACjCA,EAAe5hB,GAAG9P,EAAAlL,YAAYsnB,SAEd3pB,KAAK+nB,SAASiJ,aAC5ByD,EACAwK,EAAe7vB,cACfvF,EAAA43D,QAAqB3mC,EAAK3B,0BAGZn5B,KAAK+nB,SAASy5C,8BAC5B/sC,EACArlB,EACA0rB,EAAK4oC,eAAeljD,OACpB3W,EAAA43D,QAAqB3mC,EAAK3B,yBAC1BtnB,KAIAirE,GAAkBh5D,EAAAuF,KAAKG,OAAMgyD,GAAW,GACrCx7E,KAAKgrF,mBAAmB5iE,EAAevW,EAAWlB,UAAW6qE,EAAa3pE,IAFtDlS,EAAOy7C,eAMpCw0B,EAAA3tE,UAAA4iF,kBAAA,SAAkBz8D,EAAsBm+C,GACtC,IAAIttC,EAAW7Q,EAAcwU,oBAC7B,GAAI3D,EAGF,OADKA,EAAStK,aAAamjC,EAAAjrC,eAAehJ,SAAS7d,KAAKi2E,gBAAgBh9C,GACjEA,EAIT,IAAIytC,EAAYt+C,EAAcqU,KAC9B,GAAIiqC,EAAW,CACb,IAAIukB,EAAWjrF,KAAK6kF,kBAAkBne,EAAWH,GACjDttC,EAAW,IAAI64B,EAAAhpC,SACbvb,EAAAvK,cAAcsC,YACd,IAAIwsD,EAAA/oC,kBACFxb,EAAAvK,cAAcsC,YACd8iB,EAEsB6iE,EAASx4E,YAAa6P,SAE9C2oE,EAAS/wE,UACT,WAKF+e,EAAW,IAAI64B,EAAAhpC,SACbvb,EAAAvK,cAAcsC,YACd,IAAIwsD,EAAA/oC,kBACFxb,EAAAvK,cAAcsC,YACd8iB,EACApoB,KAAKu2B,QAAQ7N,8BAA8Bnb,EAAAvK,cAAcsC,YACvDiI,EAAAlL,YAAY2zB,SAAWzoB,EAAAlL,YAAYid,cAGvC,IAAIwE,EAAAoT,UAAUl3B,KAAKu2B,QAAS,KAAMnO,EAAc9Y,KAAM8Y,EAAc9Y,MACpE,MAIJ2pB,EAASnR,aAAeM,EAAcN,aAAeva,EAAA7K,mBAAqB,cAC1Eu2B,EAASzb,IAAIjQ,EAAAlL,YAAY0wE,UACzB95C,EAASh3B,UAAU+2B,oBAAoB,GAAIC,GAC3C7Q,EAAcwU,oBAAsB3D,EACpC,IAAIu7C,EAAex0E,KAAKmxE,YACpBr2C,EAAO7B,EAAS6B,KACpB96B,KAAKmxE,YAAcr2C,EAGnB,IAAI5gB,EAAY+e,EAAS/e,UACrBva,EAASK,KAAKL,OACd6zE,EAAiBxzE,KAAKmpB,QAAQqqD,eAC9B4C,EAAQ,IAAInvE,MAqBhB,GAZAmvE,EAAM1pE,KACJ/M,EAAOy6C,GACLz6C,EAAOq3C,MAAMw8B,GAAkBzhB,EAAAjyB,WAAWz5B,IAAM0rD,EAAA3uB,QAAQmoC,OAASxZ,EAAA3uB,QAAQkoC,OACvE3rE,EAAO83C,UAAU,EAAG+7B,IAEtB7zE,EAAO45C,UAAU,EACfv5C,KAAKszE,WACHtzE,KAAK42E,eAAexuD,OAKxBs+C,EAAW,CACb,IAAIhsC,EAAiBxgB,EAAUwgB,eAC3Bo6B,EAAgBp6B,EAAevuB,OAC/BmrC,EAAW,IAAIrwC,MAAqB,EAAI6tD,GAC5Cxd,EAAS,GAAK33C,EAAO83C,UAAU,EAAG+7B,GAClC,IAAK,IAAInzE,EAAI,EAAGA,EAAIy0D,IAAiBz0D,EACnCi3C,EAASj3C,EAAI,GAAKV,EAAO83C,UAAUp3C,EAAI,EAAGq6B,EAAer6B,GAAGszD,gBAG9DyiB,EAAM1pE,KACJ/M,EAAO45C,UAAU,EACfv5C,KAAKqhF,eAAej3E,OAAOs8D,EAAU9pC,qBAAsB0a,EAAUivB,GAAY,GAAO,KAI9FvmE,KAAK62E,wBAAwBzuD,EAAeguD,GAC5C,IAAIj8D,EAAOna,KAAKwiF,6BAA6B1nD,EAAMn7B,EAAO83C,UAAU,EAAG+7B,GAAiBprD,EAAc9Y,KAAM8mE,GAC5Gt7C,EAAKgvC,mBACL9pE,KAAKmxE,YAAcqD,EAGnB,IAAIh3B,EAAUx9C,KAAK8xE,mBAAmB53D,EAAUwgB,eAAgBxgB,EAAUxK,WAAYwK,EAAUugB,UAC5FS,EAASjC,EAASI,cAClB6jB,EAAW,IAAIj2C,MACfwhF,EAAc,EAAIvuE,EAAUwgB,eAAevuB,OAC3CwoE,EAAYz5C,EAAO/uB,OACvB,GAAIwoE,EAAY8T,EACd,IAASpoF,EAAIooF,EAAapoF,EAAIs0E,IAAat0E,EAAG68C,EAASxwC,KAAKwuB,EAAO76B,GAAGiP,KAAKqkD,gBAE7E,IAAIke,EAAUlyE,EAAOs9C,YAAYhkB,EAASnR,aAAc01B,EAASN,EAAU/iC,GAE3E,OADA8e,EAASkC,SAASx7B,EAAQkyE,GACnB54C,GAGT22C,EAAA3tE,UAAA+oF,mBAAA,SAEE5iE,EAEA29D,EAEAvK,EAEAjV,GAEA,IAAImkB,EAAO1qF,KAAK6kF,kBAAkBz8D,EAAem+C,GAC7CmkB,EAAK/7D,aAAamjC,EAAAjrC,eAAe3I,SAASle,KAAKmjF,YAAY5c,GAC/D,IAAIp1D,EAAOnR,KAAK4kF,kBACd8F,EACA3E,EACAxf,EACAvmE,KAAKmpB,QAAQI,UAAUqqC,aAAa5zD,KAAKL,QACzC67E,GAKF,OAHIzpB,EAAAnL,kBAAkBz1C,IAAS4gD,EAAAjyB,WAAWsY,OACxCp4C,KAAK+vE,YAAc3nD,EAAc9Y,MAE5B6B,GAQTy+D,EAAA3tE,UAAAw7E,gCAAA,SACEyN,EACApO,EACAtB,GAEA,IAAI77E,EAASK,KAAKL,OACdm7B,EAAO96B,KAAKmxE,YAEhBnxE,KAAKmpF,4BAA4B+B,GAEjC,IAAIvtD,EAAS39B,KAAK+nB,SAAS67C,gCAAgCsnB,EAAgBpwD,EAAMgiD,GACjF,IAAKn/C,EAAQ,OAAOh+B,EAAOy7C,cAG3B,OAFIzd,EAAOhP,aAAamjC,EAAAjrC,eAAe3I,SAASle,KAAKmjF,YAAY+H,GAEzDvtD,EAAO9vB,MACb,KAAKikD,EAAAlrC,YAAYhJ,OACf,IAAK5d,KAAK6zE,cAAsBl2C,GAC9B,OAAOh+B,EAAOy7C,cAEhB,IAAI8D,EAAsBvhB,EAAQruB,KAElC,OADAlF,OAAO80C,GAAcp7B,EAAAuF,KAAKG,MACbmU,EAAQtgB,GAAG9P,EAAAlL,YAAY61B,SAC3Bl4B,KAAK68E,sBAA8Bl/C,EAAQm/C,EAAgBtB,IAEpEx7E,KAAK+vE,YAAc7wB,EACZv/C,EAAOk4C,WAAoBla,EAAQ7V,aAAco3B,EAAWyU,iBAErE,KAAK7B,EAAAlrC,YAAYwR,UACf,IAAI+yD,EAAU/gF,OAAmBuzB,EAAQnd,QACzC,OADkDpW,OAAO+gF,EAAQt9E,MAAQikD,EAAAlrC,YAAYiR,MAChF73B,KAAK8zE,YAAkBqX,IAI5BnrF,KAAK+vE,YAAcjsD,EAAAuF,KAAKjmB,IACRu6B,EAAQtgB,GAAG9P,EAAAlL,YAAY61B,UACrC9tB,OAA4C,GAAzBuzB,EAAQ3F,mBACpBr4B,EAAOyD,IAAIw8C,QAAoBjiB,EAAQ1F,wBAEzCt4B,EAAOk4C,WAAuBla,EAAQ7V,aAAciqC,EAAAjyB,WAAW15B,OARpEpG,KAAK+vE,YAAcjsD,EAAAuF,KAAKjmB,IACjBpD,KAAKL,OAAOy7C,eASvB,KAAK0W,EAAAlrC,YAAYgL,MACfxnB,OAAeuzB,EAAQ7B,cAAgB,GACvC,IAAIioD,EAAW/jF,KAAK+0E,kBAAkB3qE,OAAOpK,KAAK+nB,SAAS04C,uBAAwBzgE,KAAKmpB,QAAQI,WAEhG,OADAvpB,KAAK+vE,YAAsBpyC,EAAQruB,KAC5B3P,EAAOo4C,KACJpa,EAAQruB,KAAK8iD,SACbz0B,EAAQruB,KAAK+N,GAAG,GACxB0mE,EACQpmD,EAAQruB,KAAKqkD,eACbh2B,EAAQ7B,cAGpB,KAAKg2B,EAAAlrC,YAAY4K,mBACf,IAAIC,EAAsCkM,EAAQlM,gBAClD,GAAIA,EAAiB,CACnB,IAAI5wB,EAASb,KAAK+nB,SAASmJ,gBAAgBO,EAAiB,MAC5D,GAAI5wB,EAAQ,OAAOb,KAAK4kF,kBAAkB/jF,EAAQ,GAAIqqF,EAAgB,GAExE,OAAOvrF,EAAOy7C,cAEhB,KAAK0W,EAAAlrC,YAAY+K,SACf,IAAIsK,EAAiB7xB,OAAkBuzB,EAAQ1B,gBAC/C,OAAOj8B,KAAK4kF,kBAAkB3oD,EAAgB,GAAIivD,EAChDlrF,KAAK+0E,kBAAkB3qE,OAAOpK,KAAK+nB,SAAS04C,uBAAwBzgE,KAAKmpB,QAAQI,YAGrF,KAAKuoC,EAAAlrC,YAAYqK,mBACf,IAAIhvB,EAA+B07B,EAEnC,GAAI17B,EAAUob,GAAG9P,EAAAlL,YAAY4xB,QAAS,CACpC,IAAIgF,EAAWj5B,KAAK+zE,kCAClB9xE,EACA,GACA4H,EAAA43D,UACAypB,GAEF,OAAgB,MAAZjyD,EACKt5B,EAAOy7C,eAEdp7C,KAAK+vE,YAAc92C,EAAS3pB,KACrB3P,EAAOyD,IAAIpD,KAAK24E,yBAAyB1/C,KAQpD,OAJAj5B,KAAKqN,MACHwW,EAAApZ,eAAe2gF,wEACfF,EAAengF,MAAO9I,EAAUrB,MAE3BjB,EAAOy7C,cAOlB,OAJAp7C,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACfy3D,EAAengF,OAEVpL,EAAOy7C,eAGhBw0B,EAAA3tE,UAAAy7E,yBAAA,SACE7rE,EACAirE,EACAtB,GAEA,IAAItmE,EAASrD,EAAWqD,OACpBC,EAAStD,EAAWsD,OACpB+kE,EAAYl6E,KAAKmxE,YAEjBmJ,EAAWt6E,KAAKL,OAAOuiD,qBACzBliD,KAAKu6E,cACHv6E,KAAK+0E,kBAAkBljE,EAAWoD,UAAW6O,EAAAuF,KAAKzlB,MAClD5D,KAAK+vE,cAKT,GACEhe,EAAApL,gBAAgB2zB,IAAavoB,EAAAhyB,aAAa0kB,OAC1CsN,EAAAnL,kBAAkB0zB,IAAavoB,EAAAjyB,WAAW15B,IAE1C,OAAO2rD,EAAAlL,iBAAiByzB,GACpBt6E,KAAK+0E,kBAAkB7/D,EAAQ4nE,GAC/B98E,KAAK+0E,kBAAkB5/D,EAAQ2nE,GAGrC,IAAI0C,EAAkC,GAAXhE,EAEvB6P,EAAanR,EAAUxR,OAC3B1oE,KAAKmxE,YAAcka,EACnB,IAAIC,EAAatrF,KAAK+0E,kBAAkB7/D,EAAQ4nE,EAAgB0C,GAC5D+L,EAAavrF,KAAK+vE,YAClByb,EAA2BxrF,KAAKswE,oBAAoBrnD,IAAIqiE,GAExDG,EAAavR,EAAUxR,OAC3B1oE,KAAKmxE,YAAcsa,EACnB,IAAIC,EAAa1rF,KAAK+0E,kBAAkB5/D,EAAQ2nE,EAAgB0C,GAC5DmM,EAAa3rF,KAAK+vE,YAClB6b,EAA2B5rF,KAAKswE,oBAAoBrnD,IAAIyiE,GAExDzL,EAAan8D,EAAAuF,KAAKoqC,kBAAkB83B,EAAYI,GAAY,GAChE,IAAK1L,EAMH,OALAjgF,KAAKqN,MACHwW,EAAApZ,eAAeuqE,mCACf7/D,EAAOpK,MAAO4gF,EAAWjgF,WAAY6/E,EAAW7/E,YAElD1L,KAAK+vE,YAAc+M,EACZ98E,KAAKL,OAAOy7C,cAErBkwC,EAAatrF,KAAK89E,kBAChBwN,EACAC,EAAYtL,GACZ,GAAO,EACP/qE,GAEFw2E,EAAa1rF,KAAK89E,kBAChB4N,EACAC,EAAY1L,GACZ,GAAO,EACP9qE,GAEFnV,KAAK+vE,YAAckQ,EAEfuL,GAA4BI,EACzBJ,GAIHE,EAAa1rF,KAAKszE,WAAWoY,GAC7BE,GAA2B,IAJ3BN,EAAatrF,KAAKszE,WAAWgY,GAC7BE,GAA2B,IAKnBA,GAA4BvL,EAAW5M,YAE/CiY,EAAatrF,KAAK4iF,gBAAgB0I,EAAYD,EAAYnR,GAC1DwR,EAAa1rF,KAAK4iF,gBAAgB8I,EAAYD,EAAYvR,IAI9DoR,EAAatrF,KAAKwiF,6BAA6B6I,EAAYC,EAAYrL,GACvEoL,EAAWvhB,mBAEX4hB,EAAa1rF,KAAKwiF,6BAA6BiJ,EAAYC,EAAYzL,GACvEwL,EAAW3hB,mBAEX9pE,KAAKmxE,YAAc+I,EACnBA,EAAUrP,cAAcwgB,EAAYI,GAEpC,IAAIt6E,EAAOnR,KAAKL,OAAOy6C,GAAGkgC,EAAUgR,EAAYI,GAGhD,OAFAthF,OAAOohF,GAA4BI,GAC/BJ,GAA0BxrF,KAAKswE,oBAAoB7mD,IAAItY,GACpDA,GAGTy+D,EAAA3tE,UAAA07E,8BAAA,SACE9rE,EACAirE,EACAtB,GAEA,IAAI77E,EAASK,KAAKL,OACdm7B,EAAO96B,KAAKmxE,YAGZ0a,EAAW7rF,KAAK+0E,kBAClBljE,EAAWiE,QACXgnE,EAAe4C,WAAU,GAK3B,GAAI3tB,EAAApL,gBAAgBklC,IAAa95B,EAAAhyB,aAAaguB,YAAa,OAAO89B,EAGlE,IASI16E,EATAyqE,EAA0B,KAW9B,OAVIkB,GAAkBh5D,EAAAuF,KAAKG,OACzBoyD,EAAY9gD,EAAK+tC,aAAa7oE,KAAK+vE,aACnC8b,EAAWlsF,EAAOg4C,UAChBikC,EAAUpjD,MACVqzD,IAMIh6E,EAAWI,UACjB,KAAKzE,EAAAC,MAAM6qD,UACT,OAAQt4D,KAAK+vE,YAAYliE,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEsD,EAAOxR,EAAOw3C,OACZ4a,EAAArpB,SAASqtC,OACT8V,EACAlsF,EAAOyD,IAAI,IAEb,MAEF,OAEE,GAAIpD,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAE5C,GADI4hB,EAAiBj/B,KAAK+vE,YAAY9wC,eAGpC,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAa6C,aAC5C,CACZtV,EAAOnR,KAAKijF,qBAAqBnlD,EAAUjsB,EAAWiE,QAAS+1E,EAAUh6E,GACzE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAENpL,EAAOy7C,cAGlB,OACE,IAAIjyB,EAAUnpB,KAAKmpB,QACnBhY,EAAOxR,EAAOw3C,OACZhuB,EAAQY,SACJgoC,EAAArpB,SAASg4C,OACT3uB,EAAArpB,SAASqtC,OACb8V,EACA7rF,KAAK+vE,YAAYlc,YAAYl0D,IAE/B,MAEF,OACA,OACEwR,EAAOxR,EAAOw3C,OACZ4a,EAAArpB,SAASg4C,OACTmL,EACAlsF,EAAO0D,IAAI,IAEb,MAEF,QACE8N,EAAOxR,EAAOw3C,OACZ4a,EAAArpB,SAASi4C,OACTkL,EACAlsF,EAAOkE,IAAI,IAEb,MAEF,QACEsN,EAAOxR,EAAOw3C,OACZ4a,EAAArpB,SAASk4C,OACTiL,EACAlsF,EAAOmE,IAAI,IAEb,MAEF,QAEE,OADAsG,QAAO,GACAzK,EAAOy7C,cAGlB,MAEF,KAAK5tC,EAAAC,MAAM8qD,YACT,OAAQv4D,KAAK+vE,YAAYliE,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEsD,EAAOxR,EAAOw3C,OACZ4a,EAAArpB,SAASm4C,OACTgL,EACAlsF,EAAOyD,IAAI,IAEb,MAEF,OAEE,GAAIpD,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAC5C,IAAI4hB,EAEEnB,EADN,GADImB,EAAiBj/B,KAAK+vE,YAAY9wC,eAGpC,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAa8C,aAC5C,CACZvV,EAAOnR,KAAKijF,qBAAqBnlD,EAAUjsB,EAAWiE,QAAS+1E,EAAUh6E,GACzE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAENpL,EAAOy7C,cAGlB,OACMjyB,EAAUnpB,KAAKmpB,QACnBhY,EAAOxR,EAAOw3C,OACZhuB,EAAQY,SACJgoC,EAAArpB,SAASo4C,OACT/uB,EAAArpB,SAASm4C,OACbgL,EACA7rF,KAAK+vE,YAAYlc,YAAYl0D,IAE/B,MAEF,OACA,OACEwR,EAAOxR,EAAOw3C,OACZ4a,EAAArpB,SAASo4C,OACT+K,EACAlsF,EAAO0D,IAAI,IAEb,MAEF,QACE8N,EAAOxR,EAAOw3C,OACZ4a,EAAArpB,SAASq4C,OACT8K,EACAlsF,EAAOkE,IAAI,IAEb,MAEF,QACEsN,EAAOxR,EAAOw3C,OACZ4a,EAAArpB,SAASs4C,OACT6K,EACAlsF,EAAOmE,IAAI,IAEb,MAEF,QAEE,OADAsG,QAAO,GACAzK,EAAOy7C,cAGlB,MAEF,QAEE,OADAhxC,QAAO,GACAzK,EAAOy7C,cAIlB,IAAIrzB,EAAW/nB,KAAK+nB,SAChB4V,EAAS5V,EAASi7C,kBAAkBnxD,EAAWiE,QAASglB,GAG5D,IAAK8gD,EAEH,OADA57E,KAAK+vE,YAAcjsD,EAAAuF,KAAKG,KACnBmU,EACE39B,KAAKgjF,eACVrlD,EACAxsB,EACAU,EAAWiE,QACXiS,EAAS04C,sBACT14C,EAAS24C,0BACT,GAPkB/gE,EAAOy7C,cAStB,IAAKzd,EACV,OAAOh+B,EAAOy7C,cAIhB,IAAI0wC,EAAW9rF,KAAKgjF,eAClBrlD,EACAxsB,EACAU,EAAWiE,QACXiS,EAAS04C,sBACT14C,EAAS24C,0BACT,GAGF1gE,KAAK+vE,YAAc6L,EAAUtsE,KAC7BwrB,EAAKwuC,cAAcsS,GACnB,IAAIrI,EAAaqI,EAAUtsE,KAAKqkD,eAEhC,OAAOh0D,EAAOg6C,MAAM,KAAM,CACxBmyC,EACAnsF,EAAO83C,UAAUmkC,EAAUpjD,MAAO+6C,IACjCA,IAGL3D,EAAA3tE,UAAA27E,6BAAA,SACE/rE,EACAirE,EACAtB,GAEA,IAEIrqE,EAFAxR,EAASK,KAAKL,OACdugF,GAAW,EAGf,OAAQruE,EAAWI,UACjB,KAAKzE,EAAAC,MAAM0Y,KAQT,GAPAhV,EAAOnR,KAAK+0E,kBACVljE,EAAWiE,QACXgnE,EAAe4C,WAAU,GAKvB1/E,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAE5C,GADI4hB,EAAiBj/B,KAAK+vE,YAAY9wC,eAGpC,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAauC,MAC5C,CACZhV,EAAOnR,KAAKijF,qBAAqBnlD,EAAUjsB,EAAWiE,QAAS3E,EAAMU,GACrE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAENpL,EAAOy7C,cAIhB,MAEF,KAAK5tC,EAAAC,MAAM4Y,MACT,GAAIxU,EAAWiE,QAAQjI,MAAQkW,EAAApW,SAASG,UAClB+D,EAAWiE,QAASgJ,aAAeiF,EAAAnF,YAAYc,SAC/C7N,EAAWiE,QAASgJ,aAAeiF,EAAAnF,YAAYW,OAClE,CAEDpO,EAAOnR,KAAKu9E,yBAA4C1rE,EAAWiE,QAASgnE,EAAc,GAAoB,GAE1G98E,KAAKmpB,QAAQiS,WAAWp7B,KAAK+5E,iBAAiB5oE,EAAMU,EAAW9G,OACnE,MAUF,GAPAoG,EAAOnR,KAAK+0E,kBACVljE,EAAWiE,QACXgnE,EAAe4C,WAAU,GAKvB1/E,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAE5C,GADI4hB,EAAiBj/B,KAAK+vE,YAAY9wC,eAGpC,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAayC,OAC5C,CACZlV,EAAOnR,KAAKijF,qBAAqBnlD,EAAUjsB,EAAWiE,QAAS3E,EAAMU,GACrE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAENpL,EAAOy7C,cAGhB,OAAQp7C,KAAK+vE,YAAYliE,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASm4C,OAAQlhF,EAAOyD,IAAI,GAAI+N,GACrD,MAEF,OACA,OACEA,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAASo4C,OACT/uB,EAAArpB,SAASm4C,OACb7gF,KAAK+vE,YAAYnc,aAAaj0D,GAC9BwR,GAEF,MAEF,OACA,OACEA,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASo4C,OAAQnhF,EAAO0D,IAAI,GAAI8N,GACrD,MAEF,QACEA,EAAOxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQ2oD,OAAQ56E,GACpC,MAEF,QACEA,EAAOxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQ4oD,OAAQ76E,GACpC,MAEF,QACE/G,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlB,MAEF,KAAK5tC,EAAAC,MAAM6qD,UAST,GARA4nB,GAAW,EACX/uE,EAAOnR,KAAK+0E,kBACVljE,EAAWiE,QACXgnE,EAAe4C,WAAU,GAKvB1/E,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAE5C,GADI4hB,EAAiBj/B,KAAK+vE,YAAY9wC,eAGpC,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAawC,YAC5C,CACZjV,EAAOnR,KAAKijF,qBAAqBnlD,EAAUjsB,EAAWiE,QAAS3E,EAAMU,GACrE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAENpL,EAAOy7C,cAGhB,OAAQp7C,KAAK+vE,YAAYliE,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASqtC,OAAQ5kE,EAAMnR,KAAKL,OAAOyD,IAAI,IAC5D,MAEF,OACA,OACE+N,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAASg4C,OACT3uB,EAAArpB,SAASqtC,OACb5kE,EACAnR,KAAK+vE,YAAYlc,YAAYl0D,IAE/B,MAEF,OACA,OACEwR,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASg4C,OAAQvvE,EAAMxR,EAAO0D,IAAI,IACvD,MAEF,QACE8N,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASi4C,OAAQxvE,EAAMxR,EAAOkE,IAAI,IACvD,MAEF,QACEsN,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASk4C,OAAQzvE,EAAMxR,EAAOmE,IAAI,IACvD,MAEF,QACEsG,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlB,MAEF,KAAK5tC,EAAAC,MAAM8qD,YAST,GARA2nB,GAAW,EACX/uE,EAAOnR,KAAK+0E,kBACVljE,EAAWiE,QACXgnE,EAAe4C,WAAU,GAKvB1/E,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAE5C,GADI4hB,EAAiBj/B,KAAK+vE,YAAY9wC,eAGpC,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAa0C,YAC5C,CACZnV,EAAOnR,KAAKijF,qBAAqBnlD,EAAUjsB,EAAWiE,QAAS3E,EAAMU,GACrE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAENpL,EAAOy7C,cAGhB,OAAQp7C,KAAK+vE,YAAYliE,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASm4C,OAAQ1vE,EAAMxR,EAAOyD,IAAI,IACvD,MAEF,OACA,OACE+N,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAASo4C,OACT/uB,EAAArpB,SAASm4C,OACb1vE,EACAnR,KAAK+vE,YAAYlc,YAAYl0D,IAE/B,MAEF,OACA,OACEwR,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASo4C,OAAQ3vE,EAAMxR,EAAO0D,IAAI,IACvD,MAEF,QACE8N,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASq4C,OAAQ5vE,EAAMxR,EAAOkE,IAAI,IACvD,MAEF,QACEsN,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASs4C,OAAQ7vE,EAAMxR,EAAOmE,IAAI,IACvD,MAEF,QACEsG,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlB,MAEF,KAAK5tC,EAAAC,MAAMqrD,YAQT,GAPA3nD,EAAOnR,KAAK+0E,kBACVljE,EAAWiE,QACXgnE,EAAe4C,WAAU,GAKvB1/E,KAAK+vE,YAAY1yD,GAAE,KAErB,GADI4hB,EAAiBj/B,KAAK+vE,YAAY9wC,eAGpC,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAa2C,KAC5C,CACZpV,EAAOnR,KAAKijF,qBAAqBnlD,EAAUjsB,EAAWiE,QAAS3E,EAAMU,GACrE,MAMNV,EAAOnR,KAAKisF,eAAe96E,EAAMnR,KAAK+vE,aACtC/vE,KAAK+vE,YAAcjsD,EAAAuF,KAAKzlB,KACxB,MAEF,KAAK4J,EAAAC,MAAMsrD,MAYT,GAXA5nD,EAAOnR,KAAK+0E,kBACVljE,EAAWiE,QACXgnE,GAAkBh5D,EAAAuF,KAAKG,KACnB1F,EAAAuF,KAAKjmB,IACL05E,EAAez/D,GAAE,GACfyG,EAAAuF,KAAKhmB,IACLy5E,EAAc,GAKlB98E,KAAK+vE,YAAY1yD,GAAE,KAAuB,CAC5C,IAAI4hB,EAEEnB,EADN,GADImB,EAAiBj/B,KAAK+vE,YAAY9wC,eAGpC,GADInB,EAAWmB,EAAexB,eAAeq0B,EAAAluC,aAAa4C,aAC5C,CACZrV,EAAOnR,KAAKijF,qBAAqBnlD,EAAUjsB,EAAWiE,QAAS3E,EAAMU,GACrE,MAOJ,OAJA7R,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAENpL,EAAOy7C,cAShB,OAPEjqC,EAAOnR,KAAK89E,kBAAkB3sE,EAC5BnR,KAAK+vE,YAAa/vE,KAAK+vE,YAAY8R,SACnC,GAAO,EACPhwE,EAAWiE,SAIP9V,KAAK+vE,YAAYliE,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEsD,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS25C,OAAQlxE,EAAMxR,EAAOyD,KAAK,IACxD,MAEF,OACA,OACE+N,EAAOxR,EAAOw3C,OACZn3C,KAAKmpB,QAAQY,SACTgoC,EAAArpB,SAAS45C,OACTvwB,EAAArpB,SAAS25C,OACblxE,EACAnR,KAAK+vE,YAAYjc,eAAen0D,IAElC,MAEF,OACA,OACEwR,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS45C,OAAQnxE,EAAMxR,EAAO0D,KAAK,GAAI,IAC5D,MAEF,QACE+G,QAAO,GACP+G,EAAOxR,EAAOy7C,cAGlB,MAEF,KAAK5tC,EAAAC,MAAMwpD,OAKT,OAJAj3D,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACf5hB,EAAW9G,OAENpL,EAAOy7C,cAEhB,QAEE,OADAhxC,QAAO,GACAzK,EAAOy7C,cAGlB,IAAK8kC,EAAU,OAAO/uE,EACtB,IAAI4W,EAAW/nB,KAAK+nB,SAChB4V,EAAS5V,EAASi7C,kBAAkBnxD,EAAWiE,QAAS9V,KAAKmxE,aACjE,OAAKxzC,EACE39B,KAAKgjF,eACVrlD,EACAxsB,EACAU,EAAWiE,QACXiS,EAAS04C,sBACT14C,EAAS24C,yBACToc,GAAkBh5D,EAAAuF,KAAKG,MAPL7pB,EAAOy7C,eAY7Bw0B,EAAA3tE,UAAA87E,uBAAA,SAAuB5sE,EAAqB7B,GAC1C,IAAI3P,EAASK,KAAKL,OACdm7B,EAAO96B,KAAKmxE,YAChB,OAAQ7hE,EAAKzB,MACX,OACMitB,EAAK+wC,YAAY16D,EAAM7B,KACzB6B,EAAOnR,KAAKmpB,QAAQS,WAAU,GAC1BjqB,EAAOq3C,MAAM+a,EAAA3uB,QAAQ8oD,cAAe/6E,GACpCxR,EAAOw3C,OAAO4a,EAAArpB,SAASslC,OACrBruE,EAAOw3C,OAAO4a,EAAArpB,SAASqlC,OACrB58D,EACAxR,EAAOyD,IAAI,KAEbzD,EAAOyD,IAAI,MAGnB,MAEF,OACM03B,EAAK+wC,YAAY16D,EAAM7B,KACzB6B,EAAOnR,KAAKmpB,QAAQS,WAAU,GAC1BjqB,EAAOq3C,MAAM+a,EAAA3uB,QAAQ+oD,eAAgBh7E,GACrCxR,EAAOw3C,OAAO4a,EAAArpB,SAASslC,OACrBruE,EAAOw3C,OAAO4a,EAAArpB,SAASqlC,OACrB58D,EACAxR,EAAOyD,IAAI,KAEbzD,EAAOyD,IAAI,MAGnB,MAEF,OACM03B,EAAK+wC,YAAY16D,EAAM7B,KACzB6B,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASolC,OAC5B38D,EACAxR,EAAOyD,IAAI,OAGf,MAEF,OACM03B,EAAK+wC,YAAY16D,EAAM7B,KACzB6B,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASolC,OAC5B38D,EACAxR,EAAOyD,IAAI,SAGf,MAEF,QACM03B,EAAK+wC,YAAY16D,EAAM7B,KAEzB6B,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASijC,MAC5Bx6D,EACAxR,EAAOyD,IAAI,KAMnB,OAAO+N,GAITy+D,EAAA3tE,UAAA83E,iBAAA,SAAiB5oE,EAAqBpG,GACpC,IAAIq9D,EAAiBpoE,KAAKmxE,YAAY/I,eAClCz8D,EAASZ,EAAMY,OACfA,EAAO+U,eAAiB,IAAG/U,EAAO+U,eAAiB1gB,KAAKL,OAAOumD,iBAAiBv6C,EAAOC,iBAC3Fb,EAAMwwB,aAAepqB,EACrBi3D,EAAe7uC,eAAe7sB,KAAK3B,IAMrC6kE,EAAA3tE,UAAAgqF,eAAA,SAAe96E,EAAqB7B,GAClC,IAAI3P,EAASK,KAAKL,OAClB,OAAQ2P,EAAKzB,MACX,OACA,OACA,OACA,OACA,QACEsD,EAAOnR,KAAK+9E,uBAAuB5sE,EAAM7B,GAG3C,OACA,OACE,OAAO3P,EAAOq3C,MAAM+a,EAAA3uB,QAAQkoC,OAAQn6D,GAEtC,OACA,OACE,OAAOxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQmoC,OAAQp6D,GAEtC,OAAyBnR,KAAKswE,oBAAoBrnD,IAAI9X,KAAOA,EAAOnR,KAAK4jF,gBAAgBzyE,IACzF,OACE,OAAOxR,EAAOq3C,MAAmB,IAAb1nC,EAAKisC,KAAawW,EAAA3uB,QAAQmoC,OAASxZ,EAAA3uB,QAAQkoC,OAAQn6D,GAEzE,QACE,OAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASujC,MAAO96D,EAAMxR,EAAOkE,IAAI,IAExD,QACE,OAAOlE,EAAOw3C,OAAO4a,EAAArpB,SAASwjC,MAAO/6D,EAAMxR,EAAOmE,IAAI,IAExD,QAEE,OADAsG,QAAO,GACAzK,EAAOyD,IAAI,KAMxBwsE,EAAA3tE,UAAAs4E,cAAA,SAAcppE,EAAqB7B,GACjC,IAAI3P,EAASK,KAAKL,OAClB,OAAQ2P,EAAKzB,MACX,OACA,OACA,OACA,OACEsD,EAAOnR,KAAK+9E,uBAAuB5sE,EAAM7B,GAG3C,QACA,OACA,OACE,OAAO6B,EAET,OACA,OACE,OAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASkjC,MAAOz6D,EAAMxR,EAAO0D,IAAI,IAExD,OAAyBrD,KAAKswE,oBAAoBrnD,IAAI9X,KAAOA,EAAOnR,KAAK4jF,gBAAgBzyE,IACzF,OACE,OAAoB,IAAb7B,EAAKisC,KACR57C,EAAOw3C,OAAO4a,EAAArpB,SAASkjC,MAAOz6D,EAAMxR,EAAO0D,IAAI,IAC/C8N,EAEN,QACE,OAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASyjC,MAAOh7D,EAAMxR,EAAOkE,IAAI,IAExD,QACE,OAAOlE,EAAOw3C,OAAO4a,EAAArpB,SAAS0jC,MAAOj7D,EAAMxR,EAAOmE,IAAI,IAExD,QAEE,OADAsG,QAAO,GACAzK,EAAOyD,IAAI,KAMxBwsE,EAAA3tE,UAAA20E,eAAA,SACExuD,GAGA,IAAImO,EAAUv2B,KAAKu2B,QACnBnsB,OAAOge,EAAcmO,SAAWA,GAChC,IAAI52B,EAASK,KAAKL,OACdwpB,EAAUnpB,KAAKmpB,QACnBnpB,KAAK+vE,YAAc3nD,EAAc9Y,KACjC,IAAIugB,EAAgB0G,EAAQ1G,cAE5B,OADA7vB,KAAKi2E,gBAAgBpmD,GACdlwB,EAAOa,KAAKqvB,EAAc/H,aAAc,CAC7CqB,EAAQY,SACJpqB,EAAO0D,IAAI+kB,EAAcuU,qBACzBh9B,EAAOyD,IAAIglB,EAAcuU,qBAC7Bh9B,EAAOyD,IACLglB,EAAcuG,aAAamjC,EAAAjrC,eAAe5I,WACtC,EACAmK,EAAcG,KAEnBY,EAAQqqD,iBAIb5D,EAAA3tE,UAAA40E,wBAAA,SACEzuD,EACAguD,gBAAA,IAAAA,MAAA,IAEA,IAAIz/D,EAAUyR,EAAczR,QAC5B,IAAKA,EAAS,MAAO,GAErB,IAAIhX,EAASK,KAAKL,OACdm7B,EAAO96B,KAAKmxE,YACZuE,EAAW56C,EAAKzd,GAAE,OAClB+uE,EAAiB1W,EACjBtrE,OAAO0wB,EAAKqqC,YAAY53D,EAAAvK,cAAcoC,QAAQozB,MAC9C,EACAg7C,EAAiBxzE,KAAKmpB,QAAQqqD,mBAElC,IAAmB,IAAAh8C,EAAAhM,EAAA7U,EAAQtC,UAAQgd,EAAAmG,EAAAxoB,QAAAqiB,EAAA3F,KAAA2F,EAAAmG,EAAAxoB,OAAE,CAAhC,IAAIuiB,EAAMF,EAAA/vB,MACb,GACEiwB,EAAO1jB,MAAQikD,EAAAlrC,YAAYgL,OAC3BL,EAAO/Q,QAAU4H,EAFnB,CAKA,IAAI6V,EAAe1M,EAAQnnB,QAAQ6zB,EAAM1gB,MAAMhQ,EAAAlL,YAAYgwB,QAC3D,IAAI80C,EAAYlpC,EAAM3uB,KAClB80E,EAAkBjd,EAAUxT,eAC5BmhB,EAAkB72C,EAAMh8B,UAAU6yE,gBACtC,GAAIA,EAAiB,CACnB,IAAIF,EAAW50E,KAAK+0E,kBAAkBD,EAAiB3N,EACrD,IAEEA,EAAUkM,YAAcrzE,KAAKswE,oBAAoBrnD,IAAI2rD,KACvDA,EAAW50E,KAAKszE,WAAWsB,IAE7BwB,EAAM1pE,KACJ/M,EAAOm3C,MAAMqwB,EAAU/U,SACrBzyD,EAAO83C,UAAU20C,EAAgB5Y,GACjCoB,EACAwP,EACAnmD,EAAMnC,mBAGL,CACL,IAAI5Z,EAAiB+b,EAAMh8B,UAAUigB,eACrCk0D,EAAM1pE,KACJ/M,EAAOm3C,MAAMqwB,EAAU/U,SACrBzyD,EAAO83C,UAAU20C,EAAgB5Y,GACjCtxD,GAAkB,EACdviB,EAAO83C,UACLi+B,EACItrE,OAAO0wB,EAAKqqC,YAAYlnC,EAAMr9B,OAAO43B,MACrC,EAAItW,EACRkiE,GAEFjd,EAAUvT,aAAaj0D,GAC3BykF,EACAnmD,EAAMnC,mHAKd,OAAOs6C,GAGTxG,EAAA3tE,UAAAoqF,oBAAA,SACEl7E,EACAiX,GAEA,IAAIzoB,EAASK,KAAKL,OACdm7B,EAAO96B,KAAKmxE,YACZmb,EAASxxD,EAAK+tC,aAAa/kD,EAAAuF,KAAKjmB,KAChCmpF,EAAS5sF,EAAOo4C,KAAK,GAAG,EAC1Bp4C,EAAOw3C,OAAO4a,EAAArpB,SAASm4C,OACrB1vE,EACAxR,EAAOyD,IAAIpD,KAAKu2B,QAAQshD,oBAE1B9lB,EAAAjyB,WAAW15B,KAETkQ,EAAQ,cAAgB8R,EAAcxnB,KAAO,IAAMk6B,EAAKqvC,iBACxDqiB,EAA8B,GAmBlC,OAlBAA,EAAW9/E,KACT/M,EAAOq6C,KACLr6C,EAAOm6C,GAAGxjC,EACR3W,EAAOw3C,OAAO4a,EAAArpB,SAAS+iC,MACrB9rE,EAAOg4C,UAAU20C,EAAO9zD,MAAO+zD,GAC/B5sF,EAAOyD,IAAIglB,EAAcG,KAE3B5oB,EAAOyD,IAAI,MAMjBopF,EAAW9/E,KACT/M,EAAOyD,IAAI,IAEb03B,EAAKwuC,cAAcgjB,GACnBxxD,EAAKuvC,gBACE1qE,EAAOg6C,MAAMrjC,EAAOk2E,EAAYz6B,EAAAjyB,WAAW15B,MAGtDwpE,EAriRA,CAA8B/rD,EAAA/W,mBAyiR9B,SAASsoE,EACPniE,EACAR,GAQA,GALAi9D,EAA8Bj9D,EAAY1H,MAAMY,OAAOoV,WAEvD4uD,EAA+B7d,EAAAn6B,mBAC7B1kB,EAAQrS,KAAMqS,EAAQuN,OAAQvN,EAAQoK,GAAG9P,EAAAlL,YAAY2zB,WAAW,GAE7D/iB,EAAQ0b,aAAamjC,EAAAjrC,eAAelJ,UAAzC,CAEA,IAAI4Y,EAAUtjB,EAAQsjB,QAClB7S,EAAYtZ,OAAO2Z,EAAAP,cAAcO,EAAA9G,cAAcU,SAAUlL,EAAYmE,aACrEpG,EAAOkT,EAAU/S,UACrB,GAAIH,GAAQA,EAAKrE,OAAQ,CACvB,IAAIyY,EAAMpU,EAAK,GAGXoU,EAAI/W,MAAQkW,EAAApW,SAASG,SAA+B8W,EAAK9F,aAAeiF,EAAAnF,YAAYmB,QACtF4vD,EAAyD/qD,EAAKtjB,MAC1DkP,EAAKrE,QAAU,KACjByY,EAAMpU,EAAK,IACH3C,MAAQkW,EAAApW,SAASG,SAA+B8W,EAAK9F,aAAeiF,EAAAnF,YAAYmB,QACtF2vD,EAA8BC,EAC9BA,EAAyD/qD,EAAKtjB,MAC1DkP,EAAKrE,OAAS,GAChBoqB,EAAQlpB,MACNwW,EAAApZ,eAAewqB,+BACfvR,EAAU3Y,MAAO,IAAKyF,EAAKrE,OAAOT,aAItC6qB,EAAQlpB,MACNwW,EAAApZ,eAAeuqB,wBACfpQ,EAAI7Z,SAKVwrB,EAAQlpB,MACNwW,EAAApZ,eAAeuqB,wBACfpQ,EAAI7Z,YAIRwrB,EAAQlpB,MACNwW,EAAApZ,eAAeo7E,wCACfniE,EAAU3Y,MAAO,IAAK,MAS5B,SAAgBmsE,EAAQv3E,EAAgBy2E,EAAwB9mE,GAC9D,IAAInD,EAASiqE,EAAMjqE,OACnB,GAAc,GAAVA,EAAa,OAAOxM,EAAO26C,MAC/B,GAAc,GAAVnuC,EAAa,CACf,IAAIsgF,EAASrW,EAAM,GACnB,GAAIrkB,EAAAnL,kBAAkB6lC,IAAWn9E,EAAM,OAAOm9E,EAC9C,GAAI16B,EAAApL,gBAAgB8lC,IAAW16B,EAAAhyB,aAAakuB,MAAO,CAGjD,IAFA,IAAIouB,EAAQtqB,EAAAlJ,mBAAmB4jC,GAC3B7yC,EAAW,IAAI3yC,MAAqBo1E,GAC/Bh8E,EAAI,EAAGA,EAAIg8E,IAASh8E,EAAGu5C,EAASv5C,GAAK0xD,EAAAhJ,cAAc0jC,EAAQpsF,GACpE,OAAOV,EAAOg6C,MAAMoY,EAAApJ,aAAa8jC,GAAS7yC,EAAUtqC,IAGxD,OAAO3P,EAAOg6C,MAAM,KAAMy8B,EACxB9mE,GAAQyiD,EAAAjyB,WAAW4sD,KACf36B,EAAAnL,kBAAkBwvB,EAAMjqE,EAAS,IACjCmD,GAlnRK5P,EAAAkwE,WAkmRblwE,EAAAw3E,yFCz2RA,SAAYzsE,GACVA,IAAA,uDACAA,IAAA,+CACAA,IAAA,qCACAA,IAAA,mHACAA,IAAA,6LACAA,IAAA,6EACAA,IAAA,yFACAA,IAAA,uEACAA,IAAA,qEACAA,IAAA,uEACAA,IAAA,qIACAA,IAAA,mGACAA,IAAA,yEACAA,IAAA,+FACAA,IAAA,yFACAA,IAAA,mEACAA,IAAA,+CACAA,IAAA,mFACAA,IAAA,+FACAA,IAAA,mHACAA,IAAA,yFACAA,IAAA,uJACAA,IAAA,mFACAA,IAAA,6FACAA,IAAA,+FACAA,IAAA,iGACAA,IAAA,2DACAA,IAAA,iDACAA,IAAA,yDACAA,IAAA,gEACAA,IAAA,gDACAA,IAAA,gCACAA,IAAA,0FACAA,IAAA,8DACAA,IAAA,0CACAA,IAAA,4GACAA,IAAA,gHACAA,IAAA,0HACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,wEACAA,IAAA,gFACAA,IAAA,gGACAA,IAAA,sGACAA,IAAA,gHACAA,IAAA,oFACAA,IAAA,4EACAA,IAAA,8HACAA,IAAA,8HACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,gFACAA,IAAA,oKACAA,IAAA,kLACAA,IAAA,8HACAA,IAAA,gDACAA,IAAA,oCACAA,IAAA,gJACAA,IAAA,4CACAA,IAAA,8FACAA,IAAA,oGACAA,IAAA,sCACAA,IAAA,8DACAA,IAAA,sDACAA,IAAA,4CACAA,IAAA,4DACAA,IAAA,kIACAA,IAAA,wIACAA,IAAA,sDACAA,IAAA,wDACAA,IAAA,oEACAA,IAAA,kDACAA,IAAA,wFACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,oDACAA,IAAA,kDACAA,IAAA,0HACAA,IAAA,gKACAA,IAAA,kFACAA,IAAA,oEACAA,IAAA,kKACAA,IAAA,kJACAA,IAAA,0IACAA,IAAA,oFACAA,IAAA,sIACAA,IAAA,sDACAA,IAAA,8CACAA,IAAA,4EACAA,IAAA,4FACAA,IAAA,oDACAA,IAAA,8EACAA,IAAA,kFACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,oMACAA,IAAA,gFACAA,IAAA,sNACAA,IAAA,0JACAA,IAAA,sIACAA,IAAA,4LACAA,IAAA,sLACAA,IAAA,oGACAA,IAAA,gIACAA,IAAA,8HACAA,IAAA,oGACAA,IAAA,oFACAA,IAAA,wKACAA,IAAA,kHACAA,IAAA,4EACAA,IAAA,4KACAA,IAAA,sMACAA,IAAA,0DACAA,IAAA,8FACAA,IAAA,4JACAA,IAAA,gIACAA,IAAA,wDACAA,IAAA,gJACAA,IAAA,gJACAA,IAAA,sGACAA,IAAA,sEACAA,IAAA,wFACAA,IAAA,gFACAA,IAAA,sQACAA,IAAA,8KACAA,IAAA,kLACAA,IAAA,kFACAA,IAAA,0IACAA,IAAA,kDACAA,IAAA,0CACAA,IAAA,wFACAA,IAAA,4HACAA,IAAA,6KACAA,IAAA,2MAtIF,CAAY/K,EAAA+K,iBAAA/K,EAAA+K,eAAc,KA0I1B/K,EAAAgL,uBAAA,SAAuCG,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,2BACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,oDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,mCACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,6CACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,6DACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,iFACjB,KAAK,IAAK,MAAO,yCACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,2DACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,wBACjB,KAAK,IAAK,MAAO,8BACjB,KAAK,KAAM,MAAO,+BAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,oBAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,uDAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,kDAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,sCAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,iBAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,iDAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,qBAClB,KAAK,KAAM,MAAO,gCAClB,KAAK,KAAM,MAAO,iEAClB,KAAK,KAAM,MAAO,qEAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,2BAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,wCAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,4EAClB,KAAK,KAAM,MAAO,wEAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,kEAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,6CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mDAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,iGAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,+GAClB,KAAK,KAAM,MAAO,8EAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,6FAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,KAAM,MAAO,iEAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,wDAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,yFAClB,KAAK,KAAM,MAAO,kGAClB,KAAK,KAAM,MAAO,oCAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,mEAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,uEAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mIAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,4FAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,4BAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,MAAO,MAAO,wFACnB,KAAK,MAAO,MAAO,uGACnB,QAAS,MAAO,mkBCrRnB,IAoFgB26D,EApFhBmnB,EAAAxsF,EAAA,IAOD0jB,EAAA1jB,EAAA,GAIA4jB,EAAA5jB,EAAA,GAUA2jB,EAAA3jB,EAAA,GAOA4xD,EAAA5xD,EAAA,GAsBA2xD,EAAA3xD,EAAA,GASA8jB,EAAA9jB,EAAA,IAKA6jB,EAAA7jB,EAAA,GAIAoN,EAAApN,EAAA,GAMA0J,EAAA1J,EAAA,GAubA,SAAgBslF,EAEdmH,EAEA3qF,EAEAmN,EAEAkoC,EAEAwlC,EAEAvW,EAEAsmB,QAAA,IAAAA,OAAA,GAEA,IAAIltF,EAASitF,EAASjtF,OAUlBmtF,GAAY,EAEhB,OAAQ7qF,EAAU6lB,cAIhB,KAAK09C,EAAeunB,UAClB,IAAIz9E,EAAO09E,EAAqBJ,EAAUx9E,EAAekoC,EAAUivB,GAEnE,OADAqmB,EAAS7c,YAAcjsD,EAAAuF,KAAKzlB,KACvB0L,EACEA,EAAK+N,GAAE,KAAwB/N,EAAK+N,GAAE,KACzC1d,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAOy7C,cAK3B,KAAKoqB,EAAeynB,QACd39E,EAAO09E,EAAqBJ,EAAUx9E,EAAekoC,EAAUivB,GAEnE,OADAqmB,EAAS7c,YAAcjsD,EAAAuF,KAAKzlB,KACvB0L,EACEA,EAAK+N,GAAE,GACV1d,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAOy7C,cAK3B,KAAKoqB,EAAe0nB,UACd59E,EAAO09E,EAAqBJ,EAAUx9E,EAAekoC,EAAUivB,GAEnE,OADAqmB,EAAS7c,YAAcjsD,EAAAuF,KAAKzlB,KACvB0L,EACEA,GAAQwU,EAAAuF,KAAKzlB,KAChBjE,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAOy7C,cAK3B,KAAKoqB,EAAe2nB,SACd79E,EAAO09E,EAAqBJ,EAAUx9E,EAAekoC,EAAUivB,GAEnE,OADAqmB,EAAS7c,YAAcjsD,EAAAuF,KAAKzlB,KACvB0L,EACEA,EAAK+N,GAAE,GACV1d,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAOy7C,cAK3B,KAAKoqB,EAAe4nB,YACd99E,EAAO09E,EAAqBJ,EAAUx9E,EAAekoC,EAAUivB,GAEnE,OADAqmB,EAAS7c,YAAcjsD,EAAAuF,KAAKzlB,KACvB0L,EACEA,EAAK+N,GAAE,KACV1d,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAOy7C,cAK3B,KAAKoqB,EAAe6nB,SACd/9E,EAAO09E,EAAqBJ,EAAUx9E,EAAekoC,EAAUivB,GAEnE,GADAqmB,EAAS7c,YAAcjsD,EAAAuF,KAAKzlB,MACvB0L,EAAM,OAAO3P,EAAOy7C,cAEzB,GADI6X,EAAY3jD,EAAK2vB,eACN,CACb,IAAI1R,EAAiBq/D,EAASr2D,QAAQhJ,eACtC,GAAIA,GAAkB0lC,EAAUv1B,eAAenQ,GAAiB,OAAO5tB,EAAOyD,IAAI,GAEpF,OAAOzD,EAAOyD,IAAI,GAEpB,KAAKoiE,EAAe8nB,QACdh+E,EAAO09E,EAAqBJ,EAAUx9E,EAAekoC,EAAUivB,GAEnE,GADAqmB,EAAS7c,YAAcjsD,EAAAuF,KAAKzlB,MACvB0L,EAAM,OAAO3P,EAAOy7C,cAEzB,KADInc,GAAiB3vB,EAAK2vB,gBACL,OAAOt/B,EAAOyD,IAAI,GACvC,IAAIqxB,EAAiBwK,GAAeh9B,UACpC,OAAOtC,EAAOyD,IAAIqxB,EAAe6H,QAAQswD,EAASr2D,QAAQhH,gBAAkB,EAAI,GAElF,KAAKi2C,EAAe+nB,YACdj+E,EAAO09E,EAAqBJ,EAAUx9E,EAAekoC,EAAUivB,GAEnE,OADAqmB,EAAS7c,YAAcjsD,EAAAuF,KAAKzlB,KACvB0L,GACD2vB,GAAiB3vB,EAAK2vB,gBAEnBt/B,EAAOyD,IAAI67B,GAAesuD,YAAc,EAAI,GADvB5tF,EAAOyD,IAAI,GAFrBzD,EAAOy7C,cAK3B,KAAKoqB,EAAegoB,WACdl+E,EAAO09E,EAAqBJ,EAAUx9E,EAAekoC,EAAUivB,GAEnE,OADAqmB,EAAS7c,YAAcjsD,EAAAuF,KAAKzlB,KACvB0L,EACE3P,EAAOyD,IAAIkM,EAAKgjD,mBAAqB,EAAI,GAD9B3yD,EAAOy7C,cAG3B,KAAKoqB,EAAen2D,WACdC,EAAO09E,EAAqBJ,EAAUx9E,EAAekoC,EAAUivB,GAEnE,OADAqmB,EAAS7c,YAAcjsD,EAAAuF,KAAKzlB,KACvB0L,EACE3P,EAAOyD,IAAIkM,EAAK+N,GAAE,KAAuB,EAAI,GADlC1d,EAAOy7C,cAG3B,KAAKoqB,EAAeioB,UAElB,GADAb,EAAS7c,YAAcjsD,EAAAuF,KAAKzlB,KAE1B8pF,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cAChB,IAAInoC,EAAU25E,EAAS7kE,SAASi7C,kBAC9B1rB,EAAS,GACTs1C,EAASzb,YACTrtD,EAAAuF,KAAKupC,KACL5uC,EAAAu8C,WAAWqtB,SAEb,OAAOjuF,EAAOyD,IAAI6P,EAAU,EAAI,GAElC,KAAKuyD,EAAeqoB,WAElB,GADAjB,EAAS7c,YAAcjsD,EAAAuF,KAAKzlB,KAE1B8pF,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cAChB,IAAIjqC,EAAOy7E,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKupC,MAExD,OADAg6B,EAAS7c,YAAcjsD,EAAAuF,KAAKzlB,KACrBjE,EAAOyD,IAAI2uD,EAAApL,gBAAgBx1C,IAAS4gD,EAAAhyB,aAAa0kB,MAAQ,EAAI,GAEtE,KAAK+gB,EAAe6N,UACd/jE,EAAO09E,EAAqBJ,EAAUx9E,EAAekoC,EAAUivB,GAEnE,OADAqmB,EAAS7c,YAAcjsD,EAAAuF,KAAKzlB,KACvB0L,EACE3P,EAAOyD,IAAIkM,EAAK+jE,UAAY,EAAI,GADrB1zE,EAAOy7C,cAG3B,KAAKoqB,EAAesoB,OAElB,GADAlB,EAAS7c,YAAc6c,EAASzjE,QAAQI,UAEtCwkE,EAAkB3+E,EAAem3D,EAAYqmB,GAC7Ce,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cAChB,IAAIgX,EAAoBhjD,EAAe,GAAGgjD,SACtCjhD,OAAI,EAkBR,OAjBIy7E,EAASzjE,QAAQY,SAEf+yD,EAAez/D,GAAE,IAAuBy/D,EAAevhC,MAAQ,IACjEqxC,EAAS7c,YAAcjsD,EAAAuF,KAAK5lB,IAC5B0N,EAAOxR,EAAOyD,IAAIgvD,IAElBjhD,EAAOxR,EAAO0D,IAAI+uD,EAAU,GAI1B0qB,EAAez/D,GAAE,IAA8C,IAAvBy/D,EAAevhC,MACzDqxC,EAAS7c,YAAcjsD,EAAAuF,KAAK3lB,IAC5ByN,EAAOxR,EAAO0D,IAAI+uD,EAAU,IAE5BjhD,EAAOxR,EAAOyD,IAAIgvD,GAGfjhD,EAET,KAAKq0D,EAAewoB,QAElB,GADApB,EAAS7c,YAAc6c,EAASzjE,QAAQI,UAEtCwkE,EAAkB3+E,EAAem3D,EAAYqmB,GAC7Ce,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cACZgX,EAAoBhjD,EAAe,GAAGgjD,SAC1ChoD,OAAOP,EAAAJ,WAAW2oD,IAClB,IAAIm4B,EAAY0D,IAAS77B,GACrBjhD,OAAI,EAkBR,OAjBIy7E,EAASzjE,QAAQY,SAEf+yD,EAAez/D,GAAE,IAAuBy/D,EAAevhC,MAAQ,IACjEqxC,EAAS7c,YAAcjsD,EAAAuF,KAAK5lB,IAC5B0N,EAAOxR,EAAOyD,IAAImnF,IAElBp5E,EAAOxR,EAAO0D,IAAIknF,EAAW,GAI3BzN,EAAez/D,GAAE,IAA8C,IAAvBy/D,EAAevhC,MACzDqxC,EAAS7c,YAAcjsD,EAAAuF,KAAK3lB,IAC5ByN,EAAOxR,EAAO0D,IAAIknF,EAAW,IAE7Bp5E,EAAOxR,EAAOyD,IAAImnF,GAGfp5E,EAET,KAAKq0D,EAAeznC,SAElB,GADA6uD,EAAS7c,YAAc6c,EAASzjE,QAAQI,UAEtCwkE,EAAkB3+E,EAAem3D,EAAYqmB,GAC7CsB,EAAkB52C,EAAU,EAAG,EAAGivB,EAAYqmB,GAC9C,OAAOjtF,EAAOy7C,cAChB,IAAI6X,EACJ,KADIA,EAAY7jD,EAAe,GAAG6vB,gBAMhC,OAJA2tD,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAEhB,IAAIjzB,OAAM,EACV,GAAImvB,EAASnrC,OAAQ,CACnB,GACEmrC,EAAS,GAAGzpC,MAAQkW,EAAApW,SAASG,SACTwpC,EAAS,GAAIx4B,aAAeiF,EAAAnF,YAAYmB,OAM5D,OAJA6sE,EAASv/E,MACPwW,EAAApZ,eAAeuqB,wBACfsiB,EAAS,GAAGvsC,OAEPpL,EAAOy7C,cAEhB,IAAIpd,EAAsCsZ,EAAS,GAAIh2C,MACnD28B,EAAQg1B,EAAUt8C,QAAUs8C,EAAUt8C,QAAQzV,IAAI88B,GAAa,KACnE,IAAMC,GAASA,EAAMpwB,MAAQikD,EAAAlrC,YAAYgL,MAKvC,OAJAg7D,EAASv/E,MACPwW,EAAApZ,eAAe2jF,yBACf92C,EAAS,GAAGvsC,MAAOkoD,EAAUnrC,aAAckW,GAEtCr+B,EAAOy7C,cAEhBjzB,EAAiB8V,EAAOnC,kBAExB3T,EAAS8qC,EAAUt2B,oBAErB,OAAIiwD,EAASzjE,QAAQY,SAEf+yD,EAAez/D,GAAE,IAAuBy/D,EAAevhC,MAAQ,IACjEqxC,EAAS7c,YAAcjsD,EAAAuF,KAAK5lB,IACrB9D,EAAOyD,IAAI+kB,IAEXxoB,EAAO0D,IAAI8kB,GAIhB20D,EAAez/D,GAAE,IAA8C,IAAvBy/D,EAAevhC,MACzDqxC,EAAS7c,YAAcjsD,EAAAuF,KAAK3lB,IACrB/D,EAAO0D,IAAI8kB,IAEXxoB,EAAOyD,IAAI+kB,GAOxB,KAAKq9C,EAAe3S,IACpB,KAAK2S,EAAeyoB,IACpB,KAAKzoB,EAAe6oB,OAClB,GACEC,EAAkBl/E,EAAem3D,EAAYqmB,GAAU,GACvDe,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cAChB,IAAInwC,EAAOmE,EACPw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIloC,EAAc,GAAI,GAC1Dw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKjmB,IAAG,GAEpD,IADIkM,EAAOs9E,EAAS7c,aACX1yD,GAAE,KAKT,OAJAuvE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAEhB,IAAInE,GAAe,EACnB,OAAQh1C,EAAU6lB,cAChB,KAAK09C,EAAe3S,IAClB,OAAQvjD,EAAKzB,MACX,QACA,OACA,OACA,OACA,OACA,OACA,OAAqBopC,EAAK8a,EAAA3uB,QAAQirC,OAAQ,MAC1C,OACA,OACEp3B,EAAK21C,EAASzjE,QAAQY,SAClBgoC,EAAA3uB,QAAQmrD,OACRx8B,EAAA3uB,QAAQirC,OACZ,MAEF,OACA,OAAqBp3B,EAAK8a,EAAA3uB,QAAQmrD,OAEpC,MAEF,KAAK/oB,EAAeyoB,IAClB,OAAQ3+E,EAAKzB,MACX,QACA,OACA,OACA,OACA,OACA,OACA,OAAqBopC,EAAK8a,EAAA3uB,QAAQkrC,OAAQ,MAC1C,OACA,OACEr3B,EAAK21C,EAASzjE,QAAQY,SAClBgoC,EAAA3uB,QAAQorD,OACRz8B,EAAA3uB,QAAQkrC,OACZ,MAEF,OACA,OAAqBr3B,EAAK8a,EAAA3uB,QAAQorD,OAEpC,MAEF,KAAKhpB,EAAe6oB,OAClB,OAAQzB,EAAS7c,YAAYliE,MAC3B,QACA,OACA,OACA,OACA,OACA,OACA,OAAqBopC,EAAK8a,EAAA3uB,QAAQmrC,UAAW,MAC7C,OACA,OACEt3B,EAAK21C,EAASzjE,QAAQY,SAClBgoC,EAAA3uB,QAAQqrD,UACR18B,EAAA3uB,QAAQmrC,UACZ,MAEF,OACA,OAAqBt3B,EAAK8a,EAAA3uB,QAAQqrD,WAKxC,OAAW,GAAPx3C,GACF21C,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,eAETz7C,EAAOq3C,MAAMC,EAAIhsC,GAE1B,KAAKu6D,EAAekpB,KAClB,GACEJ,EAAkBl/E,EAAem3D,EAAYqmB,GAAU,GACvDe,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cACZnwC,EAAOmE,EACPw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIloC,EAAc,GAAI,GAC1Dw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKjmB,IAAG,GAEpD,IADIkM,EAAOs9E,EAAS7c,aACX1yD,GAAE,KAKT,OAJAuvE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAEhB,IAAIlwC,EAAO0hF,EAAS7X,kBAAkBz9B,EAAS,GAAIhoC,EAAI,GACnD6B,OAAI,EACR,OAAQ7B,EAAKzB,MACX,OACA,OACA,OACA,OACA,QACEsD,EAAOy7E,EAAS7O,uBACdp+E,EAAOw3C,OAAO4a,EAAArpB,SAASimD,QAAS1jF,EAAMC,GACtCoE,GAIJ,OACA,OACE6B,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASimD,QAAS1jF,EAAMC,GAC7C,MAEF,OACA,OACEiG,EAAOxR,EAAOw3C,OACZy1C,EAASzjE,QAAQY,SACbgoC,EAAArpB,SAASkmD,QACT78B,EAAArpB,SAASimD,QACb1jF,EAAMC,GAER,MAEF,OACA,OACEiG,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASkmD,QAAS3jF,EAAMC,GAC7C,MAEF,QACE0hF,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbh9E,EAAOxR,EAAOy7C,cAIlB,OAAOjqC,EAET,KAAKq0D,EAAeqpB,KAClB,GACEP,EAAkBl/E,EAAem3D,EAAYqmB,GAAU,GACvDe,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cACZnwC,EAAOmE,EACPw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIloC,EAAc,GAAI,GAC1Dw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKjmB,IAAG,GAEpD,IADIkM,EAAOs9E,EAAS7c,aACX1yD,GAAE,KAKT,OAJAuvE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAEZlwC,EAAO0hF,EAAS7X,kBAAkBz9B,EAAS,GAAIhoC,EAAI,GACnD6B,OAAI,EACR,OAAQ7B,EAAKzB,MACX,OACA,OACA,OACA,OACA,QACEsD,EAAOy7E,EAAS7O,uBACdp+E,EAAOw3C,OAAO4a,EAAArpB,SAASomD,QAAS7jF,EAAMC,GACtCoE,GAEF,MAEF,OACA,OACE6B,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASomD,QAAS7jF,EAAMC,GAC7C,MAEF,OACA,OACEiG,EAAOxR,EAAOw3C,OACZy1C,EAASzjE,QAAQY,SACbgoC,EAAArpB,SAASqmD,QACTh9B,EAAArpB,SAASomD,QACb7jF,EAAMC,GAER,MAEF,OACA,OACEiG,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAASqmD,QAAS9jF,EAAMC,GAC7C,MAEF,QACE0hF,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbh9E,EAAOxR,EAAOy7C,cAIlB,OAAOjqC,EAET,KAAKq0D,EAAewpB,IAClB,GACEV,EAAkBl/E,EAAem3D,EAAYqmB,GAAU,GACvDe,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cACZnwC,EAAOmE,EACPw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIloC,EAAc,GAAI,GAC1Dw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKvlB,IAAG,GAEpD,IADIwL,EAAOs9E,EAAS7c,aACX1yD,GAAE,KAKT,OAJAuvE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAEZjqC,OAAI,EACR,OAAQ7B,EAAKzB,MACX,OACA,OACA,OACE,IAGIohF,GAHAn0D,EAAO8xD,EAASzb,aAGEtI,aAAa/kD,EAAAuF,KAAKjmB,KACpC8rF,EAAkBp0D,EAAKyuC,oBAAoBzlD,EAAAuF,KAAKjmB,KAAKo1B,MACrD22D,EAAkBF,EAAWz2D,MAGjCrnB,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS25C,OAC5B1iF,EAAOw3C,OAAO4a,EAAArpB,SAASqtC,OACrBp2E,EAAOg4C,UACLu3C,EACAvvF,EAAOw3C,OAAO4a,EAAArpB,SAASslC,OACrBruE,EAAOg4C,UAAUw3C,EAAiBlkF,GAClCtL,EAAOyD,IAAI,MAGfzD,EAAO83C,UAAU03C,EAAiBp9B,EAAAjyB,WAAW15B,MAE/CzG,EAAO83C,UAAUy3C,EAAiBn9B,EAAAjyB,WAAW15B,MAG/C00B,EAAKwuC,cAAc2lB,GACnB,MAEF,OACE,IAAI9lE,EAAUyjE,EAASzjE,QACnB2R,EAAO8xD,EAASzb,YAChBie,EAASjmE,EAAQY,SAEjBklE,EAAan0D,EAAK+tC,aAAa1/C,EAAQI,WACvC2lE,EAAkBp0D,EAAKyuC,oBAAoBpgD,EAAQI,WAAWiP,MAC9D22D,EAAkBF,EAAWz2D,MAEjCrnB,EAAOxR,EAAOw3C,OAAOi4C,EAASr9B,EAAArpB,SAAS45C,OAASvwB,EAAArpB,SAAS25C,OACvD1iF,EAAOw3C,OAAOi4C,EAASr9B,EAAArpB,SAASg4C,OAAS3uB,EAAArpB,SAASqtC,OAChDp2E,EAAOg4C,UACLu3C,EACAvvF,EAAOw3C,OAAOi4C,EAASr9B,EAAArpB,SAASs5C,OAASjwB,EAAArpB,SAASslC,OAChDruE,EAAOg4C,UAAUw3C,EAAiBlkF,GAClCmkF,EAASzvF,EAAO0D,IAAI,IAAM1D,EAAOyD,IAAI,MAGzCzD,EAAO83C,UAAU03C,EAAiBhmE,EAAQqqD,iBAE5C7zE,EAAO83C,UAAUy3C,EAAiB/lE,EAAQqqD,iBAG5C14C,EAAKwuC,cAAc2lB,GACnB,MAEF,OAGMA,GAFAn0D,EAAO8xD,EAASzb,aAEEtI,aAAa/kD,EAAAuF,KAAKhmB,KACpC6rF,EAAkBp0D,EAAKyuC,oBAAoBzlD,EAAAuF,KAAKhmB,KAAKm1B,MACrD22D,EAAkBF,EAAWz2D,MAGjCrnB,EAAOxR,EAAOw3C,OAAO4a,EAAArpB,SAAS45C,OAC5B3iF,EAAOw3C,OAAO4a,EAAArpB,SAASg4C,OACrB/gF,EAAOg4C,UACLu3C,EACAvvF,EAAOw3C,OAAO4a,EAAArpB,SAASs5C,OACrBriF,EAAOg4C,UAAUw3C,EAAiBlkF,GAClCtL,EAAO0D,IAAI,MAGf1D,EAAO83C,UAAU03C,EAAiBp9B,EAAAjyB,WAAWz5B,MAE/C1G,EAAO83C,UAAUy3C,EAAiBn9B,EAAAjyB,WAAWz5B,MAG/Cy0B,EAAKwuC,cAAc2lB,GACnB,MAEF,OACA,OACA,OACA,OACA,OACA,QACE99E,EAAOlG,EACP,MAEF,QACEkG,EAAOxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQisD,OAAQpkF,GACpC,MAEF,QACEkG,EAAOxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQksD,OAAQrkF,GACpC,MAEF,QACE2hF,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbh9E,EAAOxR,EAAOy7C,cAIlB,OAAOjqC,EAET,KAAKq0D,EAAe2F,IAClB,GACEmjB,EAAkBl/E,EAAem3D,EAAYqmB,GAAU,GACvDe,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cACZnwC,EAAOmE,EACPw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIloC,EAAc,GAAI,GAC1Dw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKvlB,IAAG,GAEpD,IADIwL,EAAOs9E,EAAS7c,aACX1yD,GAAE,KAKT,OAJAuvE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAEZlwC,EAAO0hF,EAAS7X,kBAAkBz9B,EAAS,GAAIhoC,EAAM,GACrD2nC,OAAE,EACN,OAAQ3nC,EAAKzB,MACX,OACA,OACA,OAAqBopC,EAAK8a,EAAArpB,SAASukC,MAAO,MAC1C,OACA,OACA,OACA,QAAsBh2B,EAAK8a,EAAArpB,SAASwkC,MAAO,MAC3C,OAAqBj2B,EAAK8a,EAAArpB,SAASykC,MAAO,MAC1C,OAAqBl2B,EAAK8a,EAAArpB,SAAS0kC,MAAO,MAC1C,OACEn2B,EAAK21C,EAASzjE,QAAQY,SAClBgoC,EAAArpB,SAASykC,MACTpb,EAAArpB,SAASukC,MACb,MAEF,OACEh2B,EAAK21C,EAASzjE,QAAQY,SAClBgoC,EAAArpB,SAAS0kC,MACTrb,EAAArpB,SAASwkC,MACb,MAEF,QACE,OAAOvtE,EAAOw3C,OAAO4a,EAAArpB,SAAS6mD,OAAQtkF,EAAMC,GAE9C,QACE,OAAOvL,EAAOw3C,OAAO4a,EAAArpB,SAAS8mD,OAAQvkF,EAAMC,GAE9C,QAKE,OAJA0hF,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAGdtgB,EAAO8xD,EAASzb,YAApB,IACIoC,EAAajkE,EAAKqkD,eAClB87B,EAAa30D,EAAK+tC,aAAav5D,GACnCwrB,EAAKsuC,aAAaqmB,EAAWj3D,MAAOvU,EAAA4jD,WAAWiE,SAC3CmjB,EAAan0D,EAAKyuC,oBAAoBj6D,GAG1C,OAFAwrB,EAAKsuC,aAAa6lB,EAAWz2D,MAAOvU,EAAA4jD,WAAWiE,SAC/ChxC,EAAKwuC,cAAcmmB,GACZ9vF,EAAO+6C,OACZ/6C,EAAOg4C,UAAU83C,EAAWj3D,MAAOvtB,GACnCtL,EAAOg4C,UAAUs3C,EAAWz2D,MAAOttB,GACnCvL,EAAOw3C,OAAOF,EACZt3C,EAAO83C,UAAUg4C,EAAWj3D,MAAO+6C,GACnC5zE,EAAO83C,UAAUw3C,EAAWz2D,MAAO+6C,KAIzC,KAAK/N,EAAekqB,IAClB,GACEpB,EAAkBl/E,EAAem3D,EAAYqmB,GAAU,GACvDe,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cACZnwC,EAAOmE,EACPw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIloC,EAAc,GAAI,GAC1Dw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKvlB,IAAG,GAEpD,IADIwL,EAAOs9E,EAAS7c,aACX1yD,GAAE,KAKT,OAJAuvE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAEZlwC,EAAO0hF,EAAS7X,kBAAkBz9B,EAAS,GAAIhoC,EAAM,GACrD2nC,OAAE,EACN,OAAQ3nC,EAAKzB,MACX,OACA,OACA,OAAqBopC,EAAK8a,EAAArpB,SAAS2jC,MAAO,MAC1C,OACA,OACA,OACA,QAAsBp1B,EAAK8a,EAAArpB,SAAS4jC,MAAO,MAC3C,OAAsBr1B,EAAK8a,EAAArpB,SAAS6jC,MAAO,MAC3C,OAAsBt1B,EAAK8a,EAAArpB,SAAS8jC,MAAO,MAC3C,OACEv1B,EAAK21C,EAASzjE,QAAQY,SAClBgoC,EAAArpB,SAAS6jC,MACTxa,EAAArpB,SAAS2jC,MACb,MAEF,OACEp1B,EAAK21C,EAASzjE,QAAQY,SAClBgoC,EAAArpB,SAAS8jC,MACTza,EAAArpB,SAAS4jC,MACb,MAEF,QACE,OAAO3sE,EAAOw3C,OAAO4a,EAAArpB,SAASinD,OAAQ1kF,EAAMC,GAE9C,QACE,OAAOvL,EAAOw3C,OAAO4a,EAAArpB,SAASknD,OAAQ3kF,EAAMC,GAE9C,QAKE,OAJA0hF,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAGdtgB,EAAO8xD,EAASzb,YAChBoC,EAAajkE,EAAKqkD,eAClB87B,EAAa30D,EAAK+tC,aAAav5D,GACnCwrB,EAAKsuC,aAAaqmB,EAAWj3D,MAAOvU,EAAA4jD,WAAWiE,SAC3CmjB,EAAan0D,EAAKyuC,oBAAoBj6D,GAG1C,OAFAwrB,EAAKsuC,aAAa6lB,EAAWz2D,MAAOvU,EAAA4jD,WAAWiE,SAC/ChxC,EAAKwuC,cAAcmmB,GACZ9vF,EAAO+6C,OACZ/6C,EAAOg4C,UAAU83C,EAAWj3D,MAAOvtB,GACnCtL,EAAOg4C,UAAUs3C,EAAWz2D,MAAOttB,GACnCvL,EAAOw3C,OAAOF,EACZt3C,EAAO83C,UAAUg4C,EAAWj3D,MAAO+6C,GACnC5zE,EAAO83C,UAAUw3C,EAAWz2D,MAAO+6C,KAIzC,KAAK/N,EAAenT,KACpB,KAAKmT,EAAeqqB,MAClB,GACEvB,EAAkBl/E,EAAem3D,EAAYqmB,GAAU,GACvDe,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cACZnwC,EAAOmE,EACPw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIloC,EAAc,GAAE,GACxDw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKvlB,IAAG,GAEpD,IADIwL,EAAOs9E,EAAS7c,aACX1yD,GAAE,KAKT,OAJAuvE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAEZnE,OAAE,EACN,OAAQ3nC,EAAKzB,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAAoB,OAAO5C,EAC3B,QACEgsC,EAAKh1C,EAAU6lB,cAAgB09C,EAAenT,KAC1CN,EAAA3uB,QAAQ0sD,QACR/9B,EAAA3uB,QAAQ2sD,SACZ,MAEF,QACE94C,EAAKh1C,EAAU6lB,cAAgB09C,EAAenT,KAC1CN,EAAA3uB,QAAQ4sD,QACRj+B,EAAA3uB,QAAQ6sD,SACZ,MAEF,QAKE,OAJArD,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAGlB,OAAOz7C,EAAOq3C,MAAMC,EAAIhsC,GAE1B,KAAKu6D,EAAe0qB,SAClB,GACE5B,EAAkBl/E,EAAem3D,EAAYqmB,GAAU,GACvDe,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cACZnwC,EAAOmE,EACPw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIloC,EAAc,GAAE,GACxDw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKvlB,IAAG,GAEpD,IADIwL,EAAOs9E,EAAS7c,aACX1yD,GAAE,KAKT,OAJAuvE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAEZlwC,EAAO0hF,EAAS7X,kBAAkBz9B,EAAS,GAAIhoC,EAAI,GACnD2nC,OAAE,EACN,OAAQ3nC,EAAKzB,MAEX,QAAqBopC,EAAK8a,EAAArpB,SAASynD,YAAa,MAChD,QAAqBl5C,EAAK8a,EAAArpB,SAAS0nD,YAAa,MAChD,QAKE,OAJAxD,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAGlB,OAAOz7C,EAAOw3C,OAAOF,EAAIhsC,EAAMC,GAEjC,KAAKs6D,EAAe6qB,QAClB,GACE/B,EAAkBl/E,EAAem3D,EAAYqmB,GAAU,GACvDe,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cACZnwC,EAAOmE,EACPw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIloC,EAAc,GAAE,GACxDw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKvlB,IAAG,GAEpD,IADIwL,EAAOs9E,EAAS7c,aACX1yD,GAAE,KAKT,OAJAuvE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAEZjqC,OAAI,EACR,OAAQ7B,EAAKzB,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACEsD,EAAOlG,EACP,MAEF,QACEkG,EAAOxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQktD,WAAYrlF,GACxC,MAEF,QACEkG,EAAOxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQmtD,WAAYtlF,GACxC,MAEF,QACE2hF,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbh9E,EAAOxR,EAAOy7C,cAIlB,OAAOjqC,EAET,KAAKq0D,EAAegrB,YAClB,GACEzC,EAAkB3+E,EAAem3D,EAAYqmB,GAAU,GACvDe,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cAEhB,IADI9rC,EAAOF,EAAe,IACjBiO,GAAE,KAMT,OALAuvE,EAAS7c,YAAczgE,EACvBs9E,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAEZjqC,OAAI,EACR,OAAQ7B,EAAKzB,MACX,OACA,OACM5C,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKxlB,IAAG,GAC3DsN,EAAOxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQqtD,eAAgBxlF,GAC5C,MAEF,OACA,OACMA,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKvlB,IAAG,GAC3DqN,EAAOxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQstD,eAAgBzlF,GAC5C,MAEF,OACA,OACMA,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAC7Cs1C,EAASzjE,QAAQY,SACbjG,EAAAuF,KAAKvlB,IACLggB,EAAAuF,KAAKxlB,IAAG,GAGdsN,EAAOxR,EAAOq3C,MACZ41C,EAASzjE,QAAQY,SACbgoC,EAAA3uB,QAAQstD,eACR3+B,EAAA3uB,QAAQqtD,eACZxlF,GAEF,MAEF,QACMA,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKjmB,IAAG,GAC3D+N,EAAOxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQutD,eAAgB1lF,GAC5C,MAEF,QACMA,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKhmB,IAAG,GAC3D8N,EAAOxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQwtD,eAAgB3lF,GAC5C,MAEF,QACE2hF,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbh9E,EAAOxR,EAAOy7C,cAKlB,OADAwxC,EAAS7c,YAAczgE,EAChB6B,EAET,KAAKq0D,EAAeqrB,KAClB,GACEvC,EAAkBl/E,EAAem3D,EAAYqmB,GAAU,GACvDe,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cACZnwC,EAAOmE,EACPw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIloC,EAAc,GAAE,GACxDw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKvlB,IAAG,GAEpD,IADIwL,EAAOs9E,EAAS7c,aACX1yD,GAAE,KAMT,OALAuvE,EAAS7c,YAAczgE,EACvBs9E,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAEZjqC,OAAI,EACR,OAAQ7B,EAAKzB,MACX,QACEsD,EAAOxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQ0tD,QAAS7lF,GACrC,MAEF,QACEkG,EAAOxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQ2tD,QAAS9lF,GACrC,MAEF,QACE2hF,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbh9E,EAAOxR,EAAOy7C,cAIlB,OAAOjqC,EAET,KAAKq0D,EAAewrB,MAClB,GACE1C,EAAkBl/E,EAAem3D,EAAYqmB,GAAU,GACvDe,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cACZnwC,EAAOmE,EACPw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIloC,EAAc,GAAE,GACxDw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKvlB,IAAG,GAEpD,IADIwL,EAAOs9E,EAAS7c,aACX1yD,GAAE,KAKT,OAJAuvE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAWx7D,OAENpL,EAAOy7C,cAEZjqC,OAAI,EACR,OAAQ7B,EAAKzB,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACEsD,EAAOlG,EACP,MAGF,QACEkG,EAAOxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQ6tD,SAAUhmF,GACtC,MAEF,QACEkG,EAAOxR,EAAOq3C,MAAM+a,EAAA3uB,QAAQ8tD,SAAUjmF,GACtC,MAEF,QACE2hF,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbh9E,EAAOxR,EAAOy7C,cAIlB,OAAOjqC,EAKT,KAAKq0D,EAAeztB,KAClB,GACEg2C,EAAkB3+E,EAAem3D,EAAYqmB,GAAU,GACvDsB,EAAkB52C,EAAU,EAAG,EAAGivB,EAAYqmB,GAC9C,OAAOjtF,EAAOy7C,cACZ9rC,EAAOF,EAAe,GAA1B,IACI+hF,EACFrU,GAAkBh5D,EAAAuF,KAAKupC,MACvBtjD,EAAK+N,GAAE,IACPy/D,EAAez/D,GAAE,IACjBy/D,EAAevhC,KAAOjsC,EAAKisC,KACzBuhC,EAAiBxtE,EACjBrE,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAC7Cs1C,EAASzjE,QAAQI,UAAS,GAK5B,IADI6nE,GADA3I,GAAcnxC,EAASnrC,SACI,EAAIklF,EAAwB/5C,EAAS,GAAIs1C,GAAY,GACpE,EAEd,OADAA,EAAS7c,YAAcohB,EAChBxxF,EAAOy7C,cAEhB,IAAIk2C,OAAQ,EACRC,EAAejiF,EAAK8iD,SACxB,GAAmB,GAAfq2B,GAAkB,CAEpB,IADA6I,EAAWD,EAAwB/5C,EAAS,GAAIs1C,IACjC,EAEb,OADAA,EAAS7c,YAAcohB,EAChBxxF,EAAOy7C,cAEhB,GAAIk2C,EAAWC,EAMb,OALA3E,EAASv/E,MACPwW,EAAApZ,eAAe+mF,6CACfl6C,EAAS,GAAGvsC,MAAO,YAAa,IAAKwmF,EAAa7lF,YAEpDkhF,EAAS7c,YAAcohB,EAChBxxF,EAAOy7C,cAEhB,IAAKvxC,EAAAJ,WAAW6nF,GAMd,OALA1E,EAASv/E,MACPwW,EAAApZ,eAAegnF,0BACfn6C,EAAS,GAAGvsC,MAAO,aAErB6hF,EAAS7c,YAAcohB,EAChBxxF,EAAOy7C,mBAGhBk2C,EAAWC,EAGb,OADA3E,EAAS7c,YAAcohB,EAChBxxF,EAAOo4C,KACZzoC,EAAK8iD,SACL9iD,EAAK+N,GAAG,GACRpS,EACAkmF,EAAQx9B,eACRy9B,EACAE,GAGJ,KAAK9rB,EAAe1uB,MAElB,GADA81C,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KAE1BukE,EAAkB3+E,EAAem3D,EAAYqmB,GAC7CsB,EAAkB52C,EAAU,EAAG,EAAGivB,EAAYqmB,GAC9C,OAAOjtF,EAAOy7C,cACZ9rC,EAAOF,EAAe,GACtBnE,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAC7Cs1C,EAASzjE,QAAQI,UAAS,GAGxBre,EAAO2hF,EACPD,EAAS7X,kBAAkBz9B,EAAS,GAClCwlC,EAAc,GAGhB8P,EAAS7X,kBACPz9B,EAAS,GACThoC,EACAA,EAAK+N,GAAE,GACJ,EACA,GAfT,IAiBIq0E,EAAS9E,EAAS7c,YAgBtB,GAdEzgE,EAAK+N,GAAE,MAEJq0E,EAAOr0E,GAAE,IACVq0E,EAAOn2C,KAAOjsC,EAAKisC,QAGrBrwC,EAAO0hF,EAAS9O,kBAAkB5yE,EAChCwmF,EAAQpiF,GACR,GAAO,EACPgoC,EAAS,IAEXo6C,EAASpiF,IAEP8hF,EAAY95C,EAASnrC,QAAU,EAAIklF,EAAwB/5C,EAAS,GAAIs1C,GAAY,GACxE,EAEd,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACrB7pB,EAAOy7C,cAEZk2C,OAAQ,EACRC,EAAejiF,EAAK8iD,SACxB,GAAuB,GAAnB9a,EAASnrC,OAAa,CAExB,IADAmlF,EAAWD,EAAwB/5C,EAAS,GAAIs1C,IACjC,EAEb,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACrB7pB,EAAOy7C,cAEhB,GAAIk2C,EAAWC,EAMb,OALA3E,EAASv/E,MACPwW,EAAApZ,eAAe+mF,6CACfl6C,EAAS,GAAGvsC,MAAO,YAAa,IAAKwmF,EAAa7lF,YAEpDkhF,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACrB7pB,EAAOy7C,cAEhB,IAAKvxC,EAAAJ,WAAW6nF,GAMd,OALA1E,EAASv/E,MACPwW,EAAApZ,eAAegnF,0BACfn6C,EAAS,GAAGvsC,MAAO,aAErB6hF,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACrB7pB,EAAOy7C,mBAGhBk2C,EAAWC,EAGb,OADA3E,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACrB7pB,EAAOm3C,MAAMxnC,EAAK8iD,SAAUnnD,EAAMC,EAAMwmF,EAAO/9B,eAAgBy9B,EAAWE,GAKnF,KAAK9rB,EAAeltB,YAClB,IAAKs0C,EAASzjE,QAAQS,WAAU,IAAmB,MACnD,GACEmkE,EAAkB3+E,EAAem3D,EAAYqmB,GAAU,GACvDsB,EAAkB52C,EAAU,EAAG,EAAGivB,EAAYqmB,GAC9C,OAAOjtF,EAAOy7C,cAEZ+1C,GADA7hF,EAAOF,EAAe,IAEnBiO,GAAE,IACPy/D,EAAez/D,GAAE,IACjBy/D,EAAevhC,KAAOjsC,EAAKisC,KACzBuhC,EAAiBxtE,EACrB,IAAKA,EAAK+N,GAAE,GAMV,OALAuvE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbvB,EAAS7c,YAAcohB,EAChBxxF,EAAOy7C,cAEZnwC,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAC7Cs1C,EAASzjE,QAAQI,UAAS,GAI5B,OADI6nE,EAA+B,GAAnB95C,EAASnrC,OAAcklF,EAAwB/5C,EAAS,GAAIs1C,GAAY,GACxE,GACdA,EAAS7c,YAAcohB,EAChBxxF,EAAOy7C,gBAEhBwxC,EAAS7c,YAAcohB,EAChBxxF,EAAO24C,YACZhpC,EAAK8iD,SACLnnD,EACAkmF,EAAQx9B,eACRy9B,IAGJ,KAAK5rB,EAAehtB,aAClB,IAAKo0C,EAASzjE,QAAQS,WAAU,IAAmB,MAEnD,GADAgjE,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KAE1BukE,EAAkB3+E,EAAem3D,EAAYqmB,GAC7CsB,EAAkB52C,EAAU,EAAG,EAAGivB,EAAYqmB,GAC9C,OAAOjtF,EAAOy7C,cAEhB,KADI9rC,EAAOF,EAAe,IAChBiO,GAAE,IAAuB/N,EAAKisC,KAAO,EAK7C,OAJAqxC,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAEZnwC,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAC7Cs1C,EAASzjE,QAAQI,UAAS,GAGxBre,EAAO2hF,EACPD,EAAS7X,kBACPz9B,EAAS,GACTwlC,EAAc,GAGhB8P,EAAS7X,kBACPz9B,EAAS,GACThoC,EACAA,EAAK+N,GAAE,GACJ,EACA,GAELq0E,EAAS9E,EAAS7c,YAgBtB,OAdEzgE,EAAK+N,GAAE,MAEJq0E,EAAOr0E,GAAE,IACVq0E,EAAOn2C,KAAOjsC,EAAKisC,QAGrBrwC,EAAO0hF,EAAS9O,kBAAkB5yE,EAChCwmF,EAAQpiF,GACR,GAAO,EACPgoC,EAAS,IAEXo6C,EAASpiF,IAEP8hF,EAA+B,GAAnB95C,EAASnrC,OAAcklF,EAAwB/5C,EAAS,GAAIs1C,GAAY,GACxE,GACdA,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACrB7pB,EAAOy7C,gBAEhBwxC,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACrB7pB,EAAO64C,aAAalpC,EAAK8iD,SAAUnnD,EAAMC,EAAMwmF,EAAO/9B,eAAgBy9B,IAE/E,KAAK5rB,EAAemsB,WACpB,KAAKnsB,EAAeosB,WACpB,KAAKpsB,EAAeqsB,WACpB,KAAKrsB,EAAessB,UACpB,KAAKtsB,EAAeusB,WACpB,KAAKvsB,EAAewsB,YAClB,IAAKpF,EAASzjE,QAAQS,WAAU,IAAmB,MACnD,GACEmkE,EAAkB3+E,EAAem3D,EAAYqmB,GAAU,GACvDsB,EAAkB52C,EAAU,EAAG,EAAGivB,EAAYqmB,GAC9C,OAAOjtF,EAAOy7C,cAEhB,KADI9rC,EAAOF,EAAe,IAChBiO,GAAE,IAAuB/N,EAAKisC,KAAO,EAK7C,OAJAqxC,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAEZnwC,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAC7Cs1C,EAASzjE,QAAQI,UAAS,GAGxBre,EAAO2hF,EACPD,EAAS7X,kBAAkBz9B,EAAS,GAClCwlC,EAAc,GAGhB8P,EAAS7X,kBACPz9B,EAAS,GACThoC,EACAA,EAAK+N,GAAE,GACJ,EACA,GAELq0E,EAAS9E,EAAS7c,YAgBtB,GAdEzgE,EAAK+N,GAAE,MAEJq0E,EAAOr0E,GAAE,IACVq0E,EAAOn2C,KAAOjsC,EAAKisC,QAGrBrwC,EAAO0hF,EAAS9O,kBAAkB5yE,EAChCwmF,EAAQpiF,GACR,GAAO,EACPgoC,EAAS,IAEXo6C,EAASpiF,IAEP8hF,EAA+B,GAAnB95C,EAASnrC,OAAcklF,EAAwB/5C,EAAS,GAAIs1C,GAAY,GACxE,EAEd,OADAA,EAAS7c,YAAc2hB,EAChB/xF,EAAOy7C,cAEZnE,OAAE,EACN,OAAQh1C,EAAU6lB,cAChB,QAAS1d,QAAO,GAChB,KAAKo7D,EAAemsB,WAAe16C,EAAK8a,EAAAzf,YAAY2/C,IAAM,MAC1D,KAAKzsB,EAAeosB,WAAe36C,EAAK8a,EAAAzf,YAAY4/C,IAAM,MAC1D,KAAK1sB,EAAeqsB,WAAe56C,EAAK8a,EAAAzf,YAAY6/C,IAAM,MAC1D,KAAK3sB,EAAessB,UAAe76C,EAAK8a,EAAAzf,YAAY8/C,GAAM,MAC1D,KAAK5sB,EAAeusB,WAAe96C,EAAK8a,EAAAzf,YAAY+/C,IAAM,MAC1D,KAAK7sB,EAAewsB,YAAe/6C,EAAK8a,EAAAzf,YAAYggD,KAGtD,OADA1F,EAAS7c,YAAc2hB,EAChB/xF,EAAO+4C,WACZzB,EAAI3nC,EAAK8iD,SAAUg/B,EAAWnmF,EAAMC,EAAMwmF,EAAO/9B,gBAGrD,KAAK6R,EAAe5sB,eAClB,IAAKg0C,EAASzjE,QAAQS,WAAU,IAAmB,MACnD,GACEmkE,EAAkB3+E,EAAem3D,EAAYqmB,GAAU,GACvDsB,EAAkB52C,EAAU,EAAG,EAAGivB,EAAYqmB,GAC9C,OAAOjtF,EAAOy7C,cAEhB,KADI9rC,EAAOF,EAAe,IAChBiO,GAAE,IAAuB/N,EAAKisC,KAAO,EAK7C,OAJAqxC,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAEZnwC,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAC7Cs1C,EAASzjE,QAAQI,UAAS,GAGxBre,EAAO2hF,EACPD,EAAS7X,kBAAkBz9B,EAAS,GAClCwlC,EAAc,GAGhB8P,EAAS7X,kBACPz9B,EAAS,GACThoC,EACAA,EAAK+N,GAAE,GACJ,EACA,GAELq0E,EAAS9E,EAAS7c,YAhBtB,IAwCIqhB,EAvBAjmF,GAAOyhF,EAAS7X,kBAAkBz9B,EAAS,GAC7Co6C,EAAM,GAuBR,OAnBEpiF,EAAK+N,GAAE,MAEJq0E,EAAOr0E,GAAE,IACVq0E,EAAOn2C,KAAOjsC,EAAKisC,QAGrBrwC,EAAO0hF,EAAS9O,kBAAkB5yE,EAChCwmF,EAAQpiF,GACR,GAAO,EACPgoC,EAAS,IAEXnsC,GAAOyhF,EAAS9O,kBAAkB3yE,GAChCumF,EAAQpiF,GACR,GAAO,EACPgoC,EAAS,IAEXo6C,EAASpiF,IAEP8hF,EAA+B,GAAnB95C,EAASnrC,OAAcklF,EAAwB/5C,EAAS,GAAIs1C,GAAY,GACxE,GACdA,EAAS7c,YAAc2hB,EAChB/xF,EAAOy7C,gBAEhBwxC,EAAS7c,YAAc2hB,EAChB/xF,EAAOi5C,eACZtpC,EAAK8iD,SAAUg/B,EAAWnmF,EAAMC,EAAMC,GAAMumF,EAAO/9B,iBAGvD,KAAK6R,EAAexsB,YAClB,IAAK4zC,EAASzjE,QAAQS,WAAU,IAAmB,MAEnD,GADAgjE,EAAS7c,YAAcjsD,EAAAuF,KAAKjmB,IAE1B2qF,EAAkB3+E,EAAem3D,EAAYqmB,GAC7Ce,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cAEhB,KADI9rC,EAAOF,EAAe,IAChBiO,GAAE,IAAuB/N,EAAKisC,KAAO,GAK7C,OAJAqxC,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAEZnwC,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAC7Cs1C,EAASzjE,QAAQI,UAAS,GAGxBre,EAAO0hF,EAAS7X,kBAAkBz9B,EAAS,GAAIhoC,EAAI,GAGnDnE,GAAOyhF,EAAS7X,kBAAkBz9B,EAAS,GAC7CxzB,EAAAuF,KAAKhmB,IAAG,GAIV,OADAupF,EAAS7c,YAAcjsD,EAAAuF,KAAKjmB,IACrBzD,EAAOq5C,YAAY/tC,EAAMC,EAAMC,GAAMmE,EAAKqkD,gBAEnD,KAAK6R,EAAepsB,cAClB,IAAKwzC,EAASzjE,QAAQS,WAAU,IAAmB,MAEnD,GADAgjE,EAAS7c,YAAcjsD,EAAAuF,KAAKjmB,IAE1BsqF,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cACZnwC,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAC7Cs1C,EAASzjE,QAAQI,UAAS,GAGxBre,EAAO0hF,EAAS7X,kBAAkBz9B,EAAS,GAC7CxzB,EAAAuF,KAAKjmB,IAAG,GAIV,OADAwpF,EAAS7c,YAAcjsD,EAAAuF,KAAKjmB,IACrBzD,EAAOy5C,cAAcnuC,EAAMC,GAKpC,KAAKs6D,EAAe9qB,OAClB,GACE4zC,EAAkBl/E,EAAem3D,EAAYqmB,GAAU,GACvDe,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cACZnwC,EAAOmE,EACPw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIloC,EAAc,GAAE,GACxDw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKupC,MAEjD,KADItjD,EAAOs9E,EAAS7c,aACVxyD,MAAM,KAKd,OAJAqvE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAEZlwC,EAAO0hF,EAAS7X,kBAAkBz9B,EAAS,GAAIhoC,EAAI,GACnDnE,GAAOyhF,EAASrS,cAClBqS,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKzlB,MAC7CgpF,EAAS7c,aAGX,OADA6c,EAAS7c,YAAczgE,EAChB3P,EAAO+6C,OAAOzvC,EAAMC,EAAMC,IAEnC,KAAKq6D,EAAepqB,YAQlB,OAPIhsC,GACFw9E,EAASv/E,MACPwW,EAAApZ,eAAe62D,sBACfiF,EAAW4nB,mBAAoBlsF,EAAU6lB,cAG7C6lE,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GACpCjtF,EAAOy7C,cAKhB,KAAKoqB,EAAe+sB,YAElB,OADA3F,EAAS7c,YAAcjsD,EAAAuF,KAAKjmB,IAE1BsqF,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GACpCjtF,EAAOy7C,cACTz7C,EAAO03C,KAAK0a,EAAA5f,OAAOqgD,YAE5B,KAAKhtB,EAAeitB,YAElB,OADA7F,EAAS7c,YAAcjsD,EAAAuF,KAAKjmB,IAE1BsqF,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GACpCjtF,EAAOy7C,cACTz7C,EAAO03C,KAAK0a,EAAA5f,OAAOugD,WAAY,KAAM,CAC1C9F,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKjmB,IAAG,KAGpD,KAAKoiE,EAAelqB,YAElB,GADAsxC,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KAE1BkkE,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cAChB,IAAKwxC,EAASzjE,QAAQS,WAAU,GAAuB,CACrD,IAAIqP,GAAW2zD,EAAS7kE,SAASmJ,gBAAgBjvB,EAAW,MAE5D,OADA2qF,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACvByP,GACE2zD,EAAShI,kBAAkB3rD,GAAUqe,EAAUivB,GADhC5mE,EAAOy7C,cAG/B,IAAI7xB,GAAYqjE,EAASzjE,QAAQI,UAC7Bte,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAI/tB,GAAS,GACxDre,EAAO0hF,EAAS7X,kBAAkBz9B,EAAS,GAAI/tB,GAAS,GACxDpe,GAAOyhF,EAAS7X,kBAAkBz9B,EAAS,GAAI/tB,GAAS,GAE5D,OADAqjE,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACrB7pB,EAAO27C,YAAYrwC,EAAMC,EAAMC,IAExC,KAAKq6D,EAAe/pB,YAElB,GADAmxC,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KAE1BkkE,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cAChB,IAAKwxC,EAASzjE,QAAQS,WAAU,GAAuB,CACjDqP,GAAW2zD,EAAS7kE,SAASmJ,gBAAgBjvB,EAAW,MAE5D,OADA2qF,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACvByP,GACE2zD,EAAShI,kBAAkB3rD,GAAUqe,EAAUivB,GADhC5mE,EAAOy7C,cAG3B7xB,GAAYqjE,EAASzjE,QAAQI,UAC7Bte,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAI/tB,GAAS,GACxDre,EAAO0hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAK9lB,GAAE,GACtD4H,GAAOyhF,EAAS7X,kBAAkBz9B,EAAS,GAAI/tB,GAAS,GAE5D,OADAqjE,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACrB7pB,EAAO87C,YAAYxwC,EAAMC,EAAMC,IAKxC,KAAKq6D,EAAe/vB,WAClB,GACEs4C,EAAkB3+E,EAAem3D,EAAYqmB,GAAU,GACvDe,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cAChB,IAAItpC,GAAS1C,EAAe,GAExBq/D,IADAxjE,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxlC,IACpC86E,EAAS7c,aAExB,OADA6c,EAAS7c,YAAcj+D,GACnB28D,GAASlzB,MAAQzpC,GAAOypC,MAC1BqxC,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAWx7D,OAENpL,EAAOy7C,eAETnwC,EAET,KAAKu6D,EAAep7D,OAClB,GACEkkF,EAAkBl/E,EAAem3D,EAAYqmB,GAC7CsB,EAAkB52C,EAAU,EAAG,EAAGivB,EAAYqmB,GAM9C,OAJIx9E,IACFhF,OAAOgF,EAAcjD,QACrBygF,EAAS7c,YAAc3gE,EAAc,GAAGmjD,iBAEnC5yD,EAAOy7C,cAEZnwC,EAAOmE,EACPw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIloC,EAAc,GAAI,GAC1Dw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKzlB,KAAI,GACjD0L,EAAOs9E,EAAS7c,YAIpB,GAHA6c,EAAS7c,YAAczgE,EAAKijD,gBAGxBR,EAAApL,gBAAgB17C,EAAOtL,EAAOuiD,qBAAqBj3C,KAAU8mD,EAAAhyB,aAAa0kB,MAC5E,OAAQsN,EAAAnL,kBAAkB37C,IACxB,KAAK8mD,EAAAjyB,WAAW15B,IACd,GAA8B,GAA1B2rD,EAAAlL,iBAAiB57C,GACnB,OAAI6xE,GAAkBh5D,EAAAuF,KAAKG,MACzBojE,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACrB7pB,EAAO26C,OAETrvC,EAET,MAEF,KAAK8mD,EAAAjyB,WAAWz5B,IACd,GAAiC,GAA7B0rD,EAAAjL,oBAAoB77C,IAA4C,GAA9B8mD,EAAAhL,qBAAqB97C,GACzD,OAAI6xE,GAAkBh5D,EAAAuF,KAAKG,MACzBojE,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACrB7pB,EAAO26C,OAETrvC,EAET,MAEF,KAAK8mD,EAAAjyB,WAAWj5B,IACd,GAA8B,GAA1BkrD,EAAA/K,iBAAiB/7C,GACnB,OAAI6xE,GAAkBh5D,EAAAuF,KAAKG,MACzBojE,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACrB7pB,EAAO26C,OAETrvC,EAET,MAEF,KAAK8mD,EAAAjyB,WAAWh5B,IACd,GAA8B,GAA1BirD,EAAA9K,iBAAiBh8C,GACnB,OAAI6xE,GAAkBh5D,EAAAuF,KAAKG,MACzBojE,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACrB7pB,EAAO26C,OAETrvC,EAQf,GAAI2hF,EAASzjE,QAAQe,SACnB,OAAI4yD,GAAkBh5D,EAAAuF,KAAKG,MACzBojE,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACrB7pB,EAAO26C,OAETrvC,EAIT,IAAI7C,GAAQm0E,EAAaqQ,EAA6B,GAAnBt1C,EAASnrC,OAAcmrC,EAAS,GAAK,KAAMivB,GAC9EqmB,EAAS7c,YAAczgE,EAAKijD,gBACxBphD,OAAI,EACR,GAAI2rE,GAAkBh5D,EAAAuF,KAAKG,KAEzB,OADAojE,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACpBla,EAAKzB,MACX,OACA,OACA,OACA,OACA,OACA,OACA,QACEsD,EAAOxR,EAAOy6C,GACZz6C,EAAOq3C,MAAM+a,EAAA3uB,QAAQkoC,OAAQrgE,GAC7B7C,IAEF,MAEF,OACA,OACE+I,EAAOxR,EAAOy6C,GACZz6C,EAAOq3C,MAAM+a,EAAA3uB,QAAQmoC,OAAQtgE,GAC7B7C,IAEF,MAEF,OACA,OACE+I,EAAOxR,EAAOy6C,GACZz6C,EAAOq3C,MACL41C,EAASzjE,QAAQY,SACbgoC,EAAA3uB,QAAQmoC,OACRxZ,EAAA3uB,QAAQkoC,OACZrgE,GAEF7C,IAEF,MAGF,QACE+I,EAAOxR,EAAOy6C,GACZz6C,EAAOw3C,OAAO4a,EAAArpB,SAASujC,MACrBhhE,EACAtL,EAAOkE,IAAI,IAEbuE,IAEF,MAEF,QACE+I,EAAOxR,EAAOy6C,GACZz6C,EAAOw3C,OAAO4a,EAAArpB,SAASwjC,MACrBjhE,EACAtL,EAAOmE,IAAI,IAEbsE,IAEF,MAEF,QACEwkF,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbh9E,EAAO/I,QAMX,OADAwkF,EAAS7c,YAAczgE,EAAKijD,gBACpBq6B,EAAS7c,YAAYliE,MAC3B,OACA,OACA,OACA,OACA,OACA,OACA,QACE,IACI+tE,IADA9gD,EAAO8xD,EAASzb,aACC5H,oBAAoBj6D,GACzCwrB,EAAKsuC,aAAawS,GAAUpjD,MAAOvU,EAAA4jD,WAAWiE,SAC9C36D,EAAOxR,EAAOy6C,GACZz6C,EAAOg4C,UAAUikC,GAAUpjD,MAAOvtB,GAClCtL,EAAO83C,UAAUmkC,GAAUpjD,MAAOu5B,EAAAjyB,WAAW15B,KAC7CgC,IAEF,MAEF,OACA,OACMwzE,GAAYgR,EAASzb,YAAY5H,oBAAoBzlD,EAAAuF,KAAKhmB,KAC9D8N,EAAOxR,EAAOy6C,GACZz6C,EAAOq3C,MAAM+a,EAAA3uB,QAAQmoC,OACnB5rE,EAAOg4C,UAAUikC,GAAUpjD,MAAOvtB,IAEpC7C,GACAzI,EAAO83C,UAAUmkC,GAAUpjD,MAAOu5B,EAAAjyB,WAAWz5B,MAE/C,MAEF,OACA,OACMu1E,GAAYgR,EAASzb,YAAY5H,oBAAoBqjB,EAASzjE,QAAQI,WAC1EpY,EAAOxR,EAAOy6C,GACZz6C,EAAOq3C,MACL41C,EAASzjE,QAAQY,SACbgoC,EAAA3uB,QAAQmoC,OACRxZ,EAAA3uB,QAAQkoC,OACZ3rE,EAAOg4C,UAAUikC,GAAUpjD,MAAOvtB,IAEpC7C,GACAzI,EAAO83C,UAAUmkC,GAAUpjD,MAAOo0D,EAASzjE,QAAQqqD,iBAErD,MAEF,QACMoI,GAAYgR,EAASzb,YAAY5H,oBAAoBzlD,EAAAuF,KAAKxlB,KAC9DsN,EAAOxR,EAAOy6C,GACZz6C,EAAOw3C,OAAO4a,EAAArpB,SAASujC,MACrBtsE,EAAOg4C,UAAUikC,GAAUpjD,MAAOvtB,GAClCtL,EAAOkE,IAAI,IAEbuE,GACAzI,EAAO83C,UAAUmkC,GAAUpjD,MAAOu5B,EAAAjyB,WAAWj5B,MAE/C,MAEF,QACM+0E,GAAYgR,EAASzb,YAAY5H,oBAAoBzlD,EAAAuF,KAAKvlB,KAC9DqN,EAAOxR,EAAOy6C,GACZz6C,EAAOw3C,OAAO4a,EAAArpB,SAASwjC,MACrBvsE,EAAOg4C,UAAUikC,GAAUpjD,MAAOvtB,GAClCtL,EAAOmE,IAAI,IAEbsE,GACAzI,EAAO83C,UAAUmkC,GAAUpjD,MAAOu5B,EAAAjyB,WAAWh5B,MAE/C,MAEF,QACE8lF,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbh9E,EAAO/I,GAKb,OAAO+I,EAET,KAAKq0D,EAAe5nC,UAClB,GACE8vD,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cAChB,IACIu3C,IADA73D,EAAO8xD,EAASzb,aACQ9zD,GAAE,OAC9Byd,EAAKtd,IAAG,OAEJrM,EAAOy7E,EAAS7X,kBAAkBz9B,EAAS,GAAIwlC,GAEnD,OADK6V,IAAkB73D,EAAKnE,MAAK,OAC1BxlB,EAET,KAAKq0D,EAAeotB,YAAa9F,GAAY,EAC7C,KAAKtnB,EAAetqB,cAClB,GACEozC,EAAkBl/E,EAAem3D,EAAYqmB,GAAU,GACvDsB,EAAkB52C,EAAU,EAAGl0C,IAAIkhD,UAAWiiB,EAAYqmB,GAC1D,OAAOjtF,EAAOy7C,cAChB,IAAI1rC,GAAaN,EAAgBA,EAAc,GAAK0tE,EAEhD+V,IADA5nF,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAK5lB,KACzCmpF,EAAS7c,aACxB,KACE8iB,IAAY/uE,EAAAuF,KAAK5lB,KACJ,GAAbovF,GAAShlF,MAAwBglF,GAASvgC,oBAM1C,OAJAs6B,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf6jB,EAAS,GAAGvsC,OAEPpL,EAAOy7C,cAOhB,IALA,IAAIqtC,GAAcnxC,EAASnrC,OAAS,EAChC2mF,GAAe,IAAI7rF,MAAqBwhF,IACxC5E,GAAmBn0E,GAAWikD,eAC9Bj5B,GAAiB,IAAIzzB,MAAYwhF,IACjCsK,GAAmB,IAAI9rF,MAAkBwhF,IACpCpoF,GAAI,EAAGA,GAAIooF,KAAepoF,GAAG,CACpCyyF,GAAazyF,IAAKusF,EAAS7X,kBAAkBz9B,EAAS,EAAIj3C,IAAIyjB,EAAAuF,KAAKjmB,KACnE,IAAI4vF,GAAcpG,EAAS7c,YAC3Br1C,GAAer6B,IAAK2yF,GACpBD,GAAiB1yF,IAAK2yF,GAAYr/B,eAEpC,IAAI9kD,GAAWiV,EAAAoT,UAAUi+B,oBAAoBz6B,GAAgBhrB,IACzD8tC,GAAU79C,EAAOs2C,2BAA2B4tC,GAAkBkP,IAGlE,GAFKv1C,KAASA,GAAU79C,EAAO+1C,gBAAgB7mC,GAAUg1E,GAAkBkP,KAC3EnG,EAAS7c,YAAcrgE,GACnBo9E,EAAW,CAEb,GAAI/6B,EAAApL,gBAAgB17C,EAAOtL,EAAOuiD,qBAAqBj3C,KAAU8mD,EAAAhyB,aAAa0kB,MAAO,CACnFr6C,OAAO2nD,EAAAnL,kBAAkB37C,IAAS8mD,EAAAjyB,WAAW15B,KAC7C,IAAIoyB,GAAQu5B,EAAAlL,iBAAiB57C,GACzBilE,GAAgB0c,EAAS1c,cAC7B,GAAI13C,IAAS,GAAKA,GAAQ03C,GAAc/jE,OACtC,OAAOxM,EAAOa,KAAK0vE,GAAc13C,IAAQs6D,GAAcjP,IAO3D,OAJA+I,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf6jB,EAAS,GAAGvsC,OAEPpL,EAAOy7C,cAIhB,OAAOz7C,EAAOu7C,cAAcjwC,EAAM6nF,GAAcjkF,IAElD,KAAK22D,EAAeytB,YAClB,GACElF,EAAkB3+E,EAAem3D,EAAYqmB,GAAU,GACvD,OAAOjtF,EAAOy7C,cAChB,IAAIhzB,GAAgBhZ,EAAe,GAAG6vB,eACtC,OAAK7W,IAOLwkE,EAAS7c,YAAc3nD,GAAc9Y,KAC9Bs9E,EAAS5B,mBAAmB5iE,GAAekvB,EAAQ,EAAoBivB,KAP5EqmB,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,eAQlB,KAAKoqB,EAAer7D,MAMlB,OALAujF,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C2qF,EAASv/E,MACPwW,EAAApZ,eAAeyoF,eACf3sB,EAAWx7D,OAAQusC,EAASnrC,OAASmrC,EAAS,GAAKivB,GAAYx7D,MAAMW,YAEhE/L,EAAOy7C,cAEhB,KAAKoqB,EAAet7D,QAMlB,OALAwjF,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C2qF,EAASz/E,QACP0W,EAAApZ,eAAeyoF,eACf3sB,EAAWx7D,OAAQusC,EAASnrC,OAASmrC,EAAS,GAAKivB,GAAYx7D,MAAMW,YAEhE/L,EAAO26C,MAEhB,KAAKkrB,EAAev7D,KAMlB,OALAyjF,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C2qF,EAAS3/E,KACP4W,EAAApZ,eAAeyoF,eACf3sB,EAAWx7D,OAAQusC,EAASnrC,OAASmrC,EAAS,GAAKivB,GAAYx7D,MAAMW,YAEhE/L,EAAO26C,MAKhB,KAAKkrB,EAAetiE,GAClB,OACEwqF,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,IAE3CA,EAAS7c,YAAcjsD,EAAAuF,KAAKnmB,GACrBvD,EAAOy7C,eAETwxC,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKnmB,GAAE,GAExD,KAAKsiE,EAAeriE,IAClB,OACEuqF,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,IAE3CA,EAAS7c,YAAcjsD,EAAAuF,KAAKlmB,IACrBxD,EAAOy7C,eAETwxC,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKlmB,IAAG,GAEzD,KAAKqiE,EAAepiE,IAClB,OACEsqF,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,IAE3CA,EAAS7c,YAAcjsD,EAAAuF,KAAKjmB,IACrBzD,EAAOy7C,eAETwxC,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKjmB,IAAG,GAEzD,KAAKoiE,EAAeniE,IAClB,OACEqqF,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,IAE3CA,EAAS7c,YAAcjsD,EAAAuF,KAAKhmB,IACrB1D,EAAOy7C,eAETwxC,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKhmB,IAAG,GAEzD,KAAKmiE,EAAeliE,MAClB,IAAIgmB,GAAYsjE,EAASzjE,QAAQG,UACjC,OACEokE,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,IAE3CA,EAAS7c,YAAczmD,GAChB3pB,EAAOy7C,eAETwxC,EAAS7X,kBAAkBz9B,EAAS,GAAIhuB,GAAS,GAE1D,KAAKk8C,EAAejiE,GAClB,OACEmqF,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,IAE3CA,EAAS7c,YAAcjsD,EAAAuF,KAAK9lB,GACrB5D,EAAOy7C,eAETwxC,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAK9lB,GAAE,GAExD,KAAKiiE,EAAehiE,IAClB,OACEkqF,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,IAE3CA,EAAS7c,YAAcjsD,EAAAuF,KAAK7lB,IACrB7D,EAAOy7C,eAETwxC,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAK7lB,IAAG,GAEzD,KAAKgiE,EAAe/hE,IAClB,OACEiqF,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,IAE3CA,EAAS7c,YAAcjsD,EAAAuF,KAAK5lB,IACrB9D,EAAOy7C,eAETwxC,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAK5lB,IAAG,GAEzD,KAAK+hE,EAAe9hE,IAClB,OACEgqF,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,IAE3CA,EAAS7c,YAAcjsD,EAAAuF,KAAK3lB,IACrB/D,EAAOy7C,eAETwxC,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAK3lB,IAAG,GAEzD,KAAK8hE,EAAe7hE,MACd4lB,GAAYqjE,EAASzjE,QAAQI,UACjC,OACEmkE,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,IAE3CA,EAAS7c,YAAcxmD,GAChB5pB,EAAOy7C,eAETwxC,EAAS7X,kBAAkBz9B,EAAS,GAAI/tB,GAAS,GAE1D,KAAKi8C,EAAe5hE,KAClB,OACE8pF,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,IAE3CA,EAAS7c,YAAcjsD,EAAAuF,KAAKzlB,KACrBjE,EAAOy7C,eAETwxC,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKzlB,KAAI,GAE1D,KAAK4hE,EAAe3hE,IAClB,OACE6pF,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,IAE3CA,EAAS7c,YAAcjsD,EAAAuF,KAAKxlB,IACrBlE,EAAOy7C,eAETwxC,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKxlB,IAAG,GAEzD,KAAK2hE,EAAe1hE,IAClB,OACE4pF,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,IAE3CA,EAAS7c,YAAcjsD,EAAAuF,KAAKvlB,IACrBnE,EAAOy7C,eAETwxC,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKvlB,IAAG,GAKzD,KAAK0hE,EAAezhE,KACpB,KAAKyhE,EAAexhE,MAClB,IAAK4oF,EAASzjE,QAAQS,WAAU,GAAgB,MAChD,GACE8jE,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,GAAIivB,EAAYqmB,GAG5C,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEhB,IAAIvE,GAAQ,IAAIhvC,WAAW,IAC3B,IAASxH,GAAI,EAAGA,GAAI,KAAMA,GAAG,CAE3B,GADIiB,GAAQg2C,EAASj3C,IACV,CACL8Q,EAAOy7E,EAAS1qC,qBAAqB5gD,GAAOwiB,EAAAuF,KAAKnmB,GAAE,GACvD,GAAI6uD,EAAApL,gBAAgBx1C,IAAS4gD,EAAAhyB,aAAa0kB,MAMxC,OALAmoC,EAASv/E,MACPwW,EAAApZ,eAAe0oF,2CACf7xF,GAAMyJ,OAER6hF,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEhBhxC,OAAO2nD,EAAAnL,kBAAkBz1C,IAAS4gD,EAAAjyB,WAAW15B,KAC7CyD,EAAAu0B,QAAQ2zB,EAAAlL,iBAAiB11C,GAAO0lC,GAAOx2C,KAI3C,OADAusF,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOoE,KAAK8yC,IAErB,KAAK2uB,EAAethE,MAClB,IAAK0oF,EAASzjE,QAAQS,WAAU,GAAgB,MAChD,GACE8jE,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAG3C,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAGhB,IADIvE,GAAQ,IAAIhvC,WAAW,IAClBxH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQg2C,EAASj3C,IACV,CACL8Q,EAAOy7E,EAAS1qC,qBAAqB5gD,GAAOwiB,EAAAuF,KAAKlmB,IAAG,GACxD,GAAI4uD,EAAApL,gBAAgBx1C,IAAS4gD,EAAAhyB,aAAa0kB,MAMxC,OALAmoC,EAASv/E,MACPwW,EAAApZ,eAAe0oF,2CACf7xF,GAAMyJ,OAER6hF,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEhBhxC,OAAO2nD,EAAAnL,kBAAkBz1C,IAAS4gD,EAAAjyB,WAAW15B,KAC7CyD,EAAAw0B,SAAS0zB,EAAAlL,iBAAiB11C,GAAO0lC,GAAOx2C,IAAK,IAIjD,OADAusF,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOoE,KAAK8yC,IAErB,KAAK2uB,EAAephE,MAClB,IAAKwoF,EAASzjE,QAAQS,WAAU,GAAgB,MAChD,GACE8jE,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAG3C,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAGhB,IADIvE,GAAQ,IAAIhvC,WAAW,IAClBxH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQg2C,EAASj3C,IACV,CACL8Q,EAAOy7E,EAAS1qC,qBAAqB5gD,GAAOwiB,EAAAuF,KAAKjmB,IAAG,GACxD,GAAI2uD,EAAApL,gBAAgBx1C,IAAS4gD,EAAAhyB,aAAa0kB,MAMxC,OALAmoC,EAASv/E,MACPwW,EAAApZ,eAAe0oF,2CACf7xF,GAAMyJ,OAER6hF,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEhBhxC,OAAO2nD,EAAAnL,kBAAkBz1C,IAAS4gD,EAAAjyB,WAAW15B,KAC7CyD,EAAAye,SAASypC,EAAAlL,iBAAiB11C,GAAO0lC,GAAOx2C,IAAK,IAIjD,OADAusF,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOoE,KAAK8yC,IAErB,KAAK2uB,EAAelhE,MAClB,IAAKsoF,EAASzjE,QAAQS,WAAU,GAAgB,MAChD,GACE8jE,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAG3C,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAGhB,IADIvE,GAAQ,IAAIhvC,WAAW,IAClBxH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQg2C,EAASj3C,IACV,CACL8Q,EAAOy7E,EAAS1qC,qBAAqB5gD,GAAOwiB,EAAAuF,KAAKhmB,IAAG,GACxD,GAAI0uD,EAAApL,gBAAgBx1C,IAAS4gD,EAAAhyB,aAAa0kB,MAMxC,OALAmoC,EAASv/E,MACPwW,EAAApZ,eAAe0oF,2CACf7xF,GAAMyJ,OAER6hF,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEhBhxC,OAAO2nD,EAAAnL,kBAAkBz1C,IAAS4gD,EAAAjyB,WAAWz5B,KAC7C,IAAI+sF,GAAM/yF,IAAK,EACfwJ,EAAAye,SAASypC,EAAAjL,oBAAoB31C,GAAO0lC,GAAOu8C,IAC3CvpF,EAAAye,SAASypC,EAAAhL,qBAAqB51C,GAAO0lC,GAAOu8C,GAAM,IAItD,OADAxG,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOoE,KAAK8yC,IAErB,KAAK2uB,EAAehhE,MAClB,IAAKooF,EAASzjE,QAAQS,WAAU,GAAgB,MAChD,GACE8jE,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAG3C,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAGhB,IADIvE,GAAQ,IAAIhvC,WAAW,IAClBxH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQg2C,EAASj3C,IACV,CACL8Q,EAAOy7E,EAAS1qC,qBAAqB5gD,GAAOwiB,EAAAuF,KAAKxlB,IAAG,GACxD,GAAIkuD,EAAApL,gBAAgBx1C,IAAS4gD,EAAAhyB,aAAa0kB,MAMxC,OALAmoC,EAASv/E,MACPwW,EAAApZ,eAAe0oF,2CACf7xF,GAAMyJ,OAER6hF,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEhBhxC,OAAO2nD,EAAAnL,kBAAkBz1C,IAAS4gD,EAAAjyB,WAAWj5B,KAC7CgD,EAAAy0B,SAASyzB,EAAA/K,iBAAiB71C,GAAO0lC,GAAOx2C,IAAK,IAIjD,OADAusF,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOoE,KAAK8yC,IAErB,KAAK2uB,EAAe/gE,MAClB,IAAKmoF,EAASzjE,QAAQS,WAAU,GAAgB,MAChD,GACE8jE,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAG3C,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAGhB,IADIvE,GAAQ,IAAIhvC,WAAW,IAClBxH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAC1B,IAAIiB,GACJ,GADIA,GAAQg2C,EAASj3C,IACV,CACL8Q,EAAOy7E,EAAS1qC,qBAAqB5gD,GAAOwiB,EAAAuF,KAAKvlB,IAAG,GACxD,GAAIiuD,EAAApL,gBAAgBx1C,IAAS4gD,EAAAhyB,aAAa0kB,MAMxC,OALAmoC,EAASv/E,MACPwW,EAAApZ,eAAe0oF,2CACf7xF,GAAMyJ,OAER6hF,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEhBhxC,OAAO2nD,EAAAnL,kBAAkBz1C,IAAS4gD,EAAAjyB,WAAWh5B,KAC7C+C,EAAA00B,SAASwzB,EAAA9K,iBAAiB91C,GAAO0lC,GAAOx2C,IAAK,IAIjD,OADAusF,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOoE,KAAK8yC,IAErB,KAAK2uB,EAAe6tB,WAClB,IAAKzG,EAASzjE,QAAQS,WAAU,GAAgB,MAChD,GACEmkE,EAAkB3+E,EAAem3D,EAAYqmB,GAC7Ce,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAG3C,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAGhB,IADI9rC,EAAOF,EAAe,IACjBiO,GAAE,KAMT,OALAuvE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbvB,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEZnE,OAAE,EACN,OAAQ3nC,EAAKzB,MACX,OACA,OAAqBopC,EAAK8a,EAAA3uB,QAAQkwD,cAAe,MACjD,OACA,OAAqBr8C,EAAK8a,EAAA3uB,QAAQmwD,cAAe,MACjD,OACA,OAAqBt8C,EAAK8a,EAAA3uB,QAAQowD,cAAe,MACjD,OACA,OAAqBv8C,EAAK8a,EAAA3uB,QAAQqwD,cAAe,MACjD,OACA,OACEx8C,EAAK21C,EAASzjE,QAAQY,SAClBgoC,EAAA3uB,QAAQqwD,cACR1hC,EAAA3uB,QAAQowD,cACZ,MAEF,QAAqBv8C,EAAK8a,EAAA3uB,QAAQswD,cAAe,MACjD,QAAqBz8C,EAAK8a,EAAA3uB,QAAQuwD,cAAe,MACjD,QAME,OALA/G,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbvB,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAGdnwC,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAIhoC,EAAI,GAEvD,OADAs9E,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOq3C,MAAMC,EAAIhsC,GAE1B,KAAKu6D,EAAeouB,kBAClB,IAAKhH,EAASzjE,QAAQS,WAAU,GAAgB,MAChD,GACEmkE,EAAkB3+E,EAAem3D,EAAYqmB,GAAU,GACvDe,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAC3C,OAAOjtF,EAAOy7C,cAEhB,IADI9rC,EAAOF,EAAe,IACjBiO,GAAE,KAMT,OALAuvE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbvB,EAAS7c,YAAczgE,EAChB3P,EAAOy7C,cAEZnE,OAAE,EACN,OAAQ3nC,EAAKzB,MACX,OAAqBopC,EAAK8a,EAAAlf,cAAcghD,qBAAsB,MAC9D,OAAqB58C,EAAK8a,EAAAlf,cAAcihD,qBAAsB,MAC9D,OAAqB78C,EAAK8a,EAAAlf,cAAckhD,qBAAsB,MAC9D,OAAqB98C,EAAK8a,EAAAlf,cAAcmhD,qBAAsB,MAC9D,OACA,OAAqB/8C,EAAK8a,EAAAlf,cAAcohD,oBAAqB,MAC7D,OACA,OAAqBh9C,EAAK8a,EAAAlf,cAAcqhD,oBAAqB,MAC7D,OACA,OACEj9C,EAAK21C,EAASzjE,QAAQY,SAClBgoC,EAAAlf,cAAcqhD,oBACdniC,EAAAlf,cAAcohD,oBAClB,MAEF,QAAqBh9C,EAAK8a,EAAAlf,cAAcshD,oBAAqB,MAC7D,QAAqBl9C,EAAK8a,EAAAlf,cAAcuhD,oBAAqB,MAC7D,QAME,OALAxH,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbvB,EAAS7c,YAAczgE,EAChB3P,EAAOy7C,cAGdnwC,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKtlB,KAAI,GACxDmH,EAAO0hF,EAAS1qC,qBAAqB5K,EAAS,GAAIxzB,EAAAuF,KAAK9lB,GAAE,GAE7D,GADAqpF,EAAS7c,YAAczgE,EACnByiD,EAAApL,gBAAgBz7C,IAAS6mD,EAAAhyB,aAAa0kB,MAKxC,OAJAmoC,EAASv/E,MACPwW,EAAApZ,eAAe0oF,2CACf77C,EAAS,GAAGvsC,OAEPpL,EAAOy7C,cAEhBhxC,OAAO2nD,EAAAnL,kBAAkB17C,IAAS6mD,EAAAjyB,WAAW15B,KAC7C,IAAIiuF,GAAU,GAAK/kF,EAAK8iD,SAAY,EAEpC,OADIvW,GAAMkW,EAAAlL,iBAAiB37C,IACjB,GAAK2wC,GAAMw4C,IACnBzH,EAASv/E,MACPwW,EAAApZ,eAAe+mF,6CACfl6C,EAAS,GAAGvsC,MAAO,aAAc,IAAKspF,GAAO3oF,YAExC/L,EAAOy7C,eAETz7C,EAAOg8C,aAAa1E,EAAIhsC,EAAM4wC,IAEvC,KAAK2pB,EAAe8uB,kBAClB,IAAK1H,EAASzjE,QAAQS,WAAU,GAAgB,MAChD,GACEmkE,EAAkB3+E,EAAem3D,EAAYqmB,GAC7Ce,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAG3C,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAGhB,IADI9rC,EAAOF,EAAe,IACjBiO,GAAE,KAMT,OALAuvE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbvB,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEZnE,OAAE,EACN,OAAQ3nC,EAAKzB,MACX,OACA,OAAqBopC,EAAK8a,EAAAze,cAAcihD,oBAAqB,MAC7D,OACA,OAAqBt9C,EAAK8a,EAAAze,cAAckhD,oBAAqB,MAC7D,OACA,OAAqBv9C,EAAK8a,EAAAze,cAAcmhD,oBAAqB,MAC7D,OACA,OAAqBx9C,EAAK8a,EAAAze,cAAcohD,oBAAqB,MAC7D,OACA,OACEz9C,EAAK21C,EAASzjE,QAAQY,SAClBgoC,EAAAze,cAAcohD,oBACd3iC,EAAAze,cAAcmhD,oBAClB,MAEF,QAAqBx9C,EAAK8a,EAAAze,cAAcqhD,oBAAqB,MAC7D,QAAqB19C,EAAK8a,EAAAze,cAAcshD,oBAAqB,MAC7D,QAME,OALAhI,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbvB,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAGdnwC,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKtlB,KAAI,GACxDmH,EAAO0hF,EAAS1qC,qBAAqB5K,EAAS,GAAIxzB,EAAAuF,KAAK9lB,GAAE,GAC7D,GAAIwuD,EAAApL,gBAAgBz7C,IAAS6mD,EAAAhyB,aAAa0kB,MAMxC,OALAmoC,EAASv/E,MACPwW,EAAApZ,eAAe0oF,2CACf77C,EAAS,GAAGvsC,OAEd6hF,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEhBhxC,OAAO2nD,EAAAnL,kBAAkB17C,IAAS6mD,EAAAjyB,WAAW15B,KACzCiuF,GAAU,GAAK/kF,EAAK8iD,SAAY,EAEpC,IADIvW,GAAMkW,EAAAlL,iBAAiB37C,IACjB,GAAK2wC,GAAMw4C,GAKnB,OAJAzH,EAASv/E,MACPwW,EAAApZ,eAAe+mF,6CACfl6C,EAAS,GAAGvsC,MAAO,aAAc,IAAKspF,GAAO3oF,YAExC/L,EAAOy7C,cAEZjwC,GAAOyhF,EAAS7X,kBAAkBz9B,EAAS,GAAIhoC,EAAI,GAEvD,OADAs9E,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOo8C,aAAa9E,EAAIhsC,EAAM4wC,GAAK1wC,IAE5C,KAAKq6D,EAAeqvB,aAClB,IAAKjI,EAASzjE,QAAQS,WAAU,GAAgB,MAChD,GACEmkE,EAAkB3+E,EAAem3D,EAAYqmB,GAG7C,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAGhB,IADI9rC,EAAOF,EAAe,IACjBiO,GAAE,KAMT,OALAuvE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbvB,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEhB,IAAI05C,GAAYxlF,EAAK8iD,SACjB2iC,GAAY,GAAKD,GAErB,GADA1qF,OAAO2iF,UAAUgI,KAAclrF,EAAAJ,WAAWsrF,KAExCpH,EAAkBr2C,EAAU,EAAIy9C,GAAWxuB,EAAYqmB,GAGvD,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEhB,OAAQ9rC,EAAKzB,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACA,QAAmB,MACnB,QAME,OALA++E,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbvB,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAGdnwC,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKtlB,KAAI,GACxDmH,EAAO0hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKtlB,KAAI,GAD5D,IAEIq4C,GAAO,IAAIv0C,WAAW,IAE1B,IADIwsF,IAAUU,IAAa,GAAK,EACvB10F,GAAI,EAAGA,GAAI00F,KAAa10F,GAAG,CAClC,IAWIw7C,GAXA/lC,GAAUwhC,EAAS,EAAIj3C,IACvB20F,GAAOpI,EAAS1qC,qBAAqBpsC,GAASgO,EAAAuF,KAAK9lB,GAAE,GACzD,GAAIwuD,EAAApL,gBAAgBquC,KAASjjC,EAAAhyB,aAAa0kB,MAMxC,OALAmoC,EAASv/E,MACPwW,EAAApZ,eAAe0oF,2CACfr9E,GAAQ/K,OAEV6hF,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAIhB,GAFAhxC,OAAO2nD,EAAAnL,kBAAkBouC,KAASjjC,EAAAjyB,WAAW15B,MACzCy1C,GAAMkW,EAAAlL,iBAAiBmuC,KACjB,GAAKn5C,GAAMw4C,GAMnB,OALAzH,EAASv/E,MACPwW,EAAApZ,eAAe+mF,6CACf17E,GAAQ/K,MAAO,aAAc,IAAKspF,GAAO3oF,YAE3CkhF,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEhB,OAAQ05C,IACN,KAAK,EACHjrF,EAAAu0B,QAAQyd,GAAKO,GAAM/7C,IACnB,MAEF,KAAK,EACH,IAAI40F,GAAO50F,IAAK,EACZ60F,GAAOr5C,IAAO,EAClBhyC,EAAAu0B,QAAQ82D,GAAU94C,GAAM64C,IACxBprF,EAAAu0B,QAAQ82D,GAAO,EAAG94C,GAAM64C,GAAO,GAC/B,MAEF,KAAK,EACCA,GAAO50F,IAAK,EACZ60F,GAAOr5C,IAAO,EAClBhyC,EAAAu0B,QAAQ82D,GAAU94C,GAAM64C,IACxBprF,EAAAu0B,QAAQ82D,GAAO,EAAG94C,GAAM64C,GAAO,GAC/BprF,EAAAu0B,QAAQ82D,GAAO,EAAG94C,GAAM64C,GAAO,GAC/BprF,EAAAu0B,QAAQ82D,GAAO,EAAG94C,GAAM64C,GAAO,GAC/B,MAEF,KAAK,EACCA,GAAO50F,IAAK,EACZ60F,GAAOr5C,IAAO,EAClBhyC,EAAAu0B,QAAQ82D,GAAU94C,GAAM64C,IACxBprF,EAAAu0B,QAAQ82D,GAAO,EAAG94C,GAAM64C,GAAO,GAC/BprF,EAAAu0B,QAAQ82D,GAAO,EAAG94C,GAAM64C,GAAO,GAC/BprF,EAAAu0B,QAAQ82D,GAAO,EAAG94C,GAAM64C,GAAO,GAC/BprF,EAAAu0B,QAAQ82D,GAAO,EAAG94C,GAAM64C,GAAO,GAC/BprF,EAAAu0B,QAAQ82D,GAAO,EAAG94C,GAAM64C,GAAO,GAC/BprF,EAAAu0B,QAAQ82D,GAAO,EAAG94C,GAAM64C,GAAO,GAC/BprF,EAAAu0B,QAAQ82D,GAAO,EAAG94C,GAAM64C,GAAO,GAC/B,MAEF,QAAS7qF,QAAO,IAIpB,OADAwiF,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOs8C,aAAahxC,EAAMC,EAAMkxC,IAEzC,KAAKopB,EAAe2vB,SACpB,KAAK3vB,EAAe4vB,SACpB,KAAK5vB,EAAe6vB,SACpB,KAAK7vB,EAAe8vB,SACpB,KAAK9vB,EAAe+vB,kBACpB,KAAK/vB,EAAegwB,kBACpB,KAAKhwB,EAAeiwB,SACpB,KAAKjwB,EAAekwB,SACpB,KAAKlwB,EAAemwB,QACpB,KAAKnwB,EAAeowB,QACpB,KAAKpwB,EAAeqwB,QACpB,KAAKrwB,EAAeswB,QACpB,KAAKtwB,EAAeuwB,QACpB,KAAKvwB,EAAewwB,QAClB,IAAKpJ,EAASzjE,QAAQS,WAAU,GAAgB,MAChD,GACEmkE,EAAkB3+E,EAAem3D,EAAYqmB,GAC7Ce,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAG3C,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAGhB,IADI9rC,EAAOF,EAAe,IACjBiO,GAAE,KAMT,OALAuvE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbvB,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEZnE,GAAgB,EACpB,OAAQh1C,EAAU6lB,cAChB,KAAK09C,EAAe2vB,SAClB,OAAQ7lF,EAAKzB,MACX,OACA,OAAqBopC,EAAK8a,EAAArpB,SAASutD,YAAa,MAChD,OACA,OAAqBh/C,EAAK8a,EAAArpB,SAASwtD,YAAa,MAChD,OACA,OAAqBj/C,EAAK8a,EAAArpB,SAASytD,YAAa,MAChD,OACA,OAAqBl/C,EAAK8a,EAAArpB,SAAS0tD,YAAa,MAChD,OACA,OACEn/C,EAAK21C,EAASzjE,QAAQY,SAClBgoC,EAAArpB,SAAS0tD,YACTrkC,EAAArpB,SAASytD,YACb,MAEF,QAAqBl/C,EAAK8a,EAAArpB,SAAS2tD,YAAa,MAChD,QAAqBp/C,EAAK8a,EAAArpB,SAAS4tD,YAErC,MAEF,KAAK9wB,EAAe4vB,SAClB,OAAQ9lF,EAAKzB,MACX,OACA,OAAqBopC,EAAK8a,EAAArpB,SAAS6tD,YAAa,MAChD,OACA,OAAqBt/C,EAAK8a,EAAArpB,SAAS8tD,YAAa,MAChD,OACA,OAAqBv/C,EAAK8a,EAAArpB,SAAS+tD,YAAa,MAChD,OACA,OAAqBx/C,EAAK8a,EAAArpB,SAASguD,YAAa,MAChD,OACA,OACEz/C,EAAK21C,EAASzjE,QAAQY,SAClBgoC,EAAArpB,SAASguD,YACT3kC,EAAArpB,SAAS+tD,YACb,MAEF,QAAqBx/C,EAAK8a,EAAArpB,SAASiuD,YAAa,MAChD,QAAqB1/C,EAAK8a,EAAArpB,SAASkuD,YAErC,MAEF,KAAKpxB,EAAe6vB,SAClB,OAAQ/lF,EAAKzB,MACX,OACA,OAAqBopC,EAAK8a,EAAArpB,SAASmuD,YAAa,MAChD,OACA,OAAqB5/C,EAAK8a,EAAArpB,SAASouD,YAAa,MAChD,OACA,OAAqB7/C,EAAK8a,EAAArpB,SAASquD,YAAa,MAChD,QAAqB9/C,EAAK8a,EAAArpB,SAASsuD,YAAa,MAChD,QAAqB//C,EAAK8a,EAAArpB,SAASuuD,YAAa,MAChD,OACA,OACOrK,EAASzjE,QAAQY,WAAUktB,EAAK8a,EAAArpB,SAASquD,aAIlD,MAEF,KAAKvxB,EAAe8vB,SAClB,OAAQhmF,EAAKzB,MACX,QAAqBopC,EAAK8a,EAAArpB,SAASwuD,YAAa,MAChD,QAAqBjgD,EAAK8a,EAAArpB,SAASyuD,YAErC,MAEF,KAAK3xB,EAAe+vB,kBAClB,OAAQjmF,EAAKzB,MACX,OAAqBopC,EAAK8a,EAAArpB,SAAS0uD,gBAAiB,MACpD,OAAqBngD,EAAK8a,EAAArpB,SAAS2uD,gBAAiB,MACpD,OAAqBpgD,EAAK8a,EAAArpB,SAAS4uD,gBAAiB,MACpD,OAAqBrgD,EAAK8a,EAAArpB,SAAS6uD,gBAErC,MAEF,KAAK/xB,EAAegwB,kBAClB,OAAQlmF,EAAKzB,MACX,OAAqBopC,EAAK8a,EAAArpB,SAAS8uD,gBAAiB,MACpD,OAAqBvgD,EAAK8a,EAAArpB,SAAS+uD,gBAAiB,MACpD,OAAqBxgD,EAAK8a,EAAArpB,SAASgvD,gBAAiB,MACpD,OAAqBzgD,EAAK8a,EAAArpB,SAASivD,gBAErC,MAEF,KAAKnyB,EAAeiwB,SAClB,OAAQnmF,EAAKzB,MACX,QAAqBopC,EAAK8a,EAAArpB,SAASkvD,YAAa,MAChD,QAAqB3gD,EAAK8a,EAAArpB,SAASmvD,YAErC,MAEF,KAAKryB,EAAekwB,SAClB,OAAQpmF,EAAKzB,MACX,QAAqBopC,EAAK8a,EAAArpB,SAASovD,YAAa,MAChD,QAAqB7gD,EAAK8a,EAAArpB,SAASqvD,YAErC,MAEF,KAAKvyB,EAAemwB,QAClB,OAAQrmF,EAAKzB,MACX,OACA,OAAqBopC,EAAK8a,EAAArpB,SAAS43C,WAAY,MAC/C,OACA,OAAqBrpC,EAAK8a,EAAArpB,SAASsvD,WAAY,MAC/C,OACA,OAAqB/gD,EAAK8a,EAAArpB,SAASuvD,WAAY,MAC/C,QAAqBhhD,EAAK8a,EAAArpB,SAASwvD,WAAY,MAC/C,QAAqBjhD,EAAK8a,EAAArpB,SAASyvD,WAAY,MAC/C,OACA,OACOvL,EAASzjE,QAAQY,WAAUktB,EAAK8a,EAAArpB,SAASuvD,YAIlD,MAEF,KAAKzyB,EAAeowB,QAClB,OAAQtmF,EAAKzB,MACX,OACA,OAAqBopC,EAAK8a,EAAArpB,SAAS83C,WAAY,MAC/C,OACA,OAAqBvpC,EAAK8a,EAAArpB,SAAS0vD,WAAY,MAC/C,OACA,OAAqBnhD,EAAK8a,EAAArpB,SAAS2vD,WAAY,MAC/C,QAAqBphD,EAAK8a,EAAArpB,SAAS4vD,WAAY,MAC/C,QAAqBrhD,EAAK8a,EAAArpB,SAAS6vD,WAAY,MAC/C,OACA,OACO3L,EAASzjE,QAAQY,WAAUktB,EAAK8a,EAAArpB,SAAS2vD,YAIlD,MAEF,KAAK7yB,EAAeqwB,QAClB,OAAQvmF,EAAKzB,MACX,OAAqBopC,EAAK8a,EAAArpB,SAAS8vD,YAAa,MAChD,OAAqBvhD,EAAK8a,EAAArpB,SAAS+vD,YAAa,MAChD,OAAqBxhD,EAAK8a,EAAArpB,SAASgwD,YAAa,MAChD,OAAqBzhD,EAAK8a,EAAArpB,SAASiwD,YAAa,MAChD,OAAqB1hD,EAAK8a,EAAArpB,SAASkwD,YAAa,MAChD,OAAqB3hD,EAAK8a,EAAArpB,SAASmwD,YAAa,MAChD,QAAqB5hD,EAAK8a,EAAArpB,SAASowD,WAAY,MAC/C,QAAqB7hD,EAAK8a,EAAArpB,SAASqwD,WAAY,MAC/C,OACA,OACOnM,EAASzjE,QAAQY,WACpBktB,EAAc,GAAT3nC,EAAKzB,KACNkkD,EAAArpB,SAASkwD,YACT7mC,EAAArpB,SAASmwD,aAKnB,MAEF,KAAKrzB,EAAeswB,QAClB,OAAQxmF,EAAKzB,MACX,OAAqBopC,EAAK8a,EAAArpB,SAASswD,YAAa,MAChD,OAAqB/hD,EAAK8a,EAAArpB,SAASuwD,YAAa,MAChD,OAAqBhiD,EAAK8a,EAAArpB,SAASwwD,YAAa,MAChD,OAAqBjiD,EAAK8a,EAAArpB,SAASywD,YAAa,MAChD,OAAqBliD,EAAK8a,EAAArpB,SAAS0wD,YAAa,MAChD,OAAqBniD,EAAK8a,EAAArpB,SAAS2wD,YAAa,MAChD,QAAqBpiD,EAAK8a,EAAArpB,SAAS4wD,WAAY,MAC/C,QAAqBriD,EAAK8a,EAAArpB,SAAS6wD,WAAY,MAC/C,OACA,OACO3M,EAASzjE,QAAQY,WACpBktB,EAAc,GAAT3nC,EAAKzB,KACNkkD,EAAArpB,SAAS0wD,YACTrnC,EAAArpB,SAAS2wD,aAKnB,MAEF,KAAK7zB,EAAeuwB,QAClB,OAAQzmF,EAAKzB,MACX,OAAqBopC,EAAK8a,EAAArpB,SAAS8wD,YAAa,MAChD,OAAqBviD,EAAK8a,EAAArpB,SAAS+wD,YAAa,MAChD,OAAqBxiD,EAAK8a,EAAArpB,SAASgxD,YAAa,MAChD,OAAqBziD,EAAK8a,EAAArpB,SAASixD,YAAa,MAChD,OAAqB1iD,EAAK8a,EAAArpB,SAASkxD,YAAa,MAChD,OAAqB3iD,EAAK8a,EAAArpB,SAASmxD,YAAa,MAChD,QAAqB5iD,EAAK8a,EAAArpB,SAASoxD,WAAY,MAC/C,QAAqB7iD,EAAK8a,EAAArpB,SAASqxD,WAAY,MAC/C,OACA,OACOnN,EAASzjE,QAAQY,WACpBktB,EAAc,GAAT3nC,EAAKzB,KACNkkD,EAAArpB,SAASkxD,YACT7nC,EAAArpB,SAASmxD,aAKnB,MAEF,KAAKr0B,EAAewwB,QAClB,OAAQ1mF,EAAKzB,MACX,OAAqBopC,EAAK8a,EAAArpB,SAASsxD,YAAa,MAChD,OAAqB/iD,EAAK8a,EAAArpB,SAASuxD,YAAa,MAChD,OAAqBhjD,EAAK8a,EAAArpB,SAASwxD,YAAa,MAChD,OAAqBjjD,EAAK8a,EAAArpB,SAASyxD,YAAa,MAChD,OAAqBljD,EAAK8a,EAAArpB,SAAS0xD,YAAa,MAChD,OAAqBnjD,EAAK8a,EAAArpB,SAAS2xD,YAAa,MAChD,QAAqBpjD,EAAK8a,EAAArpB,SAAS4xD,WAAY,MAC/C,QAAqBrjD,EAAK8a,EAAArpB,SAAS6xD,WAAY,MAC/C,OACA,OACO3N,EAASzjE,QAAQY,WACpBktB,EAAc,GAAT3nC,EAAKzB,KACNkkD,EAAArpB,SAAS0xD,YACTroC,EAAArpB,SAAS2xD,cAQvB,IAAW,GAAPpjD,EAMF,OALA21C,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbvB,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEZnwC,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKtlB,KAAI,GACxDmH,EAAO0hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKtlB,KAAI,GAE5D,OADA6oF,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOw3C,OAAOF,EAAIhsC,EAAMC,GAEjC,KAAKs6D,EAAeg1B,SACpB,KAAKh1B,EAAei1B,SACpB,KAAKj1B,EAAek1B,UACpB,KAAKl1B,EAAem1B,aACpB,KAAKn1B,EAAeo1B,WAClB,IAAKhO,EAASzjE,QAAQS,WAAU,GAAgB,MAChD,GACEmkE,EAAkB3+E,EAAem3D,EAAYqmB,GAC7Ce,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAG3C,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAGhB,IADI9rC,EAAOF,EAAe,IACjBiO,GAAE,KAMT,OALAuvE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAWx7D,OAEb6hF,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEZnE,GAAe,EACnB,OAAQh1C,EAAU6lB,cAChB,KAAK09C,EAAeg1B,SAClB,OAAQlrF,EAAKzB,MACX,OACA,OAAqBopC,EAAK8a,EAAA3uB,QAAQy3D,YAAa,MAC/C,OACA,OAAqB5jD,EAAK8a,EAAA3uB,QAAQ03D,YAAa,MAC/C,OACA,OAAqB7jD,EAAK8a,EAAA3uB,QAAQ23D,YAAa,MAC/C,OACA,OAAqB9jD,EAAK8a,EAAA3uB,QAAQ43D,YAAa,MAC/C,OACA,OACE/jD,EAAK21C,EAASzjE,QAAQY,SAClBgoC,EAAA3uB,QAAQ43D,YACRjpC,EAAA3uB,QAAQ23D,YACZ,MAEF,QAAqB9jD,EAAK8a,EAAA3uB,QAAQ63D,YAAa,MAC/C,QAAqBhkD,EAAK8a,EAAA3uB,QAAQ83D,YAEpC,MAEF,KAAK11B,EAAei1B,SAClB,OAAQnrF,EAAKzB,MACX,QAAqBopC,EAAK8a,EAAA3uB,QAAQ+3D,YAAa,MAC/C,QAAqBlkD,EAAK8a,EAAA3uB,QAAQg4D,YAEpC,MAEF,KAAK51B,EAAek1B,UAClB,OAAQprF,EAAKzB,MACX,QAAqBopC,EAAK8a,EAAA3uB,QAAQi4D,aAAc,MAChD,QAAqBpkD,EAAK8a,EAAA3uB,QAAQk4D,aAEpC,MAEF,KAAK91B,EAAem1B,aAClB,OAAQrrF,EAAKzB,MACX,OAAqBopC,EAAK8a,EAAA3uB,QAAQm4D,2BAA4B,MAC9D,OAAqBtkD,EAAK8a,EAAA3uB,QAAQo4D,2BAA4B,MAC9D,OAAqBvkD,EAAK8a,EAAA3uB,QAAQq4D,2BAA4B,MAC9D,OAAqBxkD,EAAK8a,EAAA3uB,QAAQs4D,2BAEpC,MAEF,KAAKl2B,EAAeo1B,WAClB,OAAQtrF,EAAKzB,MACX,OAAqBopC,EAAK8a,EAAA3uB,QAAQu4D,4BAA6B,MAC/D,OAAqB1kD,EAAK8a,EAAA3uB,QAAQw4D,4BAA6B,MAC/D,OAAqB3kD,EAAK8a,EAAA3uB,QAAQy4D,4BAA6B,MAC/D,OAAqB5kD,EAAK8a,EAAA3uB,QAAQ04D,6BAKxC,IAAW,GAAP7kD,EAMF,OALA21C,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbvB,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEZnwC,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKtlB,KAAI,GAE5D,OADA6oF,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOq3C,MAAMC,EAAIhsC,GAE1B,KAAKu6D,EAAeu2B,SACpB,KAAKv2B,EAAew2B,SAClB,IAAKpP,EAASzjE,QAAQS,WAAU,GAAgB,MAChD,GACEmkE,EAAkB3+E,EAAem3D,EAAYqmB,GAC7Ce,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAG3C,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAGhB,IADI9rC,EAAOF,EAAe,IACjBiO,GAAE,KAMT,OALAuvE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbvB,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEZnE,GAAmB,EACvB,OAAQh1C,EAAU6lB,cAChB,KAAK09C,EAAeu2B,SAClB,OAAQzsF,EAAKzB,MACX,OACA,OAAqBopC,EAAK8a,EAAAle,YAAYooD,YAAa,MACnD,OACA,OAAqBhlD,EAAK8a,EAAAle,YAAYqoD,YAAa,MACnD,OACA,OAAqBjlD,EAAK8a,EAAAle,YAAYsoD,YAAa,MACnD,OACA,OAAqBllD,EAAK8a,EAAAle,YAAYuoD,YAAa,MACnD,OACA,OACEnlD,EAAK21C,EAASzjE,QAAQY,SAClBgoC,EAAAle,YAAYuoD,YACZrqC,EAAAle,YAAYsoD,YAIpB,MAEF,KAAK32B,EAAew2B,SAClB,OAAQ1sF,EAAKzB,MACX,OAAqBopC,EAAK8a,EAAAle,YAAYwoD,aAAc,MACpD,OAAqBplD,EAAK8a,EAAAle,YAAYyoD,aAAc,MACpD,OAAqBrlD,EAAK8a,EAAAle,YAAY0oD,aAAc,MACpD,OAAqBtlD,EAAK8a,EAAAle,YAAY2oD,aAAc,MACpD,OAAqBvlD,EAAK8a,EAAAle,YAAY4oD,aAAc,MACpD,OAAqBxlD,EAAK8a,EAAAle,YAAY6oD,aAAc,MACpD,OAAqBzlD,EAAK8a,EAAAle,YAAY8oD,aAAc,MACpD,OAAqB1lD,EAAK8a,EAAAle,YAAY+oD,aAAc,MACpD,OACE3lD,EAAK21C,EAASzjE,QAAQY,SAClBgoC,EAAAle,YAAY8oD,aACZ5qC,EAAAle,YAAY4oD,aAChB,MAEF,OACExlD,EAAK21C,EAASzjE,QAAQY,SAClBgoC,EAAAle,YAAY+oD,aACZ7qC,EAAAle,YAAY6oD,cAOxB,IAAW,GAAPzlD,EAMF,OALA21C,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAWx7D,OAEb6hF,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEZnwC,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKtlB,KAAI,GACxDmH,EAAO0hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKjmB,IAAG,GAE3D,OADAwpF,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAO88C,WAAWxF,EAAIhsC,EAAMC,GAErC,KAAKs6D,EAAeq3B,SACpB,KAAKr3B,EAAes3B,QACpB,KAAKt3B,EAAeu3B,SAClB,IAAKnQ,EAASzjE,QAAQS,WAAU,GAAgB,MAChD,GACE8jE,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAG3C,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEZnE,GAAgB,EACpB,OAAQh1C,EAAU6lB,cAChB,QAAS1d,QAAO,GAChB,KAAKo7D,EAAeq3B,SAAY5lD,EAAK8a,EAAArpB,SAASs0D,UAAW,MACzD,KAAKx3B,EAAes3B,QAAY7lD,EAAK8a,EAAArpB,SAASu0D,SAAU,MACxD,KAAKz3B,EAAeu3B,SAAY9lD,EAAK8a,EAAArpB,SAASw0D,UAE5CjyF,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKtlB,KAAI,GACxDmH,EAAO0hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKtlB,KAAI,GAC5D,OAAOpE,EAAOw3C,OAAOF,EAAIhsC,EAAMC,GAEjC,KAAKs6D,EAAe23B,SAClB,IAAKvQ,EAASzjE,QAAQS,WAAU,GAAgB,MAChD,GACE8jE,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAG3C,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEZnwC,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKtlB,KAAI,GAC5D,OAAOpE,EAAOq3C,MAAM+a,EAAA3uB,QAAQg6D,UAAWnyF,GAEzC,KAAKu6D,EAAe63B,eAClB,IAAKzQ,EAASzjE,QAAQS,WAAU,GAAgB,MAChD,GACE8jE,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAG3C,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKtlB,KACrBpE,EAAOy7C,cAEZnwC,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKtlB,KAAI,GACxDmH,EAAO0hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKtlB,KAAI,GACxDoH,GAAOyhF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKtlB,KAAI,GAC5D,OAAOpE,EAAO28C,eAAerxC,EAAMC,EAAMC,IAE3C,KAAKq6D,EAAe83B,cACpB,KAAK93B,EAAe+3B,cAClB,IAAK3Q,EAASzjE,QAAQS,WAAU,GAAgB,MAChD,GACEmkE,EAAkB3+E,EAAem3D,EAAYqmB,GAC7Ce,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAG3C,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKzlB,KACrBjE,EAAOy7C,cAGhB,IADI9rC,EAAOF,EAAe,IACjBiO,GAAE,KAKT,OAJAuvE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAENxuF,EAAOy7C,cAEZnE,GAAe,EACnB,OAAQh1C,EAAU6lB,cAChB,QAAS1d,QAAO,GAChB,KAAKo7D,EAAe83B,cAClB,OAAQhuF,EAAKzB,MACX,OACA,OAAqBopC,EAAK8a,EAAA3uB,QAAQm9C,gBAAiB,MACnD,OACA,OAAqBtpC,EAAK8a,EAAA3uB,QAAQo6D,gBAAiB,MACnD,OACA,OAAqBvmD,EAAK8a,EAAA3uB,QAAQq6D,gBAAiB,MACnD,OACA,OAAqBxmD,EAAK8a,EAAA3uB,QAAQs6D,gBAAiB,MACnD,OACA,OACEzmD,EAAK21C,EAASzjE,QAAQY,SAClBgoC,EAAA3uB,QAAQs6D,gBACR3rC,EAAA3uB,QAAQq6D,gBAIhB,MAEF,KAAKj4B,EAAe+3B,cAClB,OAAQjuF,EAAKzB,MACX,OACA,OAAqBopC,EAAK8a,EAAA3uB,QAAQi9C,gBAAiB,MACnD,OACA,OAAqBppC,EAAK8a,EAAA3uB,QAAQu6D,gBAAiB,MACnD,OACA,OAAqB1mD,EAAK8a,EAAA3uB,QAAQw6D,gBAAiB,MACnD,OACA,OAAqB3mD,EAAK8a,EAAA3uB,QAAQy6D,gBAAiB,MACnD,OACA,OACE5mD,EAAK21C,EAASzjE,QAAQY,SAClBgoC,EAAA3uB,QAAQy6D,gBACR9rC,EAAA3uB,QAAQw6D,iBAOpB,IAAW,GAAP3mD,EAMF,OALA21C,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAW4nB,oBAEbvB,EAAS7c,YAAcjsD,EAAAuF,KAAKzlB,KACrBjE,EAAOy7C,cAEZnwC,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKtlB,KAAI,GAE5D,OADA6oF,EAAS7c,YAAcjsD,EAAAuF,KAAKzlB,KACrBjE,EAAOq3C,MAAMC,EAAIhsC,GAK1B,KAAKu6D,EAAes4B,KAClB,IAQI7+D,GARA3vB,EAAO09E,EAAqBJ,EAAUx9E,EAAekoC,EAAUivB,GAEnE,OADAqmB,EAAS7c,YAAcjsD,EAAAuF,KAAK5lB,KACvB6L,GAAQ4+E,EAAkB52C,EAAU,EAAG,EAAGivB,EAAYqmB,GAAkBjtF,EAAOy7C,cAEhF9rC,EAAK+N,GAAE,MAAqD,OAA5B/N,EAAKgjD,mBAChC3yD,EAAOyD,IAAIkM,EAAKgjD,mBAAmB/pC,MAGxC0W,GAAiB3vB,EAAK2vB,iBACHA,GAAetQ,aAAamjC,EAAAjrC,eAAe5I,YAChE2uE,EAASv/E,MACPwW,EAAApZ,eAAegpB,wBACf8yC,EAAWx7D,OAENpL,EAAOy7C,eAETz7C,EAAOyD,IAAI67B,GAAe1W,IAEnC,KAAKi9C,EAAeu4B,cAClB,GACErQ,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAG3C,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACrB7pB,EAAOy7C,cAEZnwC,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAK5lB,IAAG,GAG3D,OAFAmpF,EAASvc,iBAAe,EACxBuc,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACrB7pB,EAAOa,KAAKglE,EAAeu4B,cAAe,CAAE9yF,GAAQ8mD,EAAAjyB,WAAWsY,MAExE,KAAKotB,EAAew4B,cAClB,GACEtQ,EAAgBt+E,EAAem3D,EAAYtkE,GAC3C0rF,EAAkBr2C,EAAU,EAAGivB,EAAYqmB,GAG3C,OADAA,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACrB7pB,EAAOy7C,cAEZnwC,EAAO2hF,EAAS7X,kBAAkBz9B,EAAS,GAAIs1C,EAASzjE,QAAQI,UAAS,GACzEre,EAAO0hF,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAK5lB,IAAG,GAG3D,OAFAmpF,EAASvc,iBAAe,EACxBuc,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACrB7pB,EAAOa,KAAKglE,EAAew4B,cAAe,CAAE/yF,EAAMC,GAAQ6mD,EAAAjyB,WAAWsY,MAO9E,OADIjnC,EAmBR,SACEy7E,EACA3qF,EACAq1C,EACAivB,GAGA,OAAQtkE,EAAU6lB,cAOhB,KAAK09C,EAAey4B,QAAS,OAAOC,EAAS14B,EAAe3S,IAAK+5B,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GACzG,KAAKf,EAAe24B,QAAS,OAAOD,EAAS14B,EAAe3S,IAAK+5B,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GACzG,KAAKf,EAAe44B,QAAS,OAAOF,EAAS14B,EAAeyoB,IAAKrB,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GACzG,KAAKf,EAAe64B,QAAS,OAAOH,EAAS14B,EAAeyoB,IAAKrB,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GACzG,KAAKf,EAAe84B,WAAY,OAAOJ,EAAS14B,EAAe6oB,OAAQzB,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC/G,KAAKf,EAAe+4B,WAAY,OAAOL,EAAS14B,EAAe6oB,OAAQzB,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC/G,KAAKf,EAAeg5B,SAAU,OAAON,EAAS14B,EAAekpB,KAAM9B,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC3G,KAAKf,EAAei5B,SAAU,OAAOP,EAAS14B,EAAekpB,KAAM9B,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC3G,KAAKf,EAAek5B,SAAU,OAAOR,EAAS14B,EAAeqpB,KAAMjC,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC3G,KAAKf,EAAem5B,SAAU,OAAOT,EAAS14B,EAAeqpB,KAAMjC,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC3G,KAAKf,EAAeo5B,QAAS,OAAOV,EAAS14B,EAAewpB,IAAKpC,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKxlB,IAAK0iE,GACzG,KAAKf,EAAeq5B,QAAS,OAAOX,EAAS14B,EAAewpB,IAAKpC,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKvlB,IAAKyiE,GACzG,KAAKf,EAAes5B,QAAS,OAAOZ,EAAS14B,EAAe2F,IAAKyhB,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKxlB,IAAK0iE,GACzG,KAAKf,EAAeu5B,QAAS,OAAOb,EAAS14B,EAAe2F,IAAKyhB,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKvlB,IAAKyiE,GACzG,KAAKf,EAAew5B,QAAS,OAAOd,EAAS14B,EAAekqB,IAAK9C,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKxlB,IAAK0iE,GACzG,KAAKf,EAAey5B,QAAS,OAAOf,EAAS14B,EAAekqB,IAAK9C,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKvlB,IAAKyiE,GACzG,KAAKf,EAAe05B,SAAU,OAAOhB,EAAS14B,EAAenT,KAAMu6B,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKxlB,IAAK0iE,GAC3G,KAAKf,EAAe25B,SAAU,OAAOjB,EAAS14B,EAAenT,KAAMu6B,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKvlB,IAAKyiE,GAC3G,KAAKf,EAAe45B,UAAW,OAAOlB,EAAS14B,EAAeqqB,MAAOjD,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKxlB,IAAK0iE,GAC7G,KAAKf,EAAe65B,UAAW,OAAOnB,EAAS14B,EAAeqqB,MAAOjD,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKvlB,IAAKyiE,GAC7G,KAAKf,EAAe85B,aAAc,OAAOpB,EAAS14B,EAAe0qB,SAAUtD,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKxlB,IAAK0iE,GACnH,KAAKf,EAAe+5B,aAAc,OAAOrB,EAAS14B,EAAe0qB,SAAUtD,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKvlB,IAAKyiE,GACnH,KAAKf,EAAeg6B,YAAa,OAAOtB,EAAS14B,EAAe6qB,QAASzD,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKxlB,IAAK0iE,GACjH,KAAKf,EAAei6B,YAAa,OAAOvB,EAAS14B,EAAe6qB,QAASzD,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKvlB,IAAKyiE,GACjH,KAAKf,EAAek6B,oBAAqB,OAAOxB,EAAS14B,EAAegrB,YAAa5D,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKxlB,IAAK0iE,GAC7H,KAAKf,EAAem6B,oBAAqB,OAAOzB,EAAS14B,EAAegrB,YAAa5D,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKvlB,IAAKyiE,GAC7H,KAAKf,EAAeo6B,oBAAqB,OAAO1B,EAAS14B,EAAegrB,YAAa5D,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC7H,KAAKf,EAAeq6B,oBAAqB,OAAO3B,EAAS14B,EAAegrB,YAAa5D,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC7H,KAAKf,EAAes6B,SAAU,OAAO5B,EAAS14B,EAAeqrB,KAAMjE,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKxlB,IAAK0iE,GAC3G,KAAKf,EAAeu6B,SAAU,OAAO7B,EAAS14B,EAAeqrB,KAAMjE,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKvlB,IAAKyiE,GAC3G,KAAKf,EAAew6B,UAAW,OAAO9B,EAAS14B,EAAewrB,MAAOpE,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKxlB,IAAK0iE,GAC7G,KAAKf,EAAey6B,UAAW,OAAO/B,EAAS14B,EAAewrB,MAAOpE,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKvlB,IAAKyiE,GAC7G,KAAKf,EAAe06B,YAAa,OAAOhC,EAAS14B,EAAeztB,KAAM60C,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC7G,KAAKf,EAAe26B,YAAa,OAAOjC,EAAS14B,EAAeztB,KAAM60C,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC7G,KAAKf,EAAe46B,aAAc,OAAOlC,EAAS14B,EAAeztB,KAAM60C,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC/G,KAAKf,EAAe66B,aAAc,OAAOnC,EAAS14B,EAAeztB,KAAM60C,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC/G,KAAKf,EAAe86B,SAAU,OAAOpC,EAAS14B,EAAeztB,KAAM60C,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC3G,KAAKf,EAAe+6B,YAAa,OAAOrC,EAAS14B,EAAeztB,KAAM60C,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC7G,KAAKf,EAAeg7B,YAAa,OAAOtC,EAAS14B,EAAeztB,KAAM60C,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC7G,KAAKf,EAAei7B,aAAc,OAAOvC,EAAS14B,EAAeztB,KAAM60C,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC/G,KAAKf,EAAek7B,aAAc,OAAOxC,EAAS14B,EAAeztB,KAAM60C,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC/G,KAAKf,EAAem7B,aAAc,OAAOzC,EAAS14B,EAAeztB,KAAM60C,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC/G,KAAKf,EAAeo7B,aAAc,OAAO1C,EAAS14B,EAAeztB,KAAM60C,EAAU9oE,EAAAuF,KAAK5lB,IAAK6zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC/G,KAAKf,EAAeq7B,SAAU,OAAO3C,EAAS14B,EAAeztB,KAAM60C,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC3G,KAAKf,EAAes7B,SAAU,OAAO5C,EAAS14B,EAAeztB,KAAM60C,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKxlB,IAAK0iE,GAC3G,KAAKf,EAAeu7B,SAAU,OAAO7C,EAAS14B,EAAeztB,KAAM60C,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKvlB,IAAKyiE,GAC3G,KAAKf,EAAew7B,WAAY,OAAO9C,EAAS14B,EAAe1uB,MAAO81C,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC7G,KAAKf,EAAey7B,YAAa,OAAO/C,EAAS14B,EAAe1uB,MAAO81C,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC/G,KAAKf,EAAe07B,UAAW,OAAOhD,EAAS14B,EAAe1uB,MAAO81C,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC7G,KAAKf,EAAe27B,WAAY,OAAOjD,EAAS14B,EAAe1uB,MAAO81C,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC7G,KAAKf,EAAe47B,YAAa,OAAOlD,EAAS14B,EAAe1uB,MAAO81C,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC/G,KAAKf,EAAe67B,YAAa,OAAOnD,EAAS14B,EAAe1uB,MAAO81C,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC/G,KAAKf,EAAe87B,UAAW,OAAOpD,EAAS14B,EAAe1uB,MAAO81C,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC7G,KAAKf,EAAe+7B,UAAW,OAAOrD,EAAS14B,EAAe1uB,MAAO81C,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKxlB,IAAK0iE,GAC7G,KAAKf,EAAeg8B,UAAW,OAAOtD,EAAS14B,EAAe1uB,MAAO81C,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKvlB,IAAKyiE,GAE/G,GAAIqmB,EAASzjE,QAAQS,WAAU,IAC7B,OAAQ3nB,EAAU6lB,cAEhB,KAAK09C,EAAei8B,mBAAoB,OAAOvD,EAAS14B,EAAeltB,YAAas0C,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC3H,KAAKf,EAAek8B,oBAAqB,OAAOxD,EAAS14B,EAAeltB,YAAas0C,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC7H,KAAKf,EAAem8B,gBAAiB,OAAOzD,EAAS14B,EAAeltB,YAAas0C,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GACzH,KAAKf,EAAeo8B,mBAAoB,OAAO1D,EAAS14B,EAAeltB,YAAas0C,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC3H,KAAKf,EAAeq8B,oBAAqB,OAAO3D,EAAS14B,EAAeltB,YAAas0C,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC7H,KAAKf,EAAes8B,oBAAqB,OAAO5D,EAAS14B,EAAeltB,YAAas0C,EAAU9oE,EAAAuF,KAAK5lB,IAAK6zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC7H,KAAKf,EAAeu8B,gBAAiB,OAAO7D,EAAS14B,EAAeltB,YAAas0C,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAEzH,KAAKf,EAAew8B,kBAAmB,OAAO9D,EAAS14B,EAAehtB,aAAco0C,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC3H,KAAKf,EAAey8B,mBAAoB,OAAO/D,EAAS14B,EAAehtB,aAAco0C,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC7H,KAAKf,EAAe08B,iBAAkB,OAAOhE,EAAS14B,EAAehtB,aAAco0C,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC3H,KAAKf,EAAe28B,kBAAmB,OAAOjE,EAAS14B,EAAehtB,aAAco0C,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC3H,KAAKf,EAAe48B,mBAAoB,OAAOlE,EAAS14B,EAAehtB,aAAco0C,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC7H,KAAKf,EAAe68B,mBAAoB,OAAOnE,EAAS14B,EAAehtB,aAAco0C,EAAU9oE,EAAAuF,KAAK5lB,IAAK6zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC7H,KAAKf,EAAe88B,iBAAkB,OAAOpE,EAAS14B,EAAehtB,aAAco0C,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAE3H,KAAKf,EAAe+8B,sBAAuB,OAAOrE,EAAS14B,EAAemsB,WAAY/E,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC7H,KAAKf,EAAeg9B,uBAAwB,OAAOtE,EAAS14B,EAAemsB,WAAY/E,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC/H,KAAKf,EAAei9B,mBAAoB,OAAOvE,EAAS14B,EAAemsB,WAAY/E,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC3H,KAAKf,EAAek9B,sBAAuB,OAAOxE,EAAS14B,EAAemsB,WAAY/E,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC7H,KAAKf,EAAem9B,uBAAwB,OAAOzE,EAAS14B,EAAemsB,WAAY/E,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC/H,KAAKf,EAAeo9B,uBAAwB,OAAO1E,EAAS14B,EAAemsB,WAAY/E,EAAU9oE,EAAAuF,KAAK5lB,IAAK6zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC/H,KAAKf,EAAeq9B,mBAAoB,OAAO3E,EAAS14B,EAAemsB,WAAY/E,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAE3H,KAAKf,EAAes9B,sBAAuB,OAAO5E,EAAS14B,EAAeosB,WAAYhF,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC7H,KAAKf,EAAeu9B,uBAAwB,OAAO7E,EAAS14B,EAAeosB,WAAYhF,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC/H,KAAKf,EAAew9B,mBAAoB,OAAO9E,EAAS14B,EAAeosB,WAAYhF,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC3H,KAAKf,EAAey9B,sBAAuB,OAAO/E,EAAS14B,EAAeosB,WAAYhF,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC7H,KAAKf,EAAe09B,uBAAwB,OAAOhF,EAAS14B,EAAeosB,WAAYhF,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC/H,KAAKf,EAAe29B,uBAAwB,OAAOjF,EAAS14B,EAAeosB,WAAYhF,EAAU9oE,EAAAuF,KAAK5lB,IAAK6zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC/H,KAAKf,EAAe49B,mBAAoB,OAAOlF,EAAS14B,EAAeosB,WAAYhF,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAE3H,KAAKf,EAAe69B,sBAAuB,OAAOnF,EAAS14B,EAAeqsB,WAAYjF,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC7H,KAAKf,EAAe89B,uBAAwB,OAAOpF,EAAS14B,EAAeqsB,WAAYjF,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC/H,KAAKf,EAAe+9B,mBAAoB,OAAOrF,EAAS14B,EAAeqsB,WAAYjF,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC3H,KAAKf,EAAeg+B,sBAAuB,OAAOtF,EAAS14B,EAAeqsB,WAAYjF,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC7H,KAAKf,EAAei+B,uBAAwB,OAAOvF,EAAS14B,EAAeqsB,WAAYjF,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC/H,KAAKf,EAAek+B,uBAAwB,OAAOxF,EAAS14B,EAAeqsB,WAAYjF,EAAU9oE,EAAAuF,KAAK5lB,IAAK6zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC/H,KAAKf,EAAem+B,mBAAoB,OAAOzF,EAAS14B,EAAeqsB,WAAYjF,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAE3H,KAAKf,EAAeo+B,qBAAsB,OAAO1F,EAAS14B,EAAessB,UAAWlF,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC3H,KAAKf,EAAeq+B,sBAAuB,OAAO3F,EAAS14B,EAAessB,UAAWlF,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC7H,KAAKf,EAAes+B,kBAAmB,OAAO5F,EAAS14B,EAAessB,UAAWlF,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GACzH,KAAKf,EAAeu+B,qBAAsB,OAAO7F,EAAS14B,EAAessB,UAAWlF,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC3H,KAAKf,EAAew+B,sBAAuB,OAAO9F,EAAS14B,EAAessB,UAAWlF,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC7H,KAAKf,EAAey+B,sBAAuB,OAAO/F,EAAS14B,EAAessB,UAAWlF,EAAU9oE,EAAAuF,KAAK5lB,IAAK6zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC7H,KAAKf,EAAe0+B,kBAAmB,OAAOhG,EAAS14B,EAAessB,UAAWlF,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAEzH,KAAKf,EAAe2+B,sBAAuB,OAAOjG,EAAS14B,EAAeusB,WAAYnF,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC7H,KAAKf,EAAe4+B,uBAAwB,OAAOlG,EAAS14B,EAAeusB,WAAYnF,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC/H,KAAKf,EAAe6+B,mBAAoB,OAAOnG,EAAS14B,EAAeusB,WAAYnF,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC3H,KAAKf,EAAe8+B,sBAAuB,OAAOpG,EAAS14B,EAAeusB,WAAYnF,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC7H,KAAKf,EAAe++B,uBAAwB,OAAOrG,EAAS14B,EAAeusB,WAAYnF,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC/H,KAAKf,EAAeg/B,uBAAwB,OAAOtG,EAAS14B,EAAeusB,WAAYnF,EAAU9oE,EAAAuF,KAAK5lB,IAAK6zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC/H,KAAKf,EAAei/B,mBAAoB,OAAOvG,EAAS14B,EAAeusB,WAAYnF,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAE3H,KAAKf,EAAek/B,uBAAwB,OAAOxG,EAAS14B,EAAewsB,YAAapF,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC/H,KAAKf,EAAem/B,wBAAyB,OAAOzG,EAAS14B,EAAewsB,YAAapF,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GACjI,KAAKf,EAAeo/B,oBAAqB,OAAO1G,EAAS14B,EAAewsB,YAAapF,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC7H,KAAKf,EAAeq/B,uBAAwB,OAAO3G,EAAS14B,EAAewsB,YAAapF,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAC/H,KAAKf,EAAes/B,wBAAyB,OAAO5G,EAAS14B,EAAewsB,YAAapF,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GACjI,KAAKf,EAAeu/B,wBAAyB,OAAO7G,EAAS14B,EAAewsB,YAAapF,EAAU9oE,EAAAuF,KAAK5lB,IAAK6zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GACjI,KAAKf,EAAew/B,oBAAqB,OAAO9G,EAAS14B,EAAewsB,YAAapF,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAE7H,KAAKf,EAAey/B,0BAA2B,OAAO/G,EAAS14B,EAAe5sB,eAAgBg0C,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GACrI,KAAKf,EAAe0/B,2BAA4B,OAAOhH,EAAS14B,EAAe5sB,eAAgBg0C,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GACvI,KAAKf,EAAe2/B,uBAAwB,OAAOjH,EAAS14B,EAAe5sB,eAAgBg0C,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GACnI,KAAKf,EAAe4/B,0BAA2B,OAAOlH,EAAS14B,EAAe5sB,eAAgBg0C,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GACrI,KAAKf,EAAe6/B,2BAA4B,OAAOnH,EAAS14B,EAAe5sB,eAAgBg0C,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GACvI,KAAKf,EAAe8/B,2BAA4B,OAAOpH,EAAS14B,EAAe5sB,eAAgBg0C,EAAU9oE,EAAAuF,KAAK5lB,IAAK6zC,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GACvI,KAAKf,EAAe+/B,uBAAwB,OAAOrH,EAAS14B,EAAe5sB,eAAgBg0C,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAEnI,KAAKf,EAAeggC,SAAU,OAAOtH,EAAS14B,EAAexsB,YAAa4zC,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAClH,KAAKf,EAAeigC,SAAU,OAAOvH,EAAS14B,EAAexsB,YAAa4zC,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAGtH,GAAIqmB,EAASzjE,QAAQS,WAAU,GAC7B,OAAQ3nB,EAAU6lB,cAEhB,KAAK09C,EAAekgC,UAAW,OAAOxH,EAAS14B,EAAeztB,KAAM60C,EAAU9oE,EAAAuF,KAAKtlB,KAAMuzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAC9G,KAAKf,EAAemgC,WAAY,OAAOzH,EAAS14B,EAAe1uB,MAAO81C,EAAU9oE,EAAAuF,KAAKtlB,KAAMuzC,EAAUxzB,EAAAuF,KAAKG,KAAM+8C,GAEhH,KAAKf,EAAeogC,YAAa,OAAO1H,EAAS14B,EAAe6tB,WAAYzG,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACpH,KAAKf,EAAeqgC,qBAAsB,OAAO3H,EAAS14B,EAAeouB,kBAAmBhH,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKnmB,GAAIqjE,GAClI,KAAKf,EAAesgC,qBAAsB,OAAO5H,EAAS14B,EAAeouB,kBAAmBhH,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAK9lB,GAAIgjE,GAClI,KAAKf,EAAeugC,mBAAoB,OAAO7H,EAAS14B,EAAe8uB,kBAAmB1H,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAClI,KAAKf,EAAewgC,UAAW,OAAO9H,EAAS14B,EAAe2vB,SAAUvI,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAChH,KAAKf,EAAeygC,UAAW,OAAO/H,EAAS14B,EAAe4vB,SAAUxI,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAChH,KAAKf,EAAe0gC,UAAW,OAAOhI,EAAS14B,EAAe6vB,SAAUzI,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAChH,KAAKf,EAAe2gC,UAAW,OAAOjI,EAAS14B,EAAeg1B,SAAU5N,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAChH,KAAKf,EAAe4gC,qBAAsB,OAAOlI,EAAS14B,EAAe+vB,kBAAmB3I,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACpI,KAAKf,EAAe6gC,qBAAsB,OAAOnI,EAAS14B,EAAe+vB,kBAAmB3I,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACpI,KAAKf,EAAe8gC,qBAAsB,OAAOpI,EAAS14B,EAAegwB,kBAAmB5I,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACpI,KAAKf,EAAe+gC,qBAAsB,OAAOrI,EAAS14B,EAAegwB,kBAAmB5I,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACpI,KAAKf,EAAeghC,UAAW,OAAOtI,EAAS14B,EAAeu2B,SAAUnP,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAChH,KAAKf,EAAeihC,YAAa,OAAOvI,EAAS14B,EAAew2B,SAAUpP,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAClH,KAAKf,EAAekhC,YAAa,OAAOxI,EAAS14B,EAAew2B,SAAUpP,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAClH,KAAKf,EAAemhC,eAAgB,OAAOzI,EAAS14B,EAAe83B,cAAe1Q,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GACzH,KAAKf,EAAeohC,eAAgB,OAAO1I,EAAS14B,EAAe+3B,cAAe3Q,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GACzH,KAAKf,EAAeqhC,SAAU,OAAO3I,EAAS14B,EAAemwB,QAAS/I,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAC9G,KAAKf,EAAeshC,SAAU,OAAO5I,EAAS14B,EAAeowB,QAAShJ,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAC9G,KAAKf,EAAeuhC,WAAY,OAAO7I,EAAS14B,EAAeqwB,QAASjJ,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAChH,KAAKf,EAAewhC,WAAY,OAAO9I,EAAS14B,EAAeqwB,QAASjJ,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAChH,KAAKf,EAAeyhC,WAAY,OAAO/I,EAAS14B,EAAeswB,QAASlJ,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAChH,KAAKf,EAAe0hC,WAAY,OAAOhJ,EAAS14B,EAAeswB,QAASlJ,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAChH,KAAKf,EAAe2hC,WAAY,OAAOjJ,EAAS14B,EAAeuwB,QAASnJ,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAChH,KAAKf,EAAe4hC,WAAY,OAAOlJ,EAAS14B,EAAeuwB,QAASnJ,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAChH,KAAKf,EAAe6hC,WAAY,OAAOnJ,EAAS14B,EAAewwB,QAASpJ,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAChH,KAAKf,EAAe8hC,WAAY,OAAOpJ,EAAS14B,EAAewwB,QAASpJ,EAAU9oE,EAAAuF,KAAK9lB,GAAI+zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAEhH,KAAKf,EAAe+hC,YAAa,OAAOrJ,EAAS14B,EAAe6tB,WAAYzG,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACrH,KAAKf,EAAegiC,qBAAsB,OAAOtJ,EAAS14B,EAAeouB,kBAAmBhH,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKlmB,IAAKojE,GACpI,KAAKf,EAAeiiC,qBAAsB,OAAOvJ,EAAS14B,EAAeouB,kBAAmBhH,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAK7lB,IAAK+iE,GACpI,KAAKf,EAAekiC,mBAAoB,OAAOxJ,EAAS14B,EAAe8uB,kBAAmB1H,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACnI,KAAKf,EAAemiC,UAAW,OAAOzJ,EAAS14B,EAAe2vB,SAAUvI,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAeoiC,UAAW,OAAO1J,EAAS14B,EAAe4vB,SAAUxI,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAeqiC,UAAW,OAAO3J,EAAS14B,EAAe6vB,SAAUzI,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAesiC,UAAW,OAAO5J,EAAS14B,EAAeg1B,SAAU5N,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAeuiC,qBAAsB,OAAO7J,EAAS14B,EAAe+vB,kBAAmB3I,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACrI,KAAKf,EAAewiC,qBAAsB,OAAO9J,EAAS14B,EAAe+vB,kBAAmB3I,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACrI,KAAKf,EAAeyiC,qBAAsB,OAAO/J,EAAS14B,EAAegwB,kBAAmB5I,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACrI,KAAKf,EAAe0iC,qBAAsB,OAAOhK,EAAS14B,EAAegwB,kBAAmB5I,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACrI,KAAKf,EAAe2iC,UAAW,OAAOjK,EAAS14B,EAAeu2B,SAAUnP,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAe4iC,YAAa,OAAOlK,EAAS14B,EAAew2B,SAAUpP,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACnH,KAAKf,EAAe6iC,YAAa,OAAOnK,EAAS14B,EAAew2B,SAAUpP,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACnH,KAAKf,EAAe8iC,eAAgB,OAAOpK,EAAS14B,EAAe83B,cAAe1Q,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC1H,KAAKf,EAAe+iC,eAAgB,OAAOrK,EAAS14B,EAAe+3B,cAAe3Q,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC1H,KAAKf,EAAegjC,SAAU,OAAOtK,EAAS14B,EAAemwB,QAAS/I,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAC/G,KAAKf,EAAeijC,SAAU,OAAOvK,EAAS14B,EAAeowB,QAAShJ,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAC/G,KAAKf,EAAekjC,WAAY,OAAOxK,EAAS14B,EAAeqwB,QAASjJ,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAemjC,WAAY,OAAOzK,EAAS14B,EAAeqwB,QAASjJ,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAeojC,WAAY,OAAO1K,EAAS14B,EAAeswB,QAASlJ,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAeqjC,WAAY,OAAO3K,EAAS14B,EAAeswB,QAASlJ,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAesjC,WAAY,OAAO5K,EAAS14B,EAAeuwB,QAASnJ,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAeujC,WAAY,OAAO7K,EAAS14B,EAAeuwB,QAASnJ,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAewjC,WAAY,OAAO9K,EAAS14B,EAAewwB,QAASpJ,EAAU9oE,EAAAuF,KAAKlmB,IAAKm0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAeyjC,WAAY,OAAO/K,EAAS14B,EAAewwB,QAASpJ,EAAU9oE,EAAAuF,KAAK7lB,IAAK8zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAEjH,KAAKf,EAAe0jC,YAAa,OAAOhL,EAAS14B,EAAe6tB,WAAYzG,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACrH,KAAKf,EAAe2jC,mBAAoB,OAAOjL,EAAS14B,EAAeouB,kBAAmBhH,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAClI,KAAKf,EAAe4jC,mBAAoB,OAAOlL,EAAS14B,EAAe8uB,kBAAmB1H,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACnI,KAAKf,EAAe6jC,UAAW,OAAOnL,EAAS14B,EAAe2vB,SAAUvI,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAe8jC,UAAW,OAAOpL,EAAS14B,EAAe4vB,SAAUxI,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAe+jC,UAAW,OAAOrL,EAAS14B,EAAe6vB,SAAUzI,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAegkC,UAAW,OAAOtL,EAAS14B,EAAeg1B,SAAU5N,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAeikC,UAAW,OAAOvL,EAAS14B,EAAeu2B,SAAUnP,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAekkC,YAAa,OAAOxL,EAAS14B,EAAew2B,SAAUpP,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACnH,KAAKf,EAAemkC,YAAa,OAAOzL,EAAS14B,EAAew2B,SAAUpP,EAAU9oE,EAAAuF,KAAK5lB,IAAK6zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACnH,KAAKf,EAAeokC,eAAgB,OAAO1L,EAAS14B,EAAe83B,cAAe1Q,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC1H,KAAKf,EAAeqkC,eAAgB,OAAO3L,EAAS14B,EAAe+3B,cAAe3Q,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC1H,KAAKf,EAAeskC,SAAU,OAAO5L,EAAS14B,EAAemwB,QAAS/I,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAC/G,KAAKf,EAAeukC,SAAU,OAAO7L,EAAS14B,EAAeowB,QAAShJ,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAC/G,KAAKf,EAAewkC,WAAY,OAAO9L,EAAS14B,EAAeqwB,QAASjJ,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAeykC,WAAY,OAAO/L,EAAS14B,EAAeqwB,QAASjJ,EAAU9oE,EAAAuF,KAAK5lB,IAAK6zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAe0kC,WAAY,OAAOhM,EAAS14B,EAAeswB,QAASlJ,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAe2kC,WAAY,OAAOjM,EAAS14B,EAAeswB,QAASlJ,EAAU9oE,EAAAuF,KAAK5lB,IAAK6zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAe4kC,WAAY,OAAOlM,EAAS14B,EAAeuwB,QAASnJ,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAe6kC,WAAY,OAAOnM,EAAS14B,EAAeuwB,QAASnJ,EAAU9oE,EAAAuF,KAAK5lB,IAAK6zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAe8kC,WAAY,OAAOpM,EAAS14B,EAAewwB,QAASpJ,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAe+kC,WAAY,OAAOrM,EAAS14B,EAAewwB,QAASpJ,EAAU9oE,EAAAuF,KAAK5lB,IAAK6zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAeglC,wBAAyB,OAAOtM,EAAS14B,EAAeo1B,WAAYhO,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjI,KAAKf,EAAeilC,wBAAyB,OAAOvM,EAAS14B,EAAeo1B,WAAYhO,EAAU9oE,EAAAuF,KAAK5lB,IAAK6zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAEjI,KAAKf,EAAeklC,YAAa,OAAOxM,EAAS14B,EAAe6tB,WAAYzG,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACrH,KAAKf,EAAemlC,mBAAoB,OAAOzM,EAAS14B,EAAeouB,kBAAmBhH,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKhmB,IAAKkjE,GAClI,KAAKf,EAAeolC,mBAAoB,OAAO1M,EAAS14B,EAAe8uB,kBAAmB1H,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACnI,KAAKf,EAAeqlC,UAAW,OAAO3M,EAAS14B,EAAe2vB,SAAUvI,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAeslC,UAAW,OAAO5M,EAAS14B,EAAe4vB,SAAUxI,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAeulC,UAAW,OAAO7M,EAAS14B,EAAeg1B,SAAU5N,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAewlC,UAAW,OAAO9M,EAAS14B,EAAeu2B,SAAUnP,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAeylC,YAAa,OAAO/M,EAAS14B,EAAew2B,SAAUpP,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACnH,KAAKf,EAAe0lC,YAAa,OAAOhN,EAAS14B,EAAew2B,SAAUpP,EAAU9oE,EAAAuF,KAAK3lB,IAAK4zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACnH,KAAKf,EAAe2lC,eAAgB,OAAOjN,EAAS14B,EAAe83B,cAAe1Q,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC1H,KAAKf,EAAe4lC,eAAgB,OAAOlN,EAAS14B,EAAe+3B,cAAe3Q,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKjmB,IAAKmjE,GAC1H,KAAKf,EAAe6lC,wBAAyB,OAAOnN,EAAS14B,EAAeo1B,WAAYhO,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjI,KAAKf,EAAe8lC,wBAAyB,OAAOpN,EAAS14B,EAAeo1B,WAAYhO,EAAU9oE,EAAAuF,KAAK3lB,IAAK4zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAEjI,KAAKf,EAAe+lC,YAAa,OAAOrN,EAAS14B,EAAe6tB,WAAYzG,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACrH,KAAKf,EAAegmC,mBAAoB,OAAOtN,EAAS14B,EAAeouB,kBAAmBhH,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKxlB,IAAK0iE,GAClI,KAAKf,EAAeimC,mBAAoB,OAAOvN,EAAS14B,EAAe8uB,kBAAmB1H,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACnI,KAAKf,EAAekmC,UAAW,OAAOxN,EAAS14B,EAAe2vB,SAAUvI,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAemmC,UAAW,OAAOzN,EAAS14B,EAAe4vB,SAAUxI,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAeomC,UAAW,OAAO1N,EAAS14B,EAAe6vB,SAAUzI,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAeqmC,UAAW,OAAO3N,EAAS14B,EAAe8vB,SAAU1I,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAesmC,UAAW,OAAO5N,EAAS14B,EAAeg1B,SAAU5N,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAeumC,UAAW,OAAO7N,EAAS14B,EAAeiwB,SAAU7I,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAewmC,UAAW,OAAO9N,EAAS14B,EAAekwB,SAAU9I,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAeymC,UAAW,OAAO/N,EAAS14B,EAAei1B,SAAU7N,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAe0mC,WAAY,OAAOhO,EAAS14B,EAAek1B,UAAW9N,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACnH,KAAKf,EAAe2mC,SAAU,OAAOjO,EAAS14B,EAAemwB,QAAS/I,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAC/G,KAAKf,EAAe4mC,SAAU,OAAOlO,EAAS14B,EAAeowB,QAAShJ,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAC/G,KAAKf,EAAe6mC,SAAU,OAAOnO,EAAS14B,EAAeqwB,QAASjJ,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAC/G,KAAKf,EAAe8mC,SAAU,OAAOpO,EAAS14B,EAAeswB,QAASlJ,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAC/G,KAAKf,EAAe+mC,SAAU,OAAOrO,EAAS14B,EAAeuwB,QAASnJ,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAC/G,KAAKf,EAAegnC,SAAU,OAAOtO,EAAS14B,EAAewwB,QAASpJ,EAAU9oE,EAAAuF,KAAKxlB,IAAKyzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAC/G,KAAKf,EAAeinC,sBAAuB,OAAOvO,EAAS14B,EAAem1B,aAAc/N,EAAU9oE,EAAAuF,KAAKjmB,IAAKk0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjI,KAAKf,EAAeknC,sBAAuB,OAAOxO,EAAS14B,EAAem1B,aAAc/N,EAAU9oE,EAAAuF,KAAK5lB,IAAK6zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAEjI,KAAKf,EAAemnC,YAAa,OAAOzO,EAAS14B,EAAe6tB,WAAYzG,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACrH,KAAKf,EAAeonC,mBAAoB,OAAO1O,EAAS14B,EAAeouB,kBAAmBhH,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKvlB,IAAKyiE,GAClI,KAAKf,EAAeqnC,mBAAoB,OAAO3O,EAAS14B,EAAe8uB,kBAAmB1H,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACnI,KAAKf,EAAesnC,UAAW,OAAO5O,EAAS14B,EAAe2vB,SAAUvI,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAeunC,UAAW,OAAO7O,EAAS14B,EAAe4vB,SAAUxI,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAewnC,UAAW,OAAO9O,EAAS14B,EAAe6vB,SAAUzI,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAeynC,UAAW,OAAO/O,EAAS14B,EAAe8vB,SAAU1I,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAe0nC,UAAW,OAAOhP,EAAS14B,EAAeg1B,SAAU5N,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAe2nC,UAAW,OAAOjP,EAAS14B,EAAeiwB,SAAU7I,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAe4nC,UAAW,OAAOlP,EAAS14B,EAAekwB,SAAU9I,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAe6nC,UAAW,OAAOnP,EAAS14B,EAAei1B,SAAU7N,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjH,KAAKf,EAAe8nC,WAAY,OAAOpP,EAAS14B,EAAek1B,UAAW9N,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACnH,KAAKf,EAAe+nC,SAAU,OAAOrP,EAAS14B,EAAemwB,QAAS/I,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAC/G,KAAKf,EAAegoC,SAAU,OAAOtP,EAAS14B,EAAeowB,QAAShJ,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAC/G,KAAKf,EAAeioC,SAAU,OAAOvP,EAAS14B,EAAeqwB,QAASjJ,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAC/G,KAAKf,EAAekoC,SAAU,OAAOxP,EAAS14B,EAAeswB,QAASlJ,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAC/G,KAAKf,EAAemoC,SAAU,OAAOzP,EAAS14B,EAAeuwB,QAASnJ,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAC/G,KAAKf,EAAeooC,SAAU,OAAO1P,EAAS14B,EAAewwB,QAASpJ,EAAU9oE,EAAAuF,KAAKvlB,IAAKwzC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAC/G,KAAKf,EAAeqoC,sBAAuB,OAAO3P,EAAS14B,EAAem1B,aAAc/N,EAAU9oE,EAAAuF,KAAKhmB,IAAKi0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GACjI,KAAKf,EAAesoC,sBAAuB,OAAO5P,EAAS14B,EAAem1B,aAAc/N,EAAU9oE,EAAAuF,KAAK3lB,IAAK4zC,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAEjI,KAAKf,EAAeuoC,cAAe,OAAO7P,EAAS14B,EAAeqvB,aAAcjI,EAAU9oE,EAAAuF,KAAKnmB,GAAIo0C,EAAUxzB,EAAAuF,KAAKtlB,KAAMwiE,GAI5H,OAAO,EA3TMynC,CAAYphB,EAAU3qF,EAAWq1C,EAAUivB,KAEhDn3D,GACFw9E,EAASv/E,MACPwW,EAAApZ,eAAe62D,sBACfiF,EAAW4nB,mBAAoBlsF,EAAU6lB,cAGtC3W,IAGXy7E,EAASv/E,MACPwW,EAAApZ,eAAeu3D,mBACfuE,EAAW10D,WAAW9G,MAAO9I,EAAU6lB,cAElCnoB,EAAOy7C,eAgThB,SAAS8iD,EACPt9F,EACAgsF,EACApqB,EACAlrB,EACAwlC,EACAvW,GAEAn8D,OAAOwiF,EAASr2D,QAAQrP,eAAe+B,IAAIroB,IAC3C,IAAIqB,EAAY2qF,EAASr2D,QAAQrP,eAAehmB,IAAIN,GAEpD,OADAwJ,OAAOnI,EAAU4L,MAAQikD,EAAAlrC,YAAYqK,oBAC9Bw0D,EACLmH,EACmB3qF,EACnB,CAAEugE,GACFlrB,EACAwlC,EACAvW,GACY,GAKhB,SAAgBgW,EACdqQ,EACA9hF,EACAy7D,GAEA,IAAIhwC,EAAUq2D,EAASr2D,QACnB52B,EAASitF,EAASjtF,OAElB4tB,EAAiBq/D,EAASr2D,QAAQhJ,eACtC,IAAKA,EAAgB,OAAO5tB,EAAOy7C,cAEnC,IAGI6yD,EAHAt+E,EAAgB4G,EAAQ5G,cAC5B,IAAMA,IAAiBi9D,EAAS3W,gBAAgBtmD,GAAiB,OAAOhwB,EAAOy7C,cAQ7E6yD,EALc,OAAZnjG,EAKW8hF,EAAS7X,kBAAkBjqE,EAASyiB,EAAeje,KAAM,IAEzDie,EAAeje,KAAKskD,aAAaj0D,GAGhD,IAAIuuG,EAActhB,EAASnV,mBAAmBlR,EAAWx7D,MAAMY,OAAOC,gBAGtE,OADAghF,EAAS7c,YAAcjsD,EAAAuF,KAAKG,KACrB7pB,EAAOg6C,MAAM,KAAM,CACxBh6C,EAAOa,KACLmvB,EAAc7H,aAAc,CAC1BmmF,EACAC,EACAvuG,EAAOyD,IAAImjE,EAAWx7D,MAAMc,MAC5BlM,EAAOyD,IAAImjE,EAAWx7D,MAAMe,SAE9BimD,EAAAjyB,WAAWsY,MAEbz4C,EAAOy7C,gBA6KX,SAAS+yD,EAAmB7+F,GAC1B,IAAIuF,EAAQ,IAA+B,GAAKvF,EAAKi7E,WAKrD,OAJIj7E,EAAK+N,GAAE,KAAoBxI,GAAK,MAChCvF,EAAK+N,GAAE,KAAmBxI,GAAK,MAC/BvF,EAAK+N,GAAE,OAAsBxI,GAAK,MAClCvF,EAAK+jE,YAAWx+D,GAAK,MAClBA,EAAK,GA2Dd,SAASm4E,EACPJ,EACAx9E,EACAkoC,EACAivB,GAEA,GAAuB,GAAnBjvB,EAASnrC,OACX,OAAKiD,GAAyC,GAAxBA,EAAcjD,OAO7BiD,EAAc,IANnBw9E,EAASv/E,MACPwW,EAAApZ,eAAe83D,oCACfgE,EAAW4nB,mBAAoB,IAAK/+E,EAAgBA,EAAcjD,OAAOT,SAAS,IAAM,KAEnF,MAIX,GAAuB,GAAnB4rC,EAASnrC,OAAa,CACxB,GAAsB,OAAlBiD,GAA0BA,EAAcjD,OAAQ,CAClD,GAAIiD,EAAcjD,OAAS,EAKzB,OAJAygF,EAASv/E,MACPwW,EAAApZ,eAAe83D,oCACfgE,EAAW4nB,mBAAoB,IAAK/+E,EAAcjD,OAAOT,SAAS,KAE7D,KAETkhF,EAAS7X,kBAAkBz9B,EAAS,GAAIloC,EAAc,GAAE,QAExDw9E,EAAS7X,kBAAkBz9B,EAAS,GAAIxzB,EAAAuF,KAAKupC,MAE/C,OAAOg6B,EAAS7c,YAYlB,OAVI3gE,GAAiBA,EAAcjD,OAAS,GAC1CygF,EAASv/E,MACPwW,EAAApZ,eAAe83D,oCACfgE,EAAW4nB,mBAAoB,IAAK/+E,EAAcjD,OAAOT,SAAS,KAGtEkhF,EAASv/E,MACPwW,EAAApZ,eAAewqB,+BACfsxC,EAAW6nC,eAAgB,IAAK92D,EAASnrC,OAAOT,SAAS,KAEpD,KAIT,SAAS2lF,EAAwBx/E,EAAwB+6E,GACvD,IAAIz7E,EACA7P,EA6BJ,OA5BIsrF,EAASzjE,QAAQY,UACnB5Y,EAAOy7E,EAAS1qC,qBAAqBrwC,EAAYiS,EAAAuF,KAAKqpC,QAAO,IAE3DX,EAAApL,gBAAgBx1C,IAAS4gD,EAAAhyB,aAAa0kB,OACtCsN,EAAAnL,kBAAkBz1C,IAAS4gD,EAAAjyB,WAAWz5B,KACR,GAA9B0rD,EAAAhL,qBAAqB51C,KACpB7P,EAAQywD,EAAAjL,oBAAoB31C,IAAS,KAEtCy7E,EAASv/E,MACPwW,EAAApZ,eAAe0oF,2CACfthF,EAAW9G,OAEbzJ,GAAS,KAGX6P,EAAOy7E,EAAS1qC,qBAAqBrwC,EAAYiS,EAAAuF,KAAKspC,QAAO,IAE3DZ,EAAApL,gBAAgBx1C,IAAS4gD,EAAAhyB,aAAa0kB,OACtCsN,EAAAnL,kBAAkBz1C,IAAS4gD,EAAAjyB,WAAW15B,MACrC9E,EAAQywD,EAAAlL,iBAAiB11C,IAAS,KAEnCy7E,EAASv/E,MACPwW,EAAApZ,eAAe0oF,2CACfthF,EAAW9G,OAEbzJ,GAAS,IAGNA,EAIT,SAASysF,EACP3+E,EACAm3D,EACAqmB,EACAyhB,GAEA,QAFA,IAAAA,OAAA,GAEIj/F,EAAe,CACjB,IAAI8P,EAAmB9P,EAAcjD,OACrC,GAAwB,GAApB+S,EAAuB,OAAO,EAClC9U,OAAO8U,GACHmvF,IAAuBzhB,EAAS7c,YAAc3gE,EAAc,IAChEw9E,EAASv/E,MACPwW,EAAApZ,eAAe83D,oCACfgE,EAAW4nB,mBAAoB,IAAKjvE,EAAiBxT,iBAGvDkhF,EAASv/E,MACPwW,EAAApZ,eAAe83D,oCACfgE,EAAWx7D,MAAO,IAAK,KAG3B,OAAO,EAIT,SAASujF,EACPl/E,EACAm3D,EACAqmB,EACAyhB,GAEA,QAFA,IAAAA,OAAA,GAEIj/F,EAAe,CACjB,IAAI8P,EAAmB9P,EAAcjD,OACrC,OAAwB,GAApB+S,EAA8B,GAClC9U,OAAO8U,GACHmvF,IAAuBzhB,EAAS7c,YAAc3gE,EAAc,IAChEw9E,EAASv/E,MACPwW,EAAApZ,eAAe83D,oCACfgE,EAAW4nB,mBAAoB,IAAKjvE,EAAiBxT,YAEhD,GAET,OAAO,EAIT,SAASgiF,EACPt+E,EACAm3D,EACAtkE,GAEA,OAAImN,GACFnN,EAAUs0B,QAAQlpB,MAChBwW,EAAApZ,eAAe62D,sBACfiF,EAAW4nB,mBAAoBlsF,EAAU6lB,cAEpC,GAEF,EAIT,SAAS6lE,EACPr2C,EACAuB,EACA0tB,EACAqmB,GAEA,OAAIt1C,EAASnrC,QAAU0sC,GACrB+zC,EAASv/E,MACPwW,EAAApZ,eAAewqB,+BACfsxC,EAAWx7D,MAAO8tC,EAASntC,WAAY4rC,EAASnrC,OAAOT,YAElD,GAEF,EAIT,SAASwiF,EACP52C,EACAg3D,EACAC,EACAhoC,EACAqmB,GAEA,IAAInE,EAAcnxC,EAASnrC,OAC3B,OAAIs8E,EAAc6lB,GAChB1hB,EAASv/E,MACPwW,EAAApZ,eAAeo7E,wCACftf,EAAWx7D,MAAOujG,EAAgB5iG,WAAY+8E,EAAY/8E,YAErD,GACE+8E,EAAc8lB,GACvB3hB,EAASv/E,MACPwW,EAAApZ,eAAewqB,+BACfsxC,EAAWx7D,MAAOwjG,EAAgB7iG,WAAY+8E,EAAY/8E,YAErD,GAEF,GA9vIT,SAAiB85D,GAEFA,EAAAunB,UAAY,0BACZvnB,EAAAynB,QAAU,wBACVznB,EAAA0nB,UAAY,0BACZ1nB,EAAA2nB,SAAW,yBACX3nB,EAAA4nB,YAAc,4BACd5nB,EAAA6nB,SAAW,yBACX7nB,EAAA8nB,QAAU,wBACV9nB,EAAA+nB,YAAc,4BACd/nB,EAAAgoB,WAAa,2BACbhoB,EAAAn2D,WAAa,2BACbm2D,EAAAioB,UAAY,0BACZjoB,EAAAqoB,WAAa,2BACbroB,EAAA6N,UAAY,0BAEZ7N,EAAA3S,IAAM,oBACN2S,EAAAyoB,IAAM,oBACNzoB,EAAA6oB,OAAS,uBACT7oB,EAAAkpB,KAAO,qBACPlpB,EAAAqpB,KAAO,qBACPrpB,EAAAwpB,IAAM,oBACNxpB,EAAA2F,IAAM,oBACN3F,EAAAkqB,IAAM,oBACNlqB,EAAAnT,KAAO,qBACPmT,EAAAqqB,MAAQ,sBACRrqB,EAAA0qB,SAAW,yBACX1qB,EAAA6qB,QAAU,wBACV7qB,EAAAgrB,YAAc,4BACdhrB,EAAAqrB,KAAO,qBACPrrB,EAAAwrB,MAAQ,sBACRxrB,EAAAztB,KAAO,qBACPytB,EAAA1uB,MAAQ,sBACR0uB,EAAAltB,YAAc,4BACdktB,EAAAhtB,aAAe,6BACfgtB,EAAAmsB,WAAa,2BACbnsB,EAAAosB,WAAa,2BACbpsB,EAAAqsB,WAAa,2BACbrsB,EAAAssB,UAAY,0BACZtsB,EAAAusB,WAAa,2BACbvsB,EAAAwsB,YAAc,4BACdxsB,EAAA5sB,eAAiB,+BACjB4sB,EAAAxsB,YAAc,4BACdwsB,EAAApsB,cAAgB,8BAEhBosB,EAAAsoB,OAAS,uBACTtoB,EAAAwoB,QAAU,wBACVxoB,EAAAznC,SAAW,yBACXynC,EAAA9qB,OAAS,uBACT8qB,EAAApqB,YAAc,4BACdoqB,EAAA/vB,WAAa,2BACb+vB,EAAAp7D,OAAS,uBACTo7D,EAAA5nC,UAAY,0BACZ4nC,EAAAotB,YAAc,4BACdptB,EAAAtqB,cAAgB,8BAChBsqB,EAAAytB,YAAc,4BACdztB,EAAAs4B,KAAO,qBAEPt4B,EAAAtiE,GAAK,mBACLsiE,EAAAriE,IAAM,oBACNqiE,EAAApiE,IAAM,oBACNoiE,EAAAniE,IAAM,oBACNmiE,EAAAliE,MAAQ,sBACRkiE,EAAAjiE,GAAK,mBACLiiE,EAAAhiE,IAAM,oBACNgiE,EAAA/hE,IAAM,oBACN+hE,EAAA9hE,IAAM,oBACN8hE,EAAA7hE,MAAQ,sBACR6hE,EAAA5hE,KAAO,qBACP4hE,EAAA3hE,IAAM,oBACN2hE,EAAA1hE,IAAM,oBACN0hE,EAAAzhE,KAAO,qBACPyhE,EAAA9gE,MAAQ,qBAER8gE,EAAAy4B,QAAU,wBACVz4B,EAAA24B,QAAU,wBACV34B,EAAA44B,QAAU,wBACV54B,EAAA64B,QAAU,wBACV74B,EAAA84B,WAAa,2BACb94B,EAAA+4B,WAAa,2BACb/4B,EAAAg5B,SAAW,yBACXh5B,EAAAi5B,SAAW,yBACXj5B,EAAAk5B,SAAW,yBACXl5B,EAAAm5B,SAAW,yBAEXn5B,EAAAo5B,QAAU,wBACVp5B,EAAAq5B,QAAU,wBACVr5B,EAAAs5B,QAAU,wBACVt5B,EAAAu5B,QAAU,wBACVv5B,EAAAw5B,QAAU,wBACVx5B,EAAAy5B,QAAU,wBACVz5B,EAAA05B,SAAW,yBACX15B,EAAA25B,SAAW,yBACX35B,EAAA45B,UAAY,0BACZ55B,EAAA65B,UAAY,0BACZ75B,EAAA85B,aAAe,6BACf95B,EAAA+5B,aAAe,6BACf/5B,EAAAg6B,YAAc,4BACdh6B,EAAAi6B,YAAc,4BACdj6B,EAAAk6B,oBAAsB,oCACtBl6B,EAAAm6B,oBAAsB,oCACtBn6B,EAAAo6B,oBAAsB,oCACtBp6B,EAAAq6B,oBAAsB,oCACtBr6B,EAAAs6B,SAAW,yBACXt6B,EAAAu6B,SAAW,yBACXv6B,EAAAw6B,UAAY,0BACZx6B,EAAAy6B,UAAY,0BAEZz6B,EAAA06B,YAAc,4BACd16B,EAAA26B,YAAc,4BACd36B,EAAA46B,aAAe,6BACf56B,EAAA66B,aAAe,6BACf76B,EAAA86B,SAAW,yBACX96B,EAAA+6B,YAAc,4BACd/6B,EAAAg7B,YAAc,4BACdh7B,EAAAi7B,aAAe,6BACfj7B,EAAAk7B,aAAe,6BACfl7B,EAAAm7B,aAAe,6BACfn7B,EAAAo7B,aAAe,6BACfp7B,EAAAq7B,SAAW,yBACXr7B,EAAAs7B,SAAW,yBACXt7B,EAAAu7B,SAAW,yBACXv7B,EAAAw7B,WAAa,2BACbx7B,EAAAy7B,YAAc,4BACdz7B,EAAA07B,UAAY,0BACZ17B,EAAA27B,WAAa,2BACb37B,EAAA47B,YAAc,4BACd57B,EAAA67B,YAAc,4BACd77B,EAAA87B,UAAY,0BACZ97B,EAAA+7B,UAAY,0BACZ/7B,EAAAg8B,UAAY,0BAEZh8B,EAAAi8B,mBAAqB,mCACrBj8B,EAAAk8B,oBAAsB,oCACtBl8B,EAAAm8B,gBAAkB,gCAClBn8B,EAAAo8B,mBAAqB,mCACrBp8B,EAAAq8B,oBAAsB,oCACtBr8B,EAAAs8B,oBAAsB,oCACtBt8B,EAAAu8B,gBAAkB,gCAClBv8B,EAAAw8B,kBAAoB,kCACpBx8B,EAAAy8B,mBAAqB,mCACrBz8B,EAAA08B,iBAAmB,iCACnB18B,EAAA28B,kBAAoB,kCACpB38B,EAAA48B,mBAAqB,mCACrB58B,EAAA68B,mBAAqB,mCACrB78B,EAAA88B,iBAAmB,iCACnB98B,EAAA+8B,sBAAwB,sCACxB/8B,EAAAg9B,uBAAyB,uCACzBh9B,EAAAi9B,mBAAqB,mCACrBj9B,EAAAk9B,sBAAwB,sCACxBl9B,EAAAm9B,uBAAyB,uCACzBn9B,EAAAo9B,uBAAyB,uCACzBp9B,EAAAq9B,mBAAqB,mCACrBr9B,EAAAs9B,sBAAwB,sCACxBt9B,EAAAu9B,uBAAyB,uCACzBv9B,EAAAw9B,mBAAqB,mCACrBx9B,EAAAy9B,sBAAwB,sCACxBz9B,EAAA09B,uBAAyB,uCACzB19B,EAAA29B,uBAAyB,uCACzB39B,EAAA49B,mBAAqB,mCACrB59B,EAAA69B,sBAAwB,sCACxB79B,EAAA89B,uBAAyB,uCACzB99B,EAAA+9B,mBAAqB,mCACrB/9B,EAAAg+B,sBAAwB,sCACxBh+B,EAAAi+B,uBAAyB,uCACzBj+B,EAAAk+B,uBAAyB,uCACzBl+B,EAAAm+B,mBAAqB,mCACrBn+B,EAAAo+B,qBAAuB,qCACvBp+B,EAAAq+B,sBAAwB,sCACxBr+B,EAAAs+B,kBAAoB,kCACpBt+B,EAAAu+B,qBAAuB,qCACvBv+B,EAAAw+B,sBAAwB,sCACxBx+B,EAAAy+B,sBAAwB,sCACxBz+B,EAAA0+B,kBAAoB,kCACpB1+B,EAAA2+B,sBAAwB,sCACxB3+B,EAAA4+B,uBAAyB,uCACzB5+B,EAAA6+B,mBAAqB,mCACrB7+B,EAAA8+B,sBAAwB,sCACxB9+B,EAAA++B,uBAAyB,uCACzB/+B,EAAAg/B,uBAAyB,uCACzBh/B,EAAAi/B,mBAAqB,mCACrBj/B,EAAAk/B,uBAAyB,uCACzBl/B,EAAAm/B,wBAA0B,wCAC1Bn/B,EAAAo/B,oBAAsB,oCACtBp/B,EAAAq/B,uBAAyB,uCACzBr/B,EAAAs/B,wBAA0B,wCAC1Bt/B,EAAAu/B,wBAA0B,wCAC1Bv/B,EAAAw/B,oBAAsB,oCACtBx/B,EAAAy/B,0BAA4B,0CAC5Bz/B,EAAA0/B,2BAA6B,2CAC7B1/B,EAAA2/B,uBAAyB,uCACzB3/B,EAAA4/B,0BAA4B,0CAC5B5/B,EAAA6/B,2BAA6B,2CAC7B7/B,EAAA8/B,2BAA6B,2CAC7B9/B,EAAA+/B,uBAAyB,uCACzB//B,EAAAggC,SAAW,yBACXhgC,EAAAigC,SAAW,yBAEXjgC,EAAA6tB,WAAa,2BACb7tB,EAAAouB,kBAAoB,kCACpBpuB,EAAA8uB,kBAAoB,kCACpB9uB,EAAAqvB,aAAe,6BACfrvB,EAAAkgC,UAAY,0BACZlgC,EAAAmgC,WAAa,2BACbngC,EAAA2vB,SAAW,yBACX3vB,EAAA4vB,SAAW,yBACX5vB,EAAA6vB,SAAW,yBACX7vB,EAAA8vB,SAAW,yBACX9vB,EAAAg1B,SAAW,yBACXh1B,EAAA+vB,kBAAoB,kCACpB/vB,EAAAgwB,kBAAoB,kCACpBhwB,EAAAu2B,SAAW,yBACXv2B,EAAAw2B,SAAW,yBACXx2B,EAAAq3B,SAAW,yBACXr3B,EAAAs3B,QAAU,wBACVt3B,EAAAu3B,SAAW,yBACXv3B,EAAA23B,SAAW,yBACX33B,EAAA63B,eAAiB,+BACjB73B,EAAA83B,cAAgB,8BAChB93B,EAAA+3B,cAAgB,8BAChB/3B,EAAAiwB,SAAW,yBACXjwB,EAAAkwB,SAAW,yBACXlwB,EAAAi1B,SAAW,yBACXj1B,EAAAk1B,UAAY,0BACZl1B,EAAAmwB,QAAU,wBACVnwB,EAAAowB,QAAU,wBACVpwB,EAAAqwB,QAAU,wBACVrwB,EAAAswB,QAAU,wBACVtwB,EAAAuwB,QAAU,wBACVvwB,EAAAwwB,QAAU,wBACVxwB,EAAAm1B,aAAe,6BACfn1B,EAAAo1B,WAAa,2BAEbp1B,EAAAxhE,MAAQ,sBACRwhE,EAAAthE,MAAQ,sBACRshE,EAAAphE,MAAQ,sBACRohE,EAAAlhE,MAAQ,sBACRkhE,EAAAhhE,MAAQ,sBACRghE,EAAA/gE,MAAQ,sBAER+gE,EAAAogC,YAAc,4BACdpgC,EAAAqgC,qBAAuB,qCACvBrgC,EAAAsgC,qBAAuB,qCACvBtgC,EAAAugC,mBAAqB,mCACrBvgC,EAAAwgC,UAAY,0BACZxgC,EAAAygC,UAAY,0BACZzgC,EAAA0gC,UAAY,0BACZ1gC,EAAA2gC,UAAY,0BACZ3gC,EAAA4gC,qBAAuB,qCACvB5gC,EAAA6gC,qBAAuB,qCACvB7gC,EAAA8gC,qBAAuB,qCACvB9gC,EAAA+gC,qBAAuB,qCACvB/gC,EAAAghC,UAAY,0BACZhhC,EAAAihC,YAAc,4BACdjhC,EAAAkhC,YAAc,4BACdlhC,EAAAmhC,eAAiB,+BACjBnhC,EAAAohC,eAAiB,+BACjBphC,EAAAqhC,SAAW,yBACXrhC,EAAAshC,SAAW,yBACXthC,EAAAuhC,WAAa,2BACbvhC,EAAAwhC,WAAa,2BACbxhC,EAAAyhC,WAAa,2BACbzhC,EAAA0hC,WAAa,2BACb1hC,EAAA2hC,WAAa,2BACb3hC,EAAA4hC,WAAa,2BACb5hC,EAAA6hC,WAAa,2BACb7hC,EAAA8hC,WAAa,2BAEb9hC,EAAA+hC,YAAc,4BACd/hC,EAAAgiC,qBAAuB,qCACvBhiC,EAAAiiC,qBAAuB,qCACvBjiC,EAAAkiC,mBAAqB,mCACrBliC,EAAAmiC,UAAY,0BACZniC,EAAAoiC,UAAY,0BACZpiC,EAAAqiC,UAAY,0BACZriC,EAAAsiC,UAAY,0BACZtiC,EAAAuiC,qBAAuB,qCACvBviC,EAAAwiC,qBAAuB,qCACvBxiC,EAAAyiC,qBAAuB,qCACvBziC,EAAA0iC,qBAAuB,qCACvB1iC,EAAA2iC,UAAY,0BACZ3iC,EAAA4iC,YAAc,4BACd5iC,EAAA6iC,YAAc,4BACd7iC,EAAA8iC,eAAiB,+BACjB9iC,EAAA+iC,eAAiB,+BACjB/iC,EAAAgjC,SAAW,yBACXhjC,EAAAijC,SAAW,yBACXjjC,EAAAkjC,WAAa,2BACbljC,EAAAmjC,WAAa,2BACbnjC,EAAAojC,WAAa,2BACbpjC,EAAAqjC,WAAa,2BACbrjC,EAAAsjC,WAAa,2BACbtjC,EAAAujC,WAAa,2BACbvjC,EAAAwjC,WAAa,2BACbxjC,EAAAyjC,WAAa,2BAEbzjC,EAAA0jC,YAAc,4BACd1jC,EAAA2jC,mBAAqB,mCACrB3jC,EAAA4jC,mBAAqB,mCACrB5jC,EAAA6jC,UAAY,0BACZ7jC,EAAA8jC,UAAY,0BACZ9jC,EAAA+jC,UAAY,0BACZ/jC,EAAAgkC,UAAY,0BACZhkC,EAAAikC,UAAY,0BACZjkC,EAAAkkC,YAAc,4BACdlkC,EAAAmkC,YAAc,4BACdnkC,EAAAokC,eAAiB,+BACjBpkC,EAAAqkC,eAAiB,+BACjBrkC,EAAAskC,SAAW,yBACXtkC,EAAAukC,SAAW,yBACXvkC,EAAAwkC,WAAa,2BACbxkC,EAAAykC,WAAa,2BACbzkC,EAAA0kC,WAAa,2BACb1kC,EAAA2kC,WAAa,2BACb3kC,EAAA4kC,WAAa,2BACb5kC,EAAA6kC,WAAa,2BACb7kC,EAAA8kC,WAAa,2BACb9kC,EAAA+kC,WAAa,2BACb/kC,EAAAglC,wBAA0B,wCAC1BhlC,EAAAilC,wBAA0B,wCAE1BjlC,EAAAklC,YAAc,4BACdllC,EAAAmlC,mBAAqB,mCACrBnlC,EAAAolC,mBAAqB,mCACrBplC,EAAAqlC,UAAY,0BACZrlC,EAAAslC,UAAY,0BACZtlC,EAAAulC,UAAY,0BACZvlC,EAAAwlC,UAAY,0BACZxlC,EAAAylC,YAAc,4BACdzlC,EAAA0lC,YAAc,4BACd1lC,EAAA2lC,eAAiB,+BACjB3lC,EAAA4lC,eAAiB,+BACjB5lC,EAAA6lC,wBAA0B,wCAC1B7lC,EAAA8lC,wBAA0B,wCAE1B9lC,EAAA+lC,YAAc,4BACd/lC,EAAAgmC,mBAAqB,mCACrBhmC,EAAAimC,mBAAqB,mCACrBjmC,EAAAkmC,UAAY,0BACZlmC,EAAAmmC,UAAY,0BACZnmC,EAAAomC,UAAY,0BACZpmC,EAAAqmC,UAAY,0BACZrmC,EAAAsmC,UAAY,0BACZtmC,EAAAumC,UAAY,0BACZvmC,EAAAwmC,UAAY,0BACZxmC,EAAAymC,UAAY,0BACZzmC,EAAA0mC,WAAa,2BACb1mC,EAAA2mC,SAAW,yBACX3mC,EAAA4mC,SAAW,yBACX5mC,EAAA6mC,SAAW,yBACX7mC,EAAA8mC,SAAW,yBACX9mC,EAAA+mC,SAAW,yBACX/mC,EAAAgnC,SAAW,yBACXhnC,EAAAinC,sBAAwB,sCACxBjnC,EAAAknC,sBAAwB,sCAExBlnC,EAAAmnC,YAAc,4BACdnnC,EAAAonC,mBAAqB,mCACrBpnC,EAAAqnC,mBAAqB,mCACrBrnC,EAAAsnC,UAAY,0BACZtnC,EAAAunC,UAAY,0BACZvnC,EAAAwnC,UAAY,0BACZxnC,EAAAynC,UAAY,0BACZznC,EAAA0nC,UAAY,0BACZ1nC,EAAA2nC,UAAY,0BACZ3nC,EAAA4nC,UAAY,0BACZ5nC,EAAA6nC,UAAY,0BACZ7nC,EAAA8nC,WAAa,2BACb9nC,EAAA+nC,SAAW,yBACX/nC,EAAAgoC,SAAW,yBACXhoC,EAAAioC,SAAW,yBACXjoC,EAAAkoC,SAAW,yBACXloC,EAAAmoC,SAAW,yBACXnoC,EAAAooC,SAAW,yBACXpoC,EAAAqoC,sBAAwB,sCACxBroC,EAAAsoC,sBAAwB,sCAExBtoC,EAAAuoC,cAAgB,8BAGhBvoC,EAAA6L,UAAY,wBACZ7L,EAAA8L,UAAY,sBACZ9L,EAAAu4B,cAAgB,0BAChBv4B,EAAAw4B,cAAgB,0BAGhBx4B,EAAAr7D,MAAQ,yBACRq7D,EAAAt7D,QAAU,2BACVs7D,EAAAv7D,KAAO,wBAGPu7D,EAAA+sB,YAAc,0BACd/sB,EAAAitB,YAAc,0BACdjtB,EAAAlqB,YAAc,0BACdkqB,EAAA/pB,YAAc,0BACd+pB,EAAAgpC,gBAAkB,8BAClBhpC,EAAAipC,YAAc,0BACdjpC,EAAAkpC,aAAe,2BAGflpC,EAAAmpC,mBAAqB,kCACrBnpC,EAAAopC,cAAgB,6BAChBppC,EAAAqpC,iBAAmB,6BACnBrpC,EAAAspC,mBAAqB,+BACrBtpC,EAAAupC,iBAAmB,6BACnBvpC,EAAAwpC,gBAAkB,4BAClBxpC,EAAAypC,kBAAoB,8BAGpBzpC,EAAA/9D,UAAY,4BACZ+9D,EAAA39D,WAAa,6BACb29D,EAAA99D,WAAa,6BACb89D,EAAAz9D,YAAc,8BACdy9D,EAAA79D,WAAa,6BACb69D,EAAAx9D,YAAc,8BACdw9D,EAAA59D,WAAa,6BACb49D,EAAAv9D,YAAc,8BACdu9D,EAAA19D,kBAAoB,oCACpB09D,EAAAt9D,aAAe,+BACfs9D,EAAAr9D,aAAe,+BAGfq9D,EAAAmM,QAAU,eACVnM,EAAAiiB,KAAO,YACPjiB,EAAAoiB,QAAU,eACVpiB,EAAA0pC,aAAe,oBAza9B,CAAiB1pC,EAAA9lE,EAAA8lE,iBAAA9lE,EAAA8lE,eAAc,KA6a/B9lE,EAAA+lF,cAy4GA/lF,EAAA68E,eA2CA78E,EAAAqyE,oBAAA,SAAoC6a,WAC9BjtF,EAASitF,EAASjtF,OAClBopF,EAAQ,IAAI9hF,MACZu2C,EAAUovC,EAAS9a,mBAAmB,CAAEhuD,EAAAuF,KAAK5lB,KAAOqgB,EAAAuF,KAAKG,MACzDgqD,EAAiBoZ,EAASzjE,QAAQqqD,eAClCljD,EAAgBlmB,OAAOwiF,EAASr2D,QAAQjG,eAE5Cs8D,EAAS3W,gBAAgB3lD,OAEzB,IAAoB,IAAAkH,EAAAhM,EAAAohE,EAASr2D,QAAQrP,eAAe7S,UAAQgd,EAAAmG,EAAAxoB,QAAAqiB,EAAA3F,KAAA2F,EAAAmG,EAAAxoB,OAAE,CAAzD,IAAIiE,EAAOoe,EAAA/vB,MACd,GAAI2R,EAAQpF,MAAQikD,EAAAlrC,YAAYhJ,OAAhC,CACA,IAAIouD,EAAiB/4D,EACjBgsB,EAAiB+sC,EAAO18D,KAAK2vB,eACjC,GACE+sC,EAAO3uD,GAAG9P,EAAAlL,YAAY0wE,WACH,OAAnB9zC,IACCA,EAAetQ,aAAamjC,EAAAjrC,eAAe5I,WAE5C,GAAI+tD,EAAO3uD,GAAG9P,EAAAlL,YAAY61B,SAAU,CAClC,IAAI52B,EAAQ0qE,EAAO/zC,sBACf2nB,QAAQt+C,IAAUu+C,SAASv+C,KAC7BynF,EAAMr8E,KACJ/M,EAAOa,KAAK8vB,EAAcxI,aAAc,CACtC8kE,EAASzjE,QAAQY,SACbpqB,EAAO0D,IAAIu8C,QAAQt+C,GAAQu+C,SAASv+C,IACpC3B,EAAOyD,IAAIw8C,QAAQt+C,KACtBywD,EAAAjyB,WAAWsY,YAIlB2wC,EAAMr8E,KACJ/M,EAAOy6C,GACLz6C,EAAOg4C,UAAU,EACfh4C,EAAOk4C,WAAWm0B,EAAOlkD,aAAc0rD,IAEzC7zE,EAAOa,KAAK8vB,EAAcxI,aAAc,CACtCnoB,EAAO83C,UAAU,EAAG+7B,GACpB7zE,EAAO83C,UAAU,EAAGsa,EAAAjyB,WAAW15B,MAC9B2rD,EAAAjyB,WAAWsY,2GAMxBz4C,EAAOs9C,YAAYuoB,EAAeu4B,cAAevgD,EAAS,CAAEg2B,GAC1DuV,EAAM58E,OACFxM,EAAOg6C,MAAM,KAAMovC,GACnBppF,EAAO26C,QAKf56C,EAAAsyE,oBAAA,SAAoC4a,mBAC9Br2D,EAAUq2D,EAASr2D,QACnB52B,EAASitF,EAASjtF,OAClB4pB,EAAYgN,EAAQpN,QAAQI,UAC5BiqD,EAAiBjqD,EAAUoqC,eAC3Bw7C,EAAiB5lF,EAAU6oC,SAC3Bg9C,EAAQxiB,EAAS9a,mBAAmB,CAAEvoD,EAAWzF,EAAAuF,KAAKjmB,KAAO0gB,EAAAuF,KAAKG,MAClElC,EAAiBiP,EAAQjP,eACzBgJ,EAAgBlmB,OAAOmsB,EAAQjG,eAC/B++E,EAAS,IAAIpoG,MACb8kD,EAAWgG,EAAA7N,SAASviD,OAAOhC,GAE3B2vG,EAAQvjD,EAASQ,mBACnB5sD,EAAO26C,MACP36C,EAAOo4C,KAAKo3D,GAAgB,EAC1B37B,GAAkBzhB,EAAAjyB,WAAWz5B,IACzB1G,EAAOw3C,OAAO4a,EAAArpB,SAASo4C,OACrBnhF,EAAO83C,UAAU,EAAG+7B,GACpB7zE,EAAO0D,IAAI,IAEb1D,EAAOw3C,OAAO4a,EAAArpB,SAASm4C,OACrBlhF,EAAO83C,UAAU,EAAG+7B,GACpB7zE,EAAOyD,IAAI,IAEjB2uD,EAAAjyB,WAAW15B,IACX,IAIAmpG,EAAS,MACb,IAA2B,IAAAC,EAAAhkF,EAAAlE,GAAcmoF,EAAAD,EAAAxgG,QAAAygG,EAAA/jF,KAAA+jF,EAAAD,EAAAxgG,OAAE,CAAlC,IAAAsiB,EAAA1F,EAAA6jF,EAAAnuG,MAAA,GAACinB,EAAA+I,EAAA,GAAI2H,EAAA3H,EAAA,GACZlnB,OAAO6uB,EAAS3pB,KAAK+jE,WACrBjpE,OAAOme,GAAMgnF,KAEb,IAAIG,OAAS,EACT7kG,EAAO,IAAI5D,MAGf,GAAIgyB,EAAS02E,sBAAwBD,EAAYz2E,EAAShM,aAAa,iBAAkB,CACvF7iB,OAAOslG,EAAU7hG,MAAQikD,EAAAlrC,YAAYqK,oBACrC,IAAI2+E,EAAYr5E,EAAQxO,SAASmJ,gBAAmCw+E,EAAW,MAC/E,GAAKE,GAAchjB,EAAS3W,gBAAgB25B,GAIrC,CACL,IAAIC,EAAWD,EAAU11F,UACzB9P,OACoC,GAAlCylG,EAASn1E,eAAevuB,QACxB0jG,EAASn1E,eAAe,IAAM5W,EAAAuF,KAAK5lB,KACnCosG,EAASngG,YAAcoU,EAAAuF,KAAKG,MAC5BqmF,EAASp1E,UAAYxB,EAAS3pB,MAEhCzE,EAAK6B,KACH/M,EAAOa,KAAKovG,EAAU9nF,aAAc,CAClCnoB,EAAO83C,UAAU,EAAG+7B,GACpB7zE,EAAO83C,UAAU,EAAGsa,EAAAjyB,WAAW15B,MAC9B2rD,EAAAjyB,WAAWsY,YAfhBvtC,EAAK6B,KACH/M,EAAOy7C,mBAmBN,CACL,IAAIzkC,EAAUsiB,EAAStiB,QACvB,GAAIA,MACF,IAAmB,IAAAkb,GAAAlF,OAAA,EAAAnB,EAAA7U,EAAQtC,WAAQyd,EAAAD,EAAA7iB,QAAA8iB,EAAApG,KAAAoG,EAAAD,EAAA7iB,OAAE,CAAhC,IAAIuiB,EAAMO,EAAAxwB,MACb,GAAIiwB,EAAO1jB,MAAQikD,EAAAlrC,YAAYgL,OACjBL,EAAQ/Q,SAAWyY,GACL1H,EAAQjiB,KAClB+jE,UAAW,CACvB,IAAIy8B,EAAsBv+E,EAAQuK,aAClC1xB,OAAO0lG,GAAe,GACtBjlG,EAAK6B,KAEH/M,EAAOy6C,GACLz6C,EAAOg4C,UAAU,EACfh4C,EAAOo4C,KAAKo3D,GAAgB,EAC1BxvG,EAAO83C,UAAU,EAAG+7B,GACpBA,EAAgBs8B,IAGpBnwG,EAAOa,KAAK8vB,EAAcxI,aAAc,CACtCnoB,EAAO83C,UAAU,EAAG+7B,GACpB7zE,EAAO83C,UAAU,EAAGsa,EAAAjyB,WAAW15B,MAC9B2rD,EAAAjyB,WAAWsY,4GASzBnf,EAASwD,MAAM5xB,EAAK6B,KAAK/M,EAAO66C,UACrC,IAAIb,EAAQoS,EAASE,SACnB0gC,EAAAzV,QAAQv3E,EAAQkL,EAAMknD,EAAAjyB,WAAWsY,OAEnC2T,EAASU,mBAAmB6iD,EAAO31D,EAAO,CAAEpxB,IAC5C8mF,EAAO3iG,KAAKitC,yGAEd,IAA2B,IAAAo2D,EAAAvkF,EAAAlE,GAAc0oF,EAAAD,EAAA/gG,QAAAghG,EAAAtkF,KAAAskF,EAAAD,EAAA/gG,OAAE,CAAlC,IAAA2c,EAAAC,EAAAokF,EAAA1uG,MAAA,GACHm7B,GADIlU,EAAAoD,EAAA,IAAIsN,EAAAtN,EAAA,IACQ8Q,MAChBA,GACFsvB,EAASI,UAAUkjD,EAAO9mF,GAAK8mF,EAAO5yE,EAAKlU,uGAG/C8mF,EAAO3iG,KACLq/C,EAASE,SACPtsD,EAAOy7C,gBAGX2Q,EAASU,mBAAmB6iD,EAAOD,EAAOA,EAAOljG,OAAS,GAAI,IAC9DygF,EAAS3W,gBAAgB3lD,GACzB3wB,EAAOs9C,YAAYuoB,EAAew4B,cAAeoR,EAAO,CAAE57B,GAAkBznB,EAASa,iBAAiB0iD,EAAO,KAa/G5vG,EAAAuyE,YAAA,SAA4B2a,WACtBr2D,EAAUq2D,EAASr2D,QACnB52B,EAASitF,EAASjtF,OAClB2nB,EAAiBiP,EAAQjP,eACzB+0D,EAAQ/0D,EAAei0B,KACvBA,EAAO,EAAI,EAAI8gC,EACfjuB,EAAO,IAAIvmD,WAAW0zC,GAC1B1xC,EAAAye,SAAS+zD,EAAOjuB,EAAM,GACtB,IAAIglC,EAAM,EACNz0D,EAAcpI,EAAQ/I,wBACtByiF,EAAetxE,EAAY18B,UAC3BstB,EAAiBgH,EAAQhH,eACzBE,EAAe8G,EAAQ9G,aACvBC,EAAe6G,EAAQ7G,aACvB6/E,EAAS,MACb,IAA2B,IAAAW,EAAA1kF,EAAAlE,GAAc6oF,EAAAD,EAAAlhG,QAAAmhG,EAAAzkF,KAAAykF,EAAAD,EAAAlhG,OAAE,CAAlC,IAAAwoB,EAAA5L,EAAAukF,EAAA7uG,MAAA,GAACinB,EAAAiP,EAAA,GAAIyB,EAAAzB,EAAA,GACZptB,OAAOme,GAAMgnF,KACb,IAAI16F,EAAuB,EAE3B,GADIokB,EAASm3E,YAAWv7F,GAAK,IACzBokB,IAAa0F,GAAe1F,EAASqD,QAAQ2zE,GAAe,CAC9D,IAAIz1F,EAAYye,EAASyF,oBACzB7pB,GAAK,EACDokB,EAASqD,QAAQ/M,KAAiB1a,GAAK,GAC3CA,GAAS,GAA8Bs5F,EAAmB3zF,QACrD,GAAIye,EAASqD,QAAQ7M,GAAe,CACzC,IAAIrgB,EAAgBhF,OAAO6uB,EAASuF,mBAAmB/O,IACvDrlB,OAA+B,GAAxBgF,EAAcjD,QACrB0I,GAAK,EACLA,GAAS,GAA8Bs5F,EAAmB/+F,EAAc,SAC/D6pB,EAASqD,QAAQ5M,KACtBtgB,EAAgBhF,OAAO6uB,EAASuF,mBAAmB9O,IACvDtlB,OAA+B,GAAxBgF,EAAcjD,QACrB0I,GAAK,EACLA,GAAS,MAA4Bs5F,EAAmB/+F,EAAc,IACtEyF,GAAS,GAA8Bs5F,EAAmB/+F,EAAc,KAE1EvF,EAAAye,SAASzT,EAAOu5C,EAAMglC,GAAMA,GAAO,EACnCn6D,EAAS8D,UAAYloB,EACrB,IAAI4nB,EAAOxD,EAASwD,KACpB5yB,EAAAye,SAASmU,EAAOA,EAAKlU,GAAK,EAAG6lC,EAAMglC,GAAMA,GAAO,oGAElDhpF,OAAOgpF,GAAO73C,GACd,IAAIhyB,EAAYgN,EAAQpN,QAAQI,UAC5BorB,EAAUi4C,EAASrV,iBAAiBnpB,GACxC,GAAsB,GAAlB7kC,EAAUgyB,KAAW,CACvB,IAAIpzB,EAASwsB,EAAQxsB,OACrBxoB,EAAOi9C,UAAU4oB,EAAe8L,UAAWvf,EAAAjyB,WAAWz5B,KAAK,EAAO1G,EAAO0D,IAAIu8C,QAAQz3B,GAAS03B,SAAS13B,UAEvGxoB,EAAOi9C,UAAU4oB,EAAe8L,UAAWvf,EAAAjyB,WAAW15B,KAAK,EAAOzG,EAAOyD,IAAIw8C,QAAQjL,EAAQxsB,0FCvpIjG,IAAA4pC,EAAA5xD,EAAA,GAwDAkwG,EAAA,WAWE,SAAAA,IAHArwG,KAAAiM,KAAiB,GACjBjM,KAAAswG,WAAkB,EAmyBpB,OA1yBSD,EAAAE,UAAP,SAAiB5wG,GACf,IAAI6wG,EAAa,IAAIH,EAErB,OADAG,EAAWD,UAAU5wG,GACd6wG,EAAWrwC,UASpBkwC,EAAApuG,UAAAsuG,UAAA,SAAU5wG,GACR,MAAM,IAAI2vB,MAAM,oBAGlB+gF,EAAApuG,UAAAwuG,kBAAA,SAAkBlwD,GAChB,IAAI3/C,EAAOmxD,EAAAxG,gBAAgBhL,IAAS,IAAMvgD,KAAKswG,WAAW5kG,SAAS,IAC/DyO,EAAO43C,EAAAzG,gBAAgB/K,GAC3BvgD,KAAK0M,KAAK,aACV1M,KAAK0M,KAAK9L,GACVZ,KAAK0M,KAAK,KACT,IAAK,IAAIrM,EAAW,EAAGojB,EAAWsuC,EAAAtG,sBAAsBlL,GAAOlgD,EAAIojB,IAAKpjB,EACnEA,EAAI,GAAGL,KAAK0M,KAAK,MACrB1M,KAAK0M,KAAK,KACV1M,KAAK0M,KAAKrM,EAAEqL,SAAS,KACrB1L,KAAK0M,KAAK,MACV1M,KAAK0M,KAAKgkG,EAAiB3+C,EAAApG,qBAAqBpL,EAAMlgD,KAExDL,KAAK0M,KAAK,OACV1M,KAAK0M,KAAKgkG,EAAiB3+C,EAAAlG,sBAAsBtL,KACjDvgD,KAAK0M,KAAK,KACNqlD,EAAApL,gBAAgBxsC,IAAS43C,EAAAhyB,aAAakuB,OACxCjuD,KAAK0M,KAAK,OAEZ1M,KAAK2wG,oBAAoBx2F,GACrB43C,EAAApL,gBAAgBxsC,IAAS43C,EAAAhyB,aAAakuB,OACxCjuD,KAAK0M,KAAK,WAEV1M,KAAKswG,YAGTD,EAAApuG,UAAA0uG,oBAAA,SAAoBx/F,GAClB,IAGIy/F,EACA/rG,EACAxE,EAAUojB,EALV8E,EAAKwpC,EAAApL,gBAAgBx1C,GACrB7B,EAAOyiD,EAAAnL,kBAAkBz1C,GAM7B,OAAQoX,GACN,KAAKwpC,EAAAhyB,aAAakuB,MAOhB,IANqC,OAAhCppD,EAASktD,EAAApJ,aAAax3C,MACzBnR,KAAK0M,KAAK7H,GACV7E,KAAK0M,KAAK,OAEZ1M,KAAK0M,KAAK,OACV+W,EAAIsuC,EAAAlJ,mBAAmB13C,GAClB9Q,EAAI,EAAGA,EAAIojB,IAAKpjB,EACnBL,KAAK2wG,oBAAoB5+C,EAAAhJ,cAAc53C,EAAM9Q,IAG/C,YADAL,KAAK0M,KAAK,OAGZ,KAAKqlD,EAAAhyB,aAAasuB,GAiBhB,YAhBI/+C,GAAQyiD,EAAAjyB,WAAWsY,MACrBp4C,KAAK0M,KAAK,QACV1M,KAAK2wG,oBAAoB5+C,EAAA9I,eAAe93C,IACxCnR,KAAK0M,KAAK,MACV1M,KAAK2wG,oBAAoB5+C,EAAA5I,UAAUh4C,KAC/By/F,EAAS7+C,EAAA1I,WAAWl4C,MACtBnR,KAAK0M,KAAK,UACV1M,KAAK2wG,oBAAoBC,MAG3B5wG,KAAK2wG,oBAAoB5+C,EAAA9I,eAAe93C,IACxCnR,KAAK0M,KAAK,OACV1M,KAAK2wG,oBAAoB5+C,EAAA5I,UAAUh4C,IACnCnR,KAAK0M,KAAK,OACV1M,KAAK2wG,oBAAoB5+C,EAAA1I,WAAWl4C,MAIxC,KAAK4gD,EAAAhyB,aAAauuB,KACoB,OAA/BzpD,EAASktD,EAAAxI,YAAYp4C,MACxBnR,KAAK0M,KAAK7H,GACV7E,KAAK0M,KAAK,OAEZ1M,KAAK0M,KAAK,OACV1M,KAAK2wG,oBAAoB5+C,EAAAtI,YAAYt4C,IACrCnR,KAAK0M,KAAK,gBAEZ,KAAKqlD,EAAAhyB,aAAaiuB,MAahB,OAZI4iD,EAAS7+C,EAAAlI,kBAAkB14C,MAC7BnR,KAAK0M,KAAK,QACV1M,KAAK2wG,oBAAoBC,GACzB5wG,KAAK0M,KAAK,YAEyB,OAAhC7H,EAASktD,EAAApI,aAAax4C,KACzBnR,KAAK0M,KAAK,UACV1M,KAAK0M,KAAK7H,GACV7E,KAAK0M,KAAK,QAEV1M,KAAK0M,KAAK,aAId,KAAKqlD,EAAAhyB,aAAawuB,OAClB,KAAKwD,EAAAhyB,aAAa0uB,KAClB,KAAKsD,EAAAhyB,aAAa2uB,aAChB,MAAM,IAAIp/B,MAAM,mBAElB,KAAKyiC,EAAAhyB,aAAaglB,SAGhB,OAFA/kD,KAAK0M,KAAK,UACV1M,KAAK0M,KAAKqlD,EAAA7K,iBAAiB/1C,GAAMzF,SAAS,KAG5C,KAAKqmD,EAAAhyB,aAAa8uB,SAKhB,OAJA7uD,KAAK0M,KAAK,KACV1M,KAAK0M,KAAKqlD,EAAA5K,iBAAiBh2C,GAAMzF,SAAS,KAC1C1L,KAAK0M,KAAK,YACV1M,KAAK2wG,oBAAoB5+C,EAAA1K,iBAAiBl2C,IAG5C,KAAK4gD,EAAAhyB,aAAaklB,UAClB,KAAK8M,EAAAhyB,aAAa+uB,UAChB,MAAM,IAAIx/B,MAAM,mBAElB,KAAKyiC,EAAAhyB,aAAaqlB,KAQhB,OAPAplD,KAAK0M,KAAK,SACV1M,KAAK0M,KAAKgkG,EAAiBphG,IAC3BtP,KAAK0M,KAAK,MACV1M,KAAK0M,KAAKqlD,EAAA/J,cAAc72C,GAAMzF,SAAS,KACvC1L,KAAK0M,KAAK,OACV1M,KAAK2wG,oBAAoB5+C,EAAA9J,WAAW92C,SACpCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAAhyB,aAAaivB,MAUhB,OATAhvD,KAAK0M,KAAK,UACV1M,KAAK0M,KAAKgkG,EAAiBphG,IAC3BtP,KAAK0M,KAAK,MACV1M,KAAK0M,KAAKqlD,EAAA1J,eAAel3C,GAAMzF,SAAS,KACxC1L,KAAK0M,KAAK,OACV1M,KAAK2wG,oBAAoB5+C,EAAAxJ,YAAYp3C,IACrCnR,KAAK0M,KAAK,MACV1M,KAAK2wG,oBAAoB5+C,EAAAtJ,cAAct3C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAAhyB,aAAa0kB,MAChB,OAAQn1C,GACN,KAAKyiD,EAAAjyB,WAAW15B,IAEd,YADApG,KAAK0M,KAAKqlD,EAAAlL,iBAAiB11C,GAAMzF,SAAS,KAG5C,KAAKqmD,EAAAjyB,WAAWz5B,IASd,YARArG,KAAK0M,KACHmkG,cACE/mF,QACEioC,EAAAjL,oBAAoB31C,GACpB4gD,EAAAhL,qBAAqB51C,MAM7B,KAAK4gD,EAAAjyB,WAAWj5B,IAEd,YADA7G,KAAK0M,KAAKqlD,EAAA/K,iBAAiB71C,GAAMzF,SAAS,KAG5C,KAAKqmD,EAAAjyB,WAAWh5B,IAEd,YADA9G,KAAK0M,KAAKqlD,EAAA9K,iBAAiB91C,GAAMzF,SAAS,KAI9C,MAEF,KAAKqmD,EAAAhyB,aAAa4lB,MAChB,OAAQoM,EAAAlK,WAAW12C,IACjB,KAAK4gD,EAAA3uB,QAAQirC,OAIX,OAHAruE,KAAK0M,KAAK,aACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQkrC,OAIX,OAHAtuE,KAAK0M,KAAK,aACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQmrC,UAIX,OAHAvuE,KAAK0M,KAAK,gBACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQ2oD,OACb,KAAKh6B,EAAA3uB,QAAQ4oD,OAGX,OAFAhsF,KAAK0M,KAAK,UACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQisD,OAIX,OAHArvF,KAAK0M,KAAK,aACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQ0sD,QAIX,OAHA9vF,KAAK0M,KAAK,cACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQ2sD,SAIX,OAHA/vF,KAAK0M,KAAK,eACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQ6tD,SAIX,OAHAjxF,KAAK0M,KAAK,eACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQktD,WAIX,OAHAtwF,KAAK0M,KAAK,iBACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQ0tD,QAIX,OAHA9wF,KAAK0M,KAAK,cACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQkoC,OACb,KAAKvZ,EAAA3uB,QAAQmoC,OAGX,OAFAvrE,KAAK0M,KAAK,UACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQmrD,OAIX,OAHAvuF,KAAK0M,KAAK,aACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQorD,OAIX,OAHAxuF,KAAK0M,KAAK,aACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQqrD,UAIX,OAHAzuF,KAAK0M,KAAK,gBACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQksD,OAIX,OAHAtvF,KAAK0M,KAAK,aACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQ4sD,QAIX,OAHAhwF,KAAK0M,KAAK,cACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQ6sD,SAIX,OAHAjwF,KAAK0M,KAAK,eACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQ8tD,SAIX,OAHAlxF,KAAK0M,KAAK,eACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQmtD,WAIX,OAHAvwF,KAAK0M,KAAK,iBACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQ2tD,QAIX,OAHA/wF,KAAK0M,KAAK,cACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQk8C,UAGX,OAFAt/E,KAAK0M,KAAK,cACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQm8C,UAGX,OAFAv/E,KAAK0M,KAAK,mBACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQi8C,QAKb,KAAKttB,EAAA3uB,QAAQk7C,cAGX,OAFAt+E,KAAK0M,KAAK,cACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQi7C,cAGX,OAFAr+E,KAAK0M,KAAK,cACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQo7C,cAGX,OAFAx+E,KAAK0M,KAAK,mBACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQm7C,cAGX,OAFAv+E,KAAK0M,KAAK,mBACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQs7C,cAGX,OAFA1+E,KAAK0M,KAAK,cACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQq7C,cAGX,OAFAz+E,KAAK0M,KAAK,cACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQw7C,cAGX,OAFA5+E,KAAK0M,KAAK,mBACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQu7C,cAGX,OAFA3+E,KAAK0M,KAAK,mBACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQqtD,eAIX,OAHAzwF,KAAK0M,KAAK,yBACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQstD,eAIX,OAHA1wF,KAAK0M,KAAK,yBACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQ27C,gBAGX,OAFA/+E,KAAK0M,KAAK,cACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQ+7C,gBAGX,OAFAn/E,KAAK0M,KAAK,cACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQ47C,gBAGX,OAFAh/E,KAAK0M,KAAK,mBACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQg8C,gBAGX,OAFAp/E,KAAK0M,KAAK,mBACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQy7C,gBAGX,OAFA7+E,KAAK0M,KAAK,cACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQ67C,gBAGX,OAFAj/E,KAAK0M,KAAK,cACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQ07C,gBAGX,OAFA9+E,KAAK0M,KAAK,mBACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQ87C,gBAGX,OAFAl/E,KAAK0M,KAAK,mBACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQ+6C,WAGX,OAFAn+E,KAAK0M,KAAK,cACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQg7C,UAGX,OAFAp+E,KAAK0M,KAAK,cACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,IAGzC,KAAK4gD,EAAA3uB,QAAQutD,eAIX,OAHA3wF,KAAK0M,KAAK,yBACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAA3uB,QAAQwtD,eAIX,OAHA5wF,KAAK0M,KAAK,yBACV1M,KAAK2wG,oBAAoB5+C,EAAAjK,cAAc32C,SACvCnR,KAAK0M,KAAK,KAId,MAEF,KAAKqlD,EAAAhyB,aAAa+lB,OAChB,OAAQiM,EAAArK,YAAYv2C,IAClB,KAAK4gD,EAAArpB,SAASqtC,OACd,KAAKhkB,EAAArpB,SAASg4C,OACd,KAAK3uB,EAAArpB,SAASi4C,OACd,KAAK5uB,EAAArpB,SAASk4C,OAIZ,OAHA5gF,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,YACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAASm4C,OACd,KAAK9uB,EAAArpB,SAASo4C,OACd,KAAK/uB,EAAArpB,SAASq4C,OACd,KAAKhvB,EAAArpB,SAASs4C,OAIZ,OAHAhhF,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,YACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAASmlC,OACd,KAAK9b,EAAArpB,SAASu4C,OACd,KAAKlvB,EAAArpB,SAASw4C,OACd,KAAKnvB,EAAArpB,SAASy4C,OAIZ,OAHAnhF,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,YACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAAS44C,OACd,KAAKvvB,EAAArpB,SAAS64C,OACd,KAAKxvB,EAAArpB,SAAS+4C,OACd,KAAK1vB,EAAArpB,SAASg5C,OAIZ,OAHA1hF,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,YACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAASwlC,OAMZ,OALAluE,KAAK0M,KAAK,eACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,YACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,SACxCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAArpB,SAASylC,OACd,KAAKpc,EAAArpB,SAASi5C,OAIZ,OAHA3hF,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,YACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAAS0lC,OAMZ,OALApuE,KAAK0M,KAAK,eACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,YACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,SACxCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAArpB,SAASolC,OACd,KAAK/b,EAAArpB,SAASw5C,OAIZ,OAHAliF,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,YACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAASy5C,MACd,KAAKpwB,EAAArpB,SAAS05C,MAIZ,OAHApiF,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,YACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAAS25C,OACd,KAAKtwB,EAAArpB,SAAS45C,OAIZ,OAHAtiF,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,YACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAASqlC,OACd,KAAKhc,EAAArpB,SAASo5C,OAIZ,OAHA9hF,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,aACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAASulC,OACd,KAAKlc,EAAArpB,SAASu5C,OAIZ,OAHAjiF,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,cACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAASslC,OACd,KAAKjc,EAAArpB,SAASs5C,OAIZ,OAHAhiF,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,aACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAASimD,QAMZ,OALA3uF,KAAK0M,KAAK,cACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,MACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,SACxCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAArpB,SAASomD,QAMZ,OALA9uF,KAAK0M,KAAK,cACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,MACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,SACxCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAArpB,SAAS+iC,MACd,KAAK1Z,EAAArpB,SAASgjC,MACd,KAAK3Z,EAAArpB,SAASujC,MACd,KAAKla,EAAArpB,SAASwjC,MAIZ,OAHAlsE,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,aACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAASijC,MACd,KAAK5Z,EAAArpB,SAASkjC,MACd,KAAK7Z,EAAArpB,SAASyjC,MACd,KAAKpa,EAAArpB,SAAS0jC,MAIZ,OAHApsE,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,aACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAAS2jC,MACd,KAAKta,EAAArpB,SAAS6jC,MACd,KAAKxa,EAAArpB,SAAS+jC,MACd,KAAK1a,EAAArpB,SAASgkC,MAIZ,OAHA1sE,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,YACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAAS4jC,MAKZ,OAJAtsE,KAAK0M,KAAK,SACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,iBACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAASikC,MACd,KAAK5a,EAAArpB,SAASmkC,MACd,KAAK9a,EAAArpB,SAASqkC,MACd,KAAKhb,EAAArpB,SAASskC,MAIZ,OAHAhtE,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,aACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAASkkC,MAKZ,OAJA5sE,KAAK0M,KAAK,SACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,kBACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAASukC,MACd,KAAKlb,EAAArpB,SAASykC,MACd,KAAKpb,EAAArpB,SAAS2kC,MACd,KAAKtb,EAAArpB,SAAS4kC,MAIZ,OAHAttE,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,YACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAASwkC,MAKZ,OAJAltE,KAAK0M,KAAK,SACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,iBACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAAS6kC,MACd,KAAKxb,EAAArpB,SAAS+kC,MACd,KAAK1b,EAAArpB,SAASilC,MACd,KAAK5b,EAAArpB,SAASklC,MAIZ,OAHA5tE,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,aACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAAS8kC,MAKZ,OAJAxtE,KAAK0M,KAAK,SACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,kBACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAAS84C,OAKZ,OAJAxhF,KAAK0M,KAAK,SACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,iBACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAASk5C,OAKZ,OAJA5hF,KAAK0M,KAAK,SACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,iBACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAASkmD,QAMZ,OALA5uF,KAAK0M,KAAK,cACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,MACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,SACxCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAArpB,SAASqmD,QAMZ,OALA/uF,KAAK0M,KAAK,cACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,MACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,SACxCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAArpB,SAAS8jC,MAKZ,OAJAxsE,KAAK0M,KAAK,SACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,iBACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAASokC,MAKZ,OAJA9sE,KAAK0M,KAAK,SACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,kBACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAAS0kC,MAKZ,OAJAptE,KAAK0M,KAAK,SACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,iBACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAASglC,MAKZ,OAJA1tE,KAAK0M,KAAK,SACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,kBACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,IAG1C,KAAK4gD,EAAArpB,SAASynD,YAMZ,OALAnwF,KAAK0M,KAAK,kBACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,MACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,SACxCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAArpB,SAASinD,OAMZ,OALA3vF,KAAK0M,KAAK,aACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,MACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,SACxCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAArpB,SAAS6mD,OAMZ,OALAvvF,KAAK0M,KAAK,aACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,MACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,SACxCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAArpB,SAAS0nD,YAMZ,OALApwF,KAAK0M,KAAK,kBACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,MACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,SACxCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAArpB,SAASknD,OAMZ,OALA5vF,KAAK0M,KAAK,aACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,MACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,SACxCnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAArpB,SAAS8mD,OAMZ,OALAxvF,KAAK0M,KAAK,aACV1M,KAAK2wG,oBAAoB5+C,EAAApK,cAAcx2C,IACvCnR,KAAK0M,KAAK,MACV1M,KAAK2wG,oBAAoB5+C,EAAAnK,eAAez2C,SACxCnR,KAAK0M,KAAK,KAId,OAEF,KAAKqlD,EAAAhyB,aAAa2xB,OAUhB,OATA1xD,KAAK0M,KAAK,WACV1M,KAAK0M,KAAKgkG,EAAiBphG,IAC3BtP,KAAK0M,KAAK,MACV1M,KAAK2wG,oBAAoB5+C,EAAAhI,cAAc54C,IACvCnR,KAAK0M,KAAK,MACV1M,KAAK2wG,oBAAoB5+C,EAAA9H,cAAc94C,IACvCnR,KAAK0M,KAAK,MACV1M,KAAK2wG,oBAAoB5+C,EAAA5H,mBAAmBh5C,SAC5CnR,KAAK0M,KAAK,KAGZ,KAAKqlD,EAAAhyB,aAAa4xB,KAGhB,OAFA3xD,KAAK2wG,oBAAoB5+C,EAAA1H,aAAal5C,SACtCnR,KAAK0M,KAAK,OAGZ,KAAKqlD,EAAAhyB,aAAa2iB,OAQhB,aAPIkuD,EAAS7+C,EAAAxH,eAAep5C,KAC1BnR,KAAK0M,KAAK,WACV1M,KAAK2wG,oBAAoBC,GACzB5wG,KAAK0M,KAAK,QAEV1M,KAAK0M,KAAK,cAId,KAAKqlD,EAAAhyB,aAAa6xB,KAChB,OAAQG,EAAAjH,UAAU35C,IAChB,KAAK4gD,EAAA5f,OAAOqgD,WAEV,YADAxyF,KAAK0M,KAAK,iBAGZ,KAAKqlD,EAAA5f,OAAOugD,WAIV,OAHA1yF,KAAK0M,KAAK,gBACV1M,KAAK2wG,oBAAoB5+C,EAAA7G,eAAe/5C,EAAM,SAC9CnR,KAAK0M,KAAK,KAId,MAEF,KAAKqlD,EAAAhyB,aAAa8xB,IAEhB,YADA7xD,KAAK0M,KAAK,OAGZ,KAAKqlD,EAAAhyB,aAAaguB,YAEhB,YADA/tD,KAAK0M,KAAK,iBAGZ,KAAKqlD,EAAAhyB,aAAaqvB,cAClB,KAAK2C,EAAAhyB,aAAakvB,UAClB,KAAK8C,EAAAhyB,aAAayvB,WAClB,KAAKuC,EAAAhyB,aAAa6vB,cAEpB,MAAM,IAAItgC,MAAM,oBAGV+gF,EAAApuG,UAAAyK,KAAR,SAAaT,GAEXjM,KAAKiM,KAAKS,KAAKT,IAGjBokG,EAAApuG,UAAAk+D,OAAA,WACE,IAAI5c,EAAMvjD,KAAKiM,KAAKU,KAAK,IAEzB,OADA3M,KAAKiM,KAAO,GACLs3C,GAEX8sD,EA5yBA,GA8yBA,SAASK,EAAiBphG,GACxB,OAAQA,GACN,KAAKyiD,EAAAjyB,WAAWsY,KAAM,MAAO,OAC7B,KAAK2Z,EAAAjyB,WAAW15B,IAAK,MAAO,MAC5B,KAAK2rD,EAAAjyB,WAAWz5B,IAAK,MAAO,MAC5B,KAAK0rD,EAAAjyB,WAAWj5B,IAAK,MAAO,MAC5B,KAAKkrD,EAAAjyB,WAAWh5B,IAAK,MAAO,MAC5B,KAAKirD,EAAAjyB,WAAW/4B,KAAM,MAAO,OAC7B,KAAKgrD,EAAAjyB,WAAWiuB,YAAa,MAAM,IAAIz+B,MAAM,oBAC7C,KAAKyiC,EAAAjyB,WAAW4sD,KAAM,MAAM,IAAIp9D,MAAM,aACtC,QAAS,MAAM,IAAIA,MAAM,oBAxzBhB5vB,EAAA2wG,u5BCxDZ,IAAA9iG,EAAApN,EAAA,GAID2xD,EAAA3xD,EAAA,GAyBA4jB,EAAA5jB,EAAA,GAIA0J,EAAA1J,EAAA,GAKA2wG,EAAA,WAUE,SAAAA,EAAYv6E,EAAkBw6E,QAAA,IAAAA,OAAA,GAH9B/wG,KAAAgxG,KAA4B,IAAI5pG,IAI9BpH,KAAKu2B,QAAUA,EACfv2B,KAAK+wG,eA6GT,OAzGED,EAAA7uG,UAAAgvG,KAAA,uBACE,IAAiB,IAAAz5E,EAAAhM,EAAAxrB,KAAKu2B,QAAQtP,YAAY5S,UAAQgd,EAAAmG,EAAAxoB,QAAAqiB,EAAA3F,KAAA2F,EAAAmG,EAAAxoB,OAAE,CAA/C,IAAI2b,EAAI0G,EAAA/vB,MACPqpB,EAAKhf,OAAOiV,YAAcmD,EAAA3D,WAAWsQ,YAAY1wB,KAAKkxG,UAAUvmF,uGAKxEmmF,EAAA7uG,UAAAivG,UAAA,SAAUvmF,eACJhU,EAAUgU,EAAKjrB,QACnB,GAAIiX,MACF,IAA2B,IAAA27D,EAAA9mD,EAAA7U,GAAO47D,EAAAD,EAAAtjE,QAAAujE,EAAA7mD,KAAA6mD,EAAAD,EAAAtjE,OAAA,CAAzB,IAAAqiB,EAAAzF,EAAA2mD,EAAAjxE,MAAA,GAACV,EAAAywB,EAAA,GAAME,EAAAF,EAAA,GAAoBrxB,KAAKmxG,aAAavwG,EAAM2wB,qGAE9D,IAAI1F,EAAclB,EAAKkB,YACvB,GAAIA,MACF,IAAuB,IAAAqoD,EAAA1oD,EAAAK,GAAWsoD,EAAAD,EAAAllE,QAAAmlE,EAAAzoD,KAAAyoD,EAAAD,EAAAllE,OAAA,CAA7B,IAAI8c,EAAUqoD,EAAA7yE,MAAiBtB,KAAKkxG,UAAUplF,uGAKvDglF,EAAA7uG,UAAAkvG,aAAA,SAAavwG,EAAcqS,GACzB,IAAIA,EAAQoK,GAAG9P,EAAAlL,YAAYw0D,UAAa72D,KAAK+wG,eAA7C,CACA,IAAIC,EAAOhxG,KAAKgxG,KAChB,GAAIA,EAAK/nF,IAAIhW,GACXjT,KAAKoxG,WAAWxwG,EAAMqS,EAAiB+9F,EAAK9vG,IAAI+R,SAIlD,OADA+9F,EAAKxzF,IAAIvK,EAASrS,GACVqS,EAAQpF,MACd,KAAKikD,EAAAlrC,YAAYhJ,OACX3K,EAAQoK,GAAG9P,EAAAlL,YAAY0wE,WAAW/yE,KAAKqxG,YAAYzwG,EAAcqS,GACrE,MAEF,KAAK6+C,EAAAlrC,YAAYiR,KACX5kB,EAAQoK,GAAG9P,EAAAlL,YAAY0wE,WAAW/yE,KAAKsxG,UAAU1wG,EAAYqS,GACjE,MAEF,KAAK6+C,EAAAlrC,YAAYqK,mBACfjxB,KAAKuxG,uBAAuB3wG,EAAyBqS,GACrD,MAEF,KAAK6+C,EAAAlrC,YAAY+G,gBACf3tB,KAAKwxG,oBAAoB5wG,EAAsBqS,GAC/C,MAEF,KAAK6+C,EAAAlrC,YAAYgL,MACH3e,EAASoK,GAAG9P,EAAAlL,YAAY0wE,WAAW/yE,KAAKyxG,WAAW7wG,EAAaqS,GAC5E,MAEF,KAAK6+C,EAAAlrC,YAAY4K,mBACfxxB,KAAK0xG,uBAAuB9wG,EAAyBqS,GACrD,MAEF,KAAK6+C,EAAAlrC,YAAY+K,SACf,IAAIggF,EAAiB1+F,EACjBpS,EAAS8wG,EAAK11E,eACdp7B,GAAQb,KAAK4xG,cAAchxG,EAAMC,GACrC,IAAI8xE,EAASg/B,EAAKz1E,eACdy2C,GAAQ3yE,KAAK4xG,cAAchxG,EAAM+xE,GACrC,MAEF,KAAK7gB,EAAAlrC,YAAYgR,WA+bvB,SAASi6E,EAAkB5+F,mBACzB,IAAI0D,EAAU1D,EAAQ0D,QACtB,GAAIA,MACF,IAAmB,IAAA2a,EAAA9F,EAAA7U,EAAQtC,UAAQwd,EAAAP,EAAAtiB,QAAA6iB,EAAAnG,KAAAmG,EAAAP,EAAAtiB,OAAE,CAAhC,IAAIuiB,EAAMM,EAAAvwB,MACb,OAAQiwB,EAAO1jB,MACb,KAAKikD,EAAAlrC,YAAYqK,mBACf,IAAIyH,EAAgCnH,EAAQmH,UAC5C,GAAIA,MACF,IAAqB,IAAA5G,GAAAggF,OAAA,EAAAtmF,EAAAkN,EAAUrkB,WAAQsX,EAAAmG,EAAA9iB,QAAA2c,EAAAD,KAAAC,EAAAmG,EAAA9iB,OAAE,CAApC,IAAIiqB,EAAQtN,EAAArqB,MACf,GAAI23B,EAAS5b,GAAG9P,EAAAlL,YAAY0wE,UAAW,OAAO,oGAGlD,MAEF,KAAKjhB,EAAAlrC,YAAY+G,gBACf,IAAI+K,EAA6BnH,EAAQmH,UACzC,GAAIA,MACF,IAAqB,IAAAjM,GAAAslF,OAAA,EAAAvmF,EAAAkN,EAAUrkB,WAAQwY,EAAAJ,EAAAzd,QAAA6d,EAAAnB,KAAAmB,EAAAJ,EAAAzd,OAAE,CAApC,IAAIiqB,EAAQpM,EAAAvrB,MACf,GAAI23B,EAAS5b,GAAG9P,EAAAlL,YAAY0wE,UAAW,OAAO,oGAGlD,MAEF,QACE,GAAIxhD,EAAOlU,GAAG9P,EAAAlL,YAAY0wE,WAAa8+B,EAAkBtgF,GAAS,OAAO,qGAMjF,OAAO,GA5dGsgF,CAAkB5+F,IAAUjT,KAAKgyG,eAAepxG,EAAMqS,GAC1D,MAEF,KAAK6+C,EAAAlrC,YAAY8Q,eAAgB,MACjC,QAASttB,QAAO,MAIZ0mG,EAAA7uG,UAAAsvG,uBAAR,SAA+B3wG,EAAcqS,WACvCylB,EAAYzlB,EAAQylB,UACxB,GAAIA,MACF,IAAqB,IAAAlB,EAAAhM,EAAAkN,EAAUrkB,UAAQgd,EAAAmG,EAAAxoB,QAAAqiB,EAAA3F,KAAA2F,EAAAmG,EAAAxoB,OAAE,CAApC,IAAIiqB,EAAQ5H,EAAA/vB,MACX23B,EAAS5b,GAAG9P,EAAAlL,YAAY0wE,WAAW/yE,KAAK4xG,cAAchxG,EAAgBq4B,uGAKxE63E,EAAA7uG,UAAAuvG,oBAAR,SAA4B5wG,EAAcqS,WACpCylB,EAAYzlB,EAAQylB,UACxB,GAAIA,MACF,IAAqB,IAAAlB,EAAAhM,EAAAkN,EAAUrkB,UAAQgd,EAAAmG,EAAAxoB,QAAAqiB,EAAA3F,KAAA2F,EAAAmG,EAAAxoB,OAAE,CAApC,IAAIiqB,EAAQ5H,EAAA/vB,MACX23B,EAAS5b,GAAG9P,EAAAlL,YAAY0wE,WAAW/yE,KAAKiyG,WAAWrxG,EAAaq4B,uGAKlE63E,EAAA7uG,UAAAyvG,uBAAR,SAA+B9wG,EAAcqS,GAO3C7I,QAAO,IAWX0mG,EAzHA,GA4HAoB,EAAA,SAAA11F,GAWE,SAAA01F,EAAY37E,EAAkBw6E,QAAA,IAAAA,OAAA,GAA9B,IAAAr0F,EACEF,EAAAhc,KAAAR,KAAMu2B,EAASw6E,IAAe/wG,YALxB0c,EAAAlQ,GAAe,GACfkQ,EAAAy1F,YAAmB,IAuK7B,OA/KgC11F,EAAAy1F,EAAA11F,GAGvB01F,EAAAE,MAAP,SAAa77E,GACX,OAAO,IAAI27E,EAAW37E,GAAS67E,SAWjCF,EAAAjwG,UAAAovG,YAAA,SAAYzwG,EAAcqS,GACxB,IAAIzG,EAAKxM,KAAKwM,GACVkwE,EAAUzpE,EAAQoK,GAAG9P,EAAAlL,YAAY61B,SAMrC,GALAruB,EAAAwoG,OAAO7lG,EAAIxM,KAAKmyG,aACZz1B,GAASlwE,EAAGE,KAAK,UACrBF,EAAGE,KAAK1M,KAAKsyG,aAAar/F,EAAQ3D,OAClC9C,EAAGE,KAAK,KACRF,EAAGE,KAAK9L,GACJ87E,EACF,OAAQzpE,EAAQ+kB,mBACd,OACExrB,EAAGE,KAAK,OACRF,EAAGE,KAAKmkG,cAAc59F,EAAQglB,uBAC9B,MAEF,OACEzrB,EAAGE,KAAK,OACRF,EAAGE,KAAKuG,EAAQklB,mBAAmBzsB,YACnC,MAEF,QAAStB,QAAO,GAGpBoC,EAAGE,KAAK,QAGVwlG,EAAAjwG,UAAAqvG,UAAA,SAAU1wG,EAAcqS,eAClBzG,EAAKxM,KAAKwM,GACd3C,EAAAwoG,OAAO7lG,EAAIxM,KAAKmyG,eAChB3lG,EAAGE,KAAK,cACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,QACR,IAAIiK,EAAU1D,EAAQ0D,QACtB,GAAIA,EAAS,KACX,IAA2B,IAAA47F,EAAA/mF,EAAA7U,GAAO67F,EAAAD,EAAAvjG,QAAAwjG,EAAA9mF,KAAA8mF,EAAAD,EAAAvjG,OAAE,CAA3B,IAAAqiB,EAAAzF,EAAA4mF,EAAAlxG,MAAA,GAACmxG,EAAAphF,EAAA,GACR,IADcE,EAAAF,EAAA,IACHxjB,MAAQikD,EAAAlrC,YAAYwR,UAAW,CACxC,IAAIskD,EAAsBnrD,EAAQlU,GAAG9P,EAAAlL,YAAY61B,SACjDruB,EAAAwoG,OAAO7lG,EAAIxM,KAAKmyG,aACZz1B,EAASlwE,EAAGE,KAAK,UAChBF,EAAGE,KAAK,aACbF,EAAGE,KAAK,kBACRF,EAAGE,KAAK+lG,GACJ/1B,IACFlwE,EAAGE,KAAK,OACRtC,OAA4C,GAAzBmnB,EAAQyG,mBAC3BxrB,EAAGE,KAAKkzC,QAAoBruB,EAAQ0G,sBAAsBvsB,SAAS,MAErEc,EAAGE,KAAK,8GAGZ,IAAmB,IAAA4kB,EAAA9F,EAAA7U,EAAQtC,UAAQwd,EAAAP,EAAAtiB,QAAA6iB,EAAAnG,KAAAmG,EAAAP,EAAAtiB,OAAE,CAAhC,IAAIuiB,KAAMM,EAAAvwB,OACFuM,MAAQikD,EAAAlrC,YAAYwR,WAAWp4B,KAAKmxG,aAAa5/E,EAAO3wB,KAAM2wB,sGAG7E1nB,EAAAwoG,OAAO7lG,IAAMxM,KAAKmyG,aAClB3lG,EAAGE,KAAK,QAGVwlG,EAAAjwG,UAAA2vG,cAAA,SAAchxG,EAAcqS,WACtBzG,EAAKxM,KAAKwM,GACV0N,EAAYjH,EAAQiH,UACxBrQ,EAAAwoG,OAAO7lG,EAAIxM,KAAKmyG,aAChB3lG,EAAGE,KAAK1M,KAAKsyG,aAAap4F,EAAUxK,aACpClD,EAAGE,KAAK,KACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,KAIR,IAHA,IAAI+C,EAAayK,EAAUwgB,eACvBo6B,EAAgBrlD,EAAWtD,OAEtB9L,EAAI,EAAGA,EAAIy0D,IAAiBz0D,EAC/BA,GAAGmM,EAAGE,KAAK,MAEfF,EAAGE,KAAK1M,KAAKsyG,aAAa7iG,EAAWpP,KACrCmM,EAAGE,KAAK,KACRF,EAAGE,KAAKwN,EAAU2gB,iBAAiBx6B,IAErCmM,EAAGE,KAAK,QACR,IAAIiK,EAAU1D,EAAQ0D,QACtB,GAAIA,GAAWA,EAAQ4kC,KAAM,CAC3B1xC,EAAAwoG,OAAO7lG,EAAIxM,KAAKmyG,aAChB3lG,EAAGE,KAAK,cACRF,EAAGE,KAAKuG,EAAQrS,MAChB4L,EAAGE,KAAK,YACR,IAAmB,IAAA8qB,EAAAhM,EAAA7U,EAAQtC,UAAQgd,EAAAmG,EAAAxoB,QAAAqiB,EAAA3F,KAAA2F,EAAAmG,EAAAxoB,OAAA,CAA9B,IAAIuiB,EAAMF,EAAA/vB,MAAsBtB,KAAKmxG,aAAa5/E,EAAO3wB,KAAM2wB,qGACpE1nB,EAAAwoG,OAAO7lG,IAAMxM,KAAKmyG,aAClB3lG,EAAGE,KAAK,SAIZwlG,EAAAjwG,UAAAgwG,WAAA,SAAWrxG,EAAcqS,GACvB,IAAIzG,EAAKxM,KAAKwM,GACd3C,EAAAwoG,OAAO7lG,EAAIxM,KAAKmyG,eAChB3lG,EAAGE,KAAK,cACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,QAER7C,EAAAwoG,OAAO7lG,IAAMxM,KAAKmyG,aAClB3lG,EAAGE,KAAK,QAGVwlG,EAAAjwG,UAAAywG,eAAA,SAAe9xG,EAAcqS,GAC3BjT,KAAKiyG,WAAWrxG,EAAMqS,IAGxBi/F,EAAAjwG,UAAAwvG,WAAA,SAAW7wG,EAAcqS,KAIzBi/F,EAAAjwG,UAAA+vG,eAAA,SAAepxG,EAAcqS,WACvBzG,EAAKxM,KAAKwM,GACd3C,EAAAwoG,OAAO7lG,EAAIxM,KAAKmyG,eAChB3lG,EAAGE,KAAK,cACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,QACR,IAAIiK,EAAU1D,EAAQ0D,QACtB,GAAIA,MACF,IAAmB,IAAA6gB,EAAAhM,EAAA7U,EAAQtC,UAAQgd,EAAAmG,EAAAxoB,QAAAqiB,EAAA3F,KAAA2F,EAAAmG,EAAAxoB,OAAA,CAA9B,IAAIuiB,EAAMF,EAAA/vB,MAAsBtB,KAAKmxG,aAAa5/E,EAAO3wB,KAAM2wB,qGAEtE1nB,EAAAwoG,OAAO7lG,IAAMxM,KAAKmyG,aAClB3lG,EAAGE,KAAK,QAGVwlG,EAAAjwG,UAAAmvG,WAAA,SAAWxwG,EAAcqS,EAAkB4zE,KAI3CqrB,EAAAjwG,UAAAqwG,aAAA,SAAahjG,GACX,OAAQA,EAAKzB,MACX,OAAkB,MAAO,OACzB,OAAmB,MAAO,QAC1B,OAAmB,MAAO,OAC1B,OAAmB,MAAO,YAC1B,OAAqB,OAAO7N,KAAKu2B,QAAQpN,QAAQY,SAAW,YAAc,OAC1E,OAAkB,MAAO,QACzB,OAAmB,MAAO,iBAC1B,OAAmB,MAAO,gBAE1B,OAAmB,MAAO,qBAC1B,OAAqB,OAAO/pB,KAAKu2B,QAAQpN,QAAQY,SAAW,qBAAuB,gBAEnF,QAAoB,MAAO,UAC3B,QAAmB,MAAO,qBAC1B,QAAmB,MAAO,sBAC1B,QAAoB,MAAO,OAC3B,QAEE,OADA3f,QAAO,GACA,KAKb8nG,EAAAjwG,UAAAmwG,MAAA,WACE,IAAI5lG,EAAKxM,KAAKwM,GAMd,OALAA,EAAGE,KAAK,4BACN1M,KAAKmyG,YACPnyG,KAAKixG,SACHjxG,KAAKmyG,YACP3lG,EAAGE,KAAK,OACDF,EAAGG,KAAK,KAEnBulG,EA/KA,CAAgCpB,GAAnBpxG,EAAAwyG,aAkLb,IAAAS,EAAA,SAAAn2F,GAYE,SAAAm2F,EAAYp8E,EAAkBw6E,QAAA,IAAAA,OAAA,GAA9B,IAAAr0F,EACEF,EAAAhc,KAAAR,KAAMu2B,EAASw6E,IAAe/wG,YANxB0c,EAAAlQ,GAAe,GACfkQ,EAAAy1F,YAAmB,EACnBz1F,EAAAk2F,QAAuB,IAAIzrG,MA+MrC,OAxNgCsV,EAAAk2F,EAAAn2F,GAGvBm2F,EAAAP,MAAP,SAAa77E,GACX,OAAO,IAAIo8E,EAAWp8E,GAAS67E,SAYjCO,EAAA1wG,UAAAovG,YAAA,SAAYzwG,EAAcqS,GACxB,IAAIzG,EAAKxM,KAAKwM,GACVkwE,EAAUzpE,EAAQoK,GAAG9P,EAAAlL,YAAY61B,SACrCruB,EAAAwoG,OAAO7lG,EAAIxM,KAAKmyG,aACZl/F,EAAQoK,GAAG9P,EAAAlL,YAAY4xB,QACrByoD,EAASlwE,EAAGE,KAAK,oBAChBF,EAAGE,KAAK,WAETgwE,EAASlwE,EAAGE,KAAK,iBAChBF,EAAGE,KAAK,eAEfF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,MACRF,EAAGE,KAAK1M,KAAKsyG,aAAar/F,EAAQ3D,OAClC9C,EAAGE,KAAK,OACR1M,KAAKgyG,eAAepxG,EAAMqS,IAG5B0/F,EAAA1wG,UAAAqvG,UAAA,SAAU1wG,EAAcqS,WAClBzG,EAAKxM,KAAKwM,GACd3C,EAAAwoG,OAAO7lG,EAAIxM,KAAKmyG,eAChB3lG,EAAGE,KAAK,gBACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,QACR,IAAIiK,EAAU1D,EAAQ0D,QACtB,GAAIA,EAAS,CACX,IAAIk8F,EAAal8F,EAAQ4kC,SACzB,IAA2B,IAAAu3D,EAAAtnF,EAAA7U,GAAOo8F,EAAAD,EAAA9jG,QAAA+jG,EAAArnF,KAAAqnF,EAAAD,EAAA9jG,OAAE,CAA3B,IAAAwoB,EAAA5L,EAAAmnF,EAAAzxG,MAAA,GAAC0xG,EAAAx7E,EAAA,GAAMjG,EAAAiG,EAAA,GACVjG,EAAO1jB,MAAQikD,EAAAlrC,YAAYwR,YAC7BvuB,EAAAwoG,OAAO7lG,EAAIxM,KAAKmyG,aAChB3lG,EAAGE,KAAKsmG,GACJzhF,EAAOlU,GAAG9P,EAAAlL,YAAY61B,WACxB1rB,EAAGE,KAAK,OACRtC,OAA4C,GAAzBmnB,EAAQyG,mBAC3BxrB,EAAGE,KAAKkzC,QAAoBruB,EAAQ0G,sBAAsBvsB,SAAS,MAErEc,EAAGE,KAAK,SACNmmG,qGAGFA,GAAY7yG,KAAKgyG,eAAepxG,EAAMqS,GAE5CpJ,EAAAwoG,OAAO7lG,IAAMxM,KAAKmyG,aAClB3lG,EAAGE,KAAK,QAGVimG,EAAA1wG,UAAA2vG,cAAA,SAAchxG,EAAcqS,GAC1B,IAAIA,EAAQsK,MAAMhQ,EAAAlL,YAAYw0D,QAAUtpD,EAAAlL,YAAYyxB,KAApD,CACA,IAAItnB,EAAKxM,KAAKwM,GACV0N,EAAYjH,EAAQiH,UAIxB,GAHArQ,EAAAwoG,OAAO7lG,EAAIxM,KAAKmyG,aACZl/F,EAAQoK,GAAG9P,EAAAlL,YAAYy0D,YAAYtqD,EAAGE,KAAK,cAC3CuG,EAAQoK,GAAG9P,EAAAlL,YAAY4xB,SAASznB,EAAGE,KAAK,WACxCuG,EAAQoK,GAAG9P,EAAAlL,YAAYwxB,KAMzB,OALArnB,EAAGE,KAAK,QACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,QACRF,EAAGE,KAAK1M,KAAKsyG,aAAap4F,EAAUxK,kBACpClD,EAAGE,KAAK,OAGHuG,EAAQsK,MAAMhQ,EAAAlL,YAAY4xB,OAAS1mB,EAAAlL,YAAY2zB,WAAWxpB,EAAGE,KAAK,oBACvEF,EAAGE,KAAK9L,GAEV4L,EAAGE,KAAK,KAIR,IAHA,IAAI+C,EAAayK,EAAUwgB,eACvBo6B,EAAgBrlD,EAAWtD,OAEtB9L,EAAI,EAAGA,EAAIy0D,IAAiBz0D,EAC/BA,GAAGmM,EAAGE,KAAK,MAEfF,EAAGE,KAAKwN,EAAU2gB,iBAAiBx6B,IACnCmM,EAAGE,KAAK,MACRF,EAAGE,KAAK1M,KAAKsyG,aAAa7iG,EAAWpP,KAEnC4S,EAAQsK,MAAMhQ,EAAAlL,YAAYid,YAAc/R,EAAAlL,YAAYyxB,KACtDtnB,EAAGE,KAAK,MAERF,EAAGE,KAAK,OACRF,EAAGE,KAAK1M,KAAKsyG,aAAap4F,EAAUxK,cAEtClD,EAAGE,KAAK,OACR1M,KAAKgyG,eAAepxG,EAAMqS,KAG5B0/F,EAAA1wG,UAAAgwG,WAAA,SAAWrxG,EAAcqS,eACnBzG,EAAKxM,KAAKwM,GACVymG,EAAchgG,EAAQpF,MAAQikD,EAAAlrC,YAAY8V,UAC9C7yB,EAAAwoG,OAAO7lG,EAAIxM,KAAKmyG,eACZc,EACFzmG,EAAGE,KAAK,sBAEJuG,EAAQoK,GAAG9P,EAAAlL,YAAY+xB,WAAW5nB,EAAGE,KAAK,aAC9CF,EAAGE,KAAK,kBAEVF,EAAGE,KAAK9L,GAMR4L,EAAGE,KAAK,QACR,IAAI2qE,EAAgBpkE,EAAQhR,UAAU0U,QACtC,GAAI0gE,MACF,IAAmB,IAAAhmD,EAAA7F,EAAA6rD,EAAchjE,UAAQid,EAAAD,EAAAriB,QAAAsiB,EAAA5F,KAAA4F,EAAAD,EAAAriB,OAAA,CAApC,IAAIuiB,EAAMD,EAAAhwB,MAA4BtB,KAAKmxG,aAAa5/E,EAAO3wB,KAAM2wB,qGAE5E,IAAIH,EAAkBne,EAAQ0D,QAC9B,GAAIya,MACF,IAAmB,IAAAS,EAAArG,EAAA4F,EAAgB/c,UAAQyd,EAAAD,EAAA7iB,QAAA8iB,EAAApG,KAAAoG,EAAAD,EAAA7iB,OAAA,CAAlCuiB,EAAMO,EAAAxwB,MAA8BtB,KAAKmxG,aAAa5/E,EAAO3wB,KAAM2wB,qGAE9E1nB,EAAAwoG,OAAO7lG,IAAMxM,KAAKmyG,aAClB3lG,EAAGE,KAAK,QAGVimG,EAAA1wG,UAAAywG,eAAA,SAAe9xG,EAAcqS,GAC3BjT,KAAKiyG,WAAWrxG,EAAMqS,IAGxB0/F,EAAA1wG,UAAAwvG,WAAA,SAAW7wG,EAAcqS,GACvB,IAAIA,EAAQoK,GAAG9P,EAAAlL,YAAYw0D,SAA3B,CACA,IAAIrqD,EAAKxM,KAAKwM,GACd3C,EAAAwoG,OAAO7lG,EAAIxM,KAAKmyG,aACZl/F,EAAQoK,GAAG9P,EAAAlL,YAAYy0D,YAAYtqD,EAAGE,KAAK,cAC3CuG,EAAQoK,GAAG9P,EAAAlL,YAAY4xB,SAASznB,EAAGE,KAAK,WACxCuG,EAAQoK,GAAG9P,EAAAlL,YAAY8xB,WAAW3nB,EAAGE,KAAK,aAC9CF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,MACRF,EAAGE,KAAK1M,KAAKsyG,aAAar/F,EAAQ3D,OAClC9C,EAAGE,KAAK,SAGVimG,EAAA1wG,UAAA+vG,eAAA,SAAepxG,EAAcqS,WACvB0D,EAAU1D,EAAQ0D,QACtB,GAAIA,GAAWA,EAAQ4kC,KAAM,CAC3B,IAAI/uC,EAAKxM,KAAKwM,GACd3C,EAAAwoG,OAAO7lG,EAAIxM,KAAKmyG,eAChB3lG,EAAGE,KAAK,qBACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,YACR,IAAmB,IAAA8qB,EAAAhM,EAAA7U,EAAQtC,UAAQgd,EAAAmG,EAAAxoB,QAAAqiB,EAAA3F,KAAA2F,EAAAmG,EAAAxoB,OAAA,CAA9B,IAAIuiB,EAAMF,EAAA/vB,MAAsBtB,KAAKmxG,aAAa5/E,EAAO3wB,KAAM2wB,qGACpE1nB,EAAAwoG,OAAO7lG,IAAMxM,KAAKmyG,aAClB3lG,EAAGE,KAAK,SAIZimG,EAAA1wG,UAAAmvG,WAAA,SAAWxwG,EAAcqS,EAAkB4zE,GACzC,IAAIr6E,EAAKxM,KAAKwM,GACd3C,EAAAwoG,OAAO7lG,EAAIxM,KAAKmyG,aAChB3lG,EAAGE,KAAK,iBACRF,EAAGE,KAAK9L,GACR4L,EAAGE,KAAK,cACRF,EAAGE,KAAKm6E,GACRr6E,EAAGE,KAAK,QAGVimG,EAAA1wG,UAAAqwG,aAAA,SAAahjG,GACX,OAAQA,EAAKzB,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,OAAO7N,KAAKu2B,QAAQpN,QAAQY,SAAW,MAAQ,MACpE,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAE1B,OAAmB,MAAO,MAC1B,OAAqB,OAAO/pB,KAAKu2B,QAAQpN,QAAQY,SAAW,MAAQ,MAEpE,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAoB,MAAO,OAC3B,QAAoB,MAAO,OAC3B,QAEE,OADA3f,QAAO,GACA,QAKbuoG,EAAA1wG,UAAAmwG,MAAA,WACE,IAAI5lG,EAAKxM,KAAKwM,GAgBd,OAfAA,EAAGE,KAAK,+BACRF,EAAGE,KAAK,yBACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,yBACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACN1M,KAAKmyG,YACPnyG,KAAKixG,SACHjxG,KAAKmyG,YACP3lG,EAAGE,KAAK,OACRF,EAAGE,KAAK,8BACD1M,KAAKwM,GAAGG,KAAK,KAExBgmG,EAxNA,CAAgC7B,GAAnBpxG,EAAAizG,4aCpVb,IAAAplG,EAAApN,EAAA,GAMA2xD,EAAA3xD,EAAA,GAIAqN,EAAArN,EAAA,GASA0jB,EAAA1jB,EAAA,GAKA0J,EAAA1J,EAAA,GAIA4jB,EAAA5jB,EAAA,GA2DA+yG,EAAA,SAAA12F,GAkBE,SAAA02F,IAAA,IAAAx2F,EACEF,EAAAhc,KAAAR,OAAOA,YAdT0c,EAAAy2F,QAAoB,IAAIlsG,MAExByV,EAAA02F,QAAuB,IAAIjsG,IAE3BuV,EAAA22F,QAAuB,IAAIlsG,IAE3BuV,EAAA49C,UAAmC,KAInC59C,EAAA42F,UAAiC,IAAIlsG,IAqf7BsV,EAAA62F,8BAAqC,EA8drC72F,EAAA82F,oBAA4C,KA98BlD92F,EAAK6Z,QAAU,IAAIu7B,EAAAhrC,QAAQpK,EAAK3P,eAwtHpC,OA5uH4B0P,EAAAy2F,EAAA12F,GAwB1B02F,EAAAjxG,UAAAwxG,UAAA,SACExnG,EACAyL,EACAg8F,GAEA,IAAI9nG,EAAiB/B,EAAAgO,cAAcH,GAC/BM,EAAe+L,EAAA9L,mBAAmBrM,GAEtC,IAAI5L,KAAKqzG,QAAQpqF,IAAIjR,GAArB,CACAhY,KAAKqzG,QAAQ5pF,IAAIzR,GACjBhY,KAAKozG,QAAQ3pF,IAAIzR,GAGjB,IAAIrM,EAAS,IAAIoY,EAAAzD,OACf1U,EACAK,EACAynG,EACI3vF,EAAA3D,WAAWsQ,WACXhZ,EAAKI,WAAWvK,EAAAzK,gBACd4U,EAAKi8F,QAAQpmG,EAAAjL,eAAgBiL,EAAAzK,eAAeqJ,QAAU,EACpD4X,EAAA3D,WAAWa,cACX8C,EAAA3D,WAAWY,QACb+C,EAAA3D,WAAWwzF,MAEfr9E,EAAUv2B,KAAKu2B,QACnBA,EAAQxP,QAAQra,KAAKf,GACrB3L,KAAK6zG,cAAgBloG,EAGrB,IAAImoG,EAAK,IAAItmG,EAAAysD,UAAUtuD,EAAQ4qB,EAAQxpB,aACvC+mG,EAAGx5C,UAAYt6D,KAAKs6D,UACpB3uD,EAAO8U,UAAYqzF,EAEnB,IADA,IAAI39F,EAAaxK,EAAOwK,YAChB29F,EAAG72C,KAAKzvD,EAAAC,MAAMivD,YAAY,CAChC,IAAIzlD,EAAYjX,KAAK+zG,uBAAuBD,EAAI,MAC5C78F,GAAWd,EAAWzJ,KAAKuK,GAEjC68F,EAAG3zC,WAIL+yC,EAAAjxG,UAAA8xG,uBAAA,SACED,EACA1yB,QAAA,IAAAA,MAAA,MAOA,IALA,IAAIvsE,EAAQtH,EAAAlL,YAAY+a,KACpB42F,GAAiB,EAGjBp9F,EAAqC,KAClCk9F,EAAG72C,KAAKzvD,EAAAC,MAAMuuD,KAAK,CACpBg4C,EAAW,IAAGA,EAAWF,EAAG55C,UAChC,IAAIx2C,EAAY1jB,KAAKi0G,eAAeH,GAC/BpwF,EAIA9M,EACAA,EAAWlK,KAAKgX,GADJ9M,EAAa,CAAC8M,GAH7B1jB,KAAKk0G,cAAcJ,GAQvB,IAAIK,EAAmB,EACnBC,EAAiB,EACjBC,EAAoB,EACpBC,EAAkB,EAClBR,EAAG72C,KAAKzvD,EAAAC,MAAMqU,UACZkyF,EAAW,IAAGA,EAAWF,EAAG55C,UAChCrlD,GAAStH,EAAAlL,YAAYyf,OACrBqyF,EAAcL,EAAG55C,SACjBk6C,EAAYN,EAAGjzF,IACXizF,EAAG72C,KAAKzvD,EAAAC,MAAMsoD,WAChBs+C,EAAeP,EAAG55C,SAClBo6C,EAAaR,EAAGjzF,MAIpB,IAAI0zF,EAAoB,EACpBC,EAAkB,EAClBC,EAAgC,MAAbrzB,GAAqBA,EAAU/jE,GAAG9P,EAAAlL,YAAY0zB,SACjE+9E,EAAG72C,KAAKzvD,EAAAC,MAAM4oB,SACZo+E,EACFz0G,KAAKqN,MACHwW,EAAApZ,eAAeiqG,gEACfZ,EAAG/oG,UAGDipG,EAAW,IAAGA,EAAWF,EAAG55C,UAChCq6C,EAAeP,EACfQ,EAAaV,EAAGjzF,IAChBhM,GAAStH,EAAAlL,YAAYg0B,QAAU9oB,EAAAlL,YAAY0zB,SAEpC0+E,IACT5/F,GAAStH,EAAAlL,YAAY0zB,SAIvB,IAAI9e,EAA8B,KAG9B09F,EAAQb,EAAGn3C,OAEf,OADIq3C,EAAW,IAAGA,EAAWF,EAAG15C,cACxBu6C,GACN,KAAKnnG,EAAAC,MAAM4kB,MACTyhF,EAAG9kG,OACH6F,GAAStH,EAAAlL,YAAYgwB,MAEnBpb,EADE68F,EAAG72C,KAAKzvD,EAAAC,MAAMoqB,MACJ73B,KAAK40G,UAAUd,EAAIj/F,EAAO+B,EAAYo9F,GAEtCh0G,KAAK60G,cAAcf,EAAIj/F,EAAO+B,EAAYo9F,GAExDp9F,EAAa,KACb,MAEF,KAAKpJ,EAAAC,MAAMgpD,IAAK5hD,GAAStH,EAAAlL,YAAYo0D,IACrC,KAAKjpD,EAAAC,MAAMypD,IACT48C,EAAG9kG,OACHiI,EAAYjX,KAAK60G,cAAcf,EAAIj/F,EAAO+B,EAAYo9F,GACtDp9F,EAAa,KACb,MAEF,KAAKpJ,EAAAC,MAAMoqB,KACTi8E,EAAG9kG,OACHiI,EAAYjX,KAAK40G,UAAUd,EAAIj/F,EAAO+B,EAAYo9F,GAClDp9F,EAAa,KACb,MAEF,KAAKpJ,EAAAC,MAAM+R,SACTs0F,EAAG9kG,OACHiI,EAAYjX,KAAK80G,cAAchB,EAAIj/F,EAAO+B,EAAYo9F,GACtDp9F,EAAa,KACb,MAEF,KAAKpJ,EAAAC,MAAM2mB,SACT,IAAI+oC,EAAQ22C,EAAG52C,OAEf,GADA42C,EAAG9kG,QACE8kG,EAAG72C,KAAKzvD,EAAAC,MAAM2R,OAAQ,CACzB00F,EAAGv2C,MAAMJ,GACTlmD,EAAYjX,KAAK+0G,eAAejB,GAAI,GACpC,MAEAA,EAAGx2C,QAAQH,GAEbtoD,GAAStH,EAAAlL,YAAY+xB,SAGvB,KAAK5mB,EAAAC,MAAM2R,MACX,KAAK5R,EAAAC,MAAMivB,UACTo3E,EAAG9kG,OACHiI,EAAYjX,KAAKg1G,sBAAsBlB,EAAIj/F,EAAO+B,EAAYo9F,GAC9Dp9F,EAAa,KACb,MAEF,KAAKpJ,EAAAC,MAAMmqB,UACLulC,EAAQ22C,EAAG52C,OACf42C,EAAG9kG,OACC8kG,EAAGn3C,MAAK,EAAOnvD,EAAA+nD,mBAAmBgH,SAAW/uD,EAAAC,MAAMU,YACrD2lG,EAAGx2C,QAAQH,GACXlmD,EAAYjX,KAAKi1G,eAAenB,EAAIj/F,EAAO+B,EAAYo9F,GACvDp9F,EAAa,OAEbk9F,EAAGv2C,MAAMJ,GACTlmD,EAAYjX,KAAK+0G,eAAejB,GAAI,IAEtC,MAEF,KAAKtmG,EAAAC,MAAMgV,OACTqxF,EAAG9kG,OAGDiI,GAFFpC,GAAStH,EAAAlL,YAAYogB,QACTlV,EAAAlL,YAAYyf,OACV9hB,KAAKk1G,kBAAkBpB,EAAIE,GAE3Bh0G,KAAKm1G,YAAYrB,GAE/B,MAEF,KAAKtmG,EAAAC,MAAMupD,KACLmG,EAAQ22C,EAAG52C,OACf42C,EAAG9kG,OACC8kG,EAAGn3C,MAAK,EAAOnvD,EAAA+nD,mBAAmBgH,SAAW/uD,EAAAC,MAAMU,YACrD2lG,EAAGx2C,QAAQH,GACXlmD,EAAYjX,KAAKo1G,qBAAqBtB,EAAIj/F,EAAO+B,EAAYo9F,GAC7Dp9F,EAAa,OAEbk9F,EAAGv2C,MAAMJ,GACTlmD,EAAYjX,KAAK+0G,eAAejB,GAAI,IAEtC,MAEF,QAGMj/F,EAAQtH,EAAAlL,YAAYyf,OAClBwyF,GAAcR,EAAG92C,eAAexvD,EAAA+nD,mBAAmBgH,SACjDi4C,GACFx0G,KAAKqN,MACHwW,EAAApZ,eAAe4qG,2CACfvB,EAAG/oG,MAAMwpG,EAAcC,IAG3Bv9F,EAAYjX,KAAKs1G,wBAAwBxB,EAAIE,EAAUK,EAAcC,GACrED,EAAeC,EAAa,GAE5Br9F,EAAYjX,KAAKu1G,YAAYzB,EAAIE,EAA2C,IAAhCn/F,EAAQtH,EAAAlL,YAAYg0B,WAK9D+9E,GACFp0G,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,MAAMopG,EAAaC,GAAY,UAGlCI,GACFx0G,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,MAAMwpG,EAAcC,GAAa,WAGnCpzB,IACHnqE,EAAYjX,KAAK+0G,eAAejB,GAAI,KAQ5C,GAAIl9F,EACF,IAAK,IAAIvW,EAAI,EAAGojB,EAAI7M,EAAWzK,OAAQ9L,EAAIojB,IAAKpjB,EAC9CL,KAAKqN,MACHwW,EAAApZ,eAAegrG,8BACf7+F,EAAWvW,GAAG0K,OAMpB,GAAIupG,GAA4B,OAAdr9F,EAChB,OAAQA,EAAUpJ,MAChB,KAAKkW,EAAApW,SAAS+T,gBACd,KAAKqC,EAAApW,SAAS0U,oBACd,KAAK0B,EAAApW,SAAS4T,iBACd,KAAKwC,EAAApW,SAAS+U,qBACd,KAAKqB,EAAApW,SAASiV,qBACZ,OAAOmB,EAAApV,KAAKuJ,6BAAmDjB,EAAW68F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAElG,QACE7gB,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,MAAMspG,EAAcC,GAAa,WAK5C,OAAOr9F,GAITi8F,EAAAjxG,UAAAyzG,SAAA,WACE,IAAIvC,EAAUnzG,KAAKmzG,QACnB,OAAOA,EAAQhnG,OAASgnG,EAAQz2D,QAAU,MAI5Cw2D,EAAAjxG,UAAA0zG,YAAA,SAAYC,GACV,IAAIjqG,EAAS3L,KAAKszG,UAAUpyG,IAAI00G,GAChC,OAAIjqG,EACKA,EAAOqM,aAET,MAITk7F,EAAAjxG,UAAAk+D,OAAA,WACE,GAAIngE,KAAKmzG,QAAQhnG,OAAQ,MAAM,IAAImjB,MAAM,wBAKzC,OAJAtvB,KAAKmzG,QAAU,GACfnzG,KAAKozG,QAAQyC,QACb71G,KAAKqzG,QAAQwC,QACb71G,KAAKszG,UAAUuC,QACR71G,KAAKu2B,SAId28E,EAAAjxG,UAAA6zG,UAAA,SACEhC,EACAiC,EACAC,QADA,IAAAD,OAAA,QACA,IAAAC,OAAA,GAIA,IAGI1mG,EAHAgoD,EAAQw8C,EAAG9kG,OACXglG,EAAWF,EAAG55C,SAKlB,GAAI5C,GAAS9pD,EAAAC,MAAMmtD,UAAW,CAG5B,IAAIq7C,EAAsBnC,EAAG72C,KAAKzvD,EAAAC,MAAMmtD,WAEpC1gD,EAAYla,KAAKk2G,qBAAqBpC,GAC1C,GAAI55F,EAAW,CACb,GAAI+7F,EAAqB,CACvB,IAAKnC,EAAG72C,KAAKzvD,EAAAC,MAAMotD,YAKjB,OAJA76D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,KAET,IAAK+oG,EAAG72C,KAAKzvD,EAAAC,MAAMmrD,KAKjB,OAJA54D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,KAEJ+oG,EAAG72C,KAAKzvD,EAAAC,MAAMM,OACjB/N,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,QAGhBmP,EAAU7K,YAAa,EAEzB,OAAO6K,EACF,GAAI+7F,GAAuBj2G,KAAKuzG,6BAKrC,OAJAvzG,KAAKqN,MACHwW,EAAApZ,eAAe0rG,iBACfrC,EAAG/oG,SAEE,KAIT,IAAIgrG,EAoBF,OAJA/1G,KAAKqN,MACHwW,EAAApZ,eAAe0rG,iBACfrC,EAAG/oG,SAEE,KAnBP,IAAIqrG,EAAYp2G,KAAK81G,UAAUhC,GAAI,EAAOkC,GAC1C,IAAKI,EAAW,OAAO,KACvB,IAAKtC,EAAG72C,KAAKzvD,EAAAC,MAAMotD,YAOjB,OANKm7C,GACHh2G,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,MAAM+oG,EAAGjzF,KAAM,KAGf,MAETvR,EAAO8mG,GACFrrG,MAAMqB,MAAQ4nG,EACnB1kG,EAAKvE,MAAMsB,IAAMynG,EAAGjzF,SAUjB,GAAIy2C,GAAS9pD,EAAAC,MAAM4V,KACxB/T,EAAOyU,EAAApV,KAAKQ,gBACV4U,EAAApV,KAAKM,qBAAqB,OAAQ6kG,EAAG/oG,SAAU,IAAI,EAAO+oG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,WAI7E,GAAIy2C,GAAS9pD,EAAAC,MAAMuS,KACxB1Q,EAAOyU,EAAApV,KAAKQ,gBACV4U,EAAApV,KAAKM,qBAAqB,OAAQ6kG,EAAG/oG,SAAU,IAAI,EAAO+oG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,WAI7E,GAAIy2C,GAAS9pD,EAAAC,MAAMO,MAAQspD,GAAS9pD,EAAAC,MAAMQ,MAC/CqB,EAAOyU,EAAApV,KAAKQ,gBACV4U,EAAApV,KAAKM,qBAAqB,OAAQ6kG,EAAG/oG,SAAU,IAAI,EAAO+oG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,WAI7E,GAAIy2C,GAAS9pD,EAAAC,MAAMitD,cACxBo5C,EAAGnwD,aACHr0C,EAAOyU,EAAApV,KAAKQ,gBACV4U,EAAApV,KAAKM,qBAAqB,SAAU6kG,EAAG/oG,SAAU,IAAI,EAAO+oG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,UAI/E,IAAIy2C,GAAS9pD,EAAAC,MAAMU,WA6DxB,OANK6nG,GACHh2G,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAGA,KAtDP,IANA,IAAI4pG,EAAQ5wF,EAAApV,KAAKM,qBAAqB6kG,EAAGt2C,iBAAkBs2C,EAAG/oG,SAC1D2rB,EAAUi+E,EACVllG,EAAqC,KACrC6mG,GAAW,EAGRxC,EAAG72C,KAAKzvD,EAAAC,MAAMutD,MAAM,CACzB,IAAI84C,EAAG72C,KAAKzvD,EAAAC,MAAMU,YAShB,OAJAnO,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,MAAM+oG,EAAGjzF,MAEP,KARP,IAAI7R,EAAO+U,EAAApV,KAAKM,qBAAqB6kG,EAAGt2C,iBAAkBs2C,EAAG/oG,SAC7D2rB,EAAQ1nB,KAAOA,EACf0nB,EAAU1nB,EAWd,GAAI8kG,EAAG72C,KAAKzvD,EAAAC,MAAMiqD,UAAW,CAC3B,EAAG,CACD,IAAI6+C,EAAYv2G,KAAK81G,UAAUhC,GAAI,EAAMkC,GACzC,IAAKO,EAAW,OAAO,KAClB9mG,EACAA,EAAW/C,KAAoB6pG,GADnB9mG,EAAa,CAAgB8mG,SAEvCzC,EAAG72C,KAAKzvD,EAAAC,MAAM4R,QACvB,IAAKy0F,EAAG72C,KAAKzvD,EAAAC,MAAMkqD,aAOjB,OANKq+C,GACHh2G,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,MAAM+oG,EAAGjzF,KAAM,KAGf,KAIX,KAAOizF,EAAG72C,KAAKzvD,EAAAC,MAAMmrD,MAAM,CACzB,IAAIk7C,EAAG72C,KAAKzvD,EAAAC,MAAMM,MAShB,OANKioG,GACHh2G,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,MAAM+oG,EAAGjzF,KAAM,QAGf,KARPy1F,GAAW,EAWfhnG,EAAOyU,EAAApV,KAAKQ,gBAAgBwlG,EAAOllG,GAAc,GAAI6mG,EAAUxC,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAWvF,KAAOizF,EAAG72C,KAAKzvD,EAAAC,MAAMmuD,cAAc,CACjC,IAAI46C,EAAe1C,EAAG55C,SACtB,IAAK45C,EAAG72C,KAAKzvD,EAAAC,MAAMouD,cAOjB,OANKm6C,GACHh2G,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAGT,KAET,IAAI0rG,EAAe3C,EAAG/oG,MAAMyrG,EAAc1C,EAAGjzF,KAGzCy1F,GAAW,EACf,GAAIxC,EAAG72C,KAAKzvD,EAAAC,MAAMmrD,KAAM,CACtB,IAAIk7C,EAAG72C,KAAKzvD,EAAAC,MAAMM,MAShB,OANKioG,GACHh2G,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,QAGT,KARPurG,GAAW,EAiBf,GANAhnG,EAAOyU,EAAApV,KAAKQ,gBACV4U,EAAApV,KAAKM,qBAAqB,QAASwnG,GACnC,CAAEnnG,GACFgnG,EACAxC,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAEpBy1F,EAAU,MAGhB,OAAOhnG,GAOT4jG,EAAAjxG,UAAAi0G,qBAAA,SACEpC,GAKA,IAuGIpkG,EAvGAytD,EAAQ22C,EAAG52C,OACX82C,EAAWF,EAAG55C,SACdzqD,EAAqC,KACrCgrB,EAAiC,KACjCi8E,GAAoB,EAExB,GAAI5C,EAAG72C,KAAKzvD,EAAAC,MAAMotD,YAChB67C,GAAc,EACd5C,EAAGx2C,QAAQH,GACX1tD,EAAa,OAER,CACLinG,GAAc,EACd,EAAG,CACD,IAAI7oG,EAAOkW,EAAA/G,cAAc+4C,QAMzB,GALI+9C,EAAG72C,KAAKzvD,EAAAC,MAAMgqD,eAChBi/C,GAAc,EACd5C,EAAGx2C,QAAQH,GACXtvD,EAAOkW,EAAA/G,cAAcmlD,MAEnB2xC,EAAG72C,KAAKzvD,EAAAC,MAAMuS,MAAO,CACvB,IAAI8zF,EAAG72C,KAAKzvD,EAAAC,MAAM+tD,OAiBhB,OAFAs4C,EAAGv2C,MAAMJ,GACTn9D,KAAKuzG,8BAA+B,EAC7B,KAhBPmD,GAAc,EACd5C,EAAGx2C,QAAQH,GACX,IAAI57D,EAAIvB,KAAK81G,UAAUhC,GAAI,GAC3B,IAAKvyG,EAAG,OAAO,KACf,GAAIA,EAAEsM,MAAQkW,EAAApW,SAASkP,UAMrB,OALA7c,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACflyB,EAAEwJ,OAEJ/K,KAAKuzG,8BAA+B,EAC7B,KAET94E,EAA0Bl5B,MAMvB,KAAIuyG,EAAG92C,iBA8CZ,OATI05C,EACF12G,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAGL+oG,EAAGv2C,MAAMJ,GAEXn9D,KAAKuzG,6BAA+BmD,EAC7B,KA7CP,IAAI91G,EAAOmjB,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,MAAM+oG,EAAG55C,SAAU45C,EAAGjzF,MAazF,GAZIizF,EAAG72C,KAAKzvD,EAAAC,MAAMkuD,YAChB+6C,GAAc,EACd5C,EAAGx2C,QAAQH,GACPtvD,GAAQkW,EAAA/G,cAAcmlD,KACxBniE,KAAKqN,MACHwW,EAAApZ,eAAeksG,oCACf7C,EAAG/oG,SAGL8C,EAAOkW,EAAA/G,cAAc45F,UAGrB9C,EAAG72C,KAAKzvD,EAAAC,MAAM+tD,OAAQ,CACxBk7C,GAAc,EACd5C,EAAGx2C,QAAQH,GACX,IAAI7tD,EAAOtP,KAAK81G,UAAUhC,GAC1B,IAAKxkG,EAEH,OADAtP,KAAKuzG,6BAA+BmD,EAC7B,KAET,IAAIG,EAAQ,IAAI9yF,EAAA1T,cAChBwmG,EAAMvmG,cAAgBzC,EACtBgpG,EAAMj2G,KAAOA,EACbi2G,EAAMvnG,KAAOA,EACRG,EACAA,EAAW/C,KAAKmqG,GADJpnG,EAAa,CAAEonG,QAG5BH,GACF12G,KAAKqN,MACHwW,EAAApZ,eAAe43D,cACfyxC,EAAG/oG,gBAgBJ+oG,EAAG72C,KAAKzvD,EAAAC,MAAM4R,QACvB,IAAKy0F,EAAG72C,KAAKzvD,EAAAC,MAAMotD,YAUjB,OATI67C,EACF12G,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAGd+oG,EAAGv2C,MAAMJ,GAEXn9D,KAAKuzG,6BAA+BmD,EAC7B,KAKX,OAAI5C,EAAG72C,KAAKzvD,EAAAC,MAAMiuD,qBAChBg7C,GAAc,EACd5C,EAAGx2C,QAAQH,IACXztD,EAAa1P,KAAK81G,UAAUhC,KAiB9B9zG,KAAKuzG,8BAA+B,EAC7BxvF,EAAApV,KAAKa,mBACVC,GAAc,GACdC,EACA+qB,GACA,EACAq5E,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,QArBpB7gB,KAAKuzG,6BAA+BmD,EAC7B,QAGLA,EACF12G,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,MAGd+oG,EAAGv2C,MAAMJ,GAEXn9D,KAAKuzG,6BAA+BmD,EAC7B,OAcXxD,EAAAjxG,UAAAgyG,eAAA,SACEH,GAKA,IAAIE,EAAWF,EAAG55C,SAClB,GAAI45C,EAAG92C,iBAAkB,CAGvB,IAFA,IAAIp8D,EAAOkzG,EAAGt2C,iBACV3rD,EAAyBkS,EAAApV,KAAKO,2BAA2BtO,EAAMkzG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAClFizF,EAAG72C,KAAKzvD,EAAAC,MAAMutD,MAAM,CACzB,IAAI84C,EAAG92C,iBAYL,OAJAh9D,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAEE,KAXPnK,EAAOkzG,EAAGt2C,iBACV3rD,EAAakS,EAAApV,KAAK8F,+BAChB5C,EACAkS,EAAApV,KAAKO,2BAA2BtO,EAAMkzG,EAAG/oG,SACzC+oG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAU5B,IAAIrQ,OAAI,EACR,IAAIsjG,EAAG72C,KAAKzvD,EAAAC,MAAMmtD,WAMhB,OAAO72C,EAAApV,KAAK4B,gBAAgBsB,EAAY,KAAMiiG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAJpE,GADArQ,EAAOxQ,KAAK82G,eAAehD,GAEzB,OAAO/vF,EAAApV,KAAK4B,gBAAgBsB,EAAYrB,EAAMsjG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,WAMxE7gB,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAGP,OAAO,MAGTmoG,EAAAjxG,UAAA4yG,cAAA,SACEf,EACAj/F,EACA+B,EACAo9F,GAKA,IAAIr9F,EAAU,IAAI1P,MAClB,EAAG,CACD,IAAIsqB,EAASvxB,KAAK+2G,yBAAyBjD,EAAIj/F,EAAO+B,GACtD,IAAK2a,EAAQ,OAAO,KACpB5a,EAAQjK,KAA0B6kB,SAC3BuiF,EAAG72C,KAAKzvD,EAAAC,MAAM4R,QAEvB,IAAIkkC,EAAMx/B,EAAApV,KAAKoN,wBAAwBpF,EAASC,EAAYk9F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAElF,OADAizF,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPlY,GAGT2vD,EAAAjxG,UAAA80G,yBAAA,SACEjD,EACAkD,EACAC,GAKA,IAAKnD,EAAG92C,iBAKN,OAJAh9D,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAEE,KAET,IAAIgE,EAAagV,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,SACrEyC,EAAA+pD,4BAA4BxoD,EAAW9C,OACzCjM,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACftnG,EAAWhE,OAGf,IAAI8J,EAAQmiG,EACRlD,EAAG72C,KAAKzvD,EAAAC,MAAMqrD,eAChBjkD,GAAStH,EAAAlL,YAAY60G,qBAGvB,IAAI5nG,EAAwB,KACxBwkG,EAAG72C,KAAKzvD,EAAAC,MAAM+tD,SAChBlsD,EAAOtP,KAAK81G,UAAUhC,IAGxB,IAAI1jG,EAAiC,KACrC,GAAI0jG,EAAG72C,KAAKzvD,EAAAC,MAAMyrD,SAQhB,GAPIrkD,EAAQtH,EAAAlL,YAAY0zB,SACtB/1B,KAAKqN,MACHwW,EAAApZ,eAAe0sG,iDACfrD,EAAG/oG,WAGPqF,EAAcpQ,KAAKo3G,gBAAgBtD,EAAI,IACrB,OAAO,UAErBj/F,EAAQtH,EAAAlL,YAAYgwB,MAChBxd,EAAQtH,EAAAlL,YAAY0zB,SACxB/1B,KAAKqN,MACHwW,EAAApZ,eAAekyE,wCACf5tE,EAAWhE,OAGLuE,GACVtP,KAAKqN,MACHwW,EAAApZ,eAAe43D,cACfyxC,EAAG/oG,MAAM+oG,EAAGjzF,MAIlB,IAAI9V,EAAQyC,EAAAE,MAAMf,KAAKoC,EAAWhE,MAAO+oG,EAAG/oG,SAM5C,OALK8J,EAAQtH,EAAAlL,YAAY60G,qBAAwB9mG,GAC/CpQ,KAAKqN,MACHwW,EAAApZ,eAAe4sG,iEACftsG,GAEGgZ,EAAApV,KAAKsN,0BACVlN,EACAO,EACAc,EACA6mG,EACApiG,EACA9J,IAIJmoG,EAAAjxG,UAAA2yG,UAAA,SACEd,EACAj/F,EACA+B,EACAo9F,GAKA,GAAIF,EAAG9kG,QAAUxB,EAAAC,MAAMU,WAKrB,OAJAnO,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAEE,KAET,IAAIgE,EAAagV,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,SACzE,GAAI+oG,EAAG9kG,QAAUxB,EAAAC,MAAMquD,UAKrB,OAJA97D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,KAGT,IADA,IAAI4L,EAAU,IAAI1P,OACV6sG,EAAG72C,KAAKzvD,EAAAC,MAAMsuD,aAAa,CACjC,IAAIxqC,EAASvxB,KAAKs3G,eAAexD,EAAIvmG,EAAAlL,YAAY+a,MACjD,IAAKmU,EAAQ,OAAO,KAEpB,GADA5a,EAAQjK,KAA2B6kB,IAC9BuiF,EAAG72C,KAAKzvD,EAAAC,MAAM4R,OAAQ,CACzB,GAAIy0F,EAAG72C,KAAKzvD,EAAAC,MAAMsuD,YAChB,MAMA,OAJA/7D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,MAIb,IAAIw4C,EAAMx/B,EAAApV,KAAK0I,sBACbtI,EACA4H,EACAC,EACA/B,EACAi/F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAGxB,OADAizF,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPlY,GAGT2vD,EAAAjxG,UAAAq1G,eAAA,SACExD,EACAkD,GAKA,IAAKlD,EAAG92C,iBAKN,OAJAh9D,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAEE,KAET,IAAIgE,EAAagV,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,SACrEzJ,EAA2B,KAC/B,OAAIwyG,EAAG72C,KAAKzvD,EAAAC,MAAMyrD,WAChB53D,EAAQtB,KAAKo3G,gBAAgBtD,EAAI,IACd,KAEd/vF,EAAApV,KAAK4I,2BACVxI,EACAzN,EACA01G,EACAxpG,EAAAE,MAAMf,KAAKoC,EAAWhE,MAAO+oG,EAAG/oG,WAIpCmoG,EAAAjxG,UAAAs1G,YAAA,SACEzD,GAKA,IAAI3iG,EAA0B,KAC9B,GACE2iG,EAAGn3C,MAAK,IAASnvD,EAAAC,MAAMguD,WACvBq4C,EAAG35C,WAAa3sD,EAAAC,MAAMsuD,aACrB+3C,EAAGz5C,sBAEElpD,EAAOnR,KAAKo3G,gBAAgBtD,IAAM,OAAO,KAGjD,IAAIvwD,EAAMx/B,EAAApV,KAAKmM,sBAAsB3J,EAAM2iG,EAAG/oG,SAE9C,OADA+oG,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPlY,GAGT2vD,EAAAjxG,UAAAu1G,oBAAA,SACE1D,GAOA,IAFA,IAAIr9F,EAA6C,KAC7CghG,GAAe,GACX3D,EAAG72C,KAAKzvD,EAAAC,MAAMkqD,cAAc,CAClC,IAAI+/C,EAAgB13G,KAAK23G,mBAAmB7D,GAC5C,IAAK4D,EAAe,OAAO,KAY3B,GAXkC,OAA9BA,EAAc1nG,YAChBynG,GAAe,EACNA,IACTz3G,KAAKqN,MACHwW,EAAApZ,eAAemtG,iEACfF,EAAc3sG,OAEhB2sG,EAAc1nG,YAAc,MAEzByG,EACAA,EAAe/J,KAAKgrG,GADJjhG,EAAiB,CAAEihG,IAEnC5D,EAAG72C,KAAKzvD,EAAAC,MAAM4R,OAAQ,CACzB,GAAIy0F,EAAG72C,KAAKzvD,EAAAC,MAAMkqD,aAChB,MAMA,OAJA33D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,MAUb,OANM0L,GAAkBA,EAAetK,QACrCnM,KAAKqN,MACHwW,EAAApZ,eAAeotG,oCACf/D,EAAG/oG,SAGA0L,GAGTy8F,EAAAjxG,UAAA01G,mBAAA,SACE7D,GAKA,GAAIA,EAAG9kG,QAAUxB,EAAAC,MAAMU,WAAY,CACjC,IAAIY,EAAagV,EAAApV,KAAKO,2BACpB4kG,EAAGt2C,iBACHs2C,EAAG/oG,SAEDgF,EAAoC,KACxC,GAAI+jG,EAAG72C,KAAKzvD,EAAAC,MAAMyoD,SAAU,CAE1B,KADI30D,EAAIvB,KAAK81G,UAAUhC,IACf,OAAO,KACf,GAAIvyG,EAAEsM,MAAQkW,EAAApW,SAASkP,UAKrB,OAJA7c,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACflyB,EAAEwJ,OAEG,KAETgF,EAA6BxO,EAE/B,IAAIyO,EAAoC,KACxC,GAAI8jG,EAAG72C,KAAKzvD,EAAAC,MAAMyrD,QAAS,CACzB,IAAI33D,EACJ,KADIA,EAAIvB,KAAK81G,UAAUhC,IACf,OAAO,KACf,GAAIvyG,EAAEsM,MAAQkW,EAAApW,SAASkP,UAKrB,OAJA7c,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACflyB,EAAEwJ,OAEG,KAETiF,EAA6BzO,EAE/B,OAAOwiB,EAAApV,KAAKmB,oBACVf,EACAgB,EACAC,EACAxC,EAAAE,MAAMf,KAAKoC,EAAWhE,MAAO+oG,EAAG/oG,UAQpC,OALE/K,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAGA,MAKTmoG,EAAAjxG,UAAA61G,gBAAA,SACEhE,EACAiE,QAAA,IAAAA,OAAA,GAKA,IAAItoG,EAAa,IAAIxI,MACjB+wG,EAAiC,KACjCP,GAAe,EACfQ,GAAe,EACfx9E,EAA4B,KAIhC,GADAz6B,KAAKwzG,oBAAsB,KACvBM,EAAG72C,KAAKzvD,EAAAC,MAAMuS,MAAO,CACvB,IAAI8zF,EAAG72C,KAAKzvD,EAAAC,MAAM+tD,OAgBhB,OAJAx7D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,KAdP,KADA0vB,EAAWz6B,KAAK81G,UAAUhC,IACX,OAAO,KAgBxB,GAfMr5E,EAAS5sB,MAAQkW,EAAApW,SAASkP,UAC5B7c,KAAKwzG,oBAAqC/4E,EAE1Cz6B,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACfgH,EAAS1vB,QAUV+oG,EAAG72C,KAAKzvD,EAAAC,MAAM4R,OACjB,OAAIy0F,EAAG72C,KAAKzvD,EAAAC,MAAMotD,YACTprD,GAEPzP,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,MAKb,MAAQ+oG,EAAG72C,KAAKzvD,EAAAC,MAAMotD,aAAa,CACjC,IAAIg8C,EAAQ72G,KAAKk4G,eAAepE,EAAIiE,GACpC,IAAKlB,EAAO,OAAO,KAQnB,OAPImB,IAAaC,IACfj4G,KAAKqN,MACHwW,EAAApZ,eAAe0tG,kDACfH,EAASp3G,KAAKmK,OAEhBktG,GAAe,GAETpB,EAAMvmG,eACZ,QACMmnG,GACFz3G,KAAKqN,MACHwW,EAAApZ,eAAe2tG,yDACfvB,EAAMj2G,KAAKmK,OAGf,MAEF,KAAKgZ,EAAA/G,cAAc45F,SACjBa,GAAe,EACf,MAEF,KAAK1zF,EAAA/G,cAAcmlD,KACjB61C,EAAWnB,EAKf,GADApnG,EAAW/C,KAAKmqG,IACX/C,EAAG72C,KAAKzvD,EAAAC,MAAM4R,OAAQ,CACzB,GAAIy0F,EAAG72C,KAAKzvD,EAAAC,MAAMotD,YAChB,MAMA,OAJA76D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,MAIb,OAAO0E,GAGTyjG,EAAAjxG,UAAAi2G,eAAA,SACEpE,EACAiE,QAAA,IAAAA,OAAA,GAKA,IAAIM,GAAS,EACTC,GAAa,EACbC,EAA2B,KAC3BC,EAA2BjrG,EAAAlL,YAAY+a,KAC3C,GAAI26F,IACEjE,EAAG72C,KAAKzvD,EAAAC,MAAMspD,SAChBwhD,EAAazE,EAAG/oG,QAChBytG,GAAejrG,EAAAlL,YAAY00D,QAClB+8C,EAAG72C,KAAKzvD,EAAAC,MAAMqpD,YACvByhD,EAAazE,EAAG/oG,QAChBytG,GAAejrG,EAAAlL,YAAYy0D,WAClBg9C,EAAG72C,KAAKzvD,EAAAC,MAAMopD,WACvB0hD,EAAazE,EAAG/oG,QAChBytG,GAAejrG,EAAAlL,YAAYw0D,SAEzBi9C,EAAGn3C,QAAUnvD,EAAAC,MAAM0mB,UAAU,CAC/B,IAAIgpC,EAAQ22C,EAAG52C,OACf42C,EAAG9kG,OACC8kG,EAAGn3C,QAAUnvD,EAAAC,MAAM+tD,OACrBs4C,EAAGx2C,QAAQH,GACNo7C,IAAYA,EAAazE,EAAG/oG,SACjCytG,GAAejrG,EAAAlL,YAAY8xB,UAE3B2/E,EAAGv2C,MAAMJ,GAef,GAXI22C,EAAG72C,KAAKzvD,EAAAC,MAAMgqD,eACZ+gD,EACFx4G,KAAKqN,MACHwW,EAAApZ,eAAeguG,+DACf3E,EAAG/oG,SAGLwtG,EAAazE,EAAG/oG,QAElBstG,GAAS,GAEPvE,EAAG92C,iBAAkB,CAClBq7C,IAAQE,EAAazE,EAAG/oG,SAC7B,IAAIgE,EAAagV,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,SACrEuE,EAAwB,KAS5B,IARIgpG,EAAaxE,EAAG72C,KAAKzvD,EAAAC,MAAMkuD,YACzB08C,GACFr4G,KAAKqN,MACHwW,EAAApZ,eAAeksG,oCACf5nG,EAAWhE,OAIb+oG,EAAG72C,KAAKzvD,EAAAC,MAAM+tD,QAEhB,KADAlsD,EAAOtP,KAAK81G,UAAUhC,IACX,OAAO,UAElBxkG,EAAOyU,EAAApV,KAAKkB,kBAAkBikG,EAAG/oG,MAAM+oG,EAAGjzF,MAE5C,IAAIzQ,EAAiC,KACrC,GAAI0jG,EAAG72C,KAAKzvD,EAAAC,MAAMyrD,UACZm/C,GACFr4G,KAAKqN,MACHwW,EAAApZ,eAAeiuG,4CACf3pG,EAAWhE,OAGXutG,EACFt4G,KAAKqN,MACHwW,EAAApZ,eAAekuG,oDACf5pG,EAAWhE,OAGbutG,GAAa,IAEfloG,EAAcpQ,KAAKo3G,gBAAgBtD,EAAI,KACrB,OAAO,KAE3B,IAAI+C,EAAQ9yF,EAAApV,KAAKwB,gBACfpB,EACAO,EACAc,EACAioG,EACIt0F,EAAA/G,cAAcmlD,KACdm2C,EACEv0F,EAAA/G,cAAc45F,SACd7yF,EAAA/G,cAAc+4C,QACpBvoD,EAAAE,MAAMf,KAAY4rG,EAAYzE,EAAG/oG,UAGnC,OADA8rG,EAAMhiG,OAAS2jG,EACR3B,EAOT,OALE72G,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAGA,MAGTmoG,EAAAjxG,UAAA6yG,cAAA,SACEhB,EACAj/F,EACA+B,EACAo9F,GAUA,IAAKF,EAAG92C,iBAKN,OAJAh9D,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,MAAM+oG,EAAGjzF,MAEP,KAGT,IAAIjgB,EAAOmjB,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,SAC/D6tG,GAAuB,EAEvBniG,EAA6C,KACjD,GAAIq9F,EAAG72C,KAAKzvD,EAAAC,MAAMiqD,UAAW,CAG3B,GAFAkhD,EAAiB9E,EAAG55C,WACpBzjD,EAAiBzW,KAAKw3G,oBAAoB1D,IACrB,OAAO,KAC5Bj/F,GAAStH,EAAAlL,YAAYsnB,QAGvB,IAAKmqF,EAAG72C,KAAKzvD,EAAAC,MAAMmtD,WAKjB,OAJA56D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,MAAM+oG,EAAGjzF,KAAM,KAEb,KAGL+3F,EAAiB,IACnBA,EAAiB9E,EAAG55C,UAGtB,IAAIzqD,EAAazP,KAAK83G,gBAAgBhE,GACtC,IAAKrkG,EAAY,OAAO,KACxB,IAAIgrB,EAAWz6B,KAAKwzG,oBAEhBqF,EAAwC,IAA5BhkG,EAAQtH,EAAAlL,YAAYyxB,KAChC+kF,IACuB,GAArBppG,EAAWtD,QACbnM,KAAKqN,MACHwW,EAAApZ,eAAequG,+CACfl4G,EAAKmK,OAGL0E,EAAWtD,QAAUsD,EAAW,GAAGW,aACrCpQ,KAAKqN,MACHwW,EAAApZ,eAAesuG,oDACfn4G,EAAKmK,QAKP8J,EAAQtH,EAAAlL,YAAYwxB,KAClBpkB,EAAWtD,QACbnM,KAAKqN,MACHwW,EAAApZ,eAAeuuG,sCACfp4G,EAAKmK,OAKX,IAAI2E,EAA8B,KAClC,GAAIokG,EAAG72C,KAAKzvD,EAAAC,MAAM+tD,UAChB9rD,EAAa1P,KAAK81G,UAAUhC,GAAI,EAAM+E,IACrB,OAAO,KAGrBnpG,IACHA,EAAaqU,EAAApV,KAAKkB,kBAChBikG,EAAG/oG,MAAM+oG,EAAGjzF,MAETg4F,GACH74G,KAAKqN,MACHwW,EAAApZ,eAAe43D,cACf3yD,EAAW3E,QAKjB,IAAImP,EAAY6J,EAAApV,KAAKa,mBACnBC,EACAC,EACA+qB,GACA,EACAq5E,EAAG/oG,MAAM6tG,EAAgB9E,EAAGjzF,MAG1B1G,EAAyB,KAC7B,GAAI25F,EAAG72C,KAAKzvD,EAAAC,MAAMquD,YAShB,GARIjnD,EAAQtH,EAAAlL,YAAY0zB,SACtB/1B,KAAKqN,MACHwW,EAAApZ,eAAewsE,yDACf68B,EAAG/oG,WAIPoP,EAAOna,KAAKi5G,oBAAoBnF,GAAI,IACzB,OAAO,UACPj/F,EAAQtH,EAAAlL,YAAY0zB,SAC/B/1B,KAAKqN,MACHwW,EAAApZ,eAAe0sE,gFACf28B,EAAG/oG,MAAM+oG,EAAGjzF,MAIhB,IAAI0iC,EAAMx/B,EAAApV,KAAKsL,0BACbrZ,EACA6V,EACAyD,EACAC,EACAvD,EACA/B,EAAK,EAELi/F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAGxB,OADAizF,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPlY,GAGT2vD,EAAAjxG,UAAAi3G,wBAAA,SAAwBpF,GACtB,IACIlzG,EADAozG,EAAWF,EAAG55C,SAEd9/C,EAAS,EAOb,GAAI05F,EAAGx8C,OAAS9pD,EAAAC,MAAM+R,UAMpB,GAJE5e,EADEkzG,EAAG92C,iBACEj5C,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,SAExDgZ,EAAApV,KAAK2C,gCAAgCwiG,EAAG/oG,MAAM+oG,EAAGjzF,OAErDizF,EAAG72C,KAAKzvD,EAAAC,MAAMmtD,WAKjB,OAJA56D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,MAAM+oG,EAAGjzF,KAAM,KAEb,UAQTzG,EAAS,EACThQ,OAAO0pG,EAAGx8C,OAAS9pD,EAAAC,MAAMmtD,WACzBh6D,EAAOmjB,EAAApV,KAAK2C,gCAAgCwiG,EAAG/oG,MAAM+oG,EAAG55C,WAK1D,IAAI0+C,EAAiB9E,EAAGjzF,IACpBpR,EAAazP,KAAK83G,gBAAgBhE,GACtC,OAAKrkG,EAEEzP,KAAKm5G,8BAA8BrF,EAAIlzG,EAAM6O,EAAY2K,EAAW45F,EAAU4E,GAF7D,MAKlB1F,EAAAjxG,UAAAk3G,8BAAR,SACErF,EACAlzG,EACA6O,EACA2K,EACA45F,EACA4E,QADA,IAAA5E,OAAiB,QACjB,IAAA4E,OAAuB,GAEnB5E,EAAW,IAAGA,EAAWpzG,EAAKmK,MAAMqB,OACpCwsG,EAAiB,IAAGA,EAAiB5E,GAEzC,IAAItkG,EAA8B,KAClC,GAAa,GAAT0K,GAAuC05F,EAAG72C,KAAKzvD,EAAAC,MAAM+tD,QAEvD,KADA9rD,EAAa1P,KAAK81G,UAAUhC,IACX,OAAO,UAExBpkG,EAAaqU,EAAApV,KAAKkB,kBAAkBikG,EAAG/oG,MAAM+oG,EAAGjzF,MAGlD,GAAIzG,IACG05F,EAAG72C,KAAKzvD,EAAAC,MAAMiuD,oBAKjB,OAJA17D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,MAAM+oG,EAAGjzF,KAAM,MAEb,KAIX,IAAI3G,EAAY6J,EAAApV,KAAKa,mBACnBC,EACAC,EACA,MACA,EACAokG,EAAG/oG,MAAM6tG,EAAgB9E,EAAGjzF,MAG1B1G,EAAyB,KAC7B,GAAIC,EACF,GAAI05F,EAAG72C,KAAKzvD,EAAAC,MAAMquD,WAChB3hD,EAAOna,KAAKi5G,oBAAoBnF,GAAI,OAC/B,CACL,IAAIsF,EAAiBp5G,KAAKo3G,gBAAgBtD,EAAI,GAC1CsF,IAAgBj/F,EAAO4J,EAAApV,KAAKgK,0BAA0BygG,QAEvD,CACL,IAAKtF,EAAG72C,KAAKzvD,EAAAC,MAAMquD,WAKjB,OAJA97D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,MAAM+oG,EAAGjzF,KAAM,KAEb,KAET1G,EAAOna,KAAKi5G,oBAAoBnF,GAAI,GAEtC,IAAK35F,EAAM,OAAO,KAElB,IAAI1H,EAAcsR,EAAApV,KAAKsL,0BACrBrZ,EACA,KACAsZ,EACAC,EACA,KACA5M,EAAAlL,YAAY+a,KACZhD,EACA05F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAExB,OAAOkD,EAAApV,KAAK6E,yBAAyBf,IAGvCygG,EAAAjxG,UAAA+yG,sBAAA,SACElB,EACAj/F,EACA+B,EACAo9F,GAUA,IAAIf,EAAca,EAAGx8C,OAAS9pD,EAAAC,MAAMivB,UAEpC,IAAKo3E,EAAG92C,iBAKN,OAJAh9D,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAEE,KAGT,IAAIgE,EAAagV,EAAApV,KAAKO,2BACpB4kG,EAAGt2C,iBACHs2C,EAAG/oG,SAGD0L,EAA6C,KACjD,GAAIq9F,EAAG72C,KAAKzvD,EAAAC,MAAMiqD,UAAW,CAE3B,KADAjhD,EAAiBzW,KAAKw3G,oBAAoB1D,IACrB,OAAO,KAC5Bj/F,GAAStH,EAAAlL,YAAYsnB,QAGvB,IAAI5Z,EAAoC,KACxC,GAAI+jG,EAAG72C,KAAKzvD,EAAAC,MAAMyoD,SAAU,CAC1B,IAAI30D,EAAIvB,KAAK81G,UAAUhC,GACvB,IAAKvyG,EAAG,OAAO,KACf,GAAIA,EAAEsM,MAAQkW,EAAApW,SAASkP,UAKrB,OAJA7c,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACflyB,EAAEwJ,OAEG,KAETgF,EAA6BxO,EAG/B,IAAImV,EAA0C,KAC9C,GAAIo9F,EAAG72C,KAAKzvD,EAAAC,MAAM4oD,YAAa,CACzB48C,GACFjzG,KAAKqN,MACHwW,EAAApZ,eAAe4uG,oDACfvF,EAAG/oG,SAGP,EAAG,CACD,IAAIuE,EAAOtP,KAAK81G,UAAUhC,GAC1B,IAAKxkG,EAAM,OAAO,KACb2jG,IACEv8F,EACAA,EAAgBhK,KAAoB4C,GADnBoH,EAAkB,CAAgBpH,UAGnDwkG,EAAG72C,KAAKzvD,EAAAC,MAAM4R,QAGzB,IAAKy0F,EAAG72C,KAAKzvD,EAAAC,MAAMquD,WAKjB,OAJA97D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,KAGT,IACI0H,EADAkE,EAAU,IAAI1P,MAyBlB,GAvBIgsG,GACF7oG,QAAQsM,GACRjE,EAAcsR,EAAApV,KAAK+K,2BACjB3K,EACA0H,EACA1G,EACA4G,EACAC,EACA/B,EACAi/F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,OAGxBpO,EAAcsR,EAAApV,KAAK6H,uBACjBzH,EACA0H,EACA1G,EACA2G,EACAC,EACAC,EACA/B,EACAi/F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,OAGrBizF,EAAG72C,KAAKzvD,EAAAC,MAAMsuD,YACjB,EAAG,CACD,IAAIxqC,EAASvxB,KAAKs5G,iBAAiBxF,EAAIrhG,GACvC,GAAI8e,EAAQ5a,EAAQjK,KAA2B6kB,QAG7C,GADAvxB,KAAKk0G,cAAcJ,GACfA,EAAG72C,KAAKzvD,EAAAC,MAAMivD,WAKhB,OAJA18D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,YAGH+oG,EAAG72C,KAAKzvD,EAAAC,MAAMsuD,aAG1B,OADAtpD,EAAY1H,MAAMsB,IAAMynG,EAAGjzF,IACpBpO,GAGTygG,EAAAjxG,UAAAs3G,qBAAA,SAAqBzF,GAInB,IACIlzG,EADAozG,EAAWF,EAAG55C,SASlB,GALEt5D,EADEkzG,EAAG92C,iBACEj5C,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,SAExDgZ,EAAApV,KAAK2C,gCAAgCwiG,EAAG/oG,MAAM+oG,EAAGjzF,OAGrDizF,EAAG72C,KAAKzvD,EAAAC,MAAMquD,WAKjB,OAJA97D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,MAAM+oG,EAAGjzF,KAAM,KAEb,KAGT,IAAIlK,EAAU,IAAI1P,MACdwL,EAAcsR,EAAApV,KAAK6H,uBACrB5V,EACA,GACA,KACA,KACA+V,EACA,KACApJ,EAAAlL,YAAY+a,KACZ02F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAExB,IAAKizF,EAAG72C,KAAKzvD,EAAAC,MAAMsuD,YACjB,EAAG,CACD,IAAIxqC,EAASvxB,KAAKs5G,iBAAiBxF,EAAIrhG,GACvC,GAAI8e,EAAQ5a,EAAQjK,KAA2B6kB,QAG7C,GADAvxB,KAAKk0G,cAAcJ,GACfA,EAAG72C,KAAKzvD,EAAAC,MAAMivD,WAKhB,OAJA18D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,YAGH+oG,EAAG72C,KAAKzvD,EAAAC,MAAMsuD,aAG1B,OADAtpD,EAAY1H,MAAMsB,IAAMynG,EAAGjzF,IACpBkD,EAAApV,KAAK6D,sBAAsBC,IAGpCygG,EAAAjxG,UAAAq3G,iBAAA,SACExF,EACAtzF,GAUA,IAAIwzF,EAAWF,EAAGjzF,IACdoyF,EAAczyF,EAAO3S,MAAQkW,EAAApW,SAAS+U,qBAEtC9L,EAAqC,KACzC,GAAIk9F,EAAG72C,KAAKzvD,EAAAC,MAAMuuD,IAAK,CACrB,EAAG,CACD,IAAIt4C,EAAY1jB,KAAKi0G,eAAeH,GACpC,IAAKpwF,EAAW,MACX9M,EACAA,EAAWlK,KAAoBgX,GADnB9M,EAAa,CAAgB8M,SAEvCowF,EAAG72C,KAAKzvD,EAAAC,MAAMuuD,KACnBplD,GAAcq8F,GAChBjzG,KAAKqN,MACHwW,EAAApZ,eAAegrG,8BACfjoG,EAAAE,MAAMf,KAAKiK,EAAW,GAAG7L,MAAO6L,EAAWA,EAAWzK,OAAS,GAAGpB,QAMxE,IAAI8J,EAAQ2L,EAAO3L,MAAQtH,EAAAlL,YAAY0zB,QAGnCk9E,IAAap+F,GAAStH,EAAAlL,YAAYm3G,SAEtC,IAAIC,EAAc,EACdC,EAAY,EACZ5F,EAAG72C,KAAKzvD,EAAAC,MAAMspD,SACZk8C,GACFjzG,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,QAAS,UAGhB8J,GAAStH,EAAAlL,YAAY00D,OACrB0iD,EAAc3F,EAAG55C,SACjBw/C,EAAY5F,EAAGjzF,KACNizF,EAAG72C,KAAKzvD,EAAAC,MAAMopD,UACnBo8C,GACFjzG,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,QAAS,WAGhB8J,GAAStH,EAAAlL,YAAYw0D,QACrB4iD,EAAc3F,EAAG55C,SACjBw/C,EAAY5F,EAAGjzF,KACNizF,EAAG72C,KAAKzvD,EAAAC,MAAMqpD,aACnBm8C,GACFjzG,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,QAAS,aAGhB8J,GAAStH,EAAAlL,YAAYy0D,UACrB2iD,EAAc3F,EAAG55C,SACjBw/C,EAAY5F,EAAGjzF,KAGjB,IAAI84F,EAAc,EACdC,EAAY,EACZC,EAAgB,EAChBC,EAAc,EACdhG,EAAG72C,KAAKzvD,EAAAC,MAAMwmB,SACZg/E,GACFjzG,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,QAAS,UAGhB8J,GAAStH,EAAAlL,YAAY4xB,OACrB0lF,EAAc7F,EAAG55C,SACjB0/C,EAAY9F,EAAGjzF,MAEfhM,GAAStH,EAAAlL,YAAY2zB,SACjB89E,EAAG72C,KAAKzvD,EAAAC,MAAM2mB,YACZ6+E,GACFjzG,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,QAAS,YAGhB8J,GAAStH,EAAAlL,YAAY+xB,SACrBylF,EAAgB/F,EAAG55C,SACnB4/C,EAAchG,EAAGjzF,KAEfL,EAAO3L,MAAQtH,EAAAlL,YAAYsnB,UAAS9U,GAAStH,EAAAlL,YAAY03G,kBAG/D,IAAIC,EAAqB,EACrBC,EAAmB,EACvB,GAAInG,EAAGn3C,QAAUnvD,EAAAC,MAAM0mB,SAAU,CAC/B,IAAI+lF,EAAQpG,EAAG52C,OACf42C,EAAG9kG,OACC8kG,EAAGn3C,QAAUnvD,EAAAC,MAAM+tD,OACrBs4C,EAAGx2C,QAAQ48C,GACXrlG,GAAStH,EAAAlL,YAAY8xB,SACrB6lF,EAAgBlG,EAAG55C,SACnB+/C,EAAcnG,EAAGjzF,KAEjBizF,EAAGv2C,MAAM28C,GAKb,IA+DIt5G,EA/DAu8D,EAAQ22C,EAAG52C,OACX66C,GAAgB,EAChBziF,GAAW,EAGXujF,GAAW,EACXv4D,EAAgB,EAChB65D,EAAc,EAyDlB,GAxDKlH,IACCa,EAAG72C,KAAKzvD,EAAAC,MAAMomB,KACZigF,EAAGn3C,MAAK,EAAMnvD,EAAA+nD,mBAAmBgH,SAAW/uD,EAAAC,MAAMU,YAAe2lG,EAAGz5C,mBAYtEy5C,EAAGv2C,MAAMJ,IAXTtoD,GAAStH,EAAAlL,YAAYwxB,IACrByB,GAAW,EACXgrB,EAAWwzD,EAAG55C,SACdigD,EAASrG,EAAGjzF,IACRhM,EAAQtH,EAAAlL,YAAY8xB,UACtBn0B,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,MAAMivG,EAAeC,GAAc,aAMnCnG,EAAG72C,KAAKzvD,EAAAC,MAAMqmB,KACnBggF,EAAGn3C,MAAK,EAAMnvD,EAAA+nD,mBAAmBgH,SAAW/uD,EAAAC,MAAMU,YAAe2lG,EAAGz5C,mBAYtEy5C,EAAGv2C,MAAMJ,IAXTtoD,GAAStH,EAAAlL,YAAYyxB,IACrB+kF,GAAW,EACXv4D,EAAWwzD,EAAG55C,SACdigD,EAASrG,EAAGjzF,IACRhM,EAAQtH,EAAAlL,YAAY8xB,UACtBn0B,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,MAAMivG,EAAeC,GAAc,aAMnCnG,EAAG72C,KAAKzvD,EAAAC,MAAM6R,eAEvBy4F,GAAgB,GADhBljG,GAAStH,EAAAlL,YAAYid,aAET/R,EAAAlL,YAAY4xB,QACtBj0B,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,MAAM4uG,EAAaC,GAAY,UAGlC/kG,EAAQtH,EAAAlL,YAAY+xB,UACtBp0B,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,MAAM8uG,EAAeC,GAAc,YAGtCjlG,EAAQtH,EAAAlL,YAAY8xB,UACtBn0B,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,MAAMivG,EAAeC,GAAc,cAO1ClC,EACFn3G,EAAOmjB,EAAApV,KAAKmE,4BAA4BghG,EAAG/oG,aACtC,CACL,IAAMuqB,IAAYujF,GAAa/E,EAAG72C,KAAKzvD,EAAAC,MAAMmuD,aAAc,CAErD/mD,EAAQtH,EAAAlL,YAAY00D,OACtB/2D,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,MAAM0uG,EAAaC,GAAY,UAE3B7kG,EAAQtH,EAAAlL,YAAYy0D,UAC7B92D,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,MAAM0uG,EAAaC,GAAY,aAE3B7kG,EAAQtH,EAAAlL,YAAYw0D,SAC7B72D,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,MAAM0uG,EAAaC,GAAY,aAGlC7kG,EAAQtH,EAAAlL,YAAY4xB,QACtBj0B,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,MAAM4uG,EAAaC,GAAY,UAGlC/kG,EAAQtH,EAAAlL,YAAY+xB,UACtBp0B,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,MAAM8uG,EAAeC,GAAc,YAGtCjlG,EAAQtH,EAAAlL,YAAY8xB,UACtBn0B,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,MAAMivG,EAAeC,GAAc,YAG1C,IAAIG,EAAWp6G,KAAKq6G,+BAA+BvG,EAAIl9F,GACvD,OAAKwjG,GACLtG,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACP2+C,GAFe,KAIxB,IAAKtG,EAAG92C,iBAKN,OAJAh9D,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAEE,KAETnK,EAAOmjB,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,SAEjE,IAAI0L,EAA6C,KACjD,GAAIq9F,EAAG72C,KAAKzvD,EAAAC,MAAMiqD,UAAW,CAC3B,IAAI4iD,EAAsBxG,EAAG55C,SAE7B,KADAzjD,EAAiBzW,KAAKw3G,oBAAoB1D,IACrB,OAAO,KACxBiE,EACF/3G,KAAKqN,MACHwW,EAAApZ,eAAe8vG,2DACfzG,EAAG/oG,MAAMuvG,EAAqBxG,EAAGjzF,MAE1ByU,GAAYujF,EACrB74G,KAAKqN,MACHwW,EAAApZ,eAAe+vG,wCACf1G,EAAG/oG,MAAMuvG,EAAqBxG,EAAGjzF,MAGnChM,GAAStH,EAAAlL,YAAYsnB,QAKzB,GAAImqF,EAAG72C,KAAKzvD,EAAAC,MAAMmtD,WAAY,CAC5B,IAAIg+C,EAAiB9E,EAAG55C,SACpBzqD,EAAazP,KAAK83G,gBAAgBhE,EAAIiE,GAC1C,IAAKtoG,EAAY,OAAO,KACxB,IAAIgrB,EAAWz6B,KAAKwzG,oBACpB,GAAIuE,EACF,IAAK,IAAI13G,EAAI,EAAGojB,EAAIhU,EAAWtD,OAAQ9L,EAAIojB,IAAKpjB,EAAG,CACjD,IAAIk2G,EAAY9mG,EAAWpP,GAC3B,GAAIk2G,EAAUh5F,MACZhQ,EAAAlL,YAAY00D,OACZxpD,EAAAlL,YAAYy0D,UACZvpD,EAAAlL,YAAYw0D,QACZtpD,EAAAlL,YAAY8xB,UACX,CACD,IAAIhX,EAA2B4G,EAAApV,KAAKiL,uBAClC28F,EAAU31G,KACV21G,EAAUjnG,KACV,KACA,KACAinG,EAAU1hG,MAAQtH,EAAAlL,YAAY2zB,SAC9BugF,EAAUxrG,OAEZoS,EAAyB+E,eAAiB7hB,EAC1Ck2G,EAAUp5F,yBAA2BA,EACrCqD,EAAO7J,QAAQjK,KAAKyQ,SAGfmY,EACL7lB,EAAWtD,QACbnM,KAAKqN,MACHwW,EAAApZ,eAAeuuG,sCACfp4G,EAAKmK,OAGA8tG,IACgB,GAArBppG,EAAWtD,QACbnM,KAAKqN,MACHwW,EAAApZ,eAAequG,+CACfl4G,EAAKmK,OAGL0E,EAAWtD,QAAUsD,EAAW,GAAGW,aACrCpQ,KAAKqN,MACHwW,EAAApZ,eAAesuG,oDACfn4G,EAAKmK,QAKX,IAAI2E,EAA8B,KAClC,GAAIokG,EAAG72C,KAAKzvD,EAAAC,MAAM+tD,QAahB,GAZI56D,EAAKiN,MAAQkW,EAAApW,SAAS2R,YACxBtf,KAAKqN,MACHwW,EAAApZ,eAAegwG,2DACf3G,EAAG/oG,SAEI8tG,GACT74G,KAAKqN,MACHwW,EAAApZ,eAAeiwG,oDACf5G,EAAG/oG,WAGP2E,EAAa1P,KAAK81G,UAAUhC,EAAIlzG,EAAKiN,MAAQkW,EAAApW,SAAS2R,aAAeu5F,IACpD,OAAO,UAExBnpG,EAAaqU,EAAApV,KAAKkB,kBAAkBikG,EAAG/oG,MAAM+oG,EAAGjzF,MAC3Cg4F,GAAYj4G,EAAKiN,MAAQkW,EAAApW,SAAS2R,aACrCtf,KAAKqN,MACHwW,EAAApZ,eAAe43D,cACf3yD,EAAW3E,OAKjB,IAAImP,EAAY6J,EAAApV,KAAKa,mBACnBC,EACAC,EACA+qB,GACA,EACAq5E,EAAG/oG,MAAM6tG,EAAgB9E,EAAGjzF,MAG1B1G,EAAyB,KAC7B,GAAI25F,EAAG72C,KAAKzvD,EAAAC,MAAMquD,YAahB,GAZIjnD,EAAQtH,EAAAlL,YAAY0zB,QACtB/1B,KAAKqN,MACHwW,EAAApZ,eAAewsE,yDACf68B,EAAG/oG,SAEI8J,EAAQtH,EAAAlL,YAAY+xB,UAC7Bp0B,KAAKqN,MACHwW,EAAApZ,eAAekwG,qEACf7G,EAAG/oG,QAASnK,EAAKqL,QAGrBkO,EAAOna,KAAKi5G,oBAAoBnF,GAAI,IACzB,OAAO,UACPj/F,EAAQtH,EAAAlL,YAAY0zB,SAAak9E,GAC5CjzG,KAAKqN,MACHwW,EAAApZ,eAAe0sE,gFACf28B,EAAG/oG,SAIP,IAAI6vG,EAAY72F,EAAApV,KAAK+L,wBACnB9Z,EACA6V,EACAyD,EACAC,EACAvD,EACA/B,EACAi/F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAGxB,OADAizF,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPm/C,EAEF,GAAI7C,EACT/3G,KAAKqN,MACHwW,EAAApZ,eAAeowG,sCACfj6G,EAAKmK,WAGF,KAAIuqB,IAAYujF,EAOhB,CACDhkG,EAAQtH,EAAAlL,YAAY+xB,UACtBp0B,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,MAAM8uG,EAAeC,GAAc,YAItCjlG,EAAQtH,EAAAlL,YAAYwxB,KACtB7zB,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,MAnRW,EACF,GAkRgB,OAI5B8J,EAAQtH,EAAAlL,YAAYyxB,KACtB9zB,KAAKqN,MACHwW,EAAApZ,eAAe+qG,gCACf1B,EAAG/oG,MAAMu1C,EAAU65D,GAAS,OAIhC,IAAI7qG,EAAwB,KAU5B,GATIwkG,EAAG72C,KAAKzvD,EAAAC,MAAMkuD,WAChB37D,KAAKqN,MACHwW,EAAApZ,eAAeqwG,sCACfhH,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAGtBizF,EAAG72C,KAAKzvD,EAAAC,MAAMqrD,eAChBjkD,GAAStH,EAAAlL,YAAY60G,qBAEnBpD,EAAG72C,KAAKzvD,EAAAC,MAAM+tD,QAEhB,KADAlsD,EAAOtP,KAAK81G,UAAUhC,IACX,OAAO,UAElB9zG,KAAKqN,MACHwW,EAAApZ,eAAe43D,cACfyxC,EAAG/oG,SAGP,IAAIqF,EAAiC,KACrC,GAAI0jG,EAAG72C,KAAKzvD,EAAAC,MAAMyrD,WAChB9oD,EAAcpQ,KAAKo3G,gBAAgBtD,IACjB,OAAO,KAE3B,IAAI/oG,EAAQ+oG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,KAC7BhM,EAAQtH,EAAAlL,YAAY60G,sBAA0BriG,EAAQtH,EAAAlL,YAAY4xB,QAAWg/E,GAAe7iG,IAC/FpQ,KAAKqN,MACHwW,EAAApZ,eAAe4sG,iEACftsG,GAGJ,IAAIgwG,EAAWh3F,EAAApV,KAAKiL,uBAClBhZ,EACA0O,EACAc,EACAwG,EACA/B,EACA9J,GAGF,OADA+oG,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPs/C,EApEP/6G,KAAKqN,MACHwW,EAAApZ,eAAe0sE,gFACfv2E,EAAKmK,OAoET,OAAO,MAGTmoG,EAAAjxG,UAAAo4G,+BAAA,SAA+BvG,EAAel9F,GAIxCA,GAAcA,EAAWzK,QAC3BnM,KAAKqN,MACHwW,EAAApZ,eAAegrG,8BACfjoG,EAAAE,MAAMf,KAAKiK,EAAW,GAAG7L,MAAO6L,EAAWA,EAAWzK,OAAS,GAAGpB,QAItE,IAAIqB,EAAQ0nG,EAAG55C,SACf,GAAI45C,EAAG92C,iBAEL,GAAU,OADD82C,EAAGt2C,iBAEV,GAAIs2C,EAAG72C,KAAKzvD,EAAAC,MAAM+tD,OAAQ,CACxB,IAAIjhD,EAAUva,KAAK81G,UAAUhC,GAC7B,IAAKv5F,EAAS,OAAO,KACrB,GAAIA,EAAQ1M,MAAQkW,EAAApW,SAASkP,UAK3B,OAJA7c,KAAKqN,MACHwW,EAAApZ,eAAe43D,cACfyxC,EAAG/oG,SAEE,KAET,GAAI+oG,EAAG72C,KAAKzvD,EAAAC,MAAMouD,cAAe,CAC/B,GAAIi4C,EAAG72C,KAAKzvD,EAAAC,MAAM+tD,OAAQ,CACxB,IAAIhhD,EAAYxa,KAAK81G,UAAUhC,GAC/B,OAAKt5F,EACEuJ,EAAApV,KAAK2L,gCAA+CC,EAASC,EAAWs5F,EAAG/oG,MAAMqB,EAAO0nG,EAAGjzF,MAD3E,KAGvB7gB,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,UAIhB/K,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,UAIhB/K,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,UAIhB/K,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,YAIhB/K,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAGP,OAAO,MAGTmoG,EAAAjxG,UAAAgzG,eAAA,SACEnB,EACAj/F,EACA+B,EACAo9F,GAKA,GAAIF,EAAG92C,iBAAkB,CACvB,IAAIjuD,EAAagV,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,SACzE,GAAI+oG,EAAG72C,KAAKzvD,EAAAC,MAAMquD,WAAY,CAS5B,IARA,IAAInlD,EAAU,IAAI1P,MACdwL,EAAcsR,EAAApV,KAAKiM,2BACrB7L,EACA4H,EACAC,EACA/B,EACAi/F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,OAEhBizF,EAAG72C,KAAKzvD,EAAAC,MAAMsuD,aAAa,CACjC,IAAIxqC,EAASvxB,KAAK+zG,uBAAuBD,EAAIrhG,GAC7C,GAAI8e,EAAQ5a,EAAQjK,KAAK6kB,QAGvB,GADAvxB,KAAKk0G,cAAcJ,GACfA,EAAG72C,KAAKzvD,EAAAC,MAAMivD,WAKhB,OAJA18D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,KAMb,OAFA0H,EAAY1H,MAAMsB,IAAMynG,EAAGjzF,IAC3BizF,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPhpD,EAEPzS,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,UAIhB/K,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAGP,OAAO,MAGTmoG,EAAAjxG,UAAAszG,YAAA,SACEzB,EACAE,EACAr8F,GAKA,IAAID,EAAuC,KAC3C,GAAIo8F,EAAG72C,KAAKzvD,EAAAC,MAAMquD,WAAY,CAE5B,IADA,IAAInlD,EAAU,IAAI1P,OACV6sG,EAAG72C,KAAKzvD,EAAAC,MAAMsuD,aAAa,CACjC,IAAIxqC,EAASvxB,KAAKg7G,kBAAkBlH,GACpC,IAAKviF,EAAQ,OAAO,KAEpB,GADA5a,EAAQjK,KAAK6kB,IACRuiF,EAAG72C,KAAKzvD,EAAAC,MAAM4R,OAAQ,CACzB,GAAIy0F,EAAG72C,KAAKzvD,EAAAC,MAAMsuD,YAChB,MAMA,OAJA/7D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,MAIb,GAAI+oG,EAAG72C,KAAKzvD,EAAAC,MAAM2oD,MAAO,CACvB,IAAI09C,EAAG72C,KAAKzvD,EAAAC,MAAMitD,eAOhB,OAJA16D,KAAKqN,MACHwW,EAAApZ,eAAeuqB,wBACf8+E,EAAG/oG,SAEE,KANP2M,EAAOqM,EAAApV,KAAK0G,8BAA8By+F,EAAGnwD,aAAcmwD,EAAG/oG,SAiBlE,OANqB,QADjBiN,GADAurC,EAAMx/B,EAAApV,KAAK8I,sBAAsBd,EAASe,EAAMC,EAAWm8F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,OAC9D7I,eACOhY,KAAKozG,QAAQnqF,IAAIjR,KAC7ChY,KAAKszG,UAAU91F,IAAIxF,EAAchY,KAAK6zG,eACtC7zG,KAAKmzG,QAAQzmG,KAAKsL,GAClBhY,KAAKozG,QAAQ3pF,IAAIzR,IAEnB87F,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPlY,EACF,GAAIuwD,EAAG72C,KAAKzvD,EAAAC,MAAM0qD,UACvB,GAAI27C,EAAG72C,KAAKzvD,EAAAC,MAAM2oD,MAAO,CACvB,GAAI09C,EAAG72C,KAAKzvD,EAAAC,MAAMitD,eAAgB,CAChChjD,EAAOqM,EAAApV,KAAK0G,8BAA8By+F,EAAGnwD,aAAcmwD,EAAG/oG,SAC9D,IAAIw4C,EAAMx/B,EAAApV,KAAK8I,sBAAsB,KAAMC,EAAMC,EAAWm8F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAC9E7I,EAAe5N,OAAOm5C,EAAIvrC,cAC1BrM,EAASmoG,EAAGnoG,OAQhB,OAPKA,EAAOgV,cAAahV,EAAOgV,YAAc,IAAIxZ,KAClDwE,EAAOgV,YAAY8I,IAAIzR,GAClBhY,KAAKozG,QAAQnqF,IAAIjR,KACpBhY,KAAKszG,UAAU91F,IAAIxF,EAAchY,KAAK6zG,eACtC7zG,KAAKmzG,QAAQzmG,KAAKsL,IAEpB87F,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPlY,EAEPvjD,KAAKqN,MACHwW,EAAApZ,eAAeuqB,wBACf8+E,EAAG/oG,cAIP/K,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,aAIhB/K,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAGhB,OAAO,MAGTmoG,EAAAjxG,UAAA+4G,kBAAA,SACElH,GAKA,GAAIA,EAAG92C,iBAAkB,CACvB,IAAIjuD,EAAagV,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,SACrEkwG,EAA4C,KAChD,GAAInH,EAAG72C,KAAKzvD,EAAAC,MAAMgoD,IAAK,CACrB,IAAIq+C,EAAG92C,eAAexvD,EAAA+nD,mBAAmB+G,QAOvC,OAJAt8D,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAEE,KANPkwG,EAAel3F,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,SAS3E,OAAOgZ,EAAApV,KAAK4J,mBACVxJ,EACAksG,EACAA,EACIztG,EAAAE,MAAMf,KAAKoC,EAAWhE,MAAOkwG,EAAalwG,OAC1CgE,EAAWhE,OAQnB,OALE/K,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAGA,MAGTmoG,EAAAjxG,UAAAqzG,wBAAA,SACExB,EACAE,EACAK,EACAC,GAKA,IAAI1zG,EAAOkzG,EAAGt2C,iBACVzyD,EAAQ+oG,EAAG/oG,QACXw4C,EAAMx/B,EAAApV,KAAK8I,sBAAsB,CACnCsM,EAAApV,KAAK4J,mBACHwL,EAAApV,KAAKO,2BAA2BtO,EAAMmK,GACtCgZ,EAAApV,KAAKO,2BAA2B,UAAW4kG,EAAG/oG,MAAMspG,EAAcC,IAClEvpG,IAED,MAAM,EAAO+oG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAEtC,OADAizF,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPlY,GAGT2vD,EAAAjxG,UAAAkzG,YAAA,SACErB,GAOA,IAAIE,EAAWF,EAAG55C,SACdvjD,EAAsC,KACtC0C,EAA6C,KAC7C6hG,GAAW,EACf,GAAIpH,EAAG72C,KAAKzvD,EAAAC,MAAMquD,WAEhB,IADAnlD,EAAU,IAAI1P,OACN6sG,EAAG72C,KAAKzvD,EAAAC,MAAMsuD,aAAa,CACjC,IAAIxqC,EAASvxB,KAAKm7G,uBAAuBrH,GACzC,IAAKviF,EAAQ,OAAO,KAEpB,GADA5a,EAAQjK,KAAK6kB,IACRuiF,EAAG72C,KAAKzvD,EAAAC,MAAM4R,OAAQ,CACzB,GAAIy0F,EAAG72C,KAAKzvD,EAAAC,MAAMsuD,YAChB,MAMA,OAJA/7D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,WAIR,GAAI+oG,EAAG72C,KAAKzvD,EAAAC,MAAM0qD,UAAW,CAClC,IAAI27C,EAAG72C,KAAKzvD,EAAAC,MAAMgoD,IAehB,OAJAz1D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,MAEP,KAdP,IAAI+oG,EAAG92C,iBAOL,OAJAh9D,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAEE,KANPsO,EAAgB0K,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,cAevE,GAAI+oG,EAAG72C,KAAKzvD,EAAAC,MAAMU,WAAYX,EAAA+nD,mBAAmBgH,QAAS,CAC/D,IAAI37D,EAAOkzG,EAAGt2C,iBACVzyD,EAAQ+oG,EAAG/oG,QAQf,GAPA4L,EAAU,CACRoN,EAAApV,KAAK4K,wBACHwK,EAAApV,KAAKO,2BAA2B,UAAWnE,GAC3CgZ,EAAApV,KAAKO,2BAA2BtO,EAAMmK,GACtCA,IAGA+oG,EAAG72C,KAAKzvD,EAAAC,MAAM4R,OAMhB,OAJArf,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACfqgF,EAAG/oG,SAEE,UAGTmwG,GAAW,EAGb,GAAIA,GAAYpH,EAAG72C,KAAKzvD,EAAAC,MAAM2oD,MAAO,CACnC,GAAI09C,EAAG72C,KAAKzvD,EAAAC,MAAMitD,eAAgB,CAChC,IAAIhjD,EAAOqM,EAAApV,KAAK0G,8BAA8By+F,EAAGnwD,aAAcmwD,EAAG/oG,SAC9Dw4C,OAAG,EACHlqC,GACFjP,QAAQuM,GACR4sC,EAAMx/B,EAAApV,KAAK2K,kCAAkCD,EAAe3B,EAAMo8F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,OAExF0iC,EAAMx/B,EAAApV,KAAKsK,sBAAsBtC,EAASe,EAAMo8F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAExE,IAAI7I,EAAeurC,EAAIvrC,aAMvB,OALKhY,KAAKozG,QAAQnqF,IAAIjR,KACpBhY,KAAKszG,UAAU91F,IAAIxF,EAAchY,KAAK6zG,eACtC7zG,KAAKmzG,QAAQzmG,KAAKsL,IAEpB87F,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPlY,EAEPvjD,KAAKqN,MACHwW,EAAApZ,eAAeuqB,wBACf8+E,EAAG/oG,cAIP/K,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,QAGhB,OAAO,MAGTmoG,EAAAjxG,UAAAk5G,uBAAA,SACErH,GAKA,GAAIA,EAAG92C,eAAexvD,EAAA+nD,mBAAmB+G,QAAS,CAChD,IAAIvtD,EAAagV,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,SACrEkwG,EAA4C,KAChD,GAAInH,EAAG72C,KAAKzvD,EAAAC,MAAMgoD,IAAK,CACrB,IAAIq+C,EAAG92C,iBAOL,OAJAh9D,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAEE,KANPkwG,EAAel3F,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,SAS3E,OAAOgZ,EAAApV,KAAK4K,wBACVxK,EACAksG,EACAA,EACIztG,EAAAE,MAAMf,KAAKoC,EAAWhE,MAAOkwG,EAAalwG,OAC1CgE,EAAWhE,OAQnB,OALE/K,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAGA,MAGTmoG,EAAAjxG,UAAAizG,kBAAA,SACEpB,EACAE,GAKA,GAAIF,EAAG92C,iBAAkB,CACvB,IAAIi+C,EAAel3F,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,SAC3E,GAAI+oG,EAAG72C,KAAKzvD,EAAAC,MAAMyrD,QAAS,CACzB,GAAI46C,EAAG92C,iBAAkB,CACvB,IAAIjuD,EAAagV,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,SACrEw4C,EAAMx/B,EAAApV,KAAKyJ,4BAA4BrJ,EAAYksG,EAAcnH,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAE3F,OADAizF,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPlY,EAEPvjD,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,cAIP/K,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,UAIhB/K,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAGP,OAAO,MAGTmoG,EAAAjxG,UAAA8yG,eAAA,SACEjB,EACAsH,QAAA,IAAAA,OAAA,GAKA,IAAIj+C,EAAQ22C,EAAG52C,OAEXjmD,EAA8B,KAClC,OAFY68F,EAAG9kG,QAGb,KAAKxB,EAAAC,MAAM6T,MACTrK,EAAYjX,KAAKq7G,WAAWvH,GAC5B,MAEF,KAAKtmG,EAAAC,MAAM4kB,MACTpb,EAAYjX,KAAK60G,cAAcf,EAAIvmG,EAAAlL,YAAYgwB,MAAO,KAAMyhF,EAAG55C,UAC/D,MAEF,KAAK1sD,EAAAC,MAAM+T,SACTvK,EAAYjX,KAAKs7G,cAAcxH,GAC/B,MAEF,KAAKtmG,EAAAC,MAAMgU,GACTxK,EAAYjX,KAAKu7G,iBAAiBzH,GAClC,MAEF,KAAKtmG,EAAAC,MAAM0U,IACTlL,EAAYjX,KAAKw7G,kBAAkB1H,GACnC,MAEF,KAAKtmG,EAAAC,MAAM8U,GACTtL,EAAYjX,KAAKy7G,iBAAiB3H,GAClC,MAEF,KAAKtmG,EAAAC,MAAMgpD,IACTx/C,EAAYjX,KAAK60G,cAAcf,EAAIvmG,EAAAlL,YAAYo0D,IAAK,KAAMq9C,EAAG55C,UAC7D,MAEF,KAAK1sD,EAAAC,MAAMypD,IACTjgD,EAAYjX,KAAK60G,cAAcf,EAAIvmG,EAAAlL,YAAY+a,KAAM,KAAM02F,EAAG55C,UAC9D,MAEF,KAAK1sD,EAAAC,MAAMquD,UACT7kD,EAAYjX,KAAKi5G,oBAAoBnF,EAAIsH,GACzC,MAEF,KAAK5tG,EAAAC,MAAMoV,OACLu4F,GACFp7G,KAAKqN,MACHwW,EAAApZ,eAAeixG,2DACf5H,EAAG/oG,SAGPkM,EAAYjX,KAAKu3G,YAAYzD,GAC7B,MAEF,KAAKtmG,EAAAC,MAAMguD,UACT,OAAO13C,EAAApV,KAAKwI,qBAAqB28F,EAAG/oG,MAAM+oG,EAAG55C,WAE/C,KAAK1sD,EAAAC,MAAMsV,OACT9L,EAAYjX,KAAK27G,qBAAqB7H,GACtC,MAEF,KAAKtmG,EAAAC,MAAMuV,MACT/L,EAAYjX,KAAK47G,oBAAoB9H,GACrC,MAEF,KAAKtmG,EAAAC,MAAMwV,IACThM,EAAYjX,KAAK67G,kBAAkB/H,GACnC,MAEF,KAAKtmG,EAAAC,MAAM4V,KACTpM,EAAYjX,KAAK87G,mBAAmBhI,GACpC,MAEF,KAAKtmG,EAAAC,MAAM6V,MACTrM,EAAYjX,KAAK+7G,oBAAoBjI,GACrC,MAEF,KAAKtmG,EAAAC,MAAMupD,KACT,GAAI88C,EAAGn3C,MAAK,EAAOnvD,EAAA+nD,mBAAmBgH,SAAW/uD,EAAAC,MAAMU,WAAY,CACjE8I,EAAYjX,KAAKo1G,qBAAqBtB,EAAIvmG,EAAAlL,YAAY+a,KAAM,KAAM02F,EAAG55C,UACrE,MAIJ,QACE45C,EAAGv2C,MAAMJ,GACTlmD,EAAYjX,KAAKg8G,yBAAyBlI,GAU9C,OANK78F,EAIH68F,EAAGx2C,QAAQH,IAHX22C,EAAGv2C,MAAMJ,GACTn9D,KAAKk0G,cAAcJ,IAId78F,GAGTi8F,EAAAjxG,UAAAg3G,oBAAA,SACEnF,EACAsH,GAOA,IAFA,IAAIpH,EAAWF,EAAG55C,SACd/jD,EAAa,IAAIlP,OACb6sG,EAAG72C,KAAKzvD,EAAAC,MAAMsuD,aAAa,CACjC,IAAIoB,EAAQ22C,EAAG52C,OACXjmD,EAAYjX,KAAK+0G,eAAejB,EAAIsH,GACxC,GAAKnkG,EAKH68F,EAAGx2C,QAAQH,GACXhnD,EAAWzJ,KAAKuK,OANF,CACd,GAAI68F,EAAGx8C,OAAS9pD,EAAAC,MAAMivD,UAAW,OAAO,KACxCo3C,EAAGv2C,MAAMJ,GACTn9D,KAAKk0G,cAAcJ,IAMvB,IAAIvwD,EAAMx/B,EAAApV,KAAKuH,qBAAqBC,EAAY29F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAEtE,OADAizF,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPlY,GAGT2vD,EAAAjxG,UAAAo5G,WAAA,SACEvH,GAKA,IAAI/kG,EAA0C,KAC1C+kG,EAAGn3C,MAAK,IAASnvD,EAAAC,MAAMU,YAAe2lG,EAAGz5C,qBAC3Cy5C,EAAG9kG,KAAKxB,EAAA+nD,mBAAmBgH,QAC3BxtD,EAAagV,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,UAEvE,IAAIw4C,EAAMx/B,EAAApV,KAAK0H,qBAAqBtH,EAAY+kG,EAAG/oG,SAEnD,OADA+oG,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPlY,GAGT2vD,EAAAjxG,UAAAq5G,cAAA,SACExH,GAKA,IAAI/kG,EAA0C,KAC1C+kG,EAAGn3C,MAAK,IAASnvD,EAAAC,MAAMU,YAAe2lG,EAAGz5C,qBAC3Cy5C,EAAG9kG,KAAKxB,EAAA+nD,mBAAmBgH,QAC3BxtD,EAAagV,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,UAEvE,IAAIw4C,EAAMx/B,EAAApV,KAAKmI,wBAAwB/H,EAAY+kG,EAAG/oG,SAEtD,OADA+oG,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPlY,GAGT2vD,EAAAjxG,UAAAs5G,iBAAA,SACEzH,GAKA,IAAIE,EAAWF,EAAG55C,SACdjjD,EAAYjX,KAAK+0G,eAAejB,GACpC,IAAK78F,EAAW,OAAO,KAEvB,GAAI68F,EAAG72C,KAAKzvD,EAAAC,MAAM6V,OAEhB,GAAIwwF,EAAG72C,KAAKzvD,EAAAC,MAAMmtD,WAAY,CAC5B,IAAI3lD,EAAYjV,KAAKo3G,gBAAgBtD,GACrC,IAAK7+F,EAAW,OAAO,KAEvB,GAAI6+F,EAAG72C,KAAKzvD,EAAAC,MAAMotD,YAAa,CAC7B,IAAItX,EAAMx/B,EAAApV,KAAKqI,kBAA6BC,EAAuBhC,EAAW6+F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAEpG,OADAizF,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPlY,EAEPvjD,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,UAIhB/K,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,UAIhB/K,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,SAGhB,OAAO,MAGTmoG,EAAAjxG,UAAA+5G,yBAAA,SACElI,GAKA,IAAI3iG,EAAOnR,KAAKo3G,gBAAgBtD,GAChC,IAAK3iG,EAAM,OAAO,KAElB,IAAIoyC,EAAMx/B,EAAApV,KAAKgK,0BAA0BxH,GAEzC,OADA2iG,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPlY,GAGT2vD,EAAAjxG,UAAAu5G,kBAAA,SACE1H,GAKA,IAAIE,EAAWF,EAAG55C,SAElB,GAAI45C,EAAG72C,KAAKzvD,EAAAC,MAAMmtD,WAAY,CAC5B,IAAIxqD,EAAgC,KAEpC,GAAI0jG,EAAG72C,KAAKzvD,EAAAC,MAAM4kB,OAChBjiB,EAAcpQ,KAAK60G,cAAcf,EAAIvmG,EAAAlL,YAAYgwB,MAAO,KAAMyhF,EAAG55C,eAC5D,GAAI45C,EAAG72C,KAAKzvD,EAAAC,MAAMgpD,KACvBrmD,EAAcpQ,KAAK60G,cAAcf,EAAIvmG,EAAAlL,YAAYo0D,IAAK,KAAMq9C,EAAG55C,eAC1D,GAAI45C,EAAG72C,KAAKzvD,EAAAC,MAAMypD,KACvB9mD,EAAcpQ,KAAK60G,cAAcf,EAAIvmG,EAAAlL,YAAY+a,KAAM,KAAM02F,EAAG55C,eAE3D,IAAK45C,EAAG72C,KAAKzvD,EAAAC,MAAMguD,cACxBrrD,EAAcpQ,KAAKg8G,yBAAyBlI,IAC1B,OAAO,KAG3B,GAAIA,EAAGx8C,OAAS9pD,EAAAC,MAAMguD,UAAW,CAC/B,IAAIxmD,EAAwC,KAC5C,IAAK6+F,EAAG72C,KAAKzvD,EAAAC,MAAMguD,cACjBxmD,EAAYjV,KAAKg8G,yBAAyBlI,IAC1B,OAAO,KAGzB,GAAIA,EAAGx8C,OAAS9pD,EAAAC,MAAMguD,UAAW,CAC/B,IAAI1hD,EAAiC,KACrC,IAAK+5F,EAAG72C,KAAKzvD,EAAAC,MAAMotD,YAAa,CAE9B,KADA9gD,EAAc/Z,KAAKo3G,gBAAgBtD,IACjB,OAAO,KAEzB,IAAKA,EAAG72C,KAAKzvD,EAAAC,MAAMotD,YAKjB,OAJA76D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,KAIX,IAAIkM,EAAYjX,KAAK+0G,eAAejB,GACpC,OAAK78F,EAEE8M,EAAApV,KAAKmL,mBACV1J,EACA6E,EACIA,EAAUpD,WACV,KACJkI,EACA9C,EACA68F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MATD,KAavB7gB,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,UAIhB/K,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,UAIhB/K,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAGhB,OAAO,MAGTmoG,EAAAjxG,UAAAw5G,iBAAA,SACE3H,GAKA,IAAIE,EAAWF,EAAG55C,SAClB,GAAI45C,EAAG72C,KAAKzvD,EAAAC,MAAMmtD,WAAY,CAC5B,IAAI3lD,EAAYjV,KAAKo3G,gBAAgBtD,GACrC,IAAK7+F,EAAW,OAAO,KACvB,GAAI6+F,EAAG72C,KAAKzvD,EAAAC,MAAMotD,YAAa,CAC7B,IAAI5jD,EAAYjX,KAAK+0G,eAAejB,GACpC,IAAK78F,EAAW,OAAO,KACvB,IAAIglG,EAAkC,KACtC,OAAInI,EAAG72C,KAAKzvD,EAAAC,MAAMwoD,SAChBgmD,EAAgBj8G,KAAK+0G,eAAejB,IACT,KAEtB/vF,EAAApV,KAAKkK,kBACV5D,EACAgC,EACAglG,EACAnI,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAGxB7gB,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,UAIhB/K,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAGhB,OAAO,MAGTmoG,EAAAjxG,UAAA05G,qBAAA,SACE7H,GAKA,IAAIE,EAAWF,EAAG55C,SAClB,GAAI45C,EAAG72C,KAAKzvD,EAAAC,MAAMmtD,WAAY,CAC5B,IAAI3lD,EAAYjV,KAAKo3G,gBAAgBtD,GACrC,IAAK7+F,EAAW,OAAO,KACvB,GAAI6+F,EAAG72C,KAAKzvD,EAAAC,MAAMotD,YAAa,CAC7B,GAAIi5C,EAAG72C,KAAKzvD,EAAAC,MAAMquD,WAAY,CAE5B,IADA,IAAI7gD,EAAQ,IAAIhU,OACR6sG,EAAG72C,KAAKzvD,EAAAC,MAAMsuD,aAAa,CACjC,IAAImgD,EAAQl8G,KAAKm8G,gBAAgBrI,GACjC,IAAKoI,EAAO,OAAO,KACnBjhG,EAAMvO,KAAiBwvG,GAEzB,IAAI34D,EAAMx/B,EAAApV,KAAKqM,sBAAsB/F,EAAWgG,EAAO64F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAE7E,OADAizF,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPlY,EAEPvjD,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,UAIhB/K,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,UAIhB/K,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAGhB,OAAO,MAGTmoG,EAAAjxG,UAAAk6G,gBAAA,SACErI,GAGA,IACI39F,EACAc,EAFA+8F,EAAWF,EAAG55C,SAMlB,GAAI45C,EAAG72C,KAAKzvD,EAAAC,MAAMmoD,MAAO,CACvB,IAAIt/C,EAAQtW,KAAKo3G,gBAAgBtD,GACjC,IAAKx9F,EAAO,OAAO,KACnB,GAAIw9F,EAAG72C,KAAKzvD,EAAAC,MAAM+tD,OAAQ,CAExB,IADArlD,EAAa,IAAIlP,MACV6sG,EAAGn3C,QAAUnvD,EAAAC,MAAMmoD,MAAQk+C,EAAG35C,WAAa3sD,EAAAC,MAAMsoD,SAAW+9C,EAAG35C,WAAa3sD,EAAAC,MAAMsuD,YAAY,CAEnG,KADA9kD,EAAYjX,KAAK+0G,eAAejB,IAChB,OAAO,KACvB39F,EAAWzJ,KAAKuK,GAElB,OAAO8M,EAAApV,KAAKwM,iBAAiB7E,EAAOH,EAAY29F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAEtE7gB,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,UAMX,GAAI+oG,EAAG72C,KAAKzvD,EAAAC,MAAMsoD,SAAU,CACjC,GAAI+9C,EAAG72C,KAAKzvD,EAAAC,MAAM+tD,OAAQ,CAExB,IADArlD,EAAa,IAAIlP,MACV6sG,EAAGn3C,QAAUnvD,EAAAC,MAAMmoD,MAAQk+C,EAAG35C,WAAa3sD,EAAAC,MAAMsoD,SAAW+9C,EAAG35C,WAAa3sD,EAAAC,MAAMsuD,YAAY,CAEnG,KADA9kD,EAAYjX,KAAK+0G,eAAejB,IAChB,OAAO,KACvB39F,EAAWzJ,KAAKuK,GAElB,OAAO8M,EAAApV,KAAKwM,iBAAiB,KAAMhF,EAAY29F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAErE7gB,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,UAIhB/K,KAAKqN,MACHwW,EAAApZ,eAAe2xG,0BACftI,EAAG/oG,SAGP,OAAO,MAGTmoG,EAAAjxG,UAAA25G,oBAAA,SACE9H,GAKA,IAAIE,EAAWF,EAAG55C,SACdroD,EAAa7R,KAAKo3G,gBAAgBtD,GACtC,IAAKjiG,EAAY,OAAO,KACxB,IAAI0xC,EAAMx/B,EAAApV,KAAK0M,qBAAiCxJ,EAAYiiG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAElF,OADAizF,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPlY,GAGT2vD,EAAAjxG,UAAA45G,kBAAA,SACE/H,GAQA,IACIrjG,EADAujG,EAAWF,EAAG55C,SAElB,GAAI45C,EAAG72C,KAAKzvD,EAAAC,MAAMquD,WAAY,CAE5B,IADA,IAAI3lD,EAAa,IAAIlP,OACb6sG,EAAG72C,KAAKzvD,EAAAC,MAAMsuD,aAAa,CAEjC,KADAtrD,EAAOzQ,KAAK+0G,eAAejB,IAChB,OAAO,KAClB39F,EAAWzJ,KAAgB+D,GAE7B,IAAI+K,EAA6C,KAC7CC,EAAsC,KACtCC,EAAwC,KAC5C,GAAIo4F,EAAG72C,KAAKzvD,EAAAC,MAAMooD,OAAQ,CACxB,IAAKi+C,EAAG72C,KAAKzvD,EAAAC,MAAMmtD,WAKjB,OAJA56D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,KAET,IAAK+oG,EAAG92C,iBAKN,OAJAh9D,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAEE,KAGT,GADAyQ,EAAgBuI,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,UACnE+oG,EAAG72C,KAAKzvD,EAAAC,MAAMotD,YAKjB,OAJA76D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,KAET,IAAK+oG,EAAG72C,KAAKzvD,EAAAC,MAAMquD,WAKjB,OAJA97D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,KAGT,IADA0Q,EAAkB,IACVq4F,EAAG72C,KAAKzvD,EAAAC,MAAMsuD,aAAa,CAEjC,KADAtrD,EAAOzQ,KAAK+0G,eAAejB,IAChB,OAAO,KAClBr4F,EAAgB/O,KAAgB+D,IAGpC,GAAIqjG,EAAG72C,KAAKzvD,EAAAC,MAAM0oD,SAAU,CAC1B,IAAK29C,EAAG72C,KAAKzvD,EAAAC,MAAMquD,WAKjB,OAJA97D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,KAGT,IADA2Q,EAAoB,IACZo4F,EAAG72C,KAAKzvD,EAAAC,MAAMsuD,aAAa,CAEjC,KADAtrD,EAAOzQ,KAAK+0G,eAAejB,IAChB,OAAO,KAClBp4F,EAAkBhP,KAAgB+D,IAGtC,IAAMgL,IAAmBC,EAKvB,OAJA1b,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,SAEP,KAET,IAAIw4C,EAAMx/B,EAAApV,KAAK4M,mBACbpF,EACAqF,EACAC,EACAC,EACAo4F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAGxB,OADAizF,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPlY,EAOT,OALEvjD,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAGT,MAGTmoG,EAAAjxG,UAAAmzG,qBAAA,SACEtB,EACAj/F,EACA+B,EACAo9F,GAKA,GAAIF,EAAG92C,iBAAkB,CACvB,IAAIp8D,EAAOmjB,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,SAC/D0L,EAA6C,KACjD,GAAIq9F,EAAG72C,KAAKzvD,EAAAC,MAAMiqD,UAAW,CAE3B,KADAjhD,EAAiBzW,KAAKw3G,oBAAoB1D,IACrB,OAAO,KAC5Bj/F,GAAStH,EAAAlL,YAAYsnB,QAEvB,GAAImqF,EAAG72C,KAAKzvD,EAAAC,MAAMyrD,QAAS,CACzB,IAAI5pD,EAAOtP,KAAK81G,UAAUhC,GAC1B,IAAKxkG,EAAM,OAAO,KAClB,IAAIi0C,EAAMx/B,EAAApV,KAAKiN,sBACbhb,EACA6V,EACAnH,EACAsH,EACA/B,EACAi/F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAGxB,OADAizF,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPlY,EAEPvjD,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,UAIhB/K,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAGP,OAAO,MAGTmoG,EAAAjxG,UAAA65G,mBAAA,SACEhI,GAKA,IAAIE,EAAWF,EAAG55C,SACdroD,EAAa7R,KAAKo3G,gBAAgBtD,EAAE,IACxC,IAAKjiG,EAAY,OAAO,KACxB,IAAI0xC,EAAMx/B,EAAApV,KAAKwN,oBAAoBtK,EAAYiiG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAErE,OADAizF,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPlY,GAGT2vD,EAAAjxG,UAAA85G,oBAAA,SACEjI,GAKA,IAAIE,EAAWF,EAAG55C,SAClB,GAAI45C,EAAG72C,KAAKzvD,EAAAC,MAAMmtD,WAAY,CAC5B,IAAI/oD,EAAa7R,KAAKo3G,gBAAgBtD,GACtC,IAAKjiG,EAAY,OAAO,KACxB,GAAIiiG,EAAG72C,KAAKzvD,EAAAC,MAAMotD,YAAa,CAC7B,IAAI5jD,EAAYjX,KAAK+0G,eAAejB,GACpC,IAAK78F,EAAW,OAAO,KACvB,IAAIssC,EAAMx/B,EAAApV,KAAK0N,qBAAqBxK,EAAYoF,EAAW68F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAEjF,OADAizF,EAAG72C,KAAKzvD,EAAAC,MAAMguD,WACPlY,EAEPvjD,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,UAIhB/K,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAGhB,OAAO,MAMTmoG,EAAAjxG,UAAAo6G,qBAAA,SACEvI,GAGA,IAAIx8C,EAAQw8C,EAAG9kG,KAAKxB,EAAA+nD,mBAAmBgH,QACnCy3C,EAAWF,EAAG55C,SACdoiD,EA8sBR,SAAkCzuG,GAChC,OAAQA,GACN,KAAKL,EAAAC,MAAMgqD,YAAa,SACxB,KAAKjqD,EAAAC,MAAM2pD,MAAO,SAClB,KAAK5pD,EAAAC,MAAMqrD,YACX,KAAKtrD,EAAAC,MAAMsrD,MACX,KAAKvrD,EAAAC,MAAM0Y,KACX,KAAK3Y,EAAAC,MAAM4Y,MACX,KAAK7Y,EAAAC,MAAM6qD,UACX,KAAK9qD,EAAAC,MAAM8qD,YACX,KAAK/qD,EAAAC,MAAMwpD,OACX,KAAKzpD,EAAAC,MAAM4V,KACX,KAAK7V,EAAAC,MAAMuoD,OAAQ,UACnB,KAAKxoD,EAAAC,MAAMkS,IAAK,UAElB,SA7tBmB48F,CAAyBjlD,GAC1C,GAAc,GAAVglD,EAA+B,CACjC,IAAIxmG,OAAO,EAKX,OAAIwhD,GAAS9pD,EAAAC,MAAMkS,KACjB7J,EAAU9V,KAAKo3G,gBAAgBtD,EAAE,KAE7Bh+F,EAAQjI,MAAQkW,EAAApW,SAASU,KACpB0V,EAAApV,KAAKoF,oBACO+B,EAASjE,WACTiE,EAAS1G,cACT0G,EAASnF,UAC1BmjG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,OAGxB7gB,KAAKqN,MACHwW,EAAApZ,eAAegpB,wBACfqgF,EAAG/oG,SAGA,MAdc,MAgBrB+K,EAAU9V,KAAKo3G,gBAAgBtD,EAAIwI,KAKjChlD,GAAS9pD,EAAAC,MAAM6qD,WAAahB,GAAS9pD,EAAAC,MAAM8qD,aAE3CziD,EAAQjI,MAAQkW,EAAApW,SAASQ,YACzB2H,EAAQjI,MAAQkW,EAAApW,SAASW,eACzBwH,EAAQjI,MAAQkW,EAAApW,SAASa,gBAEzBxO,KAAKqN,MACHwW,EAAApZ,eAAe+xG,0FACf1mG,EAAQ/K,OAIPgZ,EAAApV,KAAKqH,4BAA4BshD,EAAOxhD,EAASg+F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,OAhBvD,KAmBzB,IAAI1P,EAA0B,KAC9B,OAAQmmD,GAEN,KAAK9pD,EAAAC,MAAMM,KAAM,OAAOgW,EAAApV,KAAKsF,qBAAqB6/F,EAAG/oG,SACrD,KAAKyC,EAAAC,MAAMO,KAAM,OAAO+V,EAAApV,KAAKgH,qBAAqBm+F,EAAG/oG,SACrD,KAAKyC,EAAAC,MAAMQ,MAAO,OAAO8V,EAAApV,KAAKyE,sBAAsB0gG,EAAG/oG,SAIvD,KAAKyC,EAAAC,MAAMmtD,UAGT,GAAIk5C,EAAG72C,KAAKzvD,EAAAC,MAAMotD,YAChB,OAAO76D,KAAKm5G,8BACVrF,EACA/vF,EAAApV,KAAK2C,gCAAgCwiG,EAAG/oG,MAAMipG,IAC9C,GAAE,GAIN,IAAI72C,EAAQ22C,EAAG52C,OACXu/C,GAAQ,EACZ,GACE,OAAQ3I,EAAG9kG,KAAKxB,EAAA+nD,mBAAmBgH,SAGjC,KAAK/uD,EAAAC,MAAMgqD,YAET,OADAq8C,EAAGv2C,MAAMJ,GACFn9D,KAAKk5G,wBAAwBpF,GAGtC,KAAKtmG,EAAAC,MAAMU,WAET,OADA2lG,EAAGt2C,iBACKs2C,EAAG9kG,QAGT,KAAKxB,EAAAC,MAAMotD,WACT,IACGi5C,EAAG72C,KAAKzvD,EAAAC,MAAM+tD,SACds4C,EAAG72C,KAAKzvD,EAAAC,MAAMiuD,oBACf,CACA+gD,GAAQ,EACR,MAKJ,KAAKjvG,EAAAC,MAAM+tD,MAET,OADAs4C,EAAGv2C,MAAMJ,GACFn9D,KAAKk5G,wBAAwBpF,GAGtC,KAAKtmG,EAAAC,MAAMkuD,SACT,GACEm4C,EAAG72C,KAAKzvD,EAAAC,MAAM+tD,QACds4C,EAAG72C,KAAKzvD,EAAAC,MAAM4R,QACdy0F,EAAG72C,KAAKzvD,EAAAC,MAAMotD,YAGd,OADAi5C,EAAGv2C,MAAMJ,GACFn9D,KAAKk5G,wBAAwBpF,GAEtC2I,GAAQ,EACR,MAEF,KAAKjvG,EAAAC,MAAM4R,MACT,MAIF,QACEo9F,GAAQ,EAIZ,MAGF,QACEA,GAAQ,SAILA,GAKT,OAJA3I,EAAGv2C,MAAMJ,IAGThsD,EAAOnR,KAAKo3G,gBAAgBtD,IAEvBA,EAAG72C,KAAKzvD,EAAAC,MAAMotD,YAOZ92C,EAAApV,KAAK4F,8BAA8BpD,EAAM2iG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,OANpE7gB,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,MANS,KAWpB,KAAKyC,EAAAC,MAAMmuD,YAET,IADA,IAAIlqD,EAAqB,IAAIzK,OACrB6sG,EAAG72C,KAAKzvD,EAAAC,MAAMouD,eAAe,CACnC,GAAIi4C,EAAGn3C,QAAUnvD,EAAAC,MAAM4R,MACrBlO,EAAO,UAGP,KADAA,EAAOnR,KAAKo3G,gBAAgBtD,EAAI,IACrB,OAAO,KAGpB,GADApiG,EAAmBhF,KAAKyE,IACnB2iG,EAAG72C,KAAKzvD,EAAAC,MAAM4R,OAAQ,CACzB,GAAIy0F,EAAG72C,KAAKzvD,EAAAC,MAAMouD,cAChB,MAMA,OAJA77D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,MAIb,OAAOgZ,EAAApV,KAAK4C,6BAA6BG,EAAoBoiG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAGrF,KAAKrT,EAAAC,MAAMquD,UAKT,IAJA,IAAI4gD,EAAW5I,EAAG55C,SACd9lD,EAAQ,IAAInN,MACZoN,EAAS,IAAIpN,MACbrG,OAAI,GACAkzG,EAAG72C,KAAKzvD,EAAAC,MAAMsuD,aAAa,CACjC,GAAK+3C,EAAG92C,iBAWNp8D,EAAOmjB,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,aAXvC,CACxB,IAAK+oG,EAAG72C,KAAKzvD,EAAAC,MAAMitD,eAKjB,OAJA16D,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfvC,EAAG/oG,SAEE,MAETnK,EAAOmjB,EAAApV,KAAKO,2BAA2B4kG,EAAGnwD,aAAcmwD,EAAG/oG,UACtDmG,UAAW,EAKlB,GADAkD,EAAM1H,KAAK9L,GACPkzG,EAAG72C,KAAKzvD,EAAAC,MAAM+tD,OAAQ,CACxB,IAAIl6D,EAAQtB,KAAKo3G,gBAAgBtD,EAAI,GACrC,IAAKxyG,EAAO,OAAO,KACnB+S,EAAO3H,KAAKpL,OACP,IAAKV,EAAKsQ,SAOf,OAJAlR,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,KANPsJ,EAAO3H,KAAK9L,GAQd,IAAKkzG,EAAG72C,KAAKzvD,EAAAC,MAAM4R,OAAQ,CACzB,GAAIy0F,EAAG72C,KAAKzvD,EAAAC,MAAMsuD,YAChB,MAMA,OAJA/7D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,MAIb,OAAOgZ,EAAApV,KAAKwF,8BAA8BC,EAAOC,EAAQy/F,EAAG/oG,MAAM2xG,EAAU5I,EAAGjzF,MAGjF,KAAKrT,EAAAC,MAAMiqD,SACT,IAAI5lD,EAAS9R,KAAK81G,UAAUhC,GAC5B,OAAKhiG,EACAgiG,EAAG72C,KAAKzvD,EAAAC,MAAMkqD,cAOnBxmD,EAAOnR,KAAKo3G,gBAAgBtD,EAAE,KAEvB/vF,EAAApV,KAAKgD,0BACVoS,EAAA/E,cAAcygE,OACdtuE,EACAW,EACAgiG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MALN,MAPhB7gB,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,MANW,KAiBtB,KAAKyC,EAAAC,MAAMU,WACT,IAAIwuG,EAAiB7I,EAAGt2C,iBACxB,GAAsB,QAAlBm/C,EAA0B,OAAO54F,EAAApV,KAAKsF,qBAAqB6/F,EAAG/oG,SAClE,IAAIgE,EAAagV,EAAApV,KAAKO,2BAA2BytG,EAAgB7I,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MACvF,OAAIizF,EAAGn3C,MAAK,IAASnvD,EAAAC,MAAMiuD,oBAAuBo4C,EAAGz5C,mBAiB9CtrD,EAhBE/O,KAAKm5G,8BACVrF,EACA/vF,EAAApV,KAAK2C,gCAAgCwiG,EAAG/oG,MAAMipG,IAC9C,CACEjwF,EAAApV,KAAKwB,gBACHpB,EACAgV,EAAApV,KAAKkB,kBAAkBd,EAAWhE,MAAMs8D,OACxC,KACAtjD,EAAA/G,cAAc+4C,QACdhnD,EAAWhE,QAEd,EAEDipG,GAKN,KAAKxmG,EAAAC,MAAMuS,KACT,OAAO+D,EAAApV,KAAK8G,qBAAqBq+F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAEzD,KAAKrT,EAAAC,MAAM6R,YACT,OAAOyE,EAAApV,KAAKmE,4BAA4BghG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAEhE,KAAKrT,EAAAC,MAAMgB,MAOT,OANIqlG,EAAGn3C,QAAUnvD,EAAAC,MAAMutD,KAAO84C,EAAG35C,WAAa3sD,EAAAC,MAAMmtD,WAClD56D,KAAKqN,MACHwW,EAAApZ,eAAemyG,6DACf9I,EAAG/oG,SAGAgZ,EAAApV,KAAK4G,sBAAsBu+F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAE1D,KAAKrT,EAAAC,MAAMitD,cACT,OAAO32C,EAAApV,KAAK0G,8BAA8By+F,EAAGnwD,aAAcmwD,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAEnF,KAAKrT,EAAAC,MAAM8tD,eACT,OAAOx3C,EAAApV,KAAKkF,+BAA+BigG,EAAGz1C,cAAey1C,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAErF,KAAKrT,EAAAC,MAAMstD,aACT,OAAOh3C,EAAApV,KAAK2E,6BAA6BwgG,EAAGp0C,YAAao0C,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAIjF,KAAKrT,EAAAC,MAAM2qD,MACT,IAAIykD,EAAgB/I,EAAG91C,oBACvB,OAAK81C,EAAG72C,KAAKzvD,EAAAC,MAAM2qD,OAOZr0C,EAAApV,KAAKgG,8BACVkoG,EACA/I,EAAG31C,kBACH21C,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,OATtB7gB,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,MAQX,KAAKyC,EAAAC,MAAM+R,SACT,OAAOxf,KAAKk5G,wBAAwBpF,GAEtC,KAAKtmG,EAAAC,MAAM2R,MACT,OAAOpf,KAAKu5G,qBAAqBzF,GAEnC,QAYE,OAXIx8C,GAAS9pD,EAAAC,MAAMivD,UACjB18D,KAAKqN,MACHwW,EAAApZ,eAAemzD,uBACfk2C,EAAG/oG,MAAMipG,IAGXh0G,KAAKqN,MACHwW,EAAApZ,eAAeqyG,oBACfhJ,EAAG/oG,SAGA,OAKbmoG,EAAAjxG,UAAA86G,qCAAA,SACEjJ,GAKA,IAAI32C,EAAQ22C,EAAG52C,OACf,IAAK42C,EAAG72C,KAAKzvD,EAAAC,MAAMiqD,UAAW,OAAO,KACrC,IAAItoD,EAAmC,KACvC,EAAG,CACD,GAAI0kG,EAAGn3C,SAAWnvD,EAAAC,MAAMkqD,YACtB,MAEF,IAAIroD,EAAOtP,KAAK81G,UAAUhC,GAAI,GAAM,GACpC,IAAKxkG,EAEH,OADAwkG,EAAGv2C,MAAMJ,GACF,KAEJ/tD,EACAA,EAAc1C,KAAK4C,GADJF,EAAgB,CAAEE,SAE/BwkG,EAAG72C,KAAKzvD,EAAAC,MAAM4R,QACvB,OAAIy0F,EAAG72C,KAAKzvD,EAAAC,MAAMkqD,cAAgBm8C,EAAG72C,KAAKzvD,EAAAC,MAAMmtD,WACvCxrD,GAET0kG,EAAGv2C,MAAMJ,GACF,OAGT+1C,EAAAjxG,UAAA60G,eAAA,SACEhD,GAMA,IADA,IAAItjG,EAAO,IAAIvJ,OACP6sG,EAAG72C,KAAKzvD,EAAAC,MAAMotD,aAAa,CACjC,IAAI1pD,EAAOnR,KAAKo3G,gBAAgBtD,EAAI,GACpC,IAAK3iG,EAAM,OAAO,KAElB,GADAX,EAAK9D,KAAKyE,IACL2iG,EAAG72C,KAAKzvD,EAAAC,MAAM4R,OAAQ,CACzB,GAAIy0F,EAAG72C,KAAKzvD,EAAAC,MAAMotD,YAChB,MAMA,OAJA76D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,MAIb,OAAOyF,GAGT0iG,EAAAjxG,UAAAm1G,gBAAA,SACEtD,EACAwI,QAAA,IAAAA,MAAA,GAEAlyG,OAAiB,GAAVkyG,GAEP,IAAInrG,EAAOnR,KAAKq8G,qBAAqBvI,GACrC,IAAK3iG,EAAM,OAAO,KAOlB,IAJA,IACImmD,EAEA0lD,EAHAhJ,GAFJ7iG,EAAOnR,KAAKi9G,yBAAyBnJ,EAAI3iG,IAErBpG,MAAMqB,MAEtB4C,EAA0B,MAG3BguG,EAAiBE,EAAoB5lD,EAAQw8C,EAAGn3C,UAAY2/C,GAC7D,CAEA,OADAxI,EAAG9kG,OACKsoD,GAEN,KAAK9pD,EAAAC,MAAMgoD,GACT,IAAI3jD,EAAS9R,KAAK81G,UAAUhC,GAC5B,IAAKhiG,EAAQ,OAAO,KACpBX,EAAO4S,EAAApV,KAAKgD,0BACVoS,EAAA/E,cAAcy2C,GACdtkD,EACAW,EACAgiG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAExB,MAEF,KAAKrT,EAAAC,MAAMqrD,YACT3nD,EAAO4S,EAAApV,KAAKgD,0BACVoS,EAAA/E,cAAc+lD,QACd5zD,EACA,KACA2iG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAExB,MAGF,KAAKrT,EAAAC,MAAMgS,WACT,IAAI9L,EAAS3T,KAAK81G,UAAUhC,GAC5B,IAAKngG,EAAQ,OAAO,KACpBxC,EAAO4S,EAAApV,KAAK+E,2BACVvC,EACAwC,EACAmgG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAExB,MAGF,KAAKrT,EAAAC,MAAMmuD,YAET,KADA5sD,EAAOhP,KAAKo3G,gBAAgBtD,IACjB,OAAO,KAClB,IAAKA,EAAG72C,KAAKzvD,EAAAC,MAAMouD,cAKjB,OAJA77D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,KAEToG,EAAO4S,EAAApV,KAAKqE,8BACV7B,EACAnC,EACA8kG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAExB,MAGF,KAAKrT,EAAAC,MAAM6qD,UACX,KAAK9qD,EAAAC,MAAM8qD,YAEPpnD,EAAKtD,MAAQkW,EAAApW,SAASQ,YACtBgD,EAAKtD,MAAQkW,EAAApW,SAASW,eACtB6C,EAAKtD,MAAQkW,EAAApW,SAASa,gBAEtBxO,KAAKqN,MACHwW,EAAApZ,eAAe+xG,0FACfrrG,EAAKpG,OAGToG,EAAO4S,EAAApV,KAAKkH,6BACVyhD,EACAnmD,EACA2iG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAExB,MAGF,KAAKrT,EAAAC,MAAMkuD,SACT,IAAIzmD,EAASlV,KAAKo3G,gBAAgBtD,GAClC,IAAK5+F,EAAQ,OAAO,KACpB,IAAK4+F,EAAG72C,KAAKzvD,EAAAC,MAAM+tD,OAKjB,OAJAx7D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEP,KAET,IAAIoK,EAASnV,KAAKo3G,gBAAgBtD,EAAIwI,EAAU,EAC5C,EACD,GAEH,IAAKnnG,EAAQ,OAAO,KACpBhE,EAAO4S,EAAApV,KAAKqG,wBACV7D,EACA+D,EACAC,EACA2+F,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAExB,MAGF,KAAKrT,EAAAC,MAAM4R,MACT,IAAI89F,EAA2B,CAAEhsG,GACjC,EAAG,CAED,KADAA,EAAOnR,KAAKo3G,gBAAgBtD,EAAI,IACrB,OAAO,KAClBqJ,EAAWzwG,KAAKyE,SACT2iG,EAAG72C,KAAKzvD,EAAAC,MAAM4R,QACvBlO,EAAO4S,EAAApV,KAAKgE,sBAAsBwqG,EAAYrJ,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MACpE,MAEF,QAGE,GAAIy2C,GAAS9pD,EAAAC,MAAMutD,IAAK,CACtB,GAAI84C,EAAG92C,iBACLhuD,EAAO+U,EAAApV,KAAKO,2BAA2B4kG,EAAGt2C,iBAAkBs2C,EAAG/oG,cAO/D,KALAiE,EAAOhP,KAAKo3G,gBAAgBtD,EAC1BsJ,EAAmB9lD,GACf0lD,EACAA,EAAiB,IAEZ,OAAO,KAEpB,GAAIhuG,EAAKnB,MAAQkW,EAAApW,SAASQ,WACxBgD,EAAO4S,EAAApV,KAAK8F,+BACVtD,EACsBnC,EACtB8kG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,UAEnB,IAAI7R,EAAKnB,MAAQkW,EAAApW,SAASU,KAQ/B,OAJArO,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACfrnG,EAAKjE,OAEA,KANP,KADAoG,EAAOnR,KAAKq9G,iBAAiBvJ,EAAIE,EAAU7iG,EAAsBnC,IACtD,OAAO,UAUf,CAML,KALAA,EAAOhP,KAAKo3G,gBAAgBtD,EAC1BsJ,EAAmB9lD,GACf0lD,EACAA,EAAiB,IAEZ,OAAO,KAClB7rG,EAAO4S,EAAApV,KAAKqD,uBAAuBslD,EAAOnmD,EAAMnC,EAAM8kG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,OAKlF1P,EAAOnR,KAAKi9G,yBAAyBnJ,EAAI3iG,GAE3C,OAAOA,GAGD+hG,EAAAjxG,UAAAo7G,iBAAR,SACEvJ,EACAE,EACA7iG,EACA3Q,GAEA,IAAI88G,EAAS98G,EAAKqR,WAClB,OAAQyrG,EAAOzvG,MACb,KAAKkW,EAAApW,SAASQ,WACZ3N,EAAKqR,WAAakS,EAAApV,KAAK8F,+BACrBtD,EACsBmsG,EACtBxJ,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,MAExB,MAEF,KAAKkD,EAAApW,SAASU,KACZ,IAAIkvG,EAAQv9G,KAAKq9G,iBAAiBvJ,EAAIE,EAAU7iG,EAAsBmsG,GACtE,IAAKC,EAAO,OAAO,KACnB/8G,EAAKqR,WAAa0rG,EAClB/8G,EAAKuK,MAAQ+oG,EAAG/oG,MAAMipG,EAAUF,EAAGjzF,KACnC,MAEF,QAKE,OAJA7gB,KAAKqN,MACHwW,EAAApZ,eAAe4rG,oBACf71G,EAAKuK,OAEA,KAGX,OAAOvK,GAGD0yG,EAAAjxG,UAAAg7G,yBAAR,SACEnJ,EACA3iG,GAEA,GAAI4S,EAAA7V,eAAeiD,EAAKtD,MAEtB,IADA,IAAIuB,EAAmC,KAErC0kG,EAAG72C,KAAKzvD,EAAAC,MAAMmtD,YAEd72C,EAAArV,sBAAsByC,EAAKtD,OAA6E,QAAnEuB,EAAgBpP,KAAK+8G,qCAAqCjJ,KAC/F,CACA,IAAItjG,EAAOxQ,KAAK82G,eAAehD,GAC/B,IAAKtjG,EAAM,MACXW,EAAO4S,EAAApV,KAAK0D,qBACVlB,EACA/B,EACAoB,EACAsjG,EAAG/oG,MAAMoG,EAAKpG,MAAMqB,MAAO0nG,EAAGjzF,MAIpC,OAAO1P,GAIT+hG,EAAAjxG,UAAAiyG,cAAA,SAAcJ,GAGZ,IAFAA,EAAGn3C,MAAK,GACJm3C,EAAGz5C,oBAAoBy5C,EAAG9kG,SAC3B,CACD,IAAImrD,EAAY25C,EAAGn3C,MAAK,GACxB,GACExC,GAAa3sD,EAAAC,MAAMivD,WACnBvC,GAAa3sD,EAAAC,MAAMguD,UACnB,CACAq4C,EAAG9kG,OACH,MAEF,GAAI8kG,EAAGz5C,mBAAoB,MAC3B,OAAQy5C,EAAG9kG,QACT,KAAKxB,EAAAC,MAAMU,WACT2lG,EAAGt2C,iBACH,MAEF,KAAKhwD,EAAAC,MAAMitD,cACTo5C,EAAGnwD,aACH,MAEF,KAAKn2C,EAAAC,MAAM8tD,eACTu4C,EAAGz1C,cACH,MAEF,KAAK7wD,EAAAC,MAAMstD,aACT+4C,EAAGp0C,YACH,MAEF,KAAKlyD,EAAAC,MAAMquD,UACT97D,KAAKw9G,UAAU1J,MAQvBZ,EAAAjxG,UAAAu7G,UAAA,SAAU1J,GAER,IAAI2J,EAAQ,EACRhB,GAAQ,EACZ,GACE,OAAQ3I,EAAG9kG,QACT,KAAKxB,EAAAC,MAAMivD,UACT18D,KAAKqN,MACHwW,EAAApZ,eAAe4wD,YACfy4C,EAAG/oG,QAAS,KAEd0xG,GAAQ,EACR,MAEF,KAAKjvG,EAAAC,MAAMquD,YACP2hD,EACF,MAEF,KAAKjwG,EAAAC,MAAMsuD,aACP0hD,IACUhB,GAAQ,GACpB,MAEF,KAAKjvG,EAAAC,MAAMU,WACT2lG,EAAGt2C,iBACH,MAEF,KAAKhwD,EAAAC,MAAMitD,cACTo5C,EAAGnwD,aACH,MAEF,KAAKn2C,EAAAC,MAAM8tD,eACTu4C,EAAGz1C,cACH,MAEF,KAAK7wD,EAAAC,MAAMstD,aACT+4C,EAAGp0C,mBAIA+8C,IAEbvJ,EA5uHA,CAA4BrvF,EAAA/W,mBA4xH5B,SAASowG,EAAoBrvG,GAC3B,OAAQA,GACN,KAAKL,EAAAC,MAAM4R,MAAO,SAClB,KAAK7R,EAAAC,MAAMyrD,OACX,KAAK1rD,EAAAC,MAAM0rD,YACX,KAAK3rD,EAAAC,MAAM2rD,aACX,KAAK5rD,EAAAC,MAAM6rD,yBACX,KAAK9rD,EAAAC,MAAM4rD,gBACX,KAAK7rD,EAAAC,MAAM8rD,aACX,KAAK/rD,EAAAC,MAAM+rD,eACX,KAAKhsD,EAAAC,MAAMgsD,yBACX,KAAKjsD,EAAAC,MAAMisD,+BACX,KAAKlsD,EAAAC,MAAMksD,2CACX,KAAKnsD,EAAAC,MAAMmsD,iBACX,KAAKpsD,EAAAC,MAAMqsD,aACX,KAAKtsD,EAAAC,MAAMosD,WAAY,SACvB,KAAKrsD,EAAAC,MAAMkuD,SAAU,SACrB,KAAKnuD,EAAAC,MAAMwrD,QAAS,SACpB,KAAKzrD,EAAAC,MAAMurD,oBAAqB,SAChC,KAAKxrD,EAAAC,MAAMmrD,IAAK,SAChB,KAAKprD,EAAAC,MAAMorD,MAAO,SAClB,KAAKrrD,EAAAC,MAAMkrD,UAAW,UACtB,KAAKnrD,EAAAC,MAAMqqD,cACX,KAAKtqD,EAAAC,MAAMsqD,mBACX,KAAKvqD,EAAAC,MAAMuqD,qBACX,KAAKxqD,EAAAC,MAAMwqD,0BAA2B,UACtC,KAAKzqD,EAAAC,MAAMgoD,GACX,KAAKjoD,EAAAC,MAAM6oD,GACX,KAAK9oD,EAAAC,MAAMgS,WACX,KAAKjS,EAAAC,MAAMiqD,SACX,KAAKlqD,EAAAC,MAAMkqD,YACX,KAAKnqD,EAAAC,MAAMmqD,gBACX,KAAKpqD,EAAAC,MAAMoqD,mBAAoB,UAC/B,KAAKrqD,EAAAC,MAAM+qD,kBACX,KAAKhrD,EAAAC,MAAMgrD,wBACX,KAAKjrD,EAAAC,MAAMirD,oCAAqC,UAChD,KAAKlrD,EAAAC,MAAM0Y,KACX,KAAK3Y,EAAAC,MAAM4Y,MAAO,UAClB,KAAK7Y,EAAAC,MAAM0qD,SACX,KAAK3qD,EAAAC,MAAM2qD,MACX,KAAK5qD,EAAAC,MAAM4qD,QAAS,UACpB,KAAK7qD,EAAAC,MAAMyqD,kBAAmB,UAC9B,KAAK1qD,EAAAC,MAAM6qD,UACX,KAAK9qD,EAAAC,MAAM8qD,YAAa,UACxB,KAAK/qD,EAAAC,MAAMutD,IACX,KAAKxtD,EAAAC,MAAMkS,IACX,KAAKnS,EAAAC,MAAMmuD,YACX,KAAKpuD,EAAAC,MAAMqrD,YAAa,UAE1B,SAIF,SAASskD,EAAmBvvG,GAC1B,OAAQA,GACN,KAAKL,EAAAC,MAAMyrD,OACX,KAAK1rD,EAAAC,MAAM0rD,YACX,KAAK3rD,EAAAC,MAAM2rD,aACX,KAAK5rD,EAAAC,MAAM6rD,yBACX,KAAK9rD,EAAAC,MAAM4rD,gBACX,KAAK7rD,EAAAC,MAAM8rD,aACX,KAAK/rD,EAAAC,MAAM+rD,eACX,KAAKhsD,EAAAC,MAAMgsD,yBACX,KAAKjsD,EAAAC,MAAMisD,+BACX,KAAKlsD,EAAAC,MAAMksD,2CACX,KAAKnsD,EAAAC,MAAMmsD,iBACX,KAAKpsD,EAAAC,MAAMqsD,aACX,KAAKtsD,EAAAC,MAAMosD,WACX,KAAKrsD,EAAAC,MAAMkuD,SACX,KAAKnuD,EAAAC,MAAMyqD,kBAAmB,OAAO,EACrC,QAAS,OAAO,GAl2HPx4D,EAAAwzG,SA+uHb,SAAkBwK,GAChBA,IAAA,eACAA,IAAA,iBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,kCACAA,IAAA,gCACAA,IAAA,kCACAA,IAAA,gBACAA,IAAA,gCACAA,IAAA,wBAtBF,CAAkBh+G,EAAAg+G,aAAAh+G,EAAAg+G,WAAU,2HCn0H5Bv9G,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IAEA,IAAA4xD,EAAA5xD,EAAA,GAEA4xD,EAAAnd,OAAO3yC,UAAU2hD,OAAS,WAKxB,OAAO+5D,SAASC,WAAW59G,KAAKw5B,KAAKqkF,aAAoC,IAG3E9rD,EAAAnd,OAAO3yC,UAAU4hD,QAAU,WACzB,OAAO85D,SAASC,WAAW59G,KAAKw5B,KAAKskF,+BCxBvC,SAAA3rF,GAEA,MAAAwrF,EAAAxrF,EAAA4rF,UAAoC59G,EAAQ,IAG5C,QAAAyB,KAFAuwB,EAAAwrF,WAEAA,GACA/7G,EAAAkW,WAAA,cAAAlW,EAAAkW,WAAA,gBAAAqa,EAAAvwB,GAAA+7G,EAAA/7G,IAKAuwB,EAAA6rF,kBAAAL,EAAAM,QACA9rF,EAAA+rF,cAAAP,EAAAQ,MACAhsF,EAAAisF,cAAAT,EAAAU,SACAlsF,EAAAmsF,QAAA,SAAArmE,EAAAkV,GAAqCwwD,EAAAY,OAAAtmE,GAAAkV,GACrCh7B,EAAAqsF,OAAA,SAAAvmE,GAA+B,OAAA0lE,EAAAY,OAAAtmE,qCCf/Bt4C,EAAAD,QAAAO,oBCAA,SAAAkyB,GAEA,IAAAssF,EAAA,oBAAAn+C,qBAAA,IAAAnuC,MAAApyB,KAEA0+G,EAAAl5G,WAAA,EACAk5G,EAAAh5G,eAAA,EACAg5G,EAAA/4G,gBAAA,EACA+4G,EAAA94G,mBAAA,EACA84G,EAAA74G,iBAAA,EACA64G,EAAA54G,4BAAA,EACA44G,EAAA34G,4BAAA,EACA24G,EAAA14G,yBAAA,EACA04G,EAAAz4G,kBAAA,EACAy4G,EAAAx4G,qBAAA,EAEA,IAAAa,EAAA,IAAAqB,aAAA,GACAzB,EAAA,IAAAsB,YAAAlB,EAAAohB,QA2IA,SAAAw2F,IACApvF,MAAAqvF,kBACArvF,MAAAqvF,kBAAA3+G,KAAA0+G,GAEA1+G,KAAAoqE,MAAApqE,KAAAY,KAAA,KAAAZ,KAAA8K,QAAA,UAAAwkB,OAAA86C,MAWA,SAAAw0C,EAAA9zG,GACA9K,KAAA8K,WAAA,mBACAwkB,MAAAqvF,kBACArvF,MAAAqvF,kBAAA3+G,KAAA4+G,GAEA5+G,KAAAoqE,MAAApqE,KAAAY,KAAA,KAAAZ,KAAA8K,QAAA,UAAAwkB,OAAA86C,MA7JArpE,OAAA89G,iBACAJ,EAAA,YAAAn9G,GAA0C,OAAAA,GAAA,QAC1C,CACAktE,UAAA,CAAgBltE,OAAA,IAAAw9G,UAAA,GAChBx6D,UAAA,CAAgBhjD,MAAA,IAAAw9G,UAAA,KAGhB/9G,OAAA89G,iBACAJ,EAAA,aAAAn9G,GAA4C,OAAAA,GAAA,QAC5C,CACAktE,UAAA,CAAgBltE,OAAA,MAAAw9G,UAAA,GAChBx6D,UAAA,CAAgBhjD,MAAA,MAAAw9G,UAAA,KAGhB/9G,OAAA89G,iBACAJ,EAAA,IAAAA,EAAA,eAAAn9G,GAAmE,SAAAA,GACnE,CACAktE,UAAA,CAAgBltE,OAAA,WAAAw9G,UAAA,GAChBx6D,UAAA,CAAgBhjD,MAAA,WAAAw9G,UAAA,KAGhB/9G,OAAA89G,iBACAJ,EAAA,YAAAn9G,GAA0C,WAAAA,GAC1C,CACAktE,UAAA,CAAgBltE,MAAA,EAAAw9G,UAAA,GAChBx6D,UAAA,CAAgBhjD,MAAA,IAAAw9G,UAAA,KAGhB/9G,OAAA89G,iBACAJ,EAAA,aAAAn9G,GAA4C,aAAAA,GAC5C,CACAktE,UAAA,CAAgBltE,MAAA,EAAAw9G,UAAA,GAChBx6D,UAAA,CAAgBhjD,MAAA,MAAAw9G,UAAA,KAGhB/9G,OAAA89G,iBACAJ,EAAA,IAAAA,EAAA,eAAAn9G,GAAmE,OAAAA,IAAA,GACnE,CACAktE,UAAA,CAAgBltE,MAAA,EAAAw9G,UAAA,GAChBx6D,UAAA,CAAgBhjD,MAAA,WAAAw9G,UAAA,KAGhB/9G,OAAA89G,iBACAJ,EAAA,cAAAn9G,GAA8C,QAAAA,GAC9C,CACAktE,UAAA,CAAgBltE,OAAA,EAAAw9G,UAAA,GAChBx6D,UAAA,CAAgBhjD,OAAA,EAAAw9G,UAAA,KAGhB/9G,OAAA89G,iBACAJ,EAAA,aAAAn9G,GAA4C,OAAAiG,KAAAw3G,OAAAz9G,IAC5C,CACA09G,QAAA,CAAgB19G,MAAAiG,KAAAw3G,OAAA,cAAAD,UAAA,GAChBtwC,UAAA,CAAgBltE,MAAAiG,KAAAw3G,OAAA,cAAAD,UAAA,GAChBx6D,UAAA,CAAgBhjD,MAAAiG,KAAAw3G,OAAA,aAAAD,UAAA,GAChBG,iBAAA,CAAwB39G,MAAAiG,KAAAw3G,OAAA,eAAAD,UAAA,GACxBI,iBAAA,CAAwB59G,OAAA,SAAAw9G,UAAA,GACxBK,iBAAA,CAAwB79G,MAAA,SAAAw9G,UAAA,KAGxB/9G,OAAA89G,iBACAJ,EAAA,aAAAn9G,GAA4C,OAAAA,GAC5C,CACA09G,QAAA,CAAgB19G,MAAA,qBAAAw9G,UAAA,GAChBtwC,UAAA,CAAgBltE,MAAA,OAAAw9G,UAAA,GAChBx6D,UAAA,CAAgBhjD,MAAA,sBAAAw9G,UAAA,GAChBG,iBAAA,CAAwB39G,MAAA,uBAAAw9G,UAAA,GACxBI,iBAAA,CAAwB59G,OAAA,iBAAAw9G,UAAA,GACxBK,iBAAA,CAAwB79G,MAAA,iBAAAw9G,UAAA,KAGxBL,EAAA,IAAAl3G,KAAA63G,MAEAX,EAAA,aAAAn9G,GACA,IAAAZ,EAAA6G,KAAA63G,MAAA99G,MACA,OAAAA,EAAA,GAAAZ,KAGA+9G,EAAA,gBAAAn9G,GAGA,kBADAA,GAAA,WADAA,OAAA,gBACAA,IAAA,eACAA,IAAA,oBAGAm9G,EAAA,cAAAn9G,EAAAo7C,GAEA,OAAAp7C,IADAo7C,GAAA,IACAp7C,IAAA,GAAAo7C,GAGA+hE,EAAA,cAAAn9G,EAAAo7C,GAEA,OAAAp7C,KADAo7C,GAAA,IACAp7C,GAAA,GAAAo7C,GAGA+hE,EAAA,IAAAl3G,KAAAynF,IAEAyvB,EAAA,IAAAl3G,KAAA4jE,IAEAszC,EAAA,IAAAl3G,KAAAmoF,IAEA+uB,EAAA,KAAAl3G,KAAA8qD,KAEAosD,EAAA,MAAAl3G,KAAAsoF,MAGA4uB,EAAA,iBAAAn9G,GACA,WAAAiG,KAAAynF,IAAA1tF,EAAAiG,KAAAypF,MAAA1vF,IACA,EAAAiG,KAAA83G,MAAA,GAAA/9G,GAEAiG,KAAA83G,MAAA/9G,IAGAm9G,EAAA,gBAAA3lG,EAAAC,EAAA9D,GACA,OAAAA,EAAA6D,EAAAC,GAGA0lG,EAAA,KAAAl3G,KAAAspF,KAEA4tB,EAAA,MAAAl3G,KAAAypF,MAEAytB,EAAA,kBAAA/0G,EAAA41G,GACA,OAAA/3G,KAAAynF,IAAAtlF,GAAAnC,KAAAg4G,KAAAD,IAGAb,EAAA,eAAAn9G,GACA,IAAAy4D,EAAAz4D,GAAA,WACA04D,GAAA,SAAA14D,IAAA,EAIA,OAFAy4D,GADAz4D,EAAAy4D,EAAAC,IACA,WACAA,GAAA,MAAA14D,IAAA,KAIAm9G,EAAA,iBAAAn9G,GACA,OAAAA,GAAA,QAAAA,GAAA,iBAAAA,GAUAo9G,EAAAz8G,UAAAlB,OAAAY,OAAA2tB,MAAArtB,WACAy8G,EAAAz8G,UAAArB,KAAA,mBACA89G,EAAAz8G,UAAA6I,QAAA,cAEA2zG,EAAA,uBACA,UAAAC,GAWAE,EAAA38G,UAAAlB,OAAAY,OAAA2tB,MAAArtB,WACA28G,EAAA38G,UAAArB,KAAA,iBAEA69G,EAAA,gBAAAe,EAAA10G,GACA,GAAA00G,EAAA,OAAAA,EACA,UAAAZ,EAAA9zG,IAGA2zG,EAAA,oBAAAn9G,GACA,OAAAA,GAGA0F,OAAA,uBAAA4mD,GACA,OAAA5mD,OAAA+2D,aAAAphD,MAAA3V,OAAA4mD,IAGA5mD,OAAA,wBAAA4mD,GACA,OAAA5mD,OAAAy4G,cAAA9iG,MAAA3V,OAAA4mD,IAGA5mD,OAAA/E,UAAAy9G,YACA3+G,OAAAC,eAAAgG,OAAA/E,UAAA,cACAX,MAAA,SAAAq+G,EAAAC,GACA,IAAAC,EAAA7/G,KAAA8/G,MAAAH,GAAAhzG,KAAAizG,GAEA,OADAD,EAAAxzG,SAAA0zG,EAAAD,EAAAC,EAAAD,GACAC,KAKApB,EAAA,UAAAsB,OAAAhzB,UAEA0xB,EAAA,iBAAA75F,GACA,uBAAAA,GAGA65F,EAAA,oBAAA75F,GACA,UAGA65F,EAAA,qBAAA75F,GACA,uBAAAA,GAAA,iBAAAA,GAGA65F,EAAA,oBAAA75F,GACA,yBAAAA,GAGA65F,EAAA,kBAAA75F,GACA,uBAAAA,gBAAA5d,QAGAy3G,EAAA,QAAAx3G,MAAAqmF,QACAmxB,EAAA,qBAAAttG,GACA,OAAAA,GACA,iBAAAA,GACA,iBAAAA,EAAAhF,QACAgF,EAAAhF,QAAA,GACA5E,KAAAypF,MAAA7/E,EAAAhF,UAAAgF,EAAAhF,QAGAlF,MAAAtF,OAAA,SAAAq+G,GACA,IAAApyD,EAAA,IAAA3mD,MAAA+4G,GAEA,OADApyD,EAAAzhD,OAAA,EACAyhD,GAGA6wD,EAAA,mBAAAttG,GACA,gBAAAA,GAGAstG,EAAA,oBAAAttG,GACA,UAGAstG,EAAA,mBAAAttG,GACA,OAAAA,GAGAstG,EAAA,cAAA/0G,EAAA41G,GACA,OAAA51G,EAAA41G,GAGAb,EAAA,eAAA/0G,EAAA41G,GACA,OAAA/3G,KAAAw3G,OAAAr1G,EAAA41G,IAGAb,EAAA,OAAAl3G,KAEAxG,OAAA89G,iBAAAJ,EAAA,QACAwB,WAAA,CAAe3+G,MAAA,EAAAw9G,UAAA,GACfoB,WAAA,CAAe5+G,MAAA,EAAAw9G,UAAA,GACfqB,QAAA,CACA7+G,MAAA,SAAAoI,GACiB,OAAjB5C,EAAA,GAAA4C,EAAiB02G,QAAA15G,EAAA,QAAAgD,QAGjB22G,OAAA,CACA/+G,MAAA,SAAAoI,GACA1J,KAAAigH,WAAA14G,KAAA+4G,IAAA52G,GACA1J,KAAAkgH,WAAA34G,KAAAg5G,IAAA72G,OAKA+0G,EAAA,aACA,IAAA+B,EAAA,IAAA34G,WAAA,GACA44G,EAAA,EACA,OACAtrE,SAAAspE,EAAA,4BAAAljE,GACA,KAAAA,KAAA,YACA,GAAAklE,EAAAllE,EAAAilE,EAAAr0G,OAAA,CACA,IAAAu0G,EAAAF,GACAA,EAAA,IAAA34G,WAAAN,KAAA4jE,IAAA,MAAAq1C,EAAAr0G,OAAAovC,EAAA,EAAAilE,EAAAr0G,UACAqR,IAAAkjG,GAEA,IAAAzoE,EAAAwoE,EAEA,OADA,GAAAA,GAAAllE,KAAAklE,EAAA,KAAAA,IACAxoE,GAEA0oE,KAAAlC,EAAA,wBAAAl/E,EAAAj+B,EAAAi6C,GACAilE,EAAAG,KAAAr/G,EAAAi+B,IAAAgc,IAEA9yC,KAAAg2G,EAAA,wBAAAxmE,KACA2oE,KAAAnC,EAAA,wBAAAl/E,EAAAD,EAAAic,GACAilE,EAAAK,WAAAthF,EAAAD,IAAAic,IAEAgiB,MAAAkhD,EAAA,2BACA+B,EAAA,IAAA34G,WAAA,GACA44G,EAAA,KAxBA,GA6BAhC,EAAA,MAAAA,EAAA,kBAAAxmE,EAAA32C,EAAA6mB,GACAq4F,MAAA,EAAAvoE,IAAA,EAAA9vB,IAAA7mB,GAGAm9G,EAAA,KAAAA,EAAA,iBAAAxmE,EAAA9vB,GACA,OAAAq4F,MAAA,EAAAvoE,IAAA,EAAA9vB,KAGAs2F,EAAA,2DChUA,SAAAtsF,GAAA,MAAArrB,EAAA,IAAAqB,aAAA,GACAtB,EAAA,IAAAqB,aAAApB,EAAAohB,QACA9hB,EAAA,IAAAuB,WAAAb,EAAAohB,QAEAiK,EAAA2uF,WAAA,SAAAx/G,GAEA,OADAuF,EAAA,GAAAvF,EACA8E,EAAA,IAGA+rB,EAAA4uF,WAAA,SAAAz/G,GAEA,OADA8E,EAAA,GAAA9E,EACAuF,EAAA,IAGAsrB,EAAA6uF,WAAA,SAAA1/G,GAEA,OADAwF,EAAA,GAAAxF,EACAwoB,QAAA1jB,EAAA,GAAAA,EAAA,KAGA+rB,EAAA8uF,WAAA,SAAA3/G,GAGA,OAFA8E,EAAA,GAAAw5C,QAAAt+C,GACA8E,EAAA,GAAAy5C,SAAAv+C,GACAwF,EAAA,wCCtBA,SAAAqrB,GAAA,MAAA+uF,EAAA/uF,EAAA+uF,MAA4B/gH,EAAQ,IAEpCgyB,EAAA8yC,SAAAi8C,EAAAC,KAEAhvF,EAAAivF,QAAAF,EAAAG,IAEAlvF,EAAArI,QAAA,SAAAw3F,EAAAC,GACA,OAAAL,EAAAM,SAAAF,EAAAC,IAGApvF,EAAAytB,QAAA,SAAAt+C,GACA,OAAAA,EAAAmgH,KAGAtvF,EAAA0tB,SAAA,SAAAv+C,GACA,OAAAA,EAAAogH,MAGAvvF,EAAA2sC,QAAA,SAAA5sD,EAAAC,GACA,OAAAD,EAAAuX,IAAAtX,IAGAggB,EAAA6yC,QAAA,SAAA9yD,EAAAC,GACA,OAAAD,EAAAyvG,IAAAxvG,IAGAggB,EAAAitC,QAAA,SAAAltD,EAAAC,GACA,OAAAD,EAAA0vG,IAAAzvG,IAGAggB,EAAA0vF,QAAA,SAAA3vG,EAAAC,GACA,OAAAD,EAAA4vG,IAAA3vG,IAGAggB,EAAA4vF,UAAA,SAAA7vG,EAAAC,GACA,OAAAD,EAAA8vG,aAAAF,IAAA3vG,EAAA6vG,cAAAC,YAGA9vF,EAAA+vF,QAAA,SAAAhwG,EAAAC,GACA,OAAAD,EAAA5J,IAAA6J,IAGAggB,EAAAgwF,UAAA,SAAAjwG,EAAAC,GACA,OAAAD,EAAA8vG,aAAA15G,IAAA6J,EAAA6vG,cAAAC,YAGA9vF,EAAAiwF,QAAA,SAAAlwG,EAAAC,GACA,OAAAD,EAAAmwG,IAAAlwG,IAGAggB,EAAAmwF,OAAA,SAAApwG,EAAAC,GACA,OAAAD,EAAAqwG,GAAApwG,IAGAggB,EAAAqwF,QAAA,SAAAtwG,EAAAC,GACA,OAAAD,EAAAuwG,IAAAtwG,IAGAggB,EAAA4sC,QAAA,SAAA7sD,EAAAC,GACA,OAAAD,EAAAwwG,IAAAvwG,IAGAggB,EAAAwwF,QAAA,SAAAzwG,EAAAC,GACA,OAAAD,EAAA0wG,IAAAzwG,IAGAggB,EAAAigD,UAAA,SAAAlgE,EAAAC,GACA,OAAAD,EAAA2wG,KAAA1wG,IAGAggB,EAAA2wF,QAAA,SAAAxhH,GACA,OAAAA,EAAAyhH,OAGA5wF,EAAA6wF,OAAA,SAAA9wG,EAAAC,GACA,OAAAD,EAAA+wG,GAAA9wG,IAGAggB,EAAA+wF,OAAA,SAAAhxG,EAAAC,GACA,OAAAD,EAAAixG,GAAAhxG,IAGAggB,EAAA+/C,UAAA,SAAA5wE,EAAAk2E,GACAptE,OAAAotE,GAAA,IAAAA,IAAA,IACA,IAAAp7B,EAAA8kE,EAAAkC,QAAA5rC,EAAA,GACA,OAAAl2E,EAAAmoB,IAAA2yB,GAAAimE,IAAAjmE,EAAA2mE,QAGA5wF,EAAAqyC,UAAA,SAAAljE,GACA,WAAAA,EAAAogH,MAAApgH,EAAAmgH,KAAA,GAAAngH,EAAAmgH,KAAAv+G,GAAAohD,YACA,IAAAhjD,EAAAogH,MAAApgH,EAAAmgH,KAAAv+G,GAAAsrE,WAAAltE,EAAAmgH,IAAA,GAGAtvF,EAAAuyC,WAAA,SAAApjE,GACA,WAAAA,EAAAogH,MAAApgH,EAAAmgH,KAAA,GAAAngH,EAAAmgH,KAAAt+G,IAAAmhD,YACA,IAAAhjD,EAAAogH,MAAApgH,EAAAmgH,KAAAt+G,IAAAqrE,WAAAltE,EAAAmgH,IAAA,GAGAtvF,EAAAyyC,WAAA,SAAAtjE,GACA,WAAAA,EAAAogH,MAAApgH,EAAAmgH,KAAA,IACA,IAAAngH,EAAAogH,MAAApgH,EAAAmgH,IAAA,GAGAtvF,EAAAsyC,UAAA,SAAAnjE,GACA,WAAAA,EAAAogH,MAAApgH,EAAAmgH,KAAA,GAAAngH,EAAAmgH,KAAAl+G,GAAA+gD,WAGAnyB,EAAAwyC,WAAA,SAAArjE,GACA,WAAAA,EAAAogH,MAAApgH,EAAAmgH,KAAA,GAAAngH,EAAAmgH,KAAAj+G,IAAA8gD,WAGAnyB,EAAA0yC,WAAA,SAAAvjE,GACA,WAAAA,EAAAogH,MAGAvvF,EAAA2yC,YAAA,SAAAxjE,GACA,WAAAA,EAAAogH,OAAA,IAAApgH,EAAAmgH,KAAA,IAAAngH,EAAAmgH,MAGA,MAAA4B,EAAAnC,EAAAoC,WAAAz/G,IAAAq7G,kBACAqE,EAAArC,EAAAoC,WAAAz/G,IAAAs7G,kBAEAhtF,EAAAqxF,WAAA,SAAAliH,GACA,OAAAA,EAAAmiH,IAAAJ,IAAA/hH,EAAAoiH,IAAAH,IAGA,MAAAI,EAAAzC,EAAAoC,WAAAx/G,IAAAo7G,kBACA0E,EAAA1C,EAAAoC,WAAAx/G,IAAAq7G,kBAEAhtF,EAAA0xF,WAAA,SAAAviH,GACA,OAAAA,EAAAmiH,IAAAE,IAAAriH,EAAAoiH,IAAAE,IAGAzxF,EAAA23D,WAAA,SAAAxoF,GACA,OAAA6wB,EAAA5qB,KAAAw3G,OAAAz9G,EAAAwiH,aAGA3xF,EAAA43D,WAAA,SAAAzoF,GACA,OAAAA,EAAAwiH,YAGA3xF,EAAA0+E,cAAA,SAAAvvG,EAAAyiH,GACA,OAAAA,EAAAziH,EAAA0gH,aAAA1gH,GAAAoK,SAAA,sCC9IA/L,EAAAD,QAAAwhH,EAKA,IAAA8C,EAAA,KAEA,IACAA,EAAA,IAAAC,YAAAC,SAAA,IAAAD,YAAArvE,OAAA,IAAA/sC,WAAA,CACA,m2BACA,IAASnI,QACR,MAAA2gE,IAcD,SAAA6gD,EAAAO,EAAAC,EAAAqC,GAMA/jH,KAAAyhH,IAAA,EAAAA,EAMAzhH,KAAA0hH,KAAA,EAAAA,EAMA1hH,KAAA+jH,aAoCA,SAAAI,EAAAC,GACA,YAAAA,KAAA,YAXAlD,EAAAj/G,UAAAoiH,WAEAtjH,OAAAC,eAAAkgH,EAAAj/G,UAAA,cAAqDX,OAAA,IAkBrD4/G,EAAAiD,SAOA,IAAAG,EAAA,GAOAC,EAAA,GAQA,SAAAnB,EAAA9hH,EAAAyiH,GACA,IAAAK,EAAAI,EAAAC,EACA,OAAAV,GAEAU,EAAA,IADAnjH,KAAA,IACAA,EAAA,OACAkjH,EAAAD,EAAAjjH,IAEAkjH,GAEAJ,EAAA5C,EAAAlgH,GAAA,EAAAA,GAAA,WACAmjH,IACAF,EAAAjjH,GAAA8iH,GACAA,IAGAK,GAAA,MADAnjH,GAAA,IACAA,EAAA,OACAkjH,EAAAF,EAAAhjH,IAEAkjH,GAEAJ,EAAA5C,EAAAlgH,IAAA,WACAmjH,IACAH,EAAAhjH,GAAA8iH,GACAA,GAmBA,SAAAd,EAAAhiH,EAAAyiH,GACA,GAAAW,MAAApjH,GACA,OAAAyiH,EAAAY,EAAAxD,EACA,GAAA4C,EAAA,CACA,GAAAziH,EAAA,EACA,OAAAqjH,EACA,GAAArjH,GAAAsjH,EACA,OAAAC,MACK,CACL,GAAAvjH,IAAAwjH,EACA,OAAAt2C,EACA,GAAAltE,EAAA,GAAAwjH,EACA,OAAAxgE,EAEA,OAAAhjD,EAAA,EACAgiH,GAAAhiH,EAAAyiH,GAAAgB,MACAvD,EAAAlgH,EAAA0jH,EAAA,EAAA1jH,EAAA0jH,EAAA,EAAAjB,GAmBA,SAAAvC,EAAAyD,EAAAC,EAAAnB,GACA,WAAA7C,EAAA+D,EAAAC,EAAAnB,GA5CA7C,EAAAkC,UAkCAlC,EAAAoC,aAsBApC,EAAAM,WASA,IAAA2D,EAAA59G,KAAAc,IASA,SAAA+8G,EAAAthE,EAAAigE,EAAAsB,GACA,OAAAvhE,EAAA33C,OACA,MAAAmjB,MAAA,gBACA,WAAAw0B,GAAA,aAAAA,GAAA,cAAAA,GAAA,cAAAA,EACA,OAAAq9D,EASA,GARA,iBAAA4C,GAEAsB,EAAAtB,EACAA,GAAA,GAEAA,OAEAsB,KAAA,IACA,MAAAA,EACA,MAAAC,WAAA,SAEA,IAAAnjH,EACA,IAAAA,EAAA2hD,EAAA6vD,QAAA,QACA,MAAArkF,MAAA,mBACA,OAAAntB,EACA,OAAAijH,EAAAthE,EAAAr3C,UAAA,GAAAs3G,EAAAsB,GAAAN,MAQA,IAHA,IAAAQ,EAAAjC,EAAA6B,EAAAE,EAAA,IAEA1vE,EAAAwrE,EACA9gH,EAAA,EAAmBA,EAAAyjD,EAAA33C,OAAgB9L,GAAA,GACnC,IAAAk7C,EAAAh0C,KAAAmoF,IAAA,EAAA5rC,EAAA33C,OAAA9L,GACAiB,EAAA+tB,SAAAy0B,EAAAr3C,UAAApM,IAAAk7C,GAAA8pE,GACA,GAAA9pE,EAAA,GACA,IAAAiqE,EAAAlC,EAAA6B,EAAAE,EAAA9pE,IACA5F,IAAAisE,IAAA4D,GAAA/7F,IAAA65F,EAAAhiH,SAGAq0C,GADAA,IAAAisE,IAAA2D,IACA97F,IAAA65F,EAAAhiH,IAIA,OADAq0C,EAAAouE,WACApuE,EAoBA,SAAA8vE,EAAAt4D,EAAA42D,GACA,uBAAA52D,EACAm2D,EAAAn2D,EAAA42D,GACA,iBAAA52D,EACAi4D,EAAAj4D,EAAA42D,GAEAvC,EAAAr0D,EAAAs0D,IAAAt0D,EAAAu0D,KAAA,kBAAAqC,IAAA52D,EAAA42D,UAfA7C,EAAAkE,aAyBAlE,EAAAuE,YAUA,IAcAT,EAAAU,WAOAd,EAAAI,IAOAF,EAAAF,EAAA,EAOAe,EAAAvC,EA5BA,OAkCAjC,EAAAiC,EAAA,GAMAlC,EAAAC,OAMA,IAAAwD,EAAAvB,EAAA,MAMAlC,EAAAyD,QAMA,IAAAtD,EAAA+B,EAAA,GAMAlC,EAAAG,MAMA,IAAAuE,EAAAxC,EAAA,MAMAlC,EAAA0E,OAMA,IAAAC,EAAAzC,GAAA,GAMAlC,EAAA2E,UAMA,IAAAvhE,EAAAk9D,GAAA,iBAMAN,EAAA58D,YAMA,IAAAugE,EAAArD,GAAA,SAMAN,EAAA2D,qBAMA,IAAAr2C,EAAAgzC,EAAA,kBAMAN,EAAA1yC,YAMA,IAAAs3C,EAAA5E,EAAAj/G,UAMA6jH,EAAAC,MAAA,WACA,OAAA/lH,KAAA+jH,SAAA/jH,KAAAyhH,MAAA,EAAAzhH,KAAAyhH,KAOAqE,EAAAhC,SAAA,WACA,OAAA9jH,KAAA+jH,UACA/jH,KAAA0hH,OAAA,GAAAsD,GAAAhlH,KAAAyhH,MAAA,GACAzhH,KAAA0hH,KAAAsD,GAAAhlH,KAAAyhH,MAAA,IAUAqE,EAAAp6G,SAAA,SAAA25G,GAEA,IADAA,KAAA,IACA,MAAAA,EACA,MAAAC,WAAA,SACA,GAAAtlH,KAAAgmH,SACA,UACA,GAAAhmH,KAAAimH,aAAA,CACA,GAAAjmH,KAAAijH,GAAAz0C,GAAA,CAGA,IAAA03C,EAAA5C,EAAA+B,GACAvD,EAAA9hH,KAAA8hH,IAAAoE,GACAC,EAAArE,EAAAF,IAAAsE,GAAAvE,IAAA3hH,MACA,OAAA8hH,EAAAp2G,SAAA25G,GAAAc,EAAAJ,QAAAr6G,SAAA25G,GAEA,UAAArlH,KAAA+kH,MAAAr5G,SAAA25G,GAQA,IAHA,IAAAE,EAAAjC,EAAA6B,EAAAE,EAAA,GAAArlH,KAAA+jH,UACAqC,EAAApmH,KACA21C,EAAA,KACA,CACA,IAAA0wE,EAAAD,EAAAtE,IAAAyD,GAEAe,GADAF,EAAAzE,IAAA0E,EAAAzE,IAAA2D,IAAAQ,UAAA,GACAr6G,SAAA25G,GAEA,IADAe,EAAAC,GACAL,SACA,OAAAM,EAAA3wE,EAEA,KAAA2wE,EAAAn6G,OAAA,GACAm6G,EAAA,IAAAA,EACA3wE,EAAA,GAAA2wE,EAAA3wE,IASAmwE,EAAAS,YAAA,WACA,OAAAvmH,KAAA0hH,MAOAoE,EAAAU,oBAAA,WACA,OAAAxmH,KAAA0hH,OAAA,GAOAoE,EAAAW,WAAA,WACA,OAAAzmH,KAAAyhH,KAOAqE,EAAAY,mBAAA,WACA,OAAA1mH,KAAAyhH,MAAA,GAOAqE,EAAAa,cAAA,WACA,GAAA3mH,KAAAimH,aACA,OAAAjmH,KAAAijH,GAAAz0C,GAAA,GAAAxuE,KAAA+kH,MAAA4B,gBAEA,IADA,IAAAx5D,EAAA,GAAAntD,KAAA0hH,KAAA1hH,KAAA0hH,KAAA1hH,KAAAyhH,IACAmF,EAAA,GAAsBA,EAAA,GACtB,IAAAz5D,EAAA,GAAAy5D,GAD+BA,KAG/B,UAAA5mH,KAAA0hH,KAAAkF,EAAA,GAAAA,EAAA,GAOAd,EAAAE,OAAA,WACA,WAAAhmH,KAAA0hH,MAAA,IAAA1hH,KAAAyhH,KAOAqE,EAAAe,IAAAf,EAAAE,OAMAF,EAAAG,WAAA,WACA,OAAAjmH,KAAA+jH,UAAA/jH,KAAA0hH,KAAA,GAOAoE,EAAAgB,WAAA,WACA,OAAA9mH,KAAA+jH,UAAA/jH,KAAA0hH,MAAA,GAOAoE,EAAAiB,MAAA,WACA,aAAA/mH,KAAAyhH,MAOAqE,EAAAkB,OAAA,WACA,aAAAhnH,KAAAyhH,MAQAqE,EAAAmB,OAAA,SAAAloF,GAGA,OAFAolF,EAAAplF,KACAA,EAAA0mF,EAAA1mF,KACA/+B,KAAA+jH,WAAAhlF,EAAAglF,UAAA/jH,KAAA0hH,OAAA,OAAA3iF,EAAA2iF,OAAA,SAEA1hH,KAAA0hH,OAAA3iF,EAAA2iF,MAAA1hH,KAAAyhH,MAAA1iF,EAAA0iF,MASAqE,EAAA7C,GAAA6C,EAAAmB,OAOAnB,EAAAoB,UAAA,SAAAnoF,GACA,OAAA/+B,KAAAijH,GAAAlkF,IASA+mF,EAAAqB,IAAArB,EAAAoB,UAQApB,EAAA3C,GAAA2C,EAAAoB,UAOApB,EAAAsB,SAAA,SAAAroF,GACA,OAAA/+B,KAAAqnH,KAAAtoF,GAAA,GASA+mF,EAAAwB,GAAAxB,EAAAsB,SAOAtB,EAAAyB,gBAAA,SAAAxoF,GACA,OAAA/+B,KAAAqnH,KAAAtoF,IAAA,GASA+mF,EAAApC,IAAAoC,EAAAyB,gBAQAzB,EAAA0B,GAAA1B,EAAAyB,gBAOAzB,EAAA2B,YAAA,SAAA1oF,GACA,OAAA/+B,KAAAqnH,KAAAtoF,GAAA,GASA+mF,EAAA4B,GAAA5B,EAAA2B,YAOA3B,EAAA6B,mBAAA,SAAA5oF,GACA,OAAA/+B,KAAAqnH,KAAAtoF,IAAA,GASA+mF,EAAArC,IAAAqC,EAAA6B,mBAQA7B,EAAA8B,GAAA9B,EAAA6B,mBAQA7B,EAAA3xD,QAAA,SAAAp1B,GAGA,GAFAolF,EAAAplF,KACAA,EAAA0mF,EAAA1mF,IACA/+B,KAAAijH,GAAAlkF,GACA,SACA,IAAA8oF,EAAA7nH,KAAAimH,aACA6B,EAAA/oF,EAAAknF,aACA,OAAA4B,IAAAC,GACA,GACAD,GAAAC,EACA,EAEA9nH,KAAA+jH,SAGAhlF,EAAA2iF,OAAA,EAAA1hH,KAAA0hH,OAAA,GAAA3iF,EAAA2iF,OAAA1hH,KAAA0hH,MAAA3iF,EAAA0iF,MAAA,EAAAzhH,KAAAyhH,MAAA,OAFAzhH,KAAA2hH,IAAA5iF,GAAAknF,cAAA,KAYAH,EAAAuB,KAAAvB,EAAA3xD,QAMA2xD,EAAAiC,OAAA,WACA,OAAA/nH,KAAA+jH,UAAA/jH,KAAAijH,GAAAz0C,GACAA,EACAxuE,KAAA+iH,MAAAt5F,IAAA43F,IAQAyE,EAAAf,IAAAe,EAAAiC,OAOAjC,EAAAr8F,IAAA,SAAAu+F,GACA7D,EAAA6D,KACAA,EAAAvC,EAAAuC,IAIA,IAAAC,EAAAjoH,KAAA0hH,OAAA,GACAwG,EAAA,MAAAloH,KAAA0hH,KACAyG,EAAAnoH,KAAAyhH,MAAA,GACA2G,EAAA,MAAApoH,KAAAyhH,IAEA4G,EAAAL,EAAAtG,OAAA,GACA4G,EAAA,MAAAN,EAAAtG,KACA6G,EAAAP,EAAAvG,MAAA,GAGA+G,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAYA,OAVAD,IADAC,GAAAP,GAHA,MAAAJ,EAAAvG,QAIA,GAGAgH,IADAC,GAAAP,EAAAI,KACA,GAGAC,IADAC,GAAAP,EAAAI,KACA,GAEAE,GAAAP,EAAAI,EAEA7G,GANAkH,GAAA,QAMA,IATAC,GAAA,QAQAH,GAAA,QACA,IAHAC,GAAA,OAGAzoH,KAAA+jH,WAQA+B,EAAA8C,SAAA,SAAAC,GAGA,OAFA1E,EAAA0E,KACAA,EAAApD,EAAAoD,IACA7oH,KAAAypB,IAAAo/F,EAAA9D,QASAe,EAAAnE,IAAAmE,EAAA8C,SAOA9C,EAAAgD,SAAA,SAAAC,GACA,GAAA/oH,KAAAgmH,SACA,OAAA7E,EAKA,GAJAgD,EAAA4E,KACAA,EAAAtD,EAAAsD,IAGA/E,EAKA,OAAAxC,EAJAwC,EAAApC,IAAA5hH,KAAAyhH,IACAzhH,KAAA0hH,KACAqH,EAAAtH,IACAsH,EAAArH,MACAsC,EAAAgF,WAAAhpH,KAAA+jH,UAGA,GAAAgF,EAAA/C,SACA,OAAA7E,EACA,GAAAnhH,KAAAijH,GAAAz0C,GACA,OAAAu6C,EAAAhC,QAAAv4C,EAAA2yC,EACA,GAAA4H,EAAA9F,GAAAz0C,GACA,OAAAxuE,KAAA+mH,QAAAv4C,EAAA2yC,EAEA,GAAAnhH,KAAAimH,aACA,OAAA8C,EAAA9C,aACAjmH,KAAA+kH,MAAAnD,IAAAmH,EAAAhE,OAEA/kH,KAAA+kH,MAAAnD,IAAAmH,GAAAhE,MACK,GAAAgE,EAAA9C,aACL,OAAAjmH,KAAA4hH,IAAAmH,EAAAhE,aAGA,GAAA/kH,KAAAsnH,GAAA3B,IAAAoD,EAAAzB,GAAA3B,GACA,OAAArC,EAAAtjH,KAAA8jH,WAAAiF,EAAAjF,WAAA9jH,KAAA+jH,UAKA,IAAAkE,EAAAjoH,KAAA0hH,OAAA,GACAwG,EAAA,MAAAloH,KAAA0hH,KACAyG,EAAAnoH,KAAAyhH,MAAA,GACA2G,EAAA,MAAApoH,KAAAyhH,IAEA4G,EAAAU,EAAArH,OAAA,GACA4G,EAAA,MAAAS,EAAArH,KACA6G,EAAAQ,EAAAtH,MAAA,GACAwH,EAAA,MAAAF,EAAAtH,IAEA+G,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAqBA,OAnBAD,IADAC,GAAAP,EAAAa,KACA,GAGAR,IADAC,GAAAP,EAAAc,KACA,GACAP,GAAA,MAEAD,IADAC,GAAAN,EAAAG,KACA,GAGAC,IADAC,GAAAP,EAAAe,KACA,GACAR,GAAA,MAEAD,IADAC,GAAAN,EAAAI,KACA,GACAE,GAAA,MAEAD,IADAC,GAAAL,EAAAE,KACA,GAEAE,GAAAP,EAAAgB,EAAAf,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEA7G,GAZAkH,GAAA,QAYA,IAlBAC,GAAA,QAiBAH,GAAA,QACA,IAHAC,GAAA,OAGAzoH,KAAA+jH,WASA+B,EAAAlE,IAAAkE,EAAAgD,SAQAhD,EAAAoD,OAAA,SAAAC,GAGA,GAFAhF,EAAAgF,KACAA,EAAA1D,EAAA0D,IACAA,EAAAnD,SACA,MAAA12F,MAAA,oBAaA,IAWA85F,EAAAhD,EAAAvG,EArBA,GAAAmE,EAIA,OAAAhkH,KAAA+jH,WACA,aAAA/jH,KAAA0hH,OACA,IAAAyH,EAAA1H,MAAA,IAAA0H,EAAAzH,KAUAF,GANAxhH,KAAA+jH,SAAAC,EAAAqF,MAAArF,EAAAsF,OACAtpH,KAAAyhH,IACAzhH,KAAA0hH,KACAyH,EAAA1H,IACA0H,EAAAzH,MAEAsC,EAAAgF,WAAAhpH,KAAA+jH,UARA/jH,KAWA,GAAAA,KAAAgmH,SACA,OAAAhmH,KAAA+jH,SAAAY,EAAAxD,EAEA,GAAAnhH,KAAA+jH,SA6BK,CAKL,GAFAoF,EAAApF,WACAoF,IAAAnH,cACAmH,EAAAzB,GAAA1nH,MACA,OAAA2kH,EACA,GAAAwE,EAAAzB,GAAA1nH,KAAA6iH,KAAA,IACA,OAAA+C,EACA/F,EAAA8E,MAtCA,CAGA,GAAA3kH,KAAAijH,GAAAz0C,GACA,OAAA26C,EAAAlG,GAAA5B,IAAA8H,EAAAlG,GAAA4C,GACAr3C,EACA26C,EAAAlG,GAAAz0C,GACA6yC,GAIA+H,EADAppH,KAAA4iH,IAAA,GACAd,IAAAqH,GAAAzG,IAAA,IACAO,GAAA9B,GACAgI,EAAAlD,aAAA5E,EAAAwE,GAEAO,EAAApmH,KAAA2hH,IAAAwH,EAAAvH,IAAAwH,IACAvJ,EAAAuJ,EAAA3/F,IAAA28F,EAAAtE,IAAAqH,KAIS,GAAAA,EAAAlG,GAAAz0C,GACT,OAAAxuE,KAAA+jH,SAAAY,EAAAxD,EACA,GAAAnhH,KAAAimH,aACA,OAAAkD,EAAAlD,aACAjmH,KAAA+kH,MAAAjD,IAAAqH,EAAApE,OACA/kH,KAAA+kH,MAAAjD,IAAAqH,GAAApE,MACS,GAAAoE,EAAAlD,aACT,OAAAjmH,KAAA8hH,IAAAqH,EAAApE,aACAlF,EAAAsB,EAmBA,IADAiF,EAAApmH,KACAomH,EAAA3C,IAAA0F,IAAA,CAGAC,EAAA7hH,KAAA4jE,IAAA,EAAA5jE,KAAAsoF,MAAAu2B,EAAAtC,WAAAqF,EAAArF,aAWA,IAPA,IAAAyF,EAAAhiH,KAAA8qD,KAAA9qD,KAAAiiH,IAAAJ,GAAA7hH,KAAAkiH,KACAC,EAAAH,GAAA,KAAApE,EAAA,EAAAoE,EAAA,IAIAI,EAAArG,EAAA8F,GACAQ,EAAAD,EAAA/H,IAAAuH,GACAS,EAAA3D,cAAA2D,EAAAlC,GAAAtB,IAGAwD,GADAD,EAAArG,EADA8F,GAAAM,EACA1pH,KAAA+jH,WACAnC,IAAAuH,GAKAQ,EAAA3D,WACA2D,EAAAtI,GAEAxB,IAAAp2F,IAAAkgG,GACAvD,IAAAzE,IAAAiI,GAEA,OAAA/J,GASAiG,EAAAhE,IAAAgE,EAAAoD,OAOApD,EAAA+D,OAAA,SAAAV,GAKA,OAJAhF,EAAAgF,KACAA,EAAA1D,EAAA0D,IAGAnF,EAOAxC,GANAxhH,KAAA+jH,SAAAC,EAAA8F,MAAA9F,EAAA+F,OACA/pH,KAAAyhH,IACAzhH,KAAA0hH,KACAyH,EAAA1H,IACA0H,EAAAzH,MAEAsC,EAAAgF,WAAAhpH,KAAA+jH,UAGA/jH,KAAA2hH,IAAA3hH,KAAA8hH,IAAAqH,GAAAvH,IAAAuH,KASArD,EAAAx9G,IAAAw9G,EAAA+D,OAQA/D,EAAAM,IAAAN,EAAA+D,OAMA/D,EAAA/C,IAAA,WACA,OAAAvB,GAAAxhH,KAAAyhH,KAAAzhH,KAAA0hH,KAAA1hH,KAAA+jH,WAQA+B,EAAAzD,IAAA,SAAAtjF,GAGA,OAFAolF,EAAAplF,KACAA,EAAA0mF,EAAA1mF,IACAyiF,EAAAxhH,KAAAyhH,IAAA1iF,EAAA0iF,IAAAzhH,KAAA0hH,KAAA3iF,EAAA2iF,KAAA1hH,KAAA+jH,WAQA+B,EAAAvD,GAAA,SAAAxjF,GAGA,OAFAolF,EAAAplF,KACAA,EAAA0mF,EAAA1mF,IACAyiF,EAAAxhH,KAAAyhH,IAAA1iF,EAAA0iF,IAAAzhH,KAAA0hH,KAAA3iF,EAAA2iF,KAAA1hH,KAAA+jH,WAQA+B,EAAArD,IAAA,SAAA1jF,GAGA,OAFAolF,EAAAplF,KACAA,EAAA0mF,EAAA1mF,IACAyiF,EAAAxhH,KAAAyhH,IAAA1iF,EAAA0iF,IAAAzhH,KAAA0hH,KAAA3iF,EAAA2iF,KAAA1hH,KAAA+jH,WAQA+B,EAAAkE,UAAA,SAAAC,GAGA,OAFA9F,EAAA8F,KACAA,IAAAlE,SACA,IAAAkE,GAAA,IACAjqH,KACAiqH,EAAA,GACAzI,EAAAxhH,KAAAyhH,KAAAwI,EAAAjqH,KAAA0hH,MAAAuI,EAAAjqH,KAAAyhH,MAAA,GAAAwI,EAAAjqH,KAAA+jH,UAEAvC,EAAA,EAAAxhH,KAAAyhH,KAAAwI,EAAA,GAAAjqH,KAAA+jH,WASA+B,EAAApD,IAAAoD,EAAAkE,UAOAlE,EAAAoE,WAAA,SAAAD,GAGA,OAFA9F,EAAA8F,KACAA,IAAAlE,SACA,IAAAkE,GAAA,IACAjqH,KACAiqH,EAAA,GACAzI,EAAAxhH,KAAAyhH,MAAAwI,EAAAjqH,KAAA0hH,MAAA,GAAAuI,EAAAjqH,KAAA0hH,MAAAuI,EAAAjqH,KAAA+jH,UAEAvC,EAAAxhH,KAAA0hH,MAAAuI,EAAA,GAAAjqH,KAAA0hH,MAAA,OAAA1hH,KAAA+jH,WASA+B,EAAAlD,IAAAkD,EAAAoE,WAOApE,EAAAqE,mBAAA,SAAAF,GAIA,GAHA9F,EAAA8F,KACAA,IAAAlE,SAEA,KADAkE,GAAA,IAEA,OAAAjqH,KAEA,IAAA0hH,EAAA1hH,KAAA0hH,KACA,OAAAuI,EAAA,GAEAzI,EADAxhH,KAAAyhH,MACAwI,EAAAvI,GAAA,GAAAuI,EAAAvI,IAAAuI,EAAAjqH,KAAA+jH,UAEAvC,EADS,KAAAyI,EACTvI,EAEAA,IAAAuI,EAAA,GAFA,EAAAjqH,KAAA+jH,WAYA+B,EAAAjD,KAAAiD,EAAAqE,mBAQArE,EAAAsE,MAAAtE,EAAAqE,mBAMArE,EAAA7D,SAAA,WACA,OAAAjiH,KAAA+jH,SAEAvC,EAAAxhH,KAAAyhH,IAAAzhH,KAAA0hH,MAAA,GADA1hH,MAQA8lH,EAAA9D,WAAA,WACA,OAAAhiH,KAAA+jH,SACA/jH,KACAwhH,EAAAxhH,KAAAyhH,IAAAzhH,KAAA0hH,MAAA,IAQAoE,EAAAuE,QAAA,SAAA7C,GACA,OAAAA,EAAAxnH,KAAAsqH,YAAAtqH,KAAAuqH,aAOAzE,EAAAwE,UAAA,WACA,IAAA/I,EAAAvhH,KAAA0hH,KACAJ,EAAAthH,KAAAyhH,IACA,OACA,IAAAH,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,GACA,IAAAC,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,KAQAuE,EAAAyE,UAAA,WACA,IAAAhJ,EAAAvhH,KAAA0hH,KACAJ,EAAAthH,KAAAyhH,IACA,OACAF,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,EACAD,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,IAWAJ,EAAAsJ,UAAA,SAAA3zE,EAAAktE,EAAAyD,GACA,OAAAA,EAAAtG,EAAAuJ,YAAA5zE,EAAAktE,GAAA7C,EAAAwJ,YAAA7zE,EAAAktE,IASA7C,EAAAuJ,YAAA,SAAA5zE,EAAAktE,GACA,WAAA7C,EACArqE,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAA,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAktE,IAUA7C,EAAAwJ,YAAA,SAAA7zE,EAAAktE,GACA,WAAA7C,EACArqE,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAA,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAktE,mFCryCA,SAAkB76G,GAEhBA,IAAA,eAEAA,IAAA,mCAEAA,IAAA,mCAEAA,IAAA,6BAEAA,IAAA,eAEAA,IAAA,sBAZF,CAAkBxJ,EAAAwJ,UAAAxJ,EAAAwJ,QAAO,oFCAzB,SAAYE,GAEVA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,WANF,CAAY1J,EAAA0J,SAAA1J,EAAA0J,OAAM,qbCalB,IAAAE,EAAA,oBAAAA,KAKA,OALaA,EAAQqhH,EAAA,CADpBC,WACYthH,GAAb,GAAa5J,EAAA4J,WAQb,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,qCAEAA,IAAA,iBAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,sBAEAA,IAAA,kCAEAA,IAAA,kCAEAA,IAAA,mCAEAA,IAAA,mCAEAA,IAAA,mCAEAA,IAAA,kCAEAA,IAAA,gCAEAA,IAAA,sCAEAA,IAAA,oCAEAA,IAAA,iCAEAA,IAAA,iCAEAA,IAAA,iCAEAA,IAAA,kCAEAA,IAAA,kCAEAA,IAAA,gCAEAA,IAAA,+BAEAA,IAAA,qCAEAA,IAAA,mCAhDF,CAAkB7J,EAAA6J,gBAAA7J,EAAA6J,cAAa,oVClB/B,IAAAojF,EAAAxsF,EAAA,IACA0qH,EAAA1qH,EAAA,IACA2qH,EAAA3qH,EAAA,IACA0jB,EAAA1jB,EAAA,GAiCoCT,EAAAqrH,iBAjCYlnG,EAAAjX,wBAEhD,IAAAo+G,EAAA7qH,EAAA,IAIAT,EAAA+zG,UAAA,SAA0BxnG,EAAcyL,EAAcg8F,EACpDuX,GAIA,YALoD,IAAAvX,OAAA,QACpD,IAAAuX,MAAA,MAEKA,IAAQA,EAAS,IAAID,EAAA9X,QAC1B+X,EAAOxX,UAAUxnG,EAAMyL,EAAMg8F,GACtBuX,GAITvrH,EAAAg2G,SAAA,SAAyBuV,GACvB,OAAOA,EAAOvV,YAIhBh2G,EAAAi2G,YAAA,SAA4BsV,EAAgBtgG,GAC1C,OAAOsgG,EAAOtV,YAAYhrF,IAI5BjrB,EAAAwrH,eAAA,SAA+BD,GAC7B,IAAI10F,EAAU00F,EAAO10F,QACrB,OAAOA,EAAQvP,kBAAoBuP,EAAQxpB,YAAYZ,OACnDoqB,EAAQxpB,YAAYwpB,EAAQvP,qBAC5B,MAONtnB,EAAAyrH,OAAA,SAAuBrgH,GACrB,OAAOA,EAAQd,UAAY6Z,EAAAla,mBAAmBM,MAIhDvK,EAAA0rH,UAAA,SAA0BtgH,GACxB,OAAOA,EAAQd,UAAY6Z,EAAAla,mBAAmBO,SAIhDxK,EAAA2rH,QAAA,SAAwBvgH,GACtB,OAAOA,EAAQd,UAAY6Z,EAAAla,mBAAmBQ,OAIhDzK,EAAA4rH,cAAA,WACE,OAAO,IAAI3+B,EAAA3d,SAIbtvE,EAAA6rH,UAAA,SAA0BpiG,EAAkBwU,GAC1CxU,EAAQwU,OAASA,GAInBj+B,EAAA8rH,YAAA,SAA4BriG,EAAkBe,GAC5Cf,EAAQe,SAAWA,GAIrBxqB,EAAA+rH,gBAAA,SAAgCtiG,EAAkB8lD,GAChD9lD,EAAQ8lD,aAAeA,GAIzBvvE,EAAAgsH,gBAAA,SAAgCviG,EAAkB+lD,GAChD/lD,EAAQ+lD,aAAeA,GAIzBxvE,EAAAisH,eAAA,SAA+BxiG,EAAkBgmD,GAC/ChmD,EAAQgmD,YAAcA,GAIxBzvE,EAAAksH,aAAA,SAA6BziG,EAAkBiS,GAC7CjS,EAAQiS,UAAYA,GAItB17B,EAAAmsH,cAAA,SAA8B1iG,EAAkBgB,GAC9ChB,EAAQgB,WAAaA,GAIvBzqB,EAAAosH,eAAA,SAA+B3iG,EAAkBtN,EAAejb,GAC9D,IAAIouB,EAAgB7F,EAAQ6F,cACvBA,IAAe7F,EAAQ6F,cAAgBA,EAAgB,IAAI5nB,KAChE4nB,EAAcxR,IAAI3B,EAAOjb,IAI3BlB,EAAAqsH,iBAAA,SAAiC5iG,EAAkBimD,GACjDjmD,EAAQimD,cAAgBA,GAI1B1vE,EAAAssH,YAAA,SAA4B7iG,EAAkBmmD,GAC5CnmD,EAAQmmD,SAAWA,GAIR5vE,EAAAusH,uBAAsB,EAEtBvsH,EAAAwsH,uBAAsB,EAEtBxsH,EAAAysH,oBAAmB,EAEnBzsH,EAAA0sH,aAAY,EAEZ1sH,EAAA2sH,gBAAe,GAG5B3sH,EAAA4sH,cAAA,SAA8BnjG,EAAkBomD,GAC9CpmD,EAAQkmD,UAAYE,GAItB7vE,EAAA6sH,sBAAA,SAAsCpjG,EAAkBqjG,EAAoBC,GAC1EtjG,EAAQiB,kBAAoBoiG,EAC5BrjG,EAAQkB,gBAAkBoiG,GAI5B/sH,EAAAgtH,cAAA,SAA8BzB,GAC5B,OAAOA,EAAO9qD,UAIhBzgE,EAAAitH,eAAA,SAA+Bp2F,EAAkBpN,GAC/C,YAD+C,IAAAA,MAAA,MACxC,IAAIwjE,EAAA/c,SAASr5C,EAASpN,GAAS6nD,WAIxCtxE,EAAAktH,gBAAA,SAAgCjtH,GAC9B,IAAI6wG,EAAa,IAAIqa,EAAAxa,WAErB,OADAG,EAAWD,UAAU5wG,GACd6wG,EAAWrwC,UAIpBzgE,EAAAmtH,SAAA,SAAyBt2F,GACvB,OAAOu0F,EAAA5Y,WAAWE,MAAM77E,IAI1B72B,EAAAotH,SAAA,SAAyBv2F,GACvB,OAAOu0F,EAAAnY,WAAWP,MAAM77E,IAI1B72B,EAAAqtH,UAAA,SAA0Bx2F,mBACpB/pB,EAAK,IAAIvF,MACbuF,EAAGE,KAAK,yBACR,IAAgB,IAAA4kB,EAAA9F,EAAA+K,EAAQjP,eAAejT,UAAQwd,EAAAP,EAAAtiB,QAAA6iB,EAAAnG,KAAAmG,EAAAP,EAAAtiB,OAAE,CAA5C,IAAIg+G,EAAGn7F,EAAAvwB,MACVkL,EAAGE,KAAK,SACRF,EAAGE,KAAKsgH,EAAIllG,cACZtb,EAAGE,KAAK,0GAEVF,EAAGE,KAAK,2BACR,IAAgB,IAAAolB,EAAAtG,EAAA+K,EAAQjP,eAAejT,UAAQsX,EAAAmG,EAAA9iB,QAAA2c,EAAAD,KAAAC,EAAAmG,EAAA9iB,OAAE,CAA5C,IACCytB,GADGuwF,EAAGrhG,EAAArqB,OACKm7B,KACfjwB,EAAGE,KAAK,QACRF,EAAGE,KAAK+vB,EAAOA,EAAKlU,GAAG7c,WAAa,KACpCc,EAAGE,KAAK,yGAEVF,EAAGE,KAAK,4BACR,IAAgB,IAAA+f,EAAAjB,EAAA+K,EAAQjP,eAAejT,UAAQwY,EAAAJ,EAAAzd,QAAA6d,EAAAnB,KAAAmB,EAAAJ,EAAAzd,OAAtCg+G,EAAGngG,EAAAvrB,MACVkL,EAAGE,KAAK,QACRF,EAAGE,KAAKsgH,EAAIjwF,UAAUrxB,YACtBc,EAAGE,KAAK,wGAGV,OADAF,EAAGE,KAAK,YACDF,EAAGG,KAAK,KAIjB,IAAAY,EAAApN,EAAA,GAAST,EAAAoD,eAAAyK,EAAAzK,eAGT0G,EAAArJ,EAAA,IAEAqJ,EAAArJ,EAAA,IACAqJ,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,IACAqJ,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,IACAqJ,EAAArJ,EAAA,KACAqJ,EAAArJ,EAAA,IACAqJ,EAAArJ,EAAA,IACAqJ,EAAArJ,EAAA,IACAqJ,EAAArJ,EAAA,IACAqJ,EAAArJ,EAAA,mFC/MAT,EAAAutH,SAAA,SAAyBC,EAAU10F,GAEjC,OADApuB,OAAOouB,GAAS,GAAKA,EAAQ,IACtB0qF,OACLd,QACE8K,EACAnuD,QACEqiD,QACAt3F,QAAQ0O,KAGZysC,WAKJvlE,EAAAytH,UAAA,SAA0BD,EAAU10F,EAAY40F,GAE9C,OADAhjH,OAAOouB,GAAS,GAAKA,EAAQ,IACtB40F,EACH9K,OACE4K,EACAnuD,QACEqiD,QACAt3F,QAAQ0O,KAGZ4pF,QACE8K,EACApK,QACE/jD,QACEqiD,QACAt3F,QAAQ0O,sFC9BpB,SAAkB60F,GAEhBA,IAAA,eACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,oCACAA,IAAA,8CACAA,IAAA,yBAEAA,IAAA,kBACAA,IAAA,yCACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,wBACAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,oCACAA,IAAA,gCACAA,IAAA,0CACAA,IAAA,4BACAA,IAAA,4BACAA,IAAA,sCACAA,IAAA,8CACAA,IAAA,2CACAA,IAAA,4CACAA,IAAA,oBAEAA,IAAA,UAEAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UAEAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,eACAA,IAAA,kBACAA,IAAA,6BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,oBACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,2BACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,mBAEAA,IAAA,yBACAA,IAAA,wBACAA,IAAA,qCACAA,IAAA,aACAA,IAAA,8BAnIF,CAAkB3tH,EAAA2tH,WAAA3tH,EAAA2tH,SAAQ,KAuI1B3tH,EAAA4M,YAAA,SAA4B5L,GAC1B,OAAQA,GACN,QACA,QACA,UACA,UACE,OAAO,EAET,QACE,OAAO,IAMbhB,EAAA88D,aAAA,SAA6B97D,GAC3B,OAAQA,GACN,QACA,OACA,QACA,QACA,SACA,SACA,UACA,UACA,UACA,WACA,WACE,OAAO,EAET,QACE,OAAOA,GAAC,MAAuBA,GAAC,OAMtChB,EAAAo7D,eAAA,SAA+Bp6D,GAC7B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAA++D,aAAA,SAA6B/9D,GAC3B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAAu8D,kBAAA,SAAkCv7D,GAChC,OAAOA,GAAC,IAAkBA,GAAC,KACpBA,GAAC,IAAkBA,GAAC,IACnB,IAADA,GACC,IAADA,GACAA,EAAI,QAmLqBmK,EAnLYnK,GAoL9B,GAAKmK,EAAO,QACnByiH,EAAmBziH,EAAa0iH,GAFzC,IAAkC1iH,GA/KlCnL,EAAAw8D,mBAAA,SAAmCx7D,GACjC,OAAOA,GAAC,IAAkBA,GAAC,KAI7BhB,EAAA08D,iBAAA,SAAiC17D,GAC/B,OAAOA,GAAC,IAAkBA,GAAC,KACpBA,GAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAmBA,GAAC,IACpB,IAADA,GACC,IAADA,GACAA,EAAI,QAyKoBmK,EAzKYnK,GA0K7B,GAAKmK,EAAO,QACnByiH,EAAmBziH,EAAa2iH,GAFzC,IAAiC3iH,GArKjC,IAAM0iH,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\r\n * Common constants.\r\n * @module common\r\n *//***/\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\r\n  DEFINITE_ASSIGNMENT = 1 << 13,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 14,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 15,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 16,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 17,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is resolved. */\r\n  RESOLVED = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 26,\r\n  /** Is the main function. */\r\n  MAIN = 1 << 27,\r\n\r\n  // Other\r\n\r\n  /** Is quoted. */\r\n  QUOTED = 1 << 28\r\n}\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Path index suffix. */\r\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\r\n\r\n/** Common compiler symbols. */\r\nexport namespace CommonSymbols {\r\n  // special\r\n  export const EMPTY = \"\";\r\n  // types\r\n  export const i8 = \"i8\";\r\n  export const i16 = \"i16\";\r\n  export const i32 = \"i32\";\r\n  export const i64 = \"i64\";\r\n  export const isize = \"isize\";\r\n  export const u8 = \"u8\";\r\n  export const u16 = \"u16\";\r\n  export const u32 = \"u32\";\r\n  export const u64 = \"u64\";\r\n  export const usize = \"usize\";\r\n  export const bool = \"bool\";\r\n  export const f32 = \"f32\";\r\n  export const f64 = \"f64\";\r\n  export const v128 = \"v128\";\r\n  export const i8x16 = \"i8x16\";\r\n  export const u8x16 = \"u8x16\";\r\n  export const i16x8 = \"i16x8\";\r\n  export const u16x8 = \"u16x8\";\r\n  export const i32x4 = \"i32x4\";\r\n  export const u32x4 = \"u32x4\";\r\n  export const i64x2 = \"i64x2\";\r\n  export const u64x2 = \"u64x2\";\r\n  export const f32x4 = \"f32x4\";\r\n  export const f64x2 = \"f64x2\";\r\n  export const void_ = \"void\";\r\n  export const number = \"number\";\r\n  export const boolean = \"boolean\";\r\n  export const string = \"string\";\r\n  export const native = \"native\";\r\n  export const indexof = \"indexof\";\r\n  export const valueof = \"valueof\";\r\n  // aliases\r\n  export const null_ = \"null\";\r\n  export const true_ = \"true\";\r\n  export const false_ = \"false\";\r\n  // objects\r\n  export const this_ = \"this\";\r\n  export const super_ = \"super\";\r\n  export const constructor = \"constructor\";\r\n  // constants\r\n  export const ASC_TARGET = \"ASC_TARGET\";\r\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\r\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\r\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\r\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\r\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\r\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\r\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\r\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\r\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\r\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\r\n  // classes\r\n  export const I8 = \"I8\";\r\n  export const I16 = \"I16\";\r\n  export const I32 = \"I32\";\r\n  export const I64 = \"I64\";\r\n  export const Isize = \"Isize\";\r\n  export const U8 = \"U8\";\r\n  export const U16 = \"U16\";\r\n  export const U32 = \"U32\";\r\n  export const U64 = \"U64\";\r\n  export const Usize = \"Usize\";\r\n  export const Bool = \"Bool\";\r\n  export const F32 = \"F32\";\r\n  export const F64 = \"F64\";\r\n  export const V128 = \"V128\";\r\n  export const String = \"String\";\r\n  export const Array = \"Array\";\r\n  export const FixedArray = \"FixedArray\";\r\n  export const Set = \"Set\";\r\n  export const Map = \"Map\";\r\n  export const ArrayBufferView = \"ArrayBufferView\";\r\n  export const ArrayBuffer = \"ArrayBuffer\";\r\n  export const Math = \"Math\";\r\n  export const Mathf = \"Mathf\";\r\n  export const Int8Array = \"Int8Array\";\r\n  export const Int16Array = \"Int16Array\";\r\n  export const Int32Array = \"Int32Array\";\r\n  export const Int64Array = \"Int64Array\";\r\n  export const Uint8Array = \"Uint8Array\";\r\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\r\n  export const Uint16Array = \"Uint16Array\";\r\n  export const Uint32Array = \"Uint32Array\";\r\n  export const Uint64Array = \"Uint64Array\";\r\n  export const Float32Array = \"Float32Array\";\r\n  export const Float64Array = \"Float64Array\";\r\n  // runtime\r\n  export const abort = \"abort\";\r\n  export const pow = \"pow\";\r\n  export const mod = \"mod\";\r\n  export const alloc = \"__alloc\";\r\n  export const realloc = \"__realloc\";\r\n  export const free = \"__free\";\r\n  export const retain = \"__retain\";\r\n  export const release = \"__release\";\r\n  export const collect = \"__collect\";\r\n  export const typeinfo = \"__typeinfo\";\r\n  export const instanceof_ = \"__instanceof\";\r\n  export const visit = \"__visit\";\r\n  export const allocArray = \"__allocArray\";\r\n}\r\n\r\n// shared\r\nexport { Feature } from \"../std/assembly/shared/feature\";\r\nexport { Target } from \"../std/assembly/shared/target\";\r\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./bitset\";\r\nexport * from \"./charcode\";\r\nexport * from \"./collections\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n\r\n/** Tests if `x` is a power of two. */\r\nexport function isPowerOf2(x: i32): bool {\r\n  return x != 0 && (x & (x - 1)) == 0;\r\n}\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak, CharCode\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n  /** Related range, if any. */\r\n  relatedRange: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Adds a related source range to this message. */\r\n  withRelatedRange(range: Range): this {\r\n    this.relatedRange = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(range, useColors));\r\n    }\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n\r\n    let relatedRange = message.relatedRange;\r\n    if (relatedRange) {\r\n      if (showContext) {\r\n        sb.push(\"\\n\");\r\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\r\n      }\r\n      sb.push(\"\\n\");\r\n      sb.push(\" in \");\r\n      sb.push(range.source.normalizedPath);\r\n      sb.push(\"(\");\r\n      sb.push(range.line.toString(10));\r\n      sb.push(\",\");\r\n      sb.push(range.column.toString(10));\r\n      sb.push(\")\");\r\n    }\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) {\r\n      if (isLineBreak(text.charCodeAt(start))) {\r\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\r\n        break;\r\n      }\r\n      sb.push(\"~\");\r\n    }\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    relatedRange: Range | null,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    if (relatedRange) message.relatedRange = relatedRange;\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message with a related range. */\r\n  infoRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message with a related range. */\r\n  warningRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message with a related range. */\r\n  errorRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols,\r\n  PATH_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  NAMEDTYPE,\r\n  FUNCTIONTYPE,\r\n  TYPENAME,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  CLASS,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTDEFAULT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INDEXSIGNATUREDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable. */\r\nexport function nodeIsCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.ASSERTION: // if kind=NONNULL\r\n    case NodeKind.CALL:\r\n    case NodeKind.ELEMENTACCESS:\r\n    case NodeKind.PARENTHESIZED:\r\n    case NodeKind.PROPERTYACCESS:\r\n    case NodeKind.SUPER: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable with generic arguments. */\r\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n\r\n  // types\r\n\r\n  static createTypeName(\r\n    name: IdentifierExpression,\r\n    range: Range\r\n  ): TypeName {\r\n    var typeName = new TypeName();\r\n    typeName.range = range;\r\n    typeName.identifier = name;\r\n    typeName.next = null;\r\n    return typeName;\r\n  }\r\n\r\n  static createSimpleTypeName(\r\n    name: string,\r\n    range: Range\r\n  ): TypeName {\r\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\r\n  }\r\n\r\n  static createNamedType(\r\n    name: TypeName,\r\n    typeArguments: TypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): NamedTypeNode {\r\n    var type = new NamedTypeNode();\r\n    type.range = range;\r\n    type.name = name;\r\n    type.typeArguments = typeArguments;\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createFunctionType(\r\n    parameters: ParameterNode[],\r\n    returnType: TypeNode,\r\n    explicitThisType: NamedTypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): FunctionTypeNode {\r\n    var type = new FunctionTypeNode();\r\n    type.range = range;\r\n    type.parameters = parameters;\r\n    type.returnType = returnType;\r\n    type.explicitThisType = explicitThisType;\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): NamedTypeNode {\r\n    return Node.createNamedType(\r\n      Node.createSimpleTypeName(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: NamedTypeNode | null,\r\n    defaultType: NamedTypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.extendsType = extendsType;\r\n    elem.defaultType = defaultType;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: TypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.arguments = args;\r\n    stmt.decoratorKind = decoratorNameToKind(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range,\r\n    isQuoted: bool = false\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name; // TODO: extract from range\r\n    expr.symbol = name; // TODO: Symbol.for(name)\r\n    expr.isQuoted = isQuoted;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements;\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: TypeNode | null,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression;\r\n    expr.toType = toType;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left;\r\n    expr.right = right;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: TypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createClassExpression(\r\n    declaration: ClassDeclaration\r\n  ): ClassExpression {\r\n    var expr = new ClassExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions;\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.elementExpression = element;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: TypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.isType = isType;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: TypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createObjectLiteralExpression(\r\n    names: IdentifierExpression[],\r\n    values: Expression[],\r\n    range: Range\r\n  ): ObjectLiteralExpression {\r\n    var expr = new ObjectLiteralExpression();\r\n    expr.range = range;\r\n    expr.names = names;\r\n    expr.values = values;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.property = property;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition;\r\n    expr.ifThen = ifThen;\r\n    expr.ifElse = ifElse;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: NamedTypeNode | null, // can't be a function\r\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.implementsTypes = implementsTypes;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement;\r\n    stmt.condition = condition;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.values = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    isDeclare: bool,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.members = members;\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n          normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n        }\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    stmt.isDeclare = isDeclare;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportDefaultStatement(\r\n    declaration: DeclarationStatement,\r\n    range: Range\r\n  ): ExportDefaultStatement {\r\n    var stmt = new ExportDefaultStatement();\r\n    stmt.declaration = declaration;\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.externalName = externalName;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.localName = name;\r\n    if (!externalName) externalName = name;\r\n    elem.exportedName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.ifTrue = ifTrue;\r\n    stmt.ifFalse = ifFalse;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls;\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) {\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else {\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    foreignName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.foreignName = foreignName;\r\n    if (!name) name = foreignName;\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: NamedTypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: TypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.type = type;\r\n    stmt.initializer = initializer;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer;\r\n    stmt.condition = condition;\r\n    stmt.incrementor = incrementor;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: FunctionTypeNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    arrowKind: ArrowKind,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    stmt.arrowKind = arrowKind;\r\n    return stmt;\r\n  }\r\n\r\n  static createIndexSignatureDeclaration(\r\n    keyType: NamedTypeNode,\r\n    valueType: TypeNode,\r\n    range: Range\r\n  ): IndexSignatureDeclaration {\r\n    var elem = new IndexSignatureDeclaration();\r\n    elem.range = range;\r\n    elem.keyType = keyType;\r\n    elem.valueType = valueType;\r\n    return elem;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: FunctionTypeNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.cases = cases;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label;\r\n    elem.statements = statements;\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    stmt.catchVariable = catchVariable;\r\n    stmt.catchStatements = catchStatements;\r\n    stmt.finallyStatements = finallyStatements;\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: TypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.type = alias;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = declarations;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: TypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class TypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type name. */\r\nexport class TypeName extends Node {\r\n  kind = NodeKind.TYPENAME;\r\n\r\n  /** Identifier of this part. */\r\n  identifier: IdentifierExpression;\r\n  /** Next part of the type name or `null` if this is the last part. */\r\n  next: TypeName | null;\r\n}\r\n\r\n/** Represents a named type. */\r\nexport class NamedTypeNode extends TypeNode {\r\n  kind = NodeKind.NAMEDTYPE;\r\n\r\n  /** Type name. */\r\n  name: TypeName;\r\n  /** Type argument references. */\r\n  typeArguments: TypeNode[] | null;\r\n}\r\n\r\n/** Represents a function type. */\r\nexport class FunctionTypeNode extends TypeNode {\r\n  kind = NodeKind.FUNCTIONTYPE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: TypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: NamedTypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: NamedTypeNode | null; // can't be a function\r\n  /** Default type if omitted, if any. */\r\n  defaultType: NamedTypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: TypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  EXTERNAL,\r\n  BUILTIN,\r\n  LAZY,\r\n  UNSAFE\r\n}\r\n\r\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\r\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\r\n  // @global, @inline, @operator, @sealed, @unmanaged\r\n  if (name.kind == NodeKind.IDENTIFIER) {\r\n    let nameStr = (<IdentifierExpression>name).text;\r\n    assert(nameStr.length);\r\n    switch (nameStr.charCodeAt(0)) {\r\n      case CharCode.b: {\r\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\r\n        break;\r\n      }\r\n      case CharCode.e: {\r\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\r\n        break;\r\n      }\r\n      case CharCode.g: {\r\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n        break;\r\n      }\r\n      case CharCode.i: {\r\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n        break;\r\n      }\r\n      case CharCode.l: {\r\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\r\n        break;\r\n      }\r\n      case CharCode.o: {\r\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n        break;\r\n      }\r\n      case CharCode.s: {\r\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n        break;\r\n      }\r\n      case CharCode.u: {\r\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n        if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    name.kind == NodeKind.PROPERTYACCESS &&\r\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\r\n  ) {\r\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\r\n    assert(nameStr.length);\r\n    let propStr = (<PropertyAccessExpression>name).property.text;\r\n    assert(propStr.length);\r\n    // @operator.binary, @operator.prefix, @operator.postfix\r\n    if (nameStr == \"operator\") {\r\n      switch (propStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n          break;\r\n        }\r\n        case CharCode.p: {\r\n          switch (propStr) {\r\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n  /** Symbol. */\r\n  symbol: string; // TODO: symbol\r\n  /** Whether quoted or not. */\r\n  isQuoted: bool;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS,\r\n  NONNULL\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: TypeNode | null;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: TypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n\r\n  /** Gets the type arguments range for reporting. */\r\n  get typeArgumentsRange(): Range {\r\n    var typeArguments = this.typeArguments;\r\n    var numTypeArguments: i32;\r\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\r\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n\r\n  /** Gets the arguments range for reporting. */\r\n  get argumentsRange(): Range {\r\n    var args = this.arguments;\r\n    var numArguments = args.length;\r\n    if (numArguments) {\r\n      return Range.join(args[0].range, args[numArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n}\r\n\r\n/** Represents a class expression using the 'class' keyword. */\r\nexport class ClassExpression extends Expression {\r\n  kind = NodeKind.CLASS;\r\n\r\n  /** Inline class declaration. */\r\n  declaration: ClassDeclaration;\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n  symbol = CommonSymbols.constructor;\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: TypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n  symbol = CommonSymbols.null_;\r\n}\r\n\r\n/** Represents an object literal expression. */\r\nexport class ObjectLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.OBJECT;\r\n\r\n  /** Field names. */\r\n  names: IdentifierExpression[];\r\n  /** Field values. */\r\n  values: Expression[];\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n  symbol = CommonSymbols.super_;\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n  symbol = CommonSymbols.this_;\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n  symbol = CommonSymbols.true_;\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n  symbol = CommonSymbols.false_;\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** User-provided file. */\r\n  USER = 0,\r\n  /** User-provided entry file. */\r\n  USER_ENTRY = 1,\r\n  /** Library-provided file. */\r\n  LIBRARY = 2,\r\n  /** Library-provided entry file. */\r\n  LIBRARY_ENTRY = 3\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Simple path (last part without extension). */\r\n  simplePath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    var internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.internalPath = internalPath;\r\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\r\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  get isLibrary(): bool {\r\n    var kind = this.sourceKind;\r\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\r\n  }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents an index signature declaration. */\r\nexport class IndexSignatureDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\r\n\r\n  /** Key type. */\r\n  keyType: NamedTypeNode;\r\n  /** Value type. */\r\n  valueType: TypeNode;\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: TypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Base class type being extended, if any. */\r\n  extendsType: NamedTypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Local identifier. */\r\n  localName: IdentifierExpression;\r\n  /** Exported identifier. */\r\n  exportedName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a file export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n  /** Whether this is a declared export. */\r\n  isDeclare: bool;\r\n}\r\n\r\n/** Represents an `export default` statement. */\r\nexport class ExportDefaultStatement extends Statement {\r\n  kind = NodeKind.EXPORTDEFAULT;\r\n\r\n  /** Declaration being exported as default. */\r\n  declaration: DeclarationStatement;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Indicates the kind of an array function. */\r\nexport const enum ArrowKind {\r\n  /** Not an arrow function. */\r\n  NONE,\r\n  /** Parenthesized parameter list. */\r\n  ARROW_PARENTHESIZED,\r\n  /** Single parameter without parenthesis. */\r\n  ARROW_SINGLE\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: FunctionTypeNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n  /** Arrow function kind, if applicable. */\r\n  arrowKind: ArrowKind;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n\r\n  /** Clones this function declaration. */\r\n  clone(): FunctionDeclaration {\r\n    return Node.createFunctionDeclaration(\r\n      this.name,\r\n      this.typeParameters,\r\n      this.signature,\r\n      this.body,\r\n      this.decorators,\r\n      this.flags,\r\n      this.arrowKind,\r\n      this.range\r\n    );\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  foreignName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: TypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Finds the first decorator matching the specified kind. */\r\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.decoratorKind == kind) return decorator;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n/** Tests if the specified type node represents an omitted type. */\r\nexport function isTypeOmitted(type: TypeNode): bool {\r\n  if (type.kind == NodeKind.NAMEDTYPE) {\r\n    let name = (<NamedTypeNode>type).name;\r\n    return !(name.next || name.identifier.text.length);\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  INNER_DELIMITER,\r\n  LIBRARY_SUBST,\r\n  INDEX_SUFFIX,\r\n  CommonSymbols,\r\n  Feature,\r\n  Target\r\n} from \"./common\";\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  Range,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n  TypeParameterNode,\r\n  TypeNode,\r\n  NamedTypeNode,\r\n  FunctionTypeNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  decoratorNameToKind,\r\n  findDecorator,\r\n  ExportDefaultStatement\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  FunctionRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode,\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\nimport {\r\n  Resolver\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Flow\r\n} from \"./flow\";\r\n\r\n/** Represents a yet unresolved `import`. */\r\nclass QueuedImport {\r\n  constructor(\r\n    /** File being imported into. */\r\n    public localFile: File,\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. Is an `import *` if not set. */\r\n    public foreignIdentifier: IdentifierExpression | null,\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export`. */\r\nclass QueuedExport {\r\n  constructor(\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. */\r\n    public foreignIdentifier: IdentifierExpression,\r\n    /** Path to the other file if a re-export. */\r\n    public foreignPath: string | null,\r\n    /** Alternative path to the other file if a re-export. */\r\n    public foreignPathAlt: string | null\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export *`. */\r\nclass QueuedExportStar {\r\n  // stored in a map with localFile as the key\r\n  constructor(\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string,\r\n    /** Reference to the path literal for reporting. */\r\n    public pathLiteral: StringLiteralExpression\r\n  ) {}\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\n/** Returns the operator kind represented by the specified decorator and string argument. */\r\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n  assert(arg.length);\r\n  switch (decoratorKind) {\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.OPENBRACKET: {\r\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.ADD;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.SUB;\r\n          break;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          if (arg == \"*\") return OperatorKind.MUL;\r\n          if (arg == \"**\") return OperatorKind.POW;\r\n          break;\r\n        }\r\n        case CharCode.SLASH: {\r\n          if (arg == \"/\") return OperatorKind.DIV;\r\n          break;\r\n        }\r\n        case CharCode.PERCENT: {\r\n          if (arg == \"%\") return OperatorKind.REM;\r\n          break;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n          break;\r\n        }\r\n        case CharCode.BAR: {\r\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n          break;\r\n        }\r\n        case CharCode.CARET: {\r\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n          break;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          if (arg == \"==\") return OperatorKind.EQ;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!=\") return OperatorKind.NE;\r\n          break;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          if (arg == \">\") return OperatorKind.GT;\r\n          if (arg == \">=\") return OperatorKind.GE;\r\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n          break;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          if (arg == \"<\") return OperatorKind.LT;\r\n          if (arg == \"<=\") return OperatorKind.LE;\r\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_PREFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.PLUS;\r\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.MINUS;\r\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!\") return OperatorKind.NOT;\r\n          break;\r\n        }\r\n        case CharCode.TILDE: {\r\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_POSTFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Resolver instance. */\r\n  resolver: Resolver;\r\n  /** Array of sources. */\r\n  sources: Source[] = [];\r\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Special native code source. */\r\n  nativeSource: Source;\r\n  /** Special native code file. */\r\n  nativeFile: File;\r\n\r\n  // lookup maps\r\n\r\n  /** Files by unique internal name. */\r\n  filesByName: Map<string,File> = new Map();\r\n  /** Elements by unique internal name in element space. */\r\n  elementsByName: Map<string,Element> = new Map();\r\n  /** Elements by declaration. */\r\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\r\n  /** Element instances by unique internal name. */\r\n  instancesByName: Map<string,Element> = new Map();\r\n  /** Classes backing basic types like `i32`. */\r\n  typeClasses: Map<TypeKind,Class> = new Map();\r\n  /** Managed classes contained in the program, by id. */\r\n  managedClasses: Map<i32,Class> = new Map();\r\n  signatureTypes: Signature[] = new Array<Signature>(0);\r\n  signatureID: i32 = 0;\r\n\r\n  // standard references\r\n\r\n  /** ArrayBufferView reference. */\r\n  arrayBufferViewInstance: Class;\r\n  /** ArrayBuffer instance reference. */\r\n  arrayBufferInstance: Class;\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype;\r\n  /** Set prototype reference. */\r\n  setPrototype: ClassPrototype;\r\n  /** Map prototype reference. */\r\n  mapPrototype: ClassPrototype;\r\n  /** Fixed array prototype reference. */\r\n  fixedArrayPrototype: ClassPrototype;\r\n  /** Int8Array prototype. */\r\n  i8ArrayPrototype: ClassPrototype;\r\n  /** Int16Array prototype. */\r\n  i16ArrayPrototype: ClassPrototype;\r\n  /** Int32Array prototype. */\r\n  i32ArrayPrototype: ClassPrototype;\r\n  /** Int64Array prototype. */\r\n  i64ArrayPrototype: ClassPrototype;\r\n  /** Uint8Array prototype. */\r\n  u8ArrayPrototype: ClassPrototype;\r\n  /** Uint8ClampedArray prototype. */\r\n  u8ClampedArrayPrototype: ClassPrototype;\r\n  /** Uint16Array prototype. */\r\n  u16ArrayPrototype: ClassPrototype;\r\n  /** Uint32Array prototype. */\r\n  u32ArrayPrototype: ClassPrototype;\r\n  /** Uint64Array prototype. */\r\n  u64ArrayPrototype: ClassPrototype;\r\n  /** Float32Array prototype. */\r\n  f32ArrayPrototype: ClassPrototype;\r\n  /** Float64Array prototype. */\r\n  f64ArrayPrototype: ClassPrototype;\r\n  /** String instance reference. */\r\n  stringInstance: Class;\r\n  /** Abort function reference, if not explicitly disabled. */\r\n  abortInstance: Function | null;\r\n\r\n  // runtime references\r\n\r\n  /** RT `__alloc(size: usize, id: u32): usize` */\r\n  allocInstance: Function;\r\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\r\n  reallocInstance: Function;\r\n  /** RT `__free(ref: usize): void` */\r\n  freeInstance: Function;\r\n  /** RT `__retain(ref: usize): usize` */\r\n  retainInstance: Function;\r\n  /** RT `__release(ref: usize): void` */\r\n  releaseInstance: Function;\r\n  /** RT `__collect(): void` */\r\n  collectInstance: Function;\r\n  /** RT `__visit(ref: usize, cookie: u32): void` */\r\n  visitInstance: Function;\r\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\r\n  typeinfoInstance: Function;\r\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\r\n  instanceofInstance: Function;\r\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\r\n  allocArrayInstance: Function;\r\n\r\n  /** Next class id. */\r\n  nextClassId: u32 = 0;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(\r\n    /** Shared array of diagnostic messages (emitted so far). */\r\n    diagnostics: DiagnosticMessage[] | null = null\r\n  ) {\r\n    super(diagnostics);\r\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\r\n    this.nativeSource = nativeSource;\r\n    var nativeFile = new File(this, nativeSource);\r\n    this.nativeFile = nativeFile;\r\n    this.filesByName.set(nativeFile.internalName, nativeFile);\r\n    this.resolver = new Resolver(this);\r\n  }\r\n\r\n  /** Writes a common runtime header to the specified buffer. */\r\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\r\n    // BLOCK {\r\n    //   mmInfo: usize // WASM64 TODO\r\n    //   gcInfo: u32\r\n    //   rtId: u32\r\n    //   rtSize: u32\r\n    // }\r\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\r\n    writeI32(payloadSize, buffer, offset);\r\n    writeI32(1, buffer, offset + 4); // RC=1\r\n    writeI32(classInstance.id, buffer, offset + 8);\r\n    writeI32(payloadSize, buffer, offset + 12);\r\n  }\r\n\r\n  /** Gets the size of a runtime header. */\r\n  get runtimeHeaderSize(): i32 {\r\n    return 16;\r\n  }\r\n\r\n  /** Creates a native variable declaration. */\r\n  makeNativeVariableDeclaration(\r\n    /** The simple name of the variable */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `CONST`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): VariableDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createVariableDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null, null, null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native type declaration. */\r\n  makeNativeTypeDeclaration(\r\n    /** The simple name of the type. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): TypeDeclaration {\r\n    var range = this.nativeSource.range;\r\n    var identifier = Node.createIdentifierExpression(name, range);\r\n    return Node.createTypeDeclaration(\r\n      identifier,\r\n      null,\r\n      Node.createOmittedType(range),\r\n      null, flags, range\r\n    );\r\n  }\r\n\r\n  // a dummy signature for programmatically generated native functions\r\n  private nativeDummySignature: FunctionTypeNode | null = null;\r\n\r\n  /** Creates a native function declaration. */\r\n  makeNativeFunctionDeclaration(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): FunctionDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createFunctionDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null,\r\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\r\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\r\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\r\n          null, false, range\r\n        ),\r\n        null, false, range)\r\n      ),\r\n      null, null, flags, ArrowKind.NONE, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native namespace declaration. */\r\n  makeNativeNamespaceDeclaration(\r\n    /** The simple name of the namespace. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): NamespaceDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createNamespaceDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      [], null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native function. */\r\n  makeNativeFunction(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Concrete function signature. */\r\n    signature: Signature,\r\n    /** Parent element, usually a file, class or namespace. */\r\n    parent: Element = this.nativeFile,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE,\r\n    /** Decorator flags representing built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ): Function {\r\n    return new Function(\r\n      name,\r\n      new FunctionPrototype(\r\n        name,\r\n        parent,\r\n        this.makeNativeFunctionDeclaration(name, flags),\r\n        decoratorFlags\r\n      ),\r\n      signature\r\n    );\r\n  }\r\n\r\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\r\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\r\n    var elementsByDeclaration = this.elementsByDeclaration;\r\n    assert(elementsByDeclaration.has(declaration));\r\n    return elementsByDeclaration.get(declaration)!;\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n\r\n    // register native types\r\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\r\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\r\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\r\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\r\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\r\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\r\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\r\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\r\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\r\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\r\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\r\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\r\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\r\n    this.registerNativeType(CommonSymbols.void_, Type.void);\r\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\r\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\r\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\r\n      CommonSymbols.native,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\r\n      CommonSymbols.indexof,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\r\n      CommonSymbols.valueof,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\r\n\r\n    // register compiler hints\r\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\r\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\r\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\r\n      i64_new(options.noAssert ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\r\n      i64_new(options.memoryBase, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\r\n      i64_new(options.optimizeLevelHint, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\r\n      i64_new(options.shrinkLevelHint, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\r\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\r\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\r\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\r\n\r\n    // remember deferred elements\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\r\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // initialize relevant declaration-like statements of the entire program\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let file = new File(this, source);\r\n      this.filesByName.set(file.internalName, file);\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORTDEFAULT: {\r\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports * should be linkable now that all files have been processed\r\n    for (let [file, exportsStar] of queuedExportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let exportStar = exportsStar[i];\r\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\r\n        if (!foreignFile) {\r\n          this.error(\r\n            DiagnosticCode.File_0_not_found,\r\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\r\n          );\r\n          continue;\r\n        }\r\n        file.ensureExportStar(foreignFile);\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\r\n      let queuedImport = queuedImports[i];\r\n      let foreignIdentifier = queuedImport.foreignIdentifier;\r\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\r\n        let element = this.lookupForeign(\r\n          foreignIdentifier.text,\r\n          queuedImport.foreignPath,\r\n          queuedImport.foreignPathAlt,\r\n          queuedExports\r\n        );\r\n        if (element) {\r\n          queuedImport.localFile.add(\r\n            queuedImport.localIdentifier.text,\r\n            element,\r\n            true // isImport\r\n          );\r\n        } else {\r\n          // FIXME: file not found is not reported if this happens?\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\r\n          );\r\n        }\r\n      } else { // i.e. import * as bar from \"./bar\"\r\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\r\n        if (foreignFile) {\r\n          let localFile = queuedImport.localFile;\r\n          let localName = queuedImport.localIdentifier.text;\r\n          localFile.add(\r\n            localName,\r\n            foreignFile.asImportedNamespace(\r\n              localName,\r\n              localFile\r\n            ),\r\n            true // isImport\r\n          );\r\n        } else {\r\n          assert(false); // already reported by the parser not finding the file\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [file, exports] of queuedExports) {\r\n      for (let [exportName, queuedExport] of exports) {\r\n        let localName = queuedExport.localIdentifier.text;\r\n        let foreignPath = queuedExport.foreignPath;\r\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\r\n          let element = this.lookupForeign(\r\n            localName,\r\n            foreignPath,\r\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\r\n            queuedExports\r\n          );\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.localIdentifier.range,\r\n              foreignPath, localName\r\n            );\r\n          }\r\n        } else { // i.e. export { foo [as bar] }\r\n          let element = file.lookupInSelf(localName);\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            let globalElement = this.lookupGlobal(localName);\r\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\r\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Module_0_has_no_exported_member_1,\r\n                queuedExport.foreignIdentifier.range,\r\n                file.internalName, queuedExport.foreignIdentifier.text\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\r\n    assert(this.nextClassId == 0);\r\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\r\n    assert(this.arrayBufferInstance.id == 0);\r\n    this.stringInstance = this.requireClass(CommonSymbols.String);\r\n    assert(this.stringInstance.id == 1);\r\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\r\n    assert(this.arrayBufferViewInstance.id == 2);\r\n\r\n    // register classes backing basic types\r\n    this.registerNativeTypeClass(TypeKind.I8, CommonSymbols.I8);\r\n    this.registerNativeTypeClass(TypeKind.I16, CommonSymbols.I16);\r\n    this.registerNativeTypeClass(TypeKind.I32, CommonSymbols.I32);\r\n    this.registerNativeTypeClass(TypeKind.I64, CommonSymbols.I64);\r\n    this.registerNativeTypeClass(TypeKind.ISIZE, CommonSymbols.Isize);\r\n    this.registerNativeTypeClass(TypeKind.U8, CommonSymbols.U8);\r\n    this.registerNativeTypeClass(TypeKind.U16, CommonSymbols.U16);\r\n    this.registerNativeTypeClass(TypeKind.U32, CommonSymbols.U32);\r\n    this.registerNativeTypeClass(TypeKind.U64, CommonSymbols.U64);\r\n    this.registerNativeTypeClass(TypeKind.USIZE, CommonSymbols.Usize);\r\n    this.registerNativeTypeClass(TypeKind.BOOL, CommonSymbols.Bool);\r\n    this.registerNativeTypeClass(TypeKind.F32, CommonSymbols.F32);\r\n    this.registerNativeTypeClass(TypeKind.F64, CommonSymbols.F64);\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, CommonSymbols.V128);\r\n\r\n    // register views but don't instantiate them yet\r\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\r\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\r\n\r\n    // resolve base prototypes of derived classes\r\n    var resolver = this.resolver;\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let thisPrototype = queuedExtends[i];\r\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\r\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\r\n          this.error(\r\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\r\n          );\r\n        }\r\n        if (\r\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\r\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\r\n          );\r\n        }\r\n        thisPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          extendsNode.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    {\r\n      let globalAliases = options.globalAliases;\r\n      if (globalAliases) {\r\n        for (let [alias, name] of globalAliases) {\r\n          if (!name.length) continue; // explicitly disabled\r\n          let firstChar = name.charCodeAt(0);\r\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\r\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\r\n          } else {\r\n            let elementsByName = this.elementsByName;\r\n            let element = elementsByName.get(name);\r\n            if (element) {\r\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\r\n              elementsByName.set(alias, element);\r\n            }\r\n            else throw new Error(\"no such global element: \" + name);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register stdlib components\r\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\r\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\r\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\r\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\r\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\r\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\r\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\r\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\r\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\r\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\r\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\r\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\r\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\r\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\r\n\r\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\r\n    for (let file of this.filesByName.values()) {\r\n      let exports = file.exports;\r\n      if (exports !== null && file.source.sourceKind == SourceKind.USER_ENTRY) {\r\n        for (let element of exports.values()) this.markModuleExport(element);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Requires that a global library element of the specified kind is present and returns it. */\r\n  private require(name: string, kind: ElementKind): Element {\r\n    var element = this.lookupGlobal(name);\r\n    if (!element) throw new Error(\"missing \" + name);\r\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\r\n    return element;\r\n  }\r\n\r\n  /** Requires that a non-generic global class is present and returns it. */\r\n  private requireClass(name: string): Class {\r\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\r\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\r\n    if (!resolved) throw new Error(\"invalid \" + name);\r\n    return resolved;\r\n  }\r\n\r\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\r\n  private lookupFunction(name: string): Function | null {\r\n    var prototype = this.lookupGlobal(name);\r\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\r\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n  }\r\n\r\n  /** Requires that a non-generic global function is present and returns it. */\r\n  private requireFunction(name: string): Function {\r\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\r\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n    if (!resolved) throw new Error(\"invalid \" + name);\r\n    return resolved;\r\n  }\r\n\r\n  /** Marks an element and its children as a module export. */\r\n  private markModuleExport(element: Element): void {\r\n    element.set(CommonFlags.MODULE_EXPORT);\r\n    switch (element.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\r\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) this.markModuleExport(getterPrototype);\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) this.markModuleExport(setterPrototype);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY:\r\n      case ElementKind.FUNCTION:\r\n      case ElementKind.FIELD:\r\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\r\n    }\r\n    {\r\n      let members = element.members;\r\n      if (members) for (let member of members.values()) this.markModuleExport(member);\r\n    }\r\n  }\r\n\r\n  /** Registers a native type with the program. */\r\n  private registerNativeType(name: string, type: Type): void {\r\n    var element = new TypeDefinition(\r\n      name,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\r\n      DecoratorFlags.BUILTIN\r\n    );\r\n    element.setType(type);\r\n    this.nativeFile.add(name, element);\r\n  }\r\n\r\n  /** Registers the backing class of a native type. */\r\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\r\n    assert(!this.typeClasses.has(typeKind));\r\n    var element = this.lookupGlobal(className);\r\n    if (element) {\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\r\n      if (classElement) this.typeClasses.set(typeKind, classElement);\r\n    }\r\n  }\r\n\r\n  /** Registers a constant integer value within the global scope. */\r\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\r\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantIntegerValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Registers a constant float value within the global scope. */\r\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\r\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantFloatValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\r\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\r\n    var elementsByName = this.elementsByName;\r\n    if (elementsByName.has(name)) {\r\n      let actual = elementsByName.get(name)!;\r\n      // NOTE: this is effectively only performed when merging native types with\r\n      // their respective namespaces in std/builtins, but can also trigger when a\r\n      // user has multiple global elements of the same name in different files,\r\n      // which might result in unexpected shared symbols accross files. considering\r\n      // this a wonky feature for now that we might want to revisit later.\r\n      if (actual !== element) {\r\n        let merged = tryMerge(elementsByName.get(name)!, element);\r\n        if (!merged) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, name\r\n          );\r\n          return element;\r\n        }\r\n        element = merged;\r\n      }\r\n    }\r\n    elementsByName.set(name, element);\r\n    return element;\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. */\r\n  lookupGlobal(name: string): Element | null {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name);\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\r\n  requireGlobal(name: string): Element {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name)!;\r\n    throw new Error(\"missing global\");\r\n  }\r\n\r\n  /** Tries to locate a foreign file given its normalized path. */\r\n  private lookupForeignFile(\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string\r\n  ): File | null {\r\n    var filesByName = this.filesByName;\r\n    return filesByName.has(foreignPath)\r\n         ? filesByName.get(foreignPath)!\r\n         : filesByName.has(foreignPathAlt)\r\n         ? filesByName.get(foreignPathAlt)!\r\n         : null;\r\n  }\r\n\r\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\r\n  private lookupForeign(\r\n    /** Identifier within the other file. */\r\n    foreignName: string,\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string,\r\n    /** So far queued exports. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): DeclaredElement | null {\r\n    do {\r\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\r\n      if (!foreignFile) return null; // no such file\r\n\r\n      // search already resolved exports\r\n      let element = foreignFile.lookupExport(foreignName);\r\n      if (element) return element;\r\n\r\n      // otherwise traverse queued exports\r\n      if (queuedExports.has(foreignFile)) {\r\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\r\n        if (fileQueuedExports.has(foreignName)) {\r\n          let queuedExport = fileQueuedExports.get(foreignName)!;\r\n          if (queuedExport.foreignPath) { // imported from another file\r\n            foreignName = queuedExport.localIdentifier.text;\r\n            foreignPath = queuedExport.foreignPath;\r\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\r\n            continue;\r\n          } else { // local element of this file\r\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\r\n            if (element) return element;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  /** Validates that only supported decorators are present. */\r\n  private checkDecorators(\r\n    /** Decorators present on an element. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\r\n    acceptedFlags: DecoratorFlags\r\n  ): DecoratorFlags {\r\n    var flags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        let kind = decoratorNameToKind(decorator.name);\r\n        let flag = decoratorKindToFlag(kind);\r\n        if (flag) {\r\n          if (flag == DecoratorFlags.BUILTIN) {\r\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\r\n              this.error(\r\n                DiagnosticCode.Decorator_0_is_not_valid_here,\r\n                decorator.range, decorator.name.range.toString()\r\n              );\r\n            } else {\r\n              flags |= flag;\r\n            }\r\n          } else if (!(acceptedFlags & flag)) {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else if (flags & flag) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_decorator,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else {\r\n            flags |= flag;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return flags;\r\n  }\r\n\r\n  /** Initializes a class declaration. */\r\n  private initializeClass(\r\n    /** The declaration to initialize. */\r\n    declaration: ClassDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): ClassPrototype | null {\r\n    var name = declaration.name.text;\r\n    var element = new ClassPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.SEALED |\r\n        DecoratorFlags.UNMANAGED\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      // cannot implement interfaces when unmanaged\r\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n      } else if (numImplementsTypes) {\r\n        // remember classes that implement interfaces\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.warning( // TODO: not yet supported\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n        queuedImplements.push(element);\r\n      }\r\n    }\r\n    // remember classes that extend another class\r\n    if (declaration.extendsType) queuedExtends.push(element);\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\r\n        default: assert(false); // class member expected\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a field of a class or interface. */\r\n  private initializeField(\r\n    /** The declaration to initialize. */\r\n    declaration: FieldDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var element: DeclaredElement;\r\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\r\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\r\n      element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(decorators,\r\n          (declaration.is(CommonFlags.READONLY)\r\n            ? DecoratorFlags.INLINE\r\n            : DecoratorFlags.NONE\r\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\r\n        ),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance field\r\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\r\n      element = new FieldPrototype(\r\n        name,\r\n        parent,\r\n        declaration,\r\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\r\n      );\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n  }\r\n\r\n  /** Initializes a method of a class or interface. */\r\n  private initializeMethod(\r\n    /** The declaration to initialize. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var isStatic = declaration.is(CommonFlags.STATIC);\r\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\r\n    if (!declaration.is(CommonFlags.GENERIC)) {\r\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\r\n                    |  DecoratorFlags.OPERATOR_PREFIX\r\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, acceptedFlags)\r\n    );\r\n    if (isStatic) { // global function\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance method\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\r\n  }\r\n\r\n  /** Checks that operator overloads are generally valid, if present. */\r\n  private checkOperatorOverloads(\r\n    /** Decorators to check. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Decorated method. */\r\n    prototype: FunctionPrototype,\r\n    /** Parent class. */\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = operatorKindFromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(10)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\r\n  private ensureProperty(\r\n    /** The declaration of the getter or setter introducing the property. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): PropertyPrototype | null {\r\n    var name = declaration.name.text;\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let parentMembers = parent.members;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name)!;\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.add(name, element)) return null;\r\n        return element;\r\n      }\r\n    } else {\r\n      let parentMembers = parent.instanceMembers;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name);\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.addInstance(name, element)) return null;\r\n        return element;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Duplicate_property_0,\r\n      declaration.name.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Initializes a property of a class. */\r\n  private initializeProperty(\r\n    /** The declaration of the getter or setter. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var property = this.ensureProperty(declaration, parent);\r\n    if (!property) return;\r\n    var name = declaration.name.text;\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    if (isGetter) {\r\n      if (property.getterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      if (property.setterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\r\n      property,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\r\n      )\r\n    );\r\n    if (isGetter) {\r\n      property.getterPrototype = element;\r\n    } else {\r\n      property.setterPrototype = element;\r\n    }\r\n  }\r\n\r\n  /** Initializes an enum. */\r\n  private initializeEnum(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): Enum | null {\r\n    var name = declaration.name.text;\r\n    var element = new Enum(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.INLINE |\r\n        DecoratorFlags.LAZY\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes an enum value. */\r\n  private initializeEnumValue(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Parent enum. */\r\n    parent: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new EnumValue(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.NONE\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n  }\r\n\r\n  /** Initializes an `export` statement. */\r\n  private initializeExports(\r\n    /** The statement to initialize. */\r\n    statement: ExportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>,\r\n    /** So far queued `export *`s. */\r\n    queuedExportsStar: Map<File,QueuedExportStar[]>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // export { foo, bar } [from \"./baz\"]\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\r\n      }\r\n    } else { // export * from \"./baz\"\r\n      let queued: QueuedExportStar[];\r\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\r\n      else queuedExportsStar.set(parent, queued = []);\r\n      let foreignPath = assert(statement.internalPath); // must be set for export *\r\n      queued.push(new QueuedExportStar(\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX,\r\n        assert(statement.path)\r\n      ));\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `export` member. Does not handle `export *`. */\r\n  private initializeExport(\r\n    /** The member to initialize. */\r\n    member: ExportMember,\r\n    /** Local file. */\r\n    localFile: File,\r\n    /** Path to the other file, if present. */\r\n    foreignPath: string | null,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var localName = member.localName.text;\r\n    var foreignName = member.exportedName.text;\r\n\r\n    // check for duplicates\r\n    var element = localFile.lookupExport(foreignName);\r\n    if (element) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.exportedName.range, foreignName\r\n      );\r\n      return;\r\n    }\r\n    // local element, i.e. export { foo [as bar] }\r\n    if (foreignPath === null) {\r\n\r\n      // resolve right away if the local element already exists\r\n      if (element = localFile.lookupInSelf(localName)) {\r\n        localFile.ensureExport(foreignName, element);\r\n\r\n      // otherwise queue it\r\n      } else {\r\n        let queued: Map<string,QueuedExport>;\r\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n        else queuedExports.set(localFile, queued = new Map());\r\n        queued.set(foreignName, new QueuedExport(\r\n          member.localName,\r\n          member.exportedName,\r\n          null, null\r\n        ));\r\n      }\r\n\r\n    // foreign element, i.e. export { foo } from \"./bar\"\r\n    } else {\r\n      let queued: Map<string,QueuedExport>;\r\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n      else queuedExports.set(localFile, queued = new Map());\r\n      queued.set(foreignName, new QueuedExport(\r\n        member.localName,\r\n        member.exportedName,\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX\r\n      ));\r\n    }\r\n  }\r\n\r\n  private initializeExportDefault(\r\n    /** The statement to initialize. */\r\n    statement: ExportDefaultStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: Array<ClassPrototype>,\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): void {\r\n    var declaration = statement.declaration;\r\n    var element: DeclaredElement | null = null;\r\n    switch (declaration.kind) {\r\n      case NodeKind.ENUMDECLARATION: {\r\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTIONDECLARATION: {\r\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.CLASSDECLARATION: {\r\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\r\n        break;\r\n      }\r\n      case NodeKind.INTERFACEDECLARATION: {\r\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.NAMESPACEDECLARATION: {\r\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (element) {\r\n      let exports = parent.exports;\r\n      if (!exports) parent.exports = exports = new Map();\r\n      else if (exports.has(\"default\")) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, \"default\"\r\n        );\r\n        return;\r\n      }\r\n      exports.set(\"default\", element);\r\n    }\r\n  }\r\n\r\n  /** Initializes an `import` statement. */\r\n  private initializeImports(\r\n    /** The statement to initialize. */\r\n    statement: ImportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          parent,\r\n          statement.internalPath,\r\n          queuedImports,\r\n          queuedExports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\r\n      queuedImports.push(new QueuedImport(\r\n        parent,\r\n        statement.namespaceName,\r\n        null, // indicates import *\r\n        statement.internalPath,\r\n        statement.internalPath + INDEX_SUFFIX\r\n      ));\r\n    } else {\r\n      // import \"./foo\"\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\r\n  private initializeImport( // { foo [as bar] }\r\n    /** The declaration to initialize. */\r\n    declaration: ImportDeclaration,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** Path to the other file. */\r\n    foreignPath: string,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n      : foreignPath + INDEX_SUFFIX;\r\n\r\n    // resolve right away if the element exists\r\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\r\n    if (element) {\r\n      parent.add(declaration.name.text, element, true);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    queuedImports.push(new QueuedImport(\r\n      parent,\r\n      declaration.name,\r\n      declaration.foreignName,\r\n      foreignPath,\r\n      foreignPathAlt\r\n    ));\r\n  }\r\n\r\n  /** Initializes a function. Does not handle methods. */\r\n  private initializeFunction(\r\n    /** The declaration to initialize. */\r\n    declaration: FunctionDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): FunctionPrototype | null {\r\n    var name = declaration.name.text;\r\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\r\n    if (declaration.is(CommonFlags.AMBIENT)) {\r\n      validDecorators |= DecoratorFlags.EXTERNAL;\r\n    } else {\r\n      validDecorators |= DecoratorFlags.INLINE;\r\n    }\r\n    if (!declaration.is(CommonFlags.INSTANCE)) {\r\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\r\n        validDecorators |= DecoratorFlags.GLOBAL;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, validDecorators)\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    return element;\r\n  }\r\n\r\n  /** Initializes an interface. */\r\n  private initializeInterface(\r\n    /** The declaration to initialize. */\r\n    declaration: InterfaceDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): InterfacePrototype | null {\r\n    var name = declaration.name.text;\r\n    var element = new InterfacePrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false); // interface member expected\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a namespace. */\r\n  private initializeNamespace(\r\n    /** The declaration to initialize. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): Namespace | null {\r\n    var name = declaration.name.text;\r\n    var original = new Namespace(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\r\n    );\r\n    if (!parent.add(name, original)) return null;\r\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>member, original);\r\n          break;\r\n        }\r\n        default: assert(false); // namespace member expected\r\n      }\r\n    }\r\n    if (original != element) copyMembers(original, element); // retain original parent\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a `type` definition. */\r\n  private initializeTypeDefinition(\r\n    /** The declaration to initialize. */\r\n    declaration: TypeDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new TypeDefinition(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\r\n    );\r\n    parent.add(name, element); // reports\r\n  }\r\n\r\n  /** Initializes a variable statement. */\r\n  private initializeVariables(\r\n    /** The statement to initialize. */\r\n    statement: VariableStatement,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\r\n      if (declaration.is(CommonFlags.DECLARE)) {\r\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\r\n      }\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        acceptedFlags |= DecoratorFlags.INLINE;\r\n      }\r\n      let element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(declaration.decorators, acceptedFlags),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) continue; // reports\r\n    }\r\n  }\r\n\r\n  /** Determines the element type of a built-in array. */\r\n  // determineBuiltinArrayType(target: Class): Type | null {\r\n  //   switch (target.internalName) {\r\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\r\n  //     case BuiltinSymbols.Uint8ClampedArray:\r\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\r\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\r\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\r\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\r\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\r\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\r\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\r\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\r\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\r\n  //   }\r\n  //   var current: Class | null = target;\r\n  //   var arrayPrototype = this.arrayPrototype;\r\n  //   do {\r\n  //     if (current.prototype == arrayPrototype) { // Array<T>\r\n  //       let typeArguments = assert(current.typeArguments);\r\n  //       assert(typeArguments.length == 1);\r\n  //       return typeArguments[0];\r\n  //     }\r\n  //   } while (current = current.base);\r\n  //   return null;\r\n  // }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link PropertyPrototype}.  */\r\n  PROPERTY_PROTOTYPE,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link File}. */\r\n  FILE,\r\n  /** A {@link TypeDefinition}.  */\r\n  TYPEDEFINITION,\r\n}\r\n\r\n/** Indicates built-in decorators that are present. */\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6,\r\n  /** Is using a different external name. */\r\n  EXTERNAL = 1 << 7,\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 8,\r\n  /** Is compiled lazily. */\r\n  LAZY = 1 << 9,\r\n  /** Is considered unsafe code. */\r\n  UNSAFE = 1 << 10\r\n}\r\n\r\n/** Translates a decorator kind to the respective decorator flag. */\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\r\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\r\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\r\n    case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Parent element. */\r\n  parent: Element;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Member elements. */\r\n  members: Map<string,DeclaredElement> | null = null;\r\n  /** Shadowing type in type space, if any. */\r\n  shadowType: TypeDefinition | null = null;\r\n\r\n  /** Constructs a new program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    public kind: ElementKind,\r\n    /** Simple name. */\r\n    public name: string,\r\n    /** Internal name referring to this element. */\r\n    public internalName: string,\r\n    /** Containing {@link Program}. */\r\n    public program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null\r\n  ) {\r\n    this.program = program;\r\n    this.name = name;\r\n    this.internalName = internalName;\r\n    if (parent) {\r\n      this.parent = parent;\r\n    } else {\r\n      assert(this.kind == ElementKind.FILE);\r\n      this.parent = this; // special case to keep this.parent non-nullable\r\n    }\r\n  }\r\n\r\n  /** Gets the enclosing file. */\r\n  get file(): File {\r\n    var current: Element = this;\r\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\r\n    while (true);\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Unsets the specific flag or flags. */\r\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n\r\n  /** Looks up the element with the specified name within this element. */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var members = this.members;\r\n    if (members && members.has(name)) return members.get(name)!;\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to this element, like in JS. */\r\n  abstract lookup(name: string): Element | null;\r\n\r\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\r\n  add(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var members = this.members;\r\n    if (!members) this.members = members = new Map();\r\n    else if (members.has(name)) {\r\n      let actual = members.get(name)!;\r\n      if (actual.parent !== this) {\r\n        // override non-own element\r\n      } else {\r\n        let merged = tryMerge(actual, element);\r\n        if (merged) {\r\n          element = merged; // use merged element\r\n        } else {\r\n          this.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, element.identifierNode.text\r\n          );\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    members.set(name, element);\r\n    var program = this.program;\r\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\r\n      // prefer unbound prototypes in global lookup maps\r\n      program.elementsByName.set(element.internalName, element);\r\n      program.elementsByDeclaration.set(originalDeclaration, element);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Returns a string representation of this element. */\r\n  toString(): string {\r\n    return ElementKind[this.kind] + \":\" + this.internalName;\r\n  }\r\n}\r\n\r\n/** Base class of elements with an associated declaration statement. */\r\nexport abstract class DeclaredElement extends Element {\r\n\r\n  /** Constructs a new declared program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Internal name referring to this element. */\r\n    internalName: string,\r\n    /** Containing {@link Program}. */\r\n    program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null,\r\n    /** Declaration reference. */\r\n    public declaration: DeclarationStatement\r\n  ) {\r\n    super(kind, name, internalName, program, parent);\r\n    // It is necessary to have access to identifiers of all members and exports\r\n    // for reporting purposes and this is the lowest common denominator. Comes\r\n    // at the expense of not having more specific type information in derived\r\n    // classes, though. Instead, derived classes implement getters for other\r\n    // important AST nodes directly through manual casting, allowing the resolver\r\n    // etc. to not worry about actual declarations.\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags; // inherit\r\n  }\r\n\r\n  /** Tests if this element is a library element. */\r\n  get isDeclaredInLibrary(): bool {\r\n    return this.declaration.range.source.isLibrary;\r\n  }\r\n\r\n  /** Gets the associated identifier node. */\r\n  get identifierNode(): IdentifierExpression {\r\n    return this.declaration.name;\r\n  }\r\n\r\n  /** Gets the assiciated decorator nodes. */\r\n  get decoratorNodes(): DecoratorNode[] | null {\r\n    return this.declaration.decorators;\r\n  }\r\n}\r\n\r\n/** Base class of elements that can be resolved to a concrete type. */\r\nexport abstract class TypedElement extends DeclaredElement {\r\n\r\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\r\n  type: Type = Type.void;\r\n\r\n  /** Sets the resolved type of this element. */\r\n  setType(type: Type): void {\r\n    assert(!this.is(CommonFlags.RESOLVED));\r\n    this.type = type;\r\n    this.set(CommonFlags.RESOLVED);\r\n  }\r\n}\r\n\r\n/** A file representing the implicit top-level namespace of a source. */\r\nexport class File extends Element {\r\n\r\n  /** File exports. */\r\n  exports: Map<string,DeclaredElement> | null = null;\r\n  /** File re-exports. */\r\n  exportsStar: File[] | null = null;\r\n  /** Top-level start function of this file. */\r\n  startFunction: Function;\r\n\r\n  /** Constructs a new file. */\r\n  constructor(\r\n    /** Program this file belongs to. */\r\n    program: Program,\r\n    /** Source of this file. */\r\n    public source: Source\r\n  ) {\r\n    super(\r\n      ElementKind.FILE,\r\n      source.normalizedPath,\r\n      source.internalPath,\r\n      program,\r\n      null // special case for files\r\n    );\r\n    this.source = source;\r\n    assert(!program.filesByName.has(this.internalName));\r\n    program.filesByName.set(this.internalName, this);\r\n    var startFunction = this.program.makeNativeFunction(\r\n      \"start:\" + this.internalName,\r\n      new Signature(program, null, Type.void),\r\n      this\r\n    );\r\n    startFunction.internalName = startFunction.name;\r\n    this.startFunction = startFunction;\r\n  }\r\n\r\n  /* @override */\r\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\r\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\r\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\r\n    }\r\n    if (!super.add(name, element)) return false;\r\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\r\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\r\n      this.ensureExport(\r\n        element.name,\r\n        element\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /* @override */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var element = super.lookupInSelf(name);\r\n    if (element) return element;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupInSelf(name);\r\n    if (element) return element;\r\n    return this.program.lookupGlobal(name);\r\n  }\r\n\r\n  /** Ensures that an element is an export of this file. */\r\n  ensureExport(name: string, element: DeclaredElement): void {\r\n    var exports = this.exports;\r\n    if (!exports) this.exports = exports = new Map();\r\n    exports.set(name, element);\r\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\r\n  }\r\n\r\n  /** Ensures that another file is a re-export of this file. */\r\n  ensureExportStar(file: File): void {\r\n    var exportsStar = this.exportsStar;\r\n    if (!exportsStar) this.exportsStar = exportsStar = [];\r\n    else if (exportsStar.includes(file)) return;\r\n    exportsStar.push(file);\r\n  }\r\n\r\n  /** Looks up the export of the specified name. */\r\n  lookupExport(name: string): DeclaredElement | null {\r\n    var exports = this.exports;\r\n    if (exports && exports.has(name)) return exports.get(name)!;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let element = exportsStar[i].lookupExport(name);\r\n        if (element) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Creates an imported namespace from this file. */\r\n  asImportedNamespace(name: string, parent: Element): Namespace {\r\n    var ns = new Namespace(\r\n      name,\r\n      parent,\r\n      this.program.makeNativeNamespaceDeclaration(name)\r\n    );\r\n    var exports = this.exports;\r\n    if (exports) {\r\n      for (let [memberName, member] of exports) {\r\n        ns.add(memberName, member);\r\n      }\r\n    }\r\n    return ns;\r\n  }\r\n}\r\n\r\n/** A type definition. */\r\nexport class TypeDefinition extends TypedElement {\r\n\r\n  /** Constructs a new type definition. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: TypeDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.TYPEDEFINITION,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<TypeDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): TypeNode {\r\n    return (<TypeDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a file in being user-declared with a name. */\r\nexport class Namespace extends DeclaredElement {\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.NAMESPACE,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends TypedElement {\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: EnumDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUM,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** Indicates the kind of an inlined constant value. */\r\nexport const enum ConstantValueKind {\r\n  /** No constant value. */\r\n  NONE,\r\n  /** Constant integer value. */\r\n  INTEGER,\r\n  /** Constant float value. */\r\n  FLOAT\r\n}\r\n\r\n/** Base class of all variable-like program elements. */\r\nexport abstract class VariableLikeElement extends TypedElement {\r\n\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  /** Constructs a new variable-like element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class. */\r\n    parent: Element,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      kind,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.flags = declaration.flags;\r\n  }\r\n\r\n  /** Gets the associated type node.s */\r\n  get typeNode(): TypeNode | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\r\n  }\r\n\r\n  /** Applies a constant integer value to this element. */\r\n  setConstantIntegerValue(value: I64, type: Type): void {\r\n    assert(type.is(TypeFlags.INTEGER));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** Applies a constant float value to this element. */\r\n  setConstantFloatValue(value: f64, type: Type): void {\r\n    assert(type.is(TypeFlags.FLOAT));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends VariableLikeElement {\r\n\r\n  /** Constructs a new enum value. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent enum. */\r\n    parent: Enum,\r\n    /** Declaration reference. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUMVALUE,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /** Whether this enum value is immutable. */\r\n  isImmutable: bool = false;\r\n\r\n  /** Gets the associated value node. */\r\n  get valueNode(): Expression | null {\r\n    return (<EnumValueDeclaration>this.declaration).value;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  /** Constructs a new global variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or static class. */\r\n    parent: Element,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.GLOBAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n  /** Constructs a new function parameter. */\r\n  constructor(\r\n    /** Parameter name. */\r\n    public name: string,\r\n    /** Parameter type. */\r\n    public type: Type,\r\n    /** Parameter initializer, if present. */\r\n    public initializer: Expression | null = null\r\n  ) {}\r\n}\r\n\r\n/** A local variable. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  /** Constructs a new local variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\r\n    public index: i32,\r\n    /** Resolved type. */\r\n    type: Type,\r\n    /** Parent function. */\r\n    parent: Function,\r\n    /** Declaration reference. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.LOCAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.index = index;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends DeclaredElement {\r\n\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Function> | null = null;\r\n\r\n  /** Clones of this prototype that are bounds to specific classes. */\r\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    /** Simple name */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class (if a method). */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: FunctionDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<FunctionDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated function type node. */\r\n  get functionTypeNode(): FunctionTypeNode {\r\n    return (<FunctionDeclaration>this.declaration).signature;\r\n  }\r\n\r\n  /** Gets the associated body node. */\r\n  get bodyNode(): Statement | null {\r\n    return (<FunctionDeclaration>this.declaration).body;\r\n  }\r\n\r\n  /** Gets the arrow function kind. */\r\n  get arrowKind(): ArrowKind {\r\n    return (<FunctionDeclaration>this.declaration).arrowKind;\r\n  }\r\n\r\n  /** Tests if this prototype is bound to a class. */\r\n  get isBound(): bool {\r\n    var parent = this.parent;\r\n    return parent.kind == ElementKind.CLASS\r\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\r\n  }\r\n\r\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\r\n  toBound(classInstance: Class): FunctionPrototype {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    assert(!this.isBound);\r\n    var boundPrototypes = this.boundPrototypes;\r\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\r\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\r\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\r\n    var bound = new FunctionPrototype(\r\n      this.name,\r\n      classInstance, // !\r\n      <MethodDeclaration>declaration,\r\n      this.decoratorFlags\r\n    );\r\n    bound.flags = this.flags;\r\n    bound.operatorKind = this.operatorKind;\r\n    // NOTE: this.instances holds instances per bound class / unbound\r\n    boundPrototypes.set(classInstance, bound);\r\n    return bound;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Function | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Function): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends TypedElement {\r\n\r\n  /** Function prototype. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Default control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n\r\n  /** Counting id of inline operations involving this function. */\r\n  nextInlineId: i32 = 0;\r\n  /** Counting id of anonymous inner functions. */\r\n  nextAnonymousId: i32 = 0;\r\n  /** Counting id of autorelease variables. */\r\n  nextAutoreleaseId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** Respective function prototype. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete signature. */\r\n    signature: Signature, // pre-resolved\r\n    /** Contextual type arguments inherited from its parent class, if any. */\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    this.type = Type.u32.asFunction(signature);\r\n    if (!prototype.is(CommonFlags.AMBIENT)) {\r\n      let localIndex = 0;\r\n      if (this.is(CommonFlags.INSTANCE)) {\r\n        let local = new Local(\r\n          CommonSymbols.this_,\r\n          localIndex++,\r\n          assert(signature.thisType),\r\n          this\r\n        );\r\n        this.localsByName.set(CommonSymbols.this_, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType,\r\n          this\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var localName = name !== null\r\n      ? name\r\n      : \"var$\" + localIndex.toString();\r\n    var local = new Local(\r\n      localName,\r\n      localIndex,\r\n      type,\r\n      this,\r\n      declaration || this.program.makeNativeVariableDeclaration(localName)\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var locals = this.localsByName;\r\n    if (locals.has(name)) return locals.get(name);\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  // used by flows to keep track of temporary locals\r\n  tempI32s: Local[] | null = null;\r\n  tempI64s: Local[] | null = null;\r\n  tempF32s: Local[] | null = null;\r\n  tempF64s: Local[] | null = null;\r\n  tempV128s: Local[] | null = null;\r\n\r\n  // used by flows to keep track of break labels\r\n  nextBreakId: i32 = 0;\r\n  breakStack: i32[] | null = null;\r\n  breakLabel: string | null = null;\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakLabel = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(\r\n    /** Concrete signature. */\r\n    signature: Signature,\r\n    /** Program reference. */\r\n    program: Program,\r\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_TARGET,\r\n      __s = \"sig:\" + signature.toSignatureString(),\r\n      __s,\r\n      program,\r\n      program.nativeFile\r\n    );\r\n    this.signature = signature;\r\n    this.flags = CommonFlags.RESOLVED;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return null;\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends DeclaredElement {\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration reference. */\r\n    declaration: FieldDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): TypeNode | null {\r\n    return (<FieldDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<FieldDeclaration>this.declaration).initializer;\r\n  }\r\n\r\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\r\n  get parameterIndex(): i32 {\r\n    return (<FieldDeclaration>this.declaration).parameterIndex;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    /** Respective field prototype. */\r\n    prototype: FieldPrototype,\r\n    /** Parent class. */\r\n    parent: Class,\r\n    /** Concrete type. */\r\n    type: Type\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD,\r\n      prototype.name,\r\n      parent,\r\n      <VariableLikeDeclarationStatement>prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class PropertyPrototype extends DeclaredElement {\r\n\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration of the getter or setter introducing the property. */\r\n    firstDeclaration: FunctionDeclaration\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      firstDeclaration\r\n    );\r\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved property. */\r\nexport class Property extends VariableLikeElement {\r\n\r\n  /** Prototype reference. */\r\n  prototype: PropertyPrototype;\r\n  /** Getter instance. */\r\n  getterInstance: Function | null = null;\r\n  /** Setter instance. */\r\n  setterInstance: Function | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Respective property prototype. */\r\n    prototype: PropertyPrototype,\r\n    /** Parent element, usually a static class prototype or class instance. */\r\n    parent: Element\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY,\r\n      prototype.name,\r\n      parent,\r\n      prototype.program.makeNativeVariableDeclaration(\r\n        prototype.name,\r\n        prototype.is(CommonFlags.INSTANCE)\r\n          ? CommonFlags.INSTANCE\r\n          : CommonFlags.NONE\r\n      )\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends DeclaredElement {\r\n\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Class> | null = null;\r\n\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: ClassDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).typeParameters;\r\n  }\r\n  /** Gets the associated extends node. */\r\n  get extendsNode(): NamedTypeNode | null {\r\n    return (<ClassDeclaration>this.declaration).extendsType;\r\n  }\r\n  /** Gets the associated implements nodes. */\r\n  get implementsNodes(): NamedTypeNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).implementsTypes;\r\n  }\r\n\r\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\r\n  get isBuiltinArray(): bool {\r\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\r\n    return arrayBufferViewInstance !== null\r\n        && this.extends(arrayBufferViewInstance.prototype);\r\n  }\r\n\r\n  /** Tests if this prototype extends the specified. */\r\n  extends(basePtototype: ClassPrototype | null): bool {\r\n    var current: ClassPrototype | null = this;\r\n    do if (current === basePtototype) return true;\r\n    while (current = current.basePrototype);\r\n    return false;\r\n  }\r\n\r\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\r\n  addInstance(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var instanceMembers = this.instanceMembers;\r\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\r\n    else if (instanceMembers.has(name)) {\r\n      let merged = tryMerge(instanceMembers.get(name)!, element);\r\n      if (!merged) {\r\n        this.program.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          element.identifierNode.range, element.identifierNode.text\r\n        );\r\n        return false;\r\n      }\r\n      element = merged;\r\n    }\r\n    instanceMembers.set(name, element);\r\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\r\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\r\n    }\r\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\r\n    return true;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Class | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Class): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\nconst enum AcyclicState {\r\n  UNKNOWN,\r\n  ACYCLIC,\r\n  NOT_ACYCLIC\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends TypedElement {\r\n\r\n  /** Class prototype. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n  /** Unique class id. */\r\n  private _id: u32 = 0;\r\n  /** Remembers acyclic state. */\r\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\r\n  /** Runtime type information flags. */\r\n  rttiFlags: u32 = 0;\r\n\r\n  /** Gets the unique runtime id of this class. */\r\n  get id(): u32 {\r\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\r\n  }\r\n\r\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\r\n  get isBuiltinArray(): bool {\r\n    return this.prototype.isBuiltinArray;\r\n  }\r\n\r\n  /** Tests if this class is array-like. */\r\n  get isArrayLike(): bool {\r\n    if (this.isBuiltinArray) return true;\r\n    var lengthField = this.lookupInSelf(\"length\");\r\n    return lengthField !== null && (\r\n      lengthField.kind == ElementKind.FIELD ||\r\n      (\r\n        lengthField.kind == ElementKind.PROPERTY &&\r\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\r\n      )\r\n    ) && (\r\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\r\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\r\n    );\r\n  }\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** The respective class prototype. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments, if any. */\r\n    typeArguments: Type[] | null = null,\r\n    /** Base class, if derived. */\r\n    base: Class | null = null,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    var program = this.program;\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.setType(program.options.usizeType.asClass(this));\r\n    this.base = base;\r\n\r\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n      let id = program.nextClassId++;\r\n      this._id = id;\r\n      program.managedClasses.set(id, this);\r\n    }\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        let contextualTypeArguments = this.contextualTypeArguments;\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\r\n          contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply pre-checked instance-specific contextual type arguments\r\n    var typeParameters = prototype.typeParameterNodes;\r\n    if (typeArguments) {\r\n      let numTypeArguments = typeArguments.length;\r\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      if (numTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let i = 0; i < numTypeArguments; ++i) {\r\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n        }\r\n      }\r\n    } else if (typeParameters && typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n    registerConcreteElement(program, this);\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  /** Calculates the memory offset of the specified field. */\r\n  offsetof(fieldName: string): u32 {\r\n    var members = assert(this.members);\r\n    assert(members.has(fieldName));\r\n    var field = <Element>members.get(fieldName);\r\n    assert(field.kind == ElementKind.FIELD);\r\n    return (<Field>field).memoryOffset;\r\n  }\r\n\r\n  /** Writes a field value to a buffer and returns the number of bytes written. */\r\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\r\n    var field = this.lookupInSelf(name);\r\n    if (field && field.kind == ElementKind.FIELD) {\r\n      let offset = baseOffset + (<Field>field).memoryOffset;\r\n      switch ((<Field>field).type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8: {\r\n          writeI8(i32(value), buffer, offset);\r\n          return 1;\r\n        }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: {\r\n          writeI16(i32(value), buffer, offset);\r\n          return 2;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          writeI32(i32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          assert(!this.program.options.isWasm64); // TODO\r\n          writeI32(i32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.F32: {\r\n          writeF32(f32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.F64: {\r\n          writeF64(f64(value), buffer, offset);\r\n          return 8;\r\n        }\r\n      }\r\n    }\r\n    assert(false);\r\n    return 0;\r\n  }\r\n\r\n  /** Tests if this class extends the specified prototype. */\r\n  extends(prototype: ClassPrototype): bool {\r\n    return this.prototype.extends(prototype);\r\n  }\r\n\r\n  /** Gets the concrete type arguments to the specified extendend prototype. */\r\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\r\n    var current: Class | null = this;\r\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\r\n    while (current = current.base);\r\n    return null;\r\n  }\r\n\r\n  /** Gets the value type of an array. Must be an array. */\r\n  getArrayValueType(): Type {\r\n    var current: Class = this;\r\n    var program = this.program;\r\n    var abvInstance = program.arrayBufferViewInstance;\r\n    while (current.base !== abvInstance) {\r\n      current = assert(current.base);\r\n    }\r\n    switch (current.prototype) {\r\n      case program.i8ArrayPrototype: return Type.i8;\r\n      case program.i16ArrayPrototype: return Type.i16;\r\n      case program.i32ArrayPrototype: return Type.i32;\r\n      case program.i64ArrayPrototype: return Type.i64;\r\n      case program.u8ArrayPrototype:\r\n      case program.u8ClampedArrayPrototype: return Type.u8;\r\n      case program.u16ArrayPrototype: return Type.u16;\r\n      case program.u32ArrayPrototype: return Type.u32;\r\n      case program.u64ArrayPrototype: return Type.u64;\r\n      case program.f32ArrayPrototype: return Type.f32;\r\n      case program.f64ArrayPrototype: return Type.f64;\r\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\r\n      default: assert(false);\r\n    }\r\n    return Type.void;\r\n  }\r\n\r\n  /** Tests if this class is inherently acyclic. */\r\n  get isAcyclic(): bool {\r\n    var acyclic = this._acyclic;\r\n    if (acyclic == AcyclicState.UNKNOWN) {\r\n      let hasCycle = this.cyclesTo(this);\r\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\r\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\r\n    }\r\n    return acyclic == AcyclicState.ACYCLIC;\r\n  }\r\n\r\n  /** Tests if this class potentially forms a reference cycle to another one. */\r\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\r\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\r\n    //\r\n    // - scalars\r\n    // - references to classes that are both acyclic and final (here: Java); and\r\n    // - arrays (in our case: also sets, maps) of either of the above\r\n    //\r\n    // Our implementation, however, treats all objects that do not reference themselves directly\r\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\r\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\r\n\r\n    if (except.has(this)) return false;\r\n    except.add(this); // don't recurse indefinitely\r\n\r\n    // Find out if any field references 'other' directly or indirectly\r\n    var current: Class | null;\r\n    var members = this.members;\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        if (\r\n          member.kind == ElementKind.FIELD &&\r\n          (current = (<Field>member).type.classReference) !== null &&\r\n          (\r\n            current === other ||\r\n            current.cyclesTo(other, except)\r\n          )\r\n        ) return true;\r\n      }\r\n    }\r\n\r\n    // Do the same for non-field data\r\n    var basePrototype: ClassPrototype | null;\r\n\r\n    // Array<T->other?>\r\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 1);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n\r\n    // Set<K->other?>\r\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 1);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n\r\n    // Map<K->other?,V->other?>\r\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 2);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n      if (\r\n        (current = typeArguments[1].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype { // FIXME\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    name: string,\r\n    parent: Element,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      decoratorFlags,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class { // FIXME\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    nameInclTypeParameters: string,\r\n    prototype: InterfacePrototype,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      typeArguments,\r\n      base,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** Registers a concrete element with a program. */\r\nfunction registerConcreteElement(program: Program, element: Element): void {\r\n  assert(!program.instancesByName.has(element.internalName));\r\n  program.instancesByName.set(element.internalName, element);\r\n}\r\n\r\n/** Attempts to merge two elements. Returns the merged element on success. */\r\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\r\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\r\n  // suggesting to just merge what seems to be possible for now and revisit later.\r\n  assert(older.program === newer.program);\r\n  assert(!newer.members);\r\n  var merged: DeclaredElement | null = null;\r\n  switch (older.kind) {\r\n    case ElementKind.FUNCTION_PROTOTYPE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.CLASS_PROTOTYPE:\r\n    case ElementKind.ENUM: {\r\n      if (newer.kind == ElementKind.NAMESPACE) {\r\n        copyMembers(newer, older);\r\n        merged = <DeclaredElement>older;\r\n        break;\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.NAMESPACE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.ENUM:\r\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\r\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\r\n          copyMembers(older, newer);\r\n          merged = <DeclaredElement>newer;\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.GLOBAL: {\r\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\r\n        if (!older.shadowType) {\r\n          older.shadowType = <TypeDefinition>newer;\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.TYPEDEFINITION: {\r\n      switch (newer.kind) {\r\n        case ElementKind.GLOBAL:\r\n        case ElementKind.FUNCTION_PROTOTYPE:\r\n        case ElementKind.NAMESPACE: {\r\n          if (!newer.shadowType) {\r\n            newer.shadowType = <TypeDefinition>older;\r\n            copyMembers(older, newer);\r\n            merged = <DeclaredElement>newer;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  if (merged) {\r\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\r\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\r\n    if (olderIsExport != newerIsExport) {\r\n      older.program.error(\r\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n        merged.identifierNode.range, merged.identifierNode.text\r\n      );\r\n    }\r\n  }\r\n  return merged;\r\n}\r\n\r\n/** Copies the members of `src` to `dest`. */\r\nfunction copyMembers(src: Element, dest: Element): void {\r\n  var srcMembers = src.members;\r\n  if (srcMembers) {\r\n    let destMembers = dest.members;\r\n    if (!destMembers) dest.members = destMembers = new Map();\r\n    for (let [memberName, member] of srcMembers) {\r\n      destMembers.set(memberName, member);\r\n    }\r\n  }\r\n}\r\n\r\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\r\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\r\n  switch (parent.kind) {\r\n    case ElementKind.FILE: {\r\n      if (asGlobal) return name;\r\n      return parent.internalName + PATH_DELIMITER + name;\r\n    }\r\n    case ElementKind.FUNCTION: {\r\n      if (asGlobal) return name;\r\n      assert(!isInstance);\r\n      return parent.internalName + INNER_DELIMITER + name;\r\n    }\r\n    default: {\r\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\r\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport { Target } from \"./common\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type RelooperRef = usize;\r\nexport type RelooperBlockRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32  = _BinaryenTypeInt32(),\r\n  I64  = _BinaryenTypeInt64(),\r\n  F32  = _BinaryenTypeFloat32(),\r\n  F64  = _BinaryenTypeFloat64(),\r\n  V128 = _BinaryenTypeVec128(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum FeatureFlags {\r\n  Atomics = _BinaryenFeatureAtomics(),\r\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\r\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\r\n  SIMD128 = _BinaryenFeatureSIMD128(),\r\n  BulkMemory = _BinaryenFeatureBulkMemory(),\r\n  SignExt = _BinaryenFeatureSignExt(),\r\n  ExceptionHandling = _BinaryenFeatureExceptionHandling()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  LocalGet = _BinaryenLocalGetId(),\r\n  LocalSet = _BinaryenLocalSetId(),\r\n  GlobalGet = _BinaryenGlobalGetId(),\r\n  GlobalSet = _BinaryenGlobalSetId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicNotify = _BinaryenAtomicNotifyId(),\r\n  SIMDExtract = _BinaryenSIMDExtractId(),\r\n  SIMDReplace = _BinaryenSIMDReplaceId(),\r\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\r\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\r\n  SIMDShift = _BinaryenSIMDShiftId(),\r\n  MemoryInit = _BinaryenMemoryInitId(),\r\n  DataDrop = _BinaryenDataDropId(),\r\n  MemoryCopy = _BinaryenMemoryCopyId(),\r\n  MemoryFill = _BinaryenMemoryFillId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\r\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\r\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\r\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\r\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\r\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\r\n  NotVec128 = _BinaryenNotVec128(),\r\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\r\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\r\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\r\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\r\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\r\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\r\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\r\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\r\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\r\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\r\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\r\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\r\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\r\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\r\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\r\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\r\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\r\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\r\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\r\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\r\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\r\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\r\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\r\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\r\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\r\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64(),\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\r\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\r\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\r\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\r\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\r\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\r\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\r\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\r\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\r\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\r\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\r\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\r\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\r\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\r\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\r\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\r\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\r\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\r\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\r\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\r\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\r\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\r\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\r\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\r\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\r\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\r\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\r\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\r\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\r\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\r\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\r\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\r\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\r\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\r\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\r\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\r\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\r\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\r\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\r\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\r\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\r\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\r\n  AndVec128 = _BinaryenAndVec128(),\r\n  OrVec128 = _BinaryenOrVec128(),\r\n  XorVec128 = _BinaryenXorVec128(),\r\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\r\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\r\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\r\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\r\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\r\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\r\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\r\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\r\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\r\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\r\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\r\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\r\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\r\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\r\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\r\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\r\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\r\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\r\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\r\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\r\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\r\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\r\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\r\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\r\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\r\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\r\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\r\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\r\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\r\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\r\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\r\n}\r\n\r\nexport enum HostOp {\r\n  MemorySize = _BinaryenMemorySize(),\r\n  MemoryGrow = _BinaryenMemoryGrow(),\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport enum SIMDExtractOp {\r\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\r\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\r\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\r\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\r\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\r\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\r\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\r\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\r\n}\r\n\r\nexport enum SIMDReplaceOp {\r\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\r\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\r\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\r\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\r\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\r\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\r\n}\r\n\r\nexport enum SIMDShiftOp {\r\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\r\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\r\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\r\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\r\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\r\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\r\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\r\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\r\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\r\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\r\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\r\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private lit: usize;\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n      return module;\r\n    } finally {\r\n      memory.free(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunctionType(this.ref, cStr);\r\n  }\r\n\r\n  // constants\r\n\r\n  i32(value: i32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  f32(value: f32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  f64(value: f64): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  v128(bytes: Uint8Array): ExpressionRef {\r\n    assert(bytes.length == 16);\r\n    var out = this.lit;\r\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\r\n    _BinaryenLiteralVec128(out, out);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  unary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  binary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  host(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  local_get(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalGet(this.ref, index, type);\r\n  }\r\n\r\n  local_tee(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalTee(this.ref, index, value);\r\n  }\r\n\r\n  global_get(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGlobalGet(this.ref, cStr, type);\r\n  }\r\n\r\n  load(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\r\n  }\r\n\r\n  store(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\r\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\r\n  }\r\n\r\n  atomic_load(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  atomic_store(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  atomic_rmw(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  atomic_cmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  atomic_wait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  atomic_notify(\r\n    ptr: ExpressionRef,\r\n    notifyCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  local_set(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalSet(this.ref, index, value);\r\n  }\r\n\r\n  global_set(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGlobalSet(this.ref, cStr, value);\r\n  }\r\n\r\n  block(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  br(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenBreak(this.ref, cStr, condition, value);\r\n  }\r\n\r\n  drop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  loop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenLoop(this.ref, cStr, body);\r\n  }\r\n\r\n  if(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  nop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  return(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  select(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  switch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = this.allocStringCached(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = this.allocStringCached(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  call(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  call_indirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(typeName);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  unreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // bulk memory\r\n\r\n  memory_copy(\r\n    dest: ExpressionRef,\r\n    source: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\r\n  }\r\n\r\n  memory_fill(\r\n    dest: ExpressionRef,\r\n    value: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\r\n  }\r\n\r\n  // simd\r\n\r\n  simd_extract(\r\n    op: SIMDExtractOp,\r\n    vec: ExpressionRef,\r\n    idx: u8\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\r\n  }\r\n\r\n  simd_replace(\r\n    op: SIMDReplaceOp,\r\n    vec: ExpressionRef,\r\n    idx: u8,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\r\n  }\r\n\r\n  simd_shuffle(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    mask: Uint8Array\r\n  ): ExpressionRef {\r\n    assert(mask.length == 16);\r\n    var cArr = allocU8Array(mask);\r\n    try {\r\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  simd_bitselect(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    cond: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\r\n  }\r\n\r\n  simd_shift(\r\n    op: SIMDShiftOp,\r\n    vec: ExpressionRef,\r\n    shift: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n  }\r\n\r\n  removeGlobal(\r\n    name: string\r\n  ): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveGlobal(this.ref, cStr);\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunction(this.ref, cStr);\r\n  }\r\n\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = this.allocStringCached(externalName);\r\n    _BinaryenRemoveExport(this.ref, cStr);\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    shared: bool = false,\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n  }\r\n\r\n  /** Unlimited memory constant. */\r\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null,\r\n    shared: bool = false\r\n  ): void {\r\n    var cStr = this.allocStringCached(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var psvs = new Array<i8>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      psvs[i] = 0; // no passive segments currently\r\n      offs[i] = target == Target.WASM64\r\n        ? this.i64(i64_low(offset), i64_high(offset))\r\n        : this.i32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocU8Array(psvs);\r\n    var cArr3 = allocI32Array(offs);\r\n    var cArr4 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\r\n    } finally {\r\n      memory.free(cArr4);\r\n      memory.free(cArr3);\r\n      memory.free(cArr2);\r\n      memory.free(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(\r\n    initial: Index,\r\n    maximum: Index,\r\n    funcs: string[]\r\n  ): void {\r\n    var numNames = funcs.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = this.allocStringCached(funcs[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  getOptimizeLevel(): i32 {\r\n    return _BinaryenGetOptimizeLevel();\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  getShrinkLevel(): i32 {\r\n    return _BinaryenGetShrinkLevel();\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  getFeatures(): BinaryenFeatureFlags {\r\n    return _BinaryenModuleGetFeatures(this.ref);\r\n  }\r\n\r\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\r\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\r\n    // remember the previous optimize levels and set to max instead, to be sure\r\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\r\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\r\n    var previousDebugInfo = _BinaryenGetDebugInfo();\r\n    _BinaryenSetOptimizeLevel(4);\r\n    _BinaryenSetShrinkLevel(0);\r\n    _BinaryenSetDebugInfo(false);\r\n\r\n    // wrap the expression in a temp. function and run the precompute pass on it\r\n    var type = _BinaryenExpressionGetType(expr);\r\n    var func = this.addTemporaryFunction(type, null, expr);\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      this.cachedPrecomputeNames = names = allocI32Array([\r\n        this.allocStringCached(\"vacuum\"),\r\n        this.allocStringCached(\"precompute\")\r\n      ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 2);\r\n    expr = _BinaryenFunctionGetBody(func);\r\n    if (_BinaryenExpressionGetId(expr) == ExpressionId.Return) {\r\n      expr = _BinaryenReturnGetValue(expr);\r\n    }\r\n    this.removeTemporaryFunction();\r\n\r\n    // reset optimize levels to previous\r\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\r\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\r\n    _BinaryenSetDebugInfo(previousDebugInfo);\r\n    return expr;\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.lit; // safe to reuse as long as..\r\n    assert(_BinaryenSizeofLiteral() >= 12);\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) memory.free(cStr);\r\n      if (binaryPtr) memory.free(binaryPtr);\r\n      if (sourceMapPtr) memory.free(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  private cachedStrings: Map<string,usize> = new Map();\r\n\r\n  private allocStringCached(str: string | null): usize {\r\n    if (str == null) return 0;\r\n    var cachedStrings = this.cachedStrings;\r\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\r\n    var ptr = allocString(str);\r\n    cachedStrings.set(str, ptr);\r\n    return ptr;\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\r\n    this.cachedStrings = new Map();\r\n    memory.free(this.lit);\r\n    memory.free(this.cachedPrecomputeNames);\r\n    this.cachedPrecomputeNames = 0;\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n    switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.i32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.i64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.f32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.f64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          case NativeType.V128: {\r\n            // TODO\r\n            return 0;\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        return _BinaryenLocalGet(this.ref,\r\n          _BinaryenLocalGetGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GlobalGet: {\r\n        let globalName = _BinaryenGlobalGetGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenLocalGetGetIndex(expr);\r\n}\r\n\r\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenLocalSetGetIndex(expr);\r\n}\r\n\r\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLocalSetGetValue(expr);\r\n}\r\n\r\nexport function isLocalTee(expr: ExpressionRef): bool {\r\n  return _BinaryenLocalSetIsTee(expr);\r\n}\r\n\r\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenGlobalGetGetName(expr));\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\r\n  return _BinaryenCallGetNumOperands(expr);\r\n}\r\n\r\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenCallGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate(module.ref);\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    condition: ExpressionRef = 0,\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    indexes: i32[],\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   // TODO: there's more\r\n//   switch (_BinaryenExpressionGetId(expr)) {\r\n//     case ExpressionId.LocalGet:\r\n//     case ExpressionId.GlobalGet:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = memory.allocate(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = memory.allocate(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n\r\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\r\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\r\n  // not applicable if pushing a value to the stack\r\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\r\n\r\n  switch (_BinaryenExpressionGetId(expr)) {\r\n    case ExpressionId.Unreachable:\r\n    case ExpressionId.Return: return false;\r\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\r\n    case ExpressionId.Block: {\r\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\r\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\r\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/** Traverses all expression members of an expression, calling the given visitor. */\r\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\r\n  switch (getExpressionId(expr)) {\r\n    case ExpressionId.Block: {\r\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\r\n        visit(_BinaryenBlockGetChild(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.If: {\r\n      visit(_BinaryenIfGetCondition(expr), data);\r\n      visit(_BinaryenIfGetIfTrue(expr), data);\r\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\r\n      if (ifFalse) visit(ifFalse, data);\r\n      break;\r\n    }\r\n    case ExpressionId.Loop: {\r\n      visit(_BinaryenLoopGetBody(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Break: {\r\n      let condition = _BinaryenBreakGetCondition(expr);\r\n      if (condition) visit(condition, data);\r\n      break;\r\n    }\r\n    case ExpressionId.Switch: {\r\n      visit(_BinaryenSwitchGetCondition(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Call: {\r\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenCallGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.CallIndirect: {\r\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.LocalGet: {\r\n      break;\r\n    }\r\n    case ExpressionId.LocalSet: {\r\n      visit(_BinaryenLocalSetGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.GlobalGet: {\r\n      break;\r\n    }\r\n    case ExpressionId.GlobalSet: {\r\n      visit(_BinaryenGlobalSetGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Load: {\r\n      visit(_BinaryenLoadGetPtr(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Store: {\r\n      visit(_BinaryenStoreGetPtr(expr), data);\r\n      visit(_BinaryenStoreGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicRMW: {\r\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\r\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicCmpxchg: {\r\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\r\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\r\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicWait: {\r\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\r\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\r\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicNotify: {\r\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDExtract: {\r\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDReplace: {\r\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\r\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDShuffle: {\r\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\r\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDBitselect: {\r\n      visit(_BinaryenSIMDBitselectGetLeft(expr), data);\r\n      visit(_BinaryenSIMDBitselectGetRight(expr), data);\r\n      visit(_BinaryenSIMDBitselectGetCond(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDShift: {\r\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\r\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryInit: {\r\n      visit(_BinaryenMemoryInitGetDest(expr), data);\r\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\r\n      visit(_BinaryenMemoryInitGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.DataDrop: {\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryCopy: {\r\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\r\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\r\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryFill: {\r\n      visit(_BinaryenMemoryFillGetDest(expr), data);\r\n      visit(_BinaryenMemoryFillGetValue(expr), data);\r\n      visit(_BinaryenMemoryFillGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Const: {\r\n      break;\r\n    }\r\n    case ExpressionId.Unary: {\r\n      visit(_BinaryenUnaryGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Binary: {\r\n      visit(_BinaryenBinaryGetLeft(expr), data);\r\n      visit(_BinaryenBinaryGetRight(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Select: {\r\n      visit(_BinaryenSelectGetIfTrue(expr), data);\r\n      visit(_BinaryenSelectGetIfFalse(expr), data);\r\n      visit(_BinaryenSelectGetCondition(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Drop: {\r\n      visit(_BinaryenDropGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Return: {\r\n      visit(_BinaryenReturnGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Host: {\r\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenHostGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.Nop: {\r\n      break;\r\n    }\r\n    case ExpressionId.Unreachable: {\r\n      break;\r\n    }\r\n    default: assert(false);\r\n  }\r\n  return true;\r\n}\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget,\r\n  Program,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // vectors\r\n\r\n  /** A 128-bit vector. */\r\n  V128,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9,\r\n  /** Is a vector type. */\r\n  VECTOR = 1 << 10\r\n}\r\n\r\nconst v128_zero = new Uint8Array(16);\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Substitutes this type with the auto type if this type is void. */\r\n  get exceptVoid(): Type {\r\n    if (this.kind == TypeKind.VOID) return Type.auto;\r\n    return this;\r\n  }\r\n\r\n  /** Gets this type's logarithmic alignment in memory. */\r\n  get alignLog2(): i32 {\r\n    return 31 - clz<i32>(this.byteSize);\r\n  }\r\n\r\n  /** Tests if this is a managed type that needs GC hooks. */\r\n  get isManaged(): bool {\r\n    var classReference = this.classReference;\r\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n  }\r\n\r\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\r\n  get isUnmanaged(): bool {\r\n    var classReference = this.classReference;\r\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (\r\n            !signednessIsRelevant ||\r\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\r\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n          ) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      } else if (this.is(TypeFlags.VECTOR)) {\r\n        if (target.is(TypeFlags.VECTOR)) {\r\n          return this.size == target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\r\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\r\n    else if (target.is(TypeFlags.REFERENCE)) return false;\r\n    if (this.is(TypeFlags.INTEGER)) {\r\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\r\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n      );\r\n    }\r\n    return this.kind == target.kind;\r\n  }\r\n\r\n  /** Determines the common denominator type of two types, if there is any. */\r\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to a string. */\r\n  toString(): string {\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.internalName + \" | null\"\r\n          : classReference.internalName;\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString() + \") | null\"\r\n          : signatureReference.toString();\r\n      }\r\n      assert(false);\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.V128: return NativeType.V128;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(0);\r\n      case TypeKind.F32: return module.f32(0);\r\n      case TypeKind.F64: return module.f64(0);\r\n      case TypeKind.V128: return module.v128(v128_zero);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(1);\r\n      case TypeKind.F32: return module.f32(1);\r\n      case TypeKind.F64: return module.f64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(-1, -1);\r\n      case TypeKind.F32: return module.f32(-1);\r\n      case TypeKind.F64: return module.f64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      // same naming scheme as Binaryen\r\n      case TypeKind.I8:\r\n      case TypeKind.U8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U16:\r\n      case TypeKind.I32:\r\n      case TypeKind.U32:\r\n      case TypeKind.BOOL: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"j\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"d\";\r\n      case TypeKind.V128: return \"V\";\r\n      case TypeKind.VOID: return \"v\";\r\n      default: assert(false);\r\n    }\r\n    return \"i\";\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 128-bit vector. */\r\n  static readonly v128: Type = new Type(TypeKind.V128,\r\n    TypeFlags.VECTOR   |\r\n    TypeFlags.VALUE, 128\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n\r\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\r\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n  /** The unique program id that represents this signature. */\r\n  id: u32 = 0;\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n  /** The program that created this signature. */\r\n  program: Program;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    program: Program,\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null,\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.program = program;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n\r\n    let compare: Signature;\r\n    let signatureTypes = program.signatureTypes;\r\n    let length = signatureTypes.length;\r\n    for (let i = 0; i < length; i++) {\r\n      compare = signatureTypes[i];\r\n      if (this.isAssignableTo(compare)) {\r\n        this.id = compare.id;\r\n        return this;\r\n      }\r\n    }\r\n    program.signatureTypes.push(this);\r\n    this.id = program.signatureID++;\r\n  }\r\n\r\n  asFunctionTarget(program: Program): FunctionTarget {\r\n    var target = this.cachedFunctionTarget;\r\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\r\n    else assert(target.program == program);\r\n    return target;\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    sb.push(returnType.toSignatureString());\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    return \"FUNCSIG$\" + sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      sb.push(\"this: \");\r\n      assert(!thisType.signatureReference);\r\n      sb.push(thisType.toString());\r\n      index = 1;\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.INSTANCEOF:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.NULL:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE:\r\n    case Token.VOID: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function isIllegalVariableIdentifier(name: string): bool {\r\n  assert(name.length);\r\n  switch (name.charCodeAt(0)) {\r\n    case CharCode.d: return name == \"delete\";\r\n    case CharCode.f: return name == \"for\";\r\n    case CharCode.i: return name == \"instanceof\";\r\n    case CharCode.n: return name == \"null\";\r\n    case CharCode.v: return name == \"void\";\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics || new Array();\r\n\r\n    var end = this.end;\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (!(\r\n            ++this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          )) break;\r\n          // otherwise fall-through\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (chr == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (isDecimalDigit(chr)) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < end &&\r\n              chr == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < end) {\r\n                chr = text.charCodeAt(this.pos);\r\n                if (chr == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (chr == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken !== Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\r\n          if (isLineBreak(text.charCodeAt(pos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\r\n    return this.skip(Token.IDENTIFIER, identifierHandling);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    while (\r\n      ++this.pos < end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    var end = this.end;\r\n    if (++this.pos >= end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (!escaped && c == CharCode.SLASH) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var flags = 0;\r\n    while (this.pos < end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.x:\r\n        case CharCode.X:\r\n        case CharCode.b:\r\n        case CharCode.B:\r\n        case CharCode.o:\r\n        case CharCode.O: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.x:\r\n        case CharCode.X: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.b:\r\n        case CharCode.B: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.o:\r\n        case CharCode.O: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_4 = i64_new(4);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = (value << 4) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = (value << 4) + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.A)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = (value << 4) + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.a)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var value = i64_new(0);\r\n    var i64_10 = i64_new(10);\r\n    var sepEnd = start;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_3 = i64_new(3);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = (value << 3) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_3),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_1 = i64_new(1);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = (value << 1);\r\n        value = i64_shl(value, i64_1);\r\n      } else if (c == CharCode._1) {\r\n        // value = (value << 1) + 1;\r\n        value = i64_add(\r\n          i64_shl(value, i64_1),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.e || c == CharCode.E) {\r\n        if (\r\n          ++this.pos < end &&\r\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = (value << 4) + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = (value << 4) + c + (10 - CharCode.A);\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = (value << 4) + c + (10 - CharCode.a);\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    if (this.pos >= end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        ((value32 - 65536) >>> 10) + 0xD800,\r\n        ((value32 - 65536) & 1023) + 0xDC00\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * Resolve infrastructure to obtain types and elements.\r\n * @module resolver\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticEmitter,\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Program,\r\n  ElementKind,\r\n  OperatorKind,\r\n  Element,\r\n  Class,\r\n  ClassPrototype,\r\n  Function,\r\n  FunctionPrototype,\r\n  VariableLikeElement,\r\n  Property,\r\n  PropertyPrototype,\r\n  Field,\r\n  FieldPrototype,\r\n  Global,\r\n  TypeDefinition\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow\r\n} from \"./flow\";\r\n\r\nimport {\r\n  FunctionTypeNode,\r\n  ParameterKind,\r\n  TypeNode,\r\n  NodeKind,\r\n  NamedTypeNode,\r\n  TypeName,\r\n  TypeParameterNode,\r\n  Node,\r\n  Range,\r\n  IdentifierExpression,\r\n  CallExpression,\r\n  ElementAccessExpression,\r\n  PropertyAccessExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  AssertionExpression,\r\n  Expression,\r\n  IntegerLiteralExpression,\r\n  UnaryPrefixExpression,\r\n  UnaryPostfixExpression,\r\n  AssertionKind,\r\n  BinaryExpression,\r\n  ThisExpression,\r\n  SuperExpression,\r\n  isTypeOmitted\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n  typesToString,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols\r\n} from \"./common\";\r\n\r\nimport {\r\n  makeMap,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\nimport {\r\n  Token\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  BuiltinSymbols\r\n} from \"./builtins\";\r\n\r\n/** Indicates whether errors are reported or not. */\r\nexport enum ReportMode {\r\n  /** Report errors. */\r\n  REPORT,\r\n  /** Swallow errors. */\r\n  SWALLOW\r\n}\r\n\r\n/** Provides tools to resolve types and expressions. */\r\nexport class Resolver extends DiagnosticEmitter {\r\n\r\n  /** The program this resolver belongs to. */\r\n  program: Program;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  currentThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  currentElementExpression : Expression | null = null;\r\n\r\n  /** Constructs the resolver for the specified program. */\r\n  constructor(\r\n    /** The program to construct a resolver for. */\r\n    program: Program\r\n  ) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n  }\r\n\r\n  // ====================================================== Types ======================================================\r\n\r\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    /** The type to resolve. */\r\n    node: TypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    switch (node.kind) {\r\n      case NodeKind.NAMEDTYPE: {\r\n        return this.resolveNamedType(\r\n          <NamedTypeNode>node,\r\n          ctxElement,\r\n          ctxTypes,\r\n          reportMode\r\n        );\r\n      }\r\n      case NodeKind.FUNCTIONTYPE: {\r\n        return this.resolveFunctionType(\r\n          <FunctionTypeNode>node,\r\n          ctxElement,\r\n          ctxTypes,\r\n          reportMode\r\n        );\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\r\n  private resolveNamedType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var nameNode = node.name;\r\n    var typeArgumentNodes = node.typeArguments;\r\n    var isSimpleType = !nameNode.next;\r\n\r\n    // Look up in contextual types if a simple type\r\n    if (isSimpleType) {\r\n      let simpleName = nameNode.identifier.text;\r\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\r\n        let type = ctxTypes.get(simpleName)!;\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, type.toString()\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                node.range, type.toString()\r\n              );\r\n            }\r\n          }\r\n          return type.asNullable();\r\n        }\r\n        return type;\r\n      }\r\n    }\r\n\r\n    // Look up in context\r\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\r\n    if (!element) return null;\r\n\r\n    // Use shadow type if present (i.e. namespace sharing a type)\r\n    if (element.shadowType) {\r\n      element = element.shadowType;\r\n\r\n    } else {\r\n\r\n      // Handle enums (become i32)\r\n      if (element.kind == ElementKind.ENUM) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              node.range, element.name + \"/i32\"\r\n            );\r\n          }\r\n        }\r\n        return Type.i32;\r\n      }\r\n\r\n      // Handle classes\r\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let instance = this.resolveClassInclTypeArguments(\r\n          <ClassPrototype>element,\r\n          typeArgumentNodes,\r\n          ctxElement,\r\n          makeMap<string,Type>(ctxTypes), // don't inherit\r\n          node,\r\n          reportMode\r\n        );\r\n        if (!instance) return null;\r\n        return node.isNullable ? instance.type.asNullable() : instance.type;\r\n      }\r\n    }\r\n\r\n    // Handle type definitions\r\n    if (element.kind == ElementKind.TYPEDEFINITION) {\r\n\r\n      // Shortcut already resolved (mostly builtins)\r\n      if (element.is(CommonFlags.RESOLVED)) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        let type = (<TypeDefinition>element).type;\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                nameNode.range, nameNode.identifier.text\r\n              );\r\n            }\r\n          } else {\r\n            return type.asNullable();\r\n          }\r\n        }\r\n        return type;\r\n      }\r\n\r\n      // Handle special built-in types\r\n      if (isSimpleType) {\r\n        switch (nameNode.identifier.symbol) {\r\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\r\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\r\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\r\n        }\r\n      }\r\n\r\n      // Resolve normally\r\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\r\n      let typeArguments: Type[] | null = null;\r\n      if (typeParameterNodes) {\r\n        typeArguments = this.resolveTypeArguments(\r\n          typeParameterNodes,\r\n          typeArgumentNodes,\r\n          ctxElement,\r\n          ctxTypes = makeMap(ctxTypes), // inherit\r\n          node,\r\n          reportMode\r\n        );\r\n        if (!typeArguments) return null;\r\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          node.range, nameNode.identifier.text\r\n        );\r\n      }\r\n      let type = this.resolveType(\r\n        (<TypeDefinition>element).typeNode,\r\n        element,\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      if (node.isNullable) {\r\n        if (!type.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              nameNode.range, nameNode.identifier.text\r\n            );\r\n          }\r\n        } else {\r\n          return type.asNullable();\r\n        }\r\n      }\r\n      return type;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        nameNode.range, nameNode.identifier.text\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\r\n  private resolveFunctionType(\r\n    /** The type to resolve. */\r\n    node: FunctionTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterNodes = node.parameters;\r\n    var numParameters = parameterNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterNode = parameterNodes[i];\r\n      switch (parameterNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterTypeNode = parameterNode.type;\r\n      if (isTypeOmitted(parameterTypeNode)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            parameterTypeNode.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let parameterType = this.resolveType(\r\n        parameterTypeNode,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (isTypeOmitted(returnTypeNode)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnTypeNode.range\r\n        );\r\n      }\r\n      returnType = Type.void;\r\n    } else {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!returnType) return null;\r\n    }\r\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return node.isNullable ? signature.type.asNullable() : signature.type;\r\n  }\r\n\r\n  private resolveBuiltinNativeType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var typeArgumentNodes = node.typeArguments;\r\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\r\n    if (!typeArgument) return null;\r\n    switch (typeArgument.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.U32:\r\n      case TypeKind.BOOL: return Type.u32;\r\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.F32: return Type.f32;\r\n      case TypeKind.F64: return Type.f64;\r\n      case TypeKind.V128: return Type.v128;\r\n      case TypeKind.VOID: return Type.void;\r\n      default: assert(false);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private resolveBuiltinIndexofType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var typeArgumentNodes = node.typeArguments;\r\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\r\n    if (!typeArgument) return null;\r\n    var classReference = typeArgument.classReference;\r\n    if (!classReference) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n          typeArgumentNodes[0].range, typeArgument.toString()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\r\n    if (overload) {\r\n      if (overload.is(CommonFlags.STATIC)) {\r\n        assert(overload.signature.parameterTypes.length == 2);\r\n        return overload.signature.parameterTypes[1];\r\n      } else {\r\n        assert(overload.signature.parameterTypes.length == 1);\r\n        return overload.signature.parameterTypes[0];\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n        typeArgumentNodes[0].range, typeArgument.toString()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private resolveBuiltinValueofType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var typeArgumentNodes = node.typeArguments;\r\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\r\n    if (!typeArgument) return null;\r\n    var classReference = typeArgument.classReference;\r\n    if (!classReference) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n          typeArgumentNodes[0].range, typeArgument.toString()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n\r\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\r\n    if (overload) return overload.signature.returnType;\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n        typeArgumentNodes[0].range, typeArgument.toString()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a type name to the program element it refers to. */\r\n  resolveTypeName(\r\n    /** The type name to resolve. */\r\n    node: TypeName,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var element = ctxElement.lookup(node.identifier.text);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_find_name_0,\r\n          node.range, node.identifier.text\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var prev = node;\r\n    var next = node.next;\r\n    while (next) {\r\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            next.range, next.identifier.text, prev.identifier.text\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      prev = next;\r\n      next = next.next;\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    /** Type parameter nodes present. */\r\n    typeParameters: TypeParameterNode[],\r\n    /** Type argument nodes provided. */\r\n    typeArgumentNodes: TypeNode[] | null,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\r\n    /** Alternative report node in case of empty type arguments. */\r\n    alternativeReportNode: Node | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type[] | null {\r\n    var minParameterCount = 0;\r\n    var maxParameterCount = 0;\r\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\r\n      if (!typeParameters[i].defaultType) ++minParameterCount;\r\n      ++maxParameterCount;\r\n    }\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        argumentCount\r\n          ? Range.join(\r\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\r\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n            )\r\n          : assert(alternativeReportNode).range,\r\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\r\n        argumentCount.toString(10)\r\n      );\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(maxParameterCount);\r\n    for (let i = 0; i < maxParameterCount; ++i) {\r\n      let type = i < argumentCount\r\n        ? this.resolveType( // reports\r\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\r\n            ctxElement,\r\n            ctxTypes,\r\n            reportMode\r\n          )\r\n        : this.resolveType( // reports\r\n            assert(typeParameters[i].defaultType),\r\n            ctxElement,\r\n            ctxTypes,\r\n            reportMode\r\n          );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      ctxTypes.set(typeParameters[i].name.text, type);\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  // =================================================== Expressions ===================================================\r\n\r\n  /** Resolves an expression to the program element it refers to. */\r\n  resolveExpression(\r\n    /** The expression to resolve. */\r\n    node: Expression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    while (node.kind == NodeKind.PARENTHESIZED) { // simply skip\r\n      node = (<ParenthesizedExpression>node).expression;\r\n    }\r\n    switch (node.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        return this.resolveAssertionExpression(\r\n          <AssertionExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        return this.resolveUnaryPrefixExpression(\r\n          <UnaryPrefixExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        return this.resolveUnaryPostfixExpression(\r\n          <UnaryPostfixExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.BINARY: {\r\n        return this.resolveBinaryExpression(\r\n          <BinaryExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.THIS: {\r\n        return this.resolveThisExpression(\r\n          <ThisExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.SUPER: {\r\n        return this.resolveSuperExpression(\r\n          <SuperExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(\r\n          <IdentifierExpression>node,\r\n          ctxFlow, ctxFlow.actualFunction, reportMode\r\n        );\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        return this.resolveLiteralExpression(\r\n          <LiteralExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccessExpression(\r\n          <PropertyAccessExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccessExpression(\r\n          <ElementAccessExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        return this.resolveCallExpression(\r\n          <CallExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      // TODO: everything else\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an identifier to the program element it refers to. */\r\n  resolveIdentifier(\r\n    /** The expression to resolve. */\r\n    node: IdentifierExpression,\r\n    /** Flow to search for scoped locals. */\r\n    ctxFlow: Flow,\r\n    /** Element to search. */\r\n    ctxElement: Element = ctxFlow.actualFunction,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var name = node.text;\r\n    var element: Element | null;\r\n    if (element = ctxFlow.lookup(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (element = ctxElement.lookup(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (element = this.program.lookupGlobal(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        node.range, name\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\r\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\r\n    if (global.is(CommonFlags.RESOLVED)) return true;\r\n    var typeNode = global.typeNode;\r\n    if (!typeNode) return false;\r\n    var type = this.resolveType( // reports\r\n      typeNode,\r\n      global.parent,\r\n      null,\r\n      reportMode\r\n    );\r\n    if (!type) return false;\r\n    global.setType(type); // also sets resolved\r\n    return true;\r\n  }\r\n\r\n  /** Resolves a property access expression to the program element it refers to. */\r\n  resolvePropertyAccessExpression(\r\n    /** The expression to resolve. */\r\n    node: PropertyAccessExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetNode = node.expression;\r\n    var target = this.resolveExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\r\n    if (!target) return null;\r\n    var propertyName = node.property.text;\r\n\r\n    // Resolve variable-likes to their class type first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let typeClasses = this.program.typeClasses;\r\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\r\n            classReference = typeClasses.get(type.kind)!;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\r\n        let getterInstance = this.resolveFunction( // reports\r\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n        if (!getterInstance) return null;\r\n        let classReference = getterInstance.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            node.property.range, propertyName, getterInstance.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance\r\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\r\n        let classReference = getterInstance.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            node.property.range, propertyName, getterInstance.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // property access on element access?\r\n        let elementExpression = this.currentElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let arrayType = indexedGet.signature.returnType;\r\n          let classReference = arrayType.classReference;\r\n          if (!classReference) {\r\n            let typeClasses = this.program.typeClasses;\r\n            if (!arrayType.is(TypeFlags.REFERENCE) && typeClasses.has(arrayType.kind)) {\r\n              classReference = typeClasses.get(arrayType.kind)!;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n                node.property.range, propertyName, arrayType.toString()\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n          target = classReference;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\r\n        let shadowType = target.shadowType;\r\n        if (shadowType) {\r\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\r\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\r\n            if (resolvedType) shadowType.setType(resolvedType);\r\n          }\r\n          let classReference = shadowType.type.classReference;\r\n          if (classReference) target = classReference.prototype;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          if (members && members.has(propertyName)) {\r\n            this.currentThisExpression = targetNode;\r\n            this.currentElementExpression = null;\r\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members && members.has(propertyName)) {\r\n          this.currentThisExpression = targetNode;\r\n          this.currentElementExpression = null;\r\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      node.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an element access expression to the program element it refers to. */\r\n  resolveElementAccessExpression(\r\n    /** The expression to resolve. */\r\n    node: ElementAccessExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = node.expression;\r\n    var target = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode); // reports\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = node.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              node.range, (<Class>target).internalName\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let arrayType = indexedGet.signature.returnType;\r\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\r\n          if (target = arrayType.classReference) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = node.elementExpression;\r\n            return target;\r\n          }\r\n          return null;\r\n        }\r\n        this.currentThisExpression = targetExpression;\r\n        this.currentElementExpression = node.elementExpression;\r\n        return target;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        targetExpression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Determines the final type of an integer literal given the specified contextual type. */\r\n  determineIntegerLiteralType(\r\n    /** Integer literal value. */\r\n    intValue: I64,\r\n    /** Contextual type. */\r\n    ctxType: Type\r\n  ): Type {\r\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\r\n      // compile to contextual type if matching\r\n      switch (ctxType.kind) {\r\n        case TypeKind.I8: {\r\n          if (i64_is_i8(intValue)) return Type.i8;\r\n          break;\r\n        }\r\n        case TypeKind.U8: {\r\n          if (i64_is_u8(intValue)) return Type.u8;\r\n          break;\r\n        }\r\n        case TypeKind.I16: {\r\n          if (i64_is_i16(intValue)) return Type.i16;\r\n          break;\r\n        }\r\n        case TypeKind.U16: {\r\n          if (i64_is_u16(intValue)) return Type.u16;\r\n          break;\r\n        }\r\n        case TypeKind.I32: {\r\n          if (i64_is_i32(intValue)) return Type.i32;\r\n          break;\r\n        }\r\n        case TypeKind.U32: {\r\n          if (i64_is_u32(intValue)) return Type.u32;\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: {\r\n          if (i64_is_bool(intValue)) return Type.bool;\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_i32(intValue)) return Type.isize32;\r\n            break;\r\n          }\r\n          return Type.isize64;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_u32(intValue)) return Type.usize32;\r\n            break;\r\n          }\r\n          return Type.usize64;\r\n        }\r\n        case TypeKind.I64: return Type.i64;\r\n        case TypeKind.U64: return Type.u64;\r\n        case TypeKind.F32: return Type.f32;\r\n        case TypeKind.F64: return Type.f64;\r\n        case TypeKind.VOID: break; // best fitting below\r\n        default: assert(false);\r\n      }\r\n    }\r\n    // otherwise compile to best fitting native type\r\n    if (i64_is_i32(intValue)) return Type.i32;\r\n    if (i64_is_u32(intValue)) return Type.u32;\r\n    return Type.i64; // TODO: u64 if positive and larger than i64?\r\n  }\r\n\r\n  /** Resolves an assertion expression to the program element it refers to. */\r\n  resolveAssertionExpression(\r\n    /** The expression to resolve. */\r\n    node: AssertionExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (node.assertionKind == AssertionKind.NONNULL) {\r\n      return this.resolveExpression(\r\n        node.expression,\r\n        ctxFlow,\r\n        ctxType,\r\n        reportMode\r\n      );\r\n    }\r\n    var type = this.resolveType(\r\n      assert(node.toType), // must be set if not NONNULL\r\n      ctxFlow.actualFunction,\r\n      ctxFlow.contextualTypeArguments,\r\n      reportMode\r\n    );\r\n    if (!type) return null;\r\n    var element: Element | null = type.classReference;\r\n    if (!element) {\r\n      let signature = type.signatureReference;\r\n      if (!signature) return null;\r\n      element = signature.asFunctionTarget(this.program);\r\n    }\r\n    this.currentThisExpression = null;\r\n    this.currentElementExpression = null;\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an unary prefix expression to the program element it refers to. */\r\n  resolveUnaryPrefixExpression(\r\n    /** The expression to resolve. */\r\n    node: UnaryPrefixExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var operand = node.operand;\r\n    // TODO: operator overloads\r\n    switch (node.operator) {\r\n      case Token.MINUS: {\r\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\r\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\r\n          let type = this.determineIntegerLiteralType(\r\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\r\n            ctxType\r\n          );\r\n          let typeClasses = this.program.typeClasses;\r\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\r\n        }\r\n        return this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\r\n      }\r\n      case Token.PLUS:\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        return this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        let typeClasses = this.program.typeClasses;\r\n        assert(typeClasses.has(TypeKind.BOOL));\r\n        return typeClasses.get(TypeKind.BOOL);\r\n      }\r\n      case Token.TILDE: {\r\n        let resolvedOperand = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\r\n        if (!resolvedOperand) return null;\r\n        // TODO: matching integer type\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an unary postfix expression to the program element it refers to. */\r\n  resolveUnaryPostfixExpression(\r\n    /** The expression to resolve. */\r\n    node: UnaryPostfixExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // TODO: operator overloads\r\n    switch (node.operator) {\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        return this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a binary expression to the program element it refers to. */\r\n  resolveBinaryExpression(\r\n    /** The expression to resolve. */\r\n    name: BinaryExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // TODO\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        name.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a this expression to the program element it refers to. */\r\n  resolveThisExpression(\r\n    /** The expression to resolve. */\r\n    node: ThisExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let thisLocal = ctxFlow.lookupLocal(CommonSymbols.this_);\r\n      if (thisLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return thisLocal;\r\n      }\r\n    }\r\n    var parent = ctxFlow.actualFunction.parent;\r\n    if (parent) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a super expression to the program element it refers to. */\r\n  resolveSuperExpression(\r\n    /** The expression to resolve. */\r\n    node: SuperExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let superLocal = ctxFlow.lookupLocal(CommonSymbols.super_);\r\n      if (superLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return superLocal;\r\n      }\r\n    }\r\n    var parent: Element | null = ctxFlow.actualFunction.parent;\r\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a literal expression to the program element it refers to. */\r\n  resolveLiteralExpression(\r\n    /** The expression to resolve. */\r\n    node: LiteralExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    switch (node.literalKind) {\r\n      case LiteralKind.INTEGER: {\r\n        this.currentThisExpression = node;\r\n        this.currentElementExpression = null;\r\n        let literalType = this.determineIntegerLiteralType(\r\n          (<IntegerLiteralExpression>node).value,\r\n          ctxType\r\n        );\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        this.currentThisExpression = node;\r\n        this.currentElementExpression = null;\r\n        let literalType = ctxType == Type.f32 ? Type.f32 : Type.f64;\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\r\n      }\r\n      case LiteralKind.STRING: {\r\n        this.currentThisExpression = node;\r\n        this.currentElementExpression = null;\r\n        return this.program.stringInstance;\r\n      }\r\n      // TODO\r\n      // case LiteralKind.ARRAY:\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a call expression to the program element it refers to. */\r\n  resolveCallExpression(\r\n    /** The expression to resolve. */\r\n    node: CallExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = node.expression;\r\n    var target = this.resolveExpression( // reports\r\n      targetExpression,\r\n      ctxFlow,\r\n      ctxType,\r\n      reportMode\r\n    );\r\n\r\n    if (!target) return null;\r\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n      // `unchecked(expr: *): *` is special\r\n      if (\r\n        (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\r\n        node.arguments.length > 0\r\n      ) {\r\n        return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\r\n      }\r\n      // otherwise resolve normally\r\n      let instance = this.resolveFunctionInclTypeArguments(\r\n        <FunctionPrototype>target,\r\n        node.typeArguments,\r\n        ctxFlow.actualFunction,\r\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\r\n        node,\r\n        reportMode\r\n      );\r\n      if (!instance) return null;\r\n      let returnType = instance.signature.returnType;\r\n      let classType = returnType.classReference;\r\n      if (classType) {\r\n        // reuse resolvedThisExpression (might be property access)\r\n        // reuse resolvedElementExpression (might be element access)\r\n        return classType;\r\n      } else {\r\n        let signature = returnType.signatureReference;\r\n        if (signature) {\r\n          let functionTarget = signature.asFunctionTarget(this.program);\r\n          // reuse resolvedThisExpression (might be property access)\r\n          // reuse resolvedElementExpression (might be element access)\r\n          return functionTarget;\r\n        } else {\r\n          let typeClasses = this.program.typeClasses;\r\n          if (!returnType.is(TypeFlags.REFERENCE) && typeClasses.has(returnType.kind)) {\r\n            return typeClasses.get(returnType.kind);\r\n          }\r\n        }\r\n      }\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n          targetExpression.range, target.internalName\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // ==================================================== Elements =====================================================\r\n\r\n  /** Resolves a function prototype using the specified concrete type arguments. */\r\n  resolveFunction(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Type arguments provided. */\r\n    typeArguments: Type[] | null,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var classInstance: Class | null = null; // if an instance method\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Instance method prototypes are pre-bound to their concrete class as their parent\r\n    if (prototype.is(CommonFlags.INSTANCE)) {\r\n      assert(actualParent.kind == ElementKind.CLASS);\r\n      classInstance = <Class>actualParent;\r\n\r\n      // check if this exact concrete class and function combination is known already\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n\r\n      // inherit class specific type arguments\r\n      let classTypeArguments = classInstance.typeArguments;\r\n      if (classTypeArguments) {\r\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\r\n        let numClassTypeArguments = classTypeParameters.length;\r\n        assert(numClassTypeArguments == classTypeParameters.length);\r\n        for (let i = 0; i < numClassTypeArguments; ++i) {\r\n          let classTypeParameterName = classTypeParameters[i].name.text;\r\n          if (!ctxTypes.has(classTypeParameterName)) {\r\n            ctxTypes.set(\r\n              classTypeParameterName,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n    }\r\n\r\n    // override whatever is contextual with actual function type arguments\r\n    var signatureNode = prototype.functionTypeNode;\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var numFunctionTypeArguments: i32;\r\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\r\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        ctxTypes.set(\r\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\r\n          typeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\r\n    }\r\n\r\n    // resolve `this` type if applicable\r\n    var thisType: Type | null = null;\r\n    var explicitThisType = signatureNode.explicitThisType;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        prototype.parent, // relative to function\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!thisType) return null;\r\n      ctxTypes.set(CommonSymbols.this_, thisType);\r\n    } else if (classInstance) {\r\n      thisType = classInstance.type;\r\n      ctxTypes.set(CommonSymbols.this_, thisType);\r\n    }\r\n\r\n    // resolve parameter types\r\n    var signatureParameters = signatureNode.parameters;\r\n    var numSignatureParameters = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(numSignatureParameters);\r\n    var parameterNames = new Array<string>(numSignatureParameters);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < numSignatureParameters; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = parameterDeclaration.type;\r\n      if (isTypeOmitted(typeNode)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let parameterType = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    // resolve return type\r\n    var returnType: Type;\r\n    if (prototype.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = signatureNode.returnType;\r\n      if (isTypeOmitted(typeNode)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let type = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var nameInclTypeParameters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\r\n    var instance = new Function(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      signature,\r\n      ctxTypes\r\n    );\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\r\n  resolveFunctionInclTypeArguments(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Type arguments provided to be resolved. */\r\n    typeArgumentNodes: TypeNode[] | null,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n\r\n      // If this is an instance method, first apply the class's type arguments\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        assert(actualParent.kind == ElementKind.CLASS);\r\n        let classTypeArguments = (<Class>actualParent).typeArguments;\r\n        if (classTypeArguments) {\r\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\r\n          let numClassTypeArguments = classTypeArguments.length;\r\n          assert(numClassTypeArguments == typeParameterNodes.length);\r\n          for (let i = 0; i < numClassTypeArguments; ++i) {\r\n            ctxTypes.set(\r\n              typeParameterNodes[i].name.text,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes),\r\n        typeArgumentNodes,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveFunction(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      ctxTypes,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Resolves a class prototype using the specified concrete type arguments. */\r\n  resolveClass(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Type arguments provided. */\r\n    typeArguments: Type[] | null,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Check if this exact instance has already been resolved\r\n    var instance = prototype.getResolvedInstance(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // Insert contextual type arguments for this operation. Internally, this method is always\r\n    // called with matching type parameter / argument counts.\r\n    if (typeArguments) {\r\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n      let numTypeParameters = typeParameterNodes.length;\r\n      let numTypeArguments = typeArguments.length;\r\n      assert(numTypeArguments == numTypeParameters);\r\n      for (let i = 0; i < numTypeArguments; ++i) {\r\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\r\n      }\r\n    } else {\r\n      let typeParameterNodes = prototype.typeParameterNodes;\r\n      assert(!(typeParameterNodes && typeParameterNodes.length));\r\n    }\r\n\r\n    // Resolve base class if applicable\r\n    var basePrototype = prototype.basePrototype;\r\n    var baseClass: Class | null = null;\r\n    if (basePrototype) {\r\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\r\n      baseClass = this.resolveClassInclTypeArguments(\r\n        basePrototype,\r\n        extendsNode.typeArguments,\r\n        prototype.parent, // relative to derived class\r\n        makeMap(ctxTypes), // don't inherit\r\n        extendsNode,\r\n        reportMode\r\n      );\r\n      if (!baseClass) return null;\r\n    }\r\n\r\n    // Construct the instance and remember that it has been resolved already\r\n    var nameInclTypeParamters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\r\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = ctxTypes;\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n\r\n    // Inherit base class members and set up the initial memory offset for own fields\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      let baseMembers = baseClass.members;\r\n      if (baseMembers) {\r\n        let instanceMembers = instance.members;\r\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n        for (let [baseMemberName, baseMember] of baseMembers) {\r\n          instanceMembers.set(baseMemberName, baseMember);\r\n        }\r\n      }\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n    }\r\n\r\n    // Resolve instance members\r\n    var instanceMemberPrototypes = prototype.instanceMembers;\r\n    if (instanceMemberPrototypes) {\r\n      for (let member of instanceMemberPrototypes.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            let instanceMembers = instance.members;\r\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n            else if (instanceMembers.has(member.name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                (<FieldPrototype>member).identifierNode.range,\r\n                member.name\r\n              );\r\n              break;\r\n            }\r\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\r\n            let fieldType: Type | null = null;\r\n            // TODO: handle duplicate non-private fields specifically?\r\n            if (!fieldTypeNode) {\r\n              if (baseClass) {\r\n                let baseMembers = baseClass.members;\r\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\r\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\r\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\r\n                    assert(baseField.kind == ElementKind.FIELD);\r\n                    fieldType = (<Field>baseField).type;\r\n                  }\r\n                }\r\n              }\r\n              if (!fieldType) {\r\n                if (reportMode == ReportMode.REPORT) {\r\n                  this.error(\r\n                    DiagnosticCode.Type_expected,\r\n                    (<FieldPrototype>member).identifierNode.range.atEnd\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              fieldType = this.resolveType(\r\n                fieldTypeNode,\r\n                prototype.parent, // relative to class\r\n                instance.contextualTypeArguments,\r\n                reportMode\r\n              );\r\n            }\r\n            if (!fieldType) break; // did report above\r\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\r\n            assert(isPowerOf2(fieldType.byteSize));\r\n            let mask = fieldType.byteSize - 1;\r\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.add(member.name, fieldInstance); // reports\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\r\n            instance.add(boundPrototype.name, boundPrototype); // reports\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\r\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\r\n            if (getterPrototype) {\r\n              let getterInstance = this.resolveFunction(\r\n                getterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (getterInstance) {\r\n                propertyInstance.getterInstance = getterInstance;\r\n                propertyInstance.setType(getterInstance.signature.returnType);\r\n              }\r\n            }\r\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\r\n            if (setterPrototype) {\r\n              let setterInstance = this.resolveFunction(\r\n                setterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (setterInstance) {\r\n                propertyInstance.setterInstance = setterInstance;\r\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\r\n                  assert(setterInstance.signature.parameterTypes.length == 1);\r\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\r\n                }\r\n              }\r\n            }\r\n            instance.add(propertyInstance.name, propertyInstance); // reports\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Finalize memory offset\r\n    instance.currentMemoryOffset = memoryOffset;\r\n\r\n    // Link _own_ constructor if present\r\n    {\r\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\r\n      if (ctorPrototype && ctorPrototype.parent === instance) {\r\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n        let ctorInstance = this.resolveFunction(\r\n          <FunctionPrototype>ctorPrototype,\r\n          null,\r\n          instance.contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\r\n        let boundPrototype = overloadPrototype.toBound(instance);\r\n        operatorInstance = this.resolveFunction(\r\n          boundPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      } else {\r\n        operatorInstance = this.resolveFunction(\r\n          overloadPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a class prototype by first resolving the specified type arguments. */\r\n  resolveClassInclTypeArguments(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Type arguments provided to be resolved. */\r\n    typeArgumentNodes: TypeNode[] | null,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes), // must be present if generic\r\n        typeArgumentNodes,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveClass(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      ctxTypes,\r\n      reportMode\r\n    );\r\n  }\r\n}\r\n","/**\r\n * A control flow analyzer.\r\n * @module flow\r\n *//***/\r\n\r\nimport {\r\n  Type,\r\n  TypeFlags,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  Local,\r\n  Function,\r\n  Element,\r\n  ElementKind,\r\n  Global\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionId,\r\n  ExpressionRef,\r\n\r\n  getExpressionId,\r\n  getLocalGetIndex,\r\n  isLocalTee,\r\n  getLocalSetValue,\r\n  getGlobalGetName,\r\n  getBinaryOp,\r\n  BinaryOp,\r\n  getBinaryLeft,\r\n  getConstValueI32,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  UnaryOp,\r\n  getExpressionType,\r\n  getConstValueI64Low,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getLocalSetIndex,\r\n  getIfCondition,\r\n  getConstValueI64High,\r\n  getUnaryValue,\r\n  getCallOperand,\r\n  traverse\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node\r\n} from \"./ast\";\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  // categorical\r\n\r\n  /** This flow returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This flow returns a wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 1,\r\n  /** This flow returns a non-null value. */\r\n  RETURNS_NONNULL = 1 << 2,\r\n  /** This flow throws. */\r\n  THROWS = 1 << 3,\r\n  /** This flow breaks. */\r\n  BREAKS = 1 << 4,\r\n  /** This flow continues. */\r\n  CONTINUES = 1 << 5,\r\n  /** This flow allocates. Constructors only. */\r\n  ALLOCATES = 1 << 6,\r\n  /** This flow calls super. Constructors only. */\r\n  CALLS_SUPER = 1 << 7,\r\n  /** This flow terminates (returns, throws or continues). */\r\n  TERMINATES = 1 << 8,\r\n\r\n  // conditional\r\n\r\n  /** This flow conditionally returns in a child flow. */\r\n  CONDITIONALLY_RETURNS = 1 << 9,\r\n  /** This flow conditionally throws in a child flow. */\r\n  CONDITIONALLY_THROWS = 1 << 10,\r\n  /** This flow conditionally terminates in a child flow. */\r\n  CONDITIONALLY_TERMINATES = 1 << 11,\r\n  /** This flow conditionally breaks in a child flow. */\r\n  CONDITIONALLY_BREAKS = 1 << 12,\r\n  /** This flow conditionally continues in a child flow. */\r\n  CONDITIONALLY_CONTINUES = 1 << 13,\r\n  /** This flow conditionally allocates in a child flow. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 14,\r\n\r\n  // special\r\n\r\n  /** This is an inlining flow. */\r\n  INLINE_CONTEXT = 1 << 15,\r\n  /** This is a flow with explicitly disabled bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 16,\r\n\r\n  // masks\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = FlowFlags.RETURNS\r\n                  | FlowFlags.RETURNS_WRAPPED\r\n                  | FlowFlags.RETURNS_NONNULL\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES\r\n                  | FlowFlags.ALLOCATES\r\n                  | FlowFlags.CALLS_SUPER\r\n                  | FlowFlags.TERMINATES,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\r\n                  | FlowFlags.CONDITIONALLY_THROWS\r\n                  | FlowFlags.CONDITIONALLY_BREAKS\r\n                  | FlowFlags.CONDITIONALLY_CONTINUES\r\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\r\n}\r\n\r\n/** Flags indicating the current state of a local. */\r\nexport enum LocalFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** Local is constant. */\r\n  CONSTANT = 1 << 0,\r\n  /** Local is properly wrapped. Relevant for small integers. */\r\n  WRAPPED = 1 << 1,\r\n  /** Local is non-null. */\r\n  NONNULL = 1 << 2,\r\n  /** Local is read from. */\r\n  READFROM = 1 << 3,\r\n  /** Local is written to. */\r\n  WRITTENTO = 1 << 4,\r\n  /** Local is retained. */\r\n  RETAINED = 1 << 5,\r\n\r\n  /** Local is conditionally read from. */\r\n  CONDITIONALLY_READFROM = 1 << 6,\r\n  /** Local is conditionally written to. */\r\n  CONDITIONALLY_WRITTENTO = 1 << 7,\r\n  /** Local must be conditionally retained. */\r\n  CONDITIONALLY_RETAINED = 1 << 8,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = CONSTANT\r\n                  | WRAPPED\r\n                  | NONNULL\r\n                  | READFROM\r\n                  | WRITTENTO\r\n                  | RETAINED,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = RETAINED\r\n                  | CONDITIONALLY_READFROM\r\n                  | CONDITIONALLY_WRITTENTO\r\n                  | CONDITIONALLY_RETAINED,\r\n\r\n  /** Any retained flag. */\r\n  ANY_RETAINED = RETAINED\r\n               | CONDITIONALLY_RETAINED\r\n}\r\nexport namespace LocalFlags {\r\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\r\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\r\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\r\n  }\r\n}\r\n\r\n/** Flags indicating the current state of a field. */\r\nexport enum FieldFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** Field is initialized. Relevant in constructors. */\r\n  INITIALIZED = 1 << 0,\r\n  /** Field is conditionally initialized. Relevant in constructors. */\r\n  CONDITIONALLY_INITIALIZED = 1 << 1,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = INITIALIZED,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\r\n}\r\nexport namespace FieldFlags {\r\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\r\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\r\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\r\n  }\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  parentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local flags. */\r\n  localFlags: LocalFlags[];\r\n  /** Field flags. Relevant in constructors. */\r\n  fieldFlags: Map<string,FieldFlags> | null = null;\r\n  /** Function being inlined, when inlining. */\r\n  inlineFunction: Function | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  inlineReturnLabel: string | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(parentFunction: Function): Flow {\r\n    var flow = new Flow();\r\n    flow.parent = null;\r\n    flow.flags = FlowFlags.NONE;\r\n    flow.parentFunction = parentFunction;\r\n    flow.continueLabel = null;\r\n    flow.breakLabel = null;\r\n    flow.returnType = parentFunction.signature.returnType;\r\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\r\n    flow.localFlags = [];\r\n    flow.inlineFunction = null;\r\n    flow.inlineReturnLabel = null;\r\n    return flow;\r\n  }\r\n\r\n  /** Creates an inline flow within `parentFunction`. */\r\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\r\n    var flow = Flow.create(parentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.inlineFunction = inlineFunction;\r\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\r\n    flow.returnType = inlineFunction.signature.returnType;\r\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\r\n    return flow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\r\n  get actualFunction(): Function {\r\n    return this.inlineFunction || this.parentFunction;\r\n  }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Forks this flow to a child flow. */\r\n  fork(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.parentFunction = this.parentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.localFlags = this.localFlags.slice();\r\n    branch.inlineFunction = this.inlineFunction;\r\n    branch.inlineReturnLabel = this.inlineReturnLabel;\r\n    return branch;\r\n  }\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\r\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\r\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\r\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\r\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (except) {\r\n      if (temps && temps.length) {\r\n        for (let i = 0, k = temps.length; i < k; ++i) {\r\n          if (!except.has(temps[i].index)) {\r\n            local = temps[i];\r\n            let k = temps.length - 1;\r\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\r\n            temps.length = k;\r\n            local.type = type;\r\n            local.flags = CommonFlags.NONE;\r\n            this.unsetLocalFlag(local.index, ~0);\r\n            return local;\r\n          }\r\n        }\r\n      }\r\n      local = parentFunction.addLocal(type);\r\n    } else {\r\n      if (temps && temps.length) {\r\n        local = temps.pop();\r\n        local.type = type;\r\n        local.flags = CommonFlags.NONE;\r\n      } else {\r\n        local = parentFunction.addLocal(type);\r\n      }\r\n    }\r\n    this.unsetLocalFlag(local.index, ~0);\r\n    return local;\r\n  }\r\n\r\n  /** Gets a local that sticks around until this flow is exited, and then released. */\r\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\r\n    var local = this.getTempLocal(type, except);\r\n    local.set(CommonFlags.SCOPED);\r\n    var scopedLocals = this.scopedLocals;\r\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\r\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\r\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\r\n        break;\r\n      }\r\n      case NativeType.V128: {\r\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, except: Set<i32> | null = null): Local {\r\n    var local = this.getTempLocal(type, except);\r\n    this.freeTempLocal(local);\r\n    return local;\r\n  }\r\n\r\n  /** Gets the scoped local of the specified name. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var scopedLocals = this.scopedLocals;\r\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name);\r\n    return null;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\r\n    var scopedLocal = this.getTempLocal(type, except);\r\n    var scopedLocals = this.scopedLocals;\r\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\r\n    else assert(!scopedLocals.has(name));\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    scopedLocals.set(name, scopedLocal);\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\r\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          this.parentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            reportNode.range\r\n          );\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.parentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\r\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Frees this flow's scoped variables and returns its parent flow. */\r\n  freeScopedLocals(): void {\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n  }\r\n\r\n  /** Looks up the local of the specified name in the current scope. */\r\n  lookupLocal(name: string): Local | null {\r\n    var current: Flow | null = this;\r\n    var scope: Map<String,Local> | null;\r\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\r\n    while (current = current.parent);\r\n    return this.parentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to the scope of this flow. */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupLocal(name);\r\n    if (element) return element;\r\n    return this.actualFunction.lookup(name);\r\n  }\r\n\r\n  /** Tests if the local at the specified index has the specified flag or flags. */\r\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\r\n    if (index < 0) return defaultIfInlined;\r\n    var localFlags = this.localFlags;\r\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\r\n  }\r\n\r\n  /** Tests if the local at the specified index has any of the specified flags. */\r\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\r\n    if (index < 0) return defaultIfInlined;\r\n    var localFlags = this.localFlags;\r\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\r\n  }\r\n\r\n  /** Sets the specified flag or flags on the local at the specified index. */\r\n  setLocalFlag(index: i32, flag: LocalFlags): void {\r\n    if (index < 0) return;\r\n    var localFlags = this.localFlags;\r\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\r\n    this.localFlags[index] = flags | flag;\r\n  }\r\n\r\n  /** Unsets the specified flag or flags on the local at the specified index. */\r\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\r\n    if (index < 0) return;\r\n    var localFlags = this.localFlags;\r\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\r\n    this.localFlags[index] = flags & ~flag;\r\n  }\r\n\r\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\r\n  pushBreakLabel(): string {\r\n    var parentFunction = this.parentFunction;\r\n    var id = parentFunction.nextBreakId++;\r\n    var stack = parentFunction.breakStack;\r\n    if (!stack) parentFunction.breakStack = [ id ];\r\n    else stack.push(id);\r\n    return parentFunction.breakLabel = id.toString(10);\r\n  }\r\n\r\n  /** Pops the most recent break label from the stack. */\r\n  popBreakLabel(): void {\r\n    var parentFunction = this.parentFunction;\r\n    var stack = assert(parentFunction.breakStack);\r\n    var length = assert(stack.length);\r\n    stack.pop();\r\n    if (length > 1) {\r\n      parentFunction.breakLabel = stack[length - 2].toString(10);\r\n    } else {\r\n      parentFunction.breakLabel = null;\r\n      parentFunction.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\r\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\r\n  inheritConditional(other: Flow): void {\r\n    if (other.is(FlowFlags.RETURNS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (other.is(FlowFlags.THROWS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (other.is(FlowFlags.ALLOCATES)) {\r\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n    var localFlags = other.localFlags;\r\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\r\n      let flags = localFlags[i];\r\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\r\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\r\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\r\n    }\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // categorical flags set in both arms\r\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\r\n\r\n    // conditional flags set in any arm\r\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\r\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\r\n\r\n    // categorical flags in either arm as conditional\r\n    this.inheritConditional(left);\r\n    this.inheritConditional(right);\r\n\r\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\r\n    var leftLocalFlags = left.localFlags;\r\n    var numLeftLocalFlags = leftLocalFlags.length;\r\n    var rightLocalFlags = right.localFlags;\r\n    var numRightLocalFlags = rightLocalFlags.length;\r\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\r\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\r\n      combinedFlags[i] = LocalFlags.join(\r\n        unchecked(leftLocalFlags[i]),\r\n        i < numRightLocalFlags\r\n          ? unchecked(rightLocalFlags[i])\r\n          : 0\r\n      );\r\n    }\r\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\r\n      combinedFlags[i] = LocalFlags.join(\r\n        0,\r\n        unchecked(rightLocalFlags[i])\r\n      );\r\n    }\r\n    this.localFlags = combinedFlags;\r\n  }\r\n\r\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\r\n  isNonnull(expr: ExpressionRef, type: Type): bool {\r\n    if (!type.is(TypeFlags.NULLABLE)) return true;\r\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\r\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\r\n    // has already been handled by the nullable type check above.\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: {\r\n        if (!isLocalTee(expr)) break;\r\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\r\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\r\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\r\n    // A: `expr` is true-ish -> Q: how did that happen?\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: {\r\n        if (!isLocalTee(expr)) break;\r\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\r\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\r\n        break;\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n        break;\r\n      }\r\n      case ExpressionId.If: {\r\n        let ifFalse = getIfFalse(expr);\r\n        if (!ifFalse) break;\r\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\r\n          // Logical AND: (if (condition ifTrue 0))\r\n          // the only way this had become true is if condition and ifTrue are true\r\n          if (\r\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\r\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\r\n          ) {\r\n            this.inheritNonnullIfTrue(getIfCondition(expr));\r\n            this.inheritNonnullIfTrue(getIfTrue(expr));\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.EqI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\r\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\r\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.EqI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\r\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\r\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Call: {\r\n        let name = getCallTarget(expr);\r\n        let program = this.parentFunction.program;\r\n        switch (name) {\r\n          case program.retainInstance.internalName: {\r\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\r\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\r\n    // A: `expr` is false-ish -> Q: how did that happen?\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.If: {\r\n        let ifTrue = getIfTrue(expr);\r\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\r\n          let ifFalse = getIfFalse(expr);\r\n          if (!ifFalse) break;\r\n          // Logical OR: (if (condition 1 ifFalse))\r\n          // the only way this had become false is if condition and ifFalse are false\r\n          if (\r\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\r\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\r\n          ) {\r\n            this.inheritNonnullIfFalse(getIfCondition(expr));\r\n            this.inheritNonnullIfFalse(getIfFalse(expr));\r\n          }\r\n\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n          // remember: we want to know how the _entire_ expression became FALSE (!)\r\n          case BinaryOp.EqI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.EqI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\r\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\r\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\r\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\r\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\r\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possible combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.LocalSet: { // tee\r\n        assert(isLocalTee(expr));\r\n        return this.canOverflow(getLocalSetValue(expr), type);\r\n      }\r\n\r\n      // overflows if the conversion does (globals are wrapped on set)\r\n      case ExpressionId.GlobalGet: {\r\n        // TODO: this is inefficient because it has to read a string\r\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\r\n        assert(global.kind == ElementKind.GLOBAL);\r\n        return canConversionOverflow(assert((<Global>global).type), type);\r\n      }\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        let signed = isLoadSigned(expr);\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\r\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.parentFunction.program;\r\n        let instancesByName = program.instancesByName;\r\n        let instanceName = assert(getCallTarget(expr));\r\n        if (instancesByName.has(instanceName)) {\r\n          let instance = instancesByName.get(instanceName)!;\r\n          assert(instance.kind == ElementKind.FUNCTION);\r\n          let returnType = (<Function>instance).signature.returnType;\r\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n              || canConversionOverflow(returnType, type);\r\n        }\r\n        return false; // assume no overflow for builtins\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  toString(): string {\r\n    var levels = 0;\r\n    var parent = this.parent;\r\n    while (parent) {\r\n      parent = parent.parent;\r\n      ++levels;\r\n    }\r\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromType.size > toType.size\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n\r\n/** Finds all indexes of locals used in the specified expression. */\r\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\r\n  traverse(expr, used, findUsedLocalsVisit);\r\n  return used;\r\n}\r\n\r\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\r\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\r\n  switch (getExpressionId(expr)) {\r\n    case ExpressionId.LocalGet: {\r\n      used.add(getLocalGetIndex(expr));\r\n      break;\r\n    }\r\n    case ExpressionId.LocalSet: {\r\n      used.add(getLocalSetIndex(expr));\r\n      // fall-through for value\r\n    }\r\n    default: traverse(expr, used, findUsedLocalsVisit);\r\n  }\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  BuiltinSymbols,\r\n  compileCall as compileBuiltinCall,\r\n  compileAbort,\r\n  compileVisitGlobals,\r\n  compileVisitMembers,\r\n  compileRTTI,\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  getLocalGetIndex,\r\n  isLocalTee,\r\n  getLocalSetIndex,\r\n  FeatureFlags,\r\n  needsExplicitUnreachable\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  CommonSymbols,\r\n  INDEX_SUFFIX,\r\n  Feature,\r\n  Target\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  ConstantValueKind,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n  PropertyPrototype,\r\n  File,\r\n  mangleInternalName\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow,\r\n  LocalFlags,\r\n  findUsedLocals\r\n} from \"./flow\";\r\n\r\nimport {\r\n  Resolver, ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  NamedTypeNode,\r\n  Range,\r\n  DecoratorKind,\r\n  AssertionKind,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FieldDeclaration,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ObjectLiteralExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n\r\n  nodeIsConstantValue,\r\n  findDecorator,\r\n  isTypeOmitted,\r\n  ExportDefaultStatement,\r\n  SourceKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64,\r\n  makeMap\r\n} from \"./util\";\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\r\n  sharedMemory: i32 = 0;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** If true, generates an explicit start function. */\r\n  explicitStart: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: i32 = 0;\r\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n  /** If true, disallows unsafe features in user code. */\r\n  noUnsafe: bool = false;\r\n\r\n  /** Hinted optimize level. Not applied by the compiler itself. */\r\n  optimizeLevelHint: i32 = 0;\r\n  /** Hinted shrink level. Not applied by the compiler itself. */\r\n  shrinkLevelHint: i32 = 0;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Various constraints in expression compilation. */\r\nexport const enum Constraints {\r\n  NONE = 0,\r\n\r\n  /** Must implicitly convert to the target type. */\r\n  CONV_IMPLICIT = 1 << 0,\r\n  /** Must explicitly convert to the target type. */\r\n  CONV_EXPLICIT = 1 << 1,\r\n  /** Must wrap small integer values to match the target type. */\r\n  MUST_WRAP = 1 << 2,\r\n\r\n  /** Indicates that the value will be dropped immediately. */\r\n  WILL_DROP = 1 << 3,\r\n  /** Indicates that the value will be retained immediately. */\r\n  WILL_RETAIN = 1 << 4,\r\n  /** Indicates that static data is preferred. */\r\n  PREFER_STATIC = 1 << 5\r\n}\r\n\r\n/** Runtime features to be activated by the compiler. */\r\nexport const enum RuntimeFeatures {\r\n  NONE = 0,\r\n  /** Requires heap setup. */\r\n  HEAP = 1 << 0,\r\n  /** Requires runtime type information setup. */\r\n  RTTI = 1 << 1,\r\n  /** Requires the built-in globals visitor. */\r\n  visitGlobals = 1 << 2,\r\n  /** Requires the built-in members visitor. */\r\n  visitMembers = 1 << 3\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Resolver reference. */\r\n  get resolver(): Resolver { return this.program.resolver; }\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current control flow. */\r\n  currentFlow: Flow;\r\n  /** Current inline functions stack. */\r\n  currentInlineFunctions: Function[] = [];\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function statements. */\r\n  currentBody: ExpressionRef[];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: string[] = [ \"null\" ];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n  /** Requires runtime features. */\r\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\r\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\r\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n    var featureFlags: BinaryenFeatureFlags = 0;\r\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\r\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBAL)) featureFlags |= FeatureFlags.MutableGloabls;\r\n    // if (this.options.hasFeature(Feature.TRUNC_SAT)) featureFlags |= FeatureFlags.NontrappingFPToInt;\r\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\r\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\r\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\r\n    // if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\r\n    this.module.setFeatures(featureFlags);\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the main start function\r\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature(program, [], Type.void));\r\n    startFunctionInstance.internalName = \"start\";\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentFlow = startFunctionInstance.flow;\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // add a mutable heap and rtti base dummies\r\n    if (options.isWasm64) {\r\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\r\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\r\n    } else {\r\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\r\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\r\n    }\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var files = program.filesByName;\r\n    for (let file of files.values()) {\r\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\r\n        this.compileFile(file);\r\n        this.compileExports(file);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty or explicitly requested\r\n    var startIsEmpty = !startFunctionBody.length;\r\n    var explicitStart = options.explicitStart;\r\n    if (!startIsEmpty || explicitStart) {\r\n      let signature = startFunctionInstance.signature;\r\n      if (!startIsEmpty && explicitStart) {\r\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\r\n        startFunctionBody.unshift(\r\n          module.if(\r\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\r\n            module.return(),\r\n            module.global_set(BuiltinSymbols.started, module.i32(1))\r\n          )\r\n        );\r\n      }\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.block(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      if (!explicitStart) module.setStart(funcRef);\r\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\r\n    }\r\n\r\n    // compile runtime features\r\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\r\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\r\n    module.removeGlobal(BuiltinSymbols.rtti_base);\r\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\r\n\r\n    // update the heap base pointer\r\n    var memoryOffset = this.memoryOffset;\r\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n    this.memoryOffset = memoryOffset;\r\n    module.removeGlobal(BuiltinSymbols.heap_base);\r\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          BuiltinSymbols.heap_base,\r\n          NativeType.I64,\r\n          false,\r\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          BuiltinSymbols.heap_base,\r\n          NativeType.I32,\r\n          false,\r\n          module.i32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up memory\r\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\r\n    module.setMemory(\r\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\r\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\r\n        : 0,\r\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\r\n      this.memorySegments,\r\n      options.target,\r\n      \"memory\",\r\n      isSharedMemory\r\n    );\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\r\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\r\n\r\n    // set up module exports\r\n    for (let file of this.program.filesByName.values()) {\r\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\r\n    }\r\n    return module;\r\n  }\r\n\r\n  // === Exports ==================================================================================\r\n\r\n  /** Applies the respective module exports for the specified file. */\r\n  private ensureModuleExports(file: File): void {\r\n    var members = file.exports;\r\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar)  {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\r\n    }\r\n  }\r\n\r\n  /** Applies the respective module export(s) for the specified element. */\r\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\r\n    switch (element.kind) {\r\n\r\n      // traverse instances\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instances = (<FunctionPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.ensureModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instances = (<ClassPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.ensureModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getter = (<PropertyPrototype>element).getterPrototype;\r\n        let setter = (<PropertyPrototype>element).setterPrototype;\r\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n\r\n      // export concrete elements\r\n      case ElementKind.GLOBAL: {\r\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<Global>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUMVALUE: {\r\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<EnumValue>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION: {\r\n        let instance = <Function>element;\r\n        let signature = instance.signature;\r\n        if (signature.requiredParameters < signature.parameterTypes.length) {\r\n          // utilize trampoline to fill in omitted arguments\r\n          instance = this.ensureTrampoline(instance);\r\n          this.ensureArgcSet();\r\n        }\r\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = (<Property>element).getterInstance;\r\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        let setter = (<Property>element).setterInstance;\r\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\r\n        if (!element.is(CommonFlags.READONLY)) {\r\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        // make the class name itself represent its runtime id\r\n        if (!(<Class>element).type.isUnmanaged) {\r\n          let module = this.module;\r\n          let internalName = (<Class>element).internalName;\r\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\r\n          module.addGlobalExport(internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // just traverse members below\r\n      case ElementKind.ENUM:\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.FILE:\r\n      case ElementKind.TYPEDEFINITION: break;\r\n\r\n      default: assert(false); // unexpected module export\r\n    }\r\n\r\n    // traverse members\r\n    var members = element.members;\r\n    if (members) {\r\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\r\n        ? INSTANCE_DELIMITER\r\n        : STATIC_DELIMITER\r\n      );\r\n      if (\r\n        element.kind == ElementKind.NAMESPACE ||\r\n        element.kind == ElementKind.FILE\r\n      ) {\r\n        for (let member of members.values()) {\r\n          if (!member.is(CommonFlags.EXPORT)) continue;\r\n          this.ensureModuleExport(member.name, member, subPrefix);\r\n        }\r\n      } else {\r\n        for (let member of members.values()) {\r\n          if (member.is(CommonFlags.PRIVATE)) continue;\r\n          this.ensureModuleExport(member.name, member, subPrefix);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes a function to get the value of a field of an exported class. */\r\n  private ensureModuleFieldGetter(name: string, field: Field): void {\r\n    var module = this.module;\r\n    var type = field.type;\r\n    var usizeType = this.options.usizeType;\r\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\r\n      module.local_get(0, usizeType.toNativeType()),\r\n      type.toNativeType(), field.memoryOffset\r\n    );\r\n    // a user-defined getter would return a retained value, so:\r\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\r\n    module.addFunction(\r\n      name,\r\n      this.ensureFunctionType(null, type, usizeType),\r\n      null,\r\n      loadExpr\r\n    );\r\n    module.addFunctionExport(name, name);\r\n  }\r\n\r\n  /** Makes a function to set the value of a field of an exported class. */\r\n  private ensureModuleFieldSetter(name: string, field: Field): void {\r\n    var module = this.module;\r\n    var type = field.type;\r\n    var nativeType = type.toNativeType();\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = usizeType.toNativeType();\r\n    var valueExpr = module.local_get(1, nativeType);\r\n    if (type.isManaged) {\r\n      valueExpr = this.makeRetainRelease(\r\n        module.load(type.byteSize, false, // oldRef\r\n          module.local_get(0, nativeSizeType),\r\n          nativeType, field.memoryOffset\r\n        ),\r\n        valueExpr // newRef\r\n      );\r\n    }\r\n    module.addFunction(\r\n      name,\r\n      this.ensureFunctionType([ type ], Type.void, usizeType),\r\n      null,\r\n      module.store(\r\n        type.byteSize,\r\n        module.local_get(0, nativeSizeType),\r\n        valueExpr,\r\n        nativeType,\r\n        field.memoryOffset\r\n      )\r\n    );\r\n    module.addFunctionExport(name, name);\r\n  }\r\n\r\n  // === Elements =================================================================================\r\n\r\n  /** Compiles any element. */\r\n  compileElement(element: Element, compileMembers: bool = true): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        this.compileGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\r\n        }\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.TYPEDEFINITION:\r\n      case ElementKind.ENUMVALUE: break;\r\n      default: assert(false, ElementKind[element.kind]);\r\n    }\r\n    if (compileMembers) this.compileMembers(element);\r\n  }\r\n\r\n  /** Compiles an element's members. */\r\n  compileMembers(element: Element): void {\r\n    var members = element.members;\r\n    if (members) for (let element of members.values()) this.compileElement(element);\r\n  }\r\n\r\n  /** Compiles a file's exports. */\r\n  compileExports(file: File): void {\r\n    var exports = file.exports;\r\n    if (exports) for (let element of exports.values()) this.compileElement(element);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar) {\r\n      for (let exportStar of exportsStar) {\r\n        this.compileFile(exportStar);\r\n        this.compileExports(exportStar);\r\n      }\r\n    }\r\n  }\r\n\r\n  // files\r\n\r\n  /** Compiles the file matching the specified path. */\r\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var file: File;\r\n    var filesByName = this.program.filesByName;\r\n    var pathWithIndex: string;\r\n    if (filesByName.has(normalizedPathWithoutExtension)) {\r\n      file = filesByName.get(normalizedPathWithoutExtension)!;\r\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\r\n      file = filesByName.get(pathWithIndex)!;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n      return;\r\n    }\r\n    this.compileFile(file);\r\n  }\r\n\r\n  /** Compiles the specified file. */\r\n  compileFile(file: File): void {\r\n    if (file.is(CommonFlags.COMPILED)) return;\r\n    file.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements within the file's start function\r\n    var startFunction = file.startFunction;\r\n    var previousBody = this.currentBody;\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // compile top-level statements\r\n    var previousFlow = this.currentFlow;\r\n    var flow = startFunction.flow;\r\n    this.currentFlow = flow;\r\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\r\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\r\n    }\r\n    this.finishAutoreleases(flow, startFunctionBody);\r\n    this.currentFlow = previousFlow;\r\n    this.currentBody = previousBody;\r\n\r\n    // if top-level statements are present, make the per-file start function and call it in start\r\n    if (startFunctionBody.length) {\r\n      let module = this.module;\r\n      let locals = startFunction.localsByIndex;\r\n      let numLocals = locals.length;\r\n      let varTypes = new Array<NativeType>(numLocals);\r\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\r\n      module.addFunction(\r\n        startFunction.internalName,\r\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\r\n        varTypes,\r\n        startFunctionBody.length > 1\r\n          ? module.block(null, startFunctionBody)\r\n          : startFunctionBody[0]\r\n      );\r\n      previousBody.push(\r\n        module.call(startFunction.internalName, null, NativeType.None)\r\n      );\r\n    }\r\n  }\r\n\r\n  // === Globals ==================================================================================\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var initExpr: ExpressionRef = 0;\r\n    var initAutoreleaseSkipped: bool = false;\r\n    var typeNode = global.typeNode;\r\n    var initializerNode = global.initializerNode;\r\n\r\n    if (!global.is(CommonFlags.RESOLVED)) {\r\n\r\n      // Resolve type if annotated\r\n      if (typeNode) {\r\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\r\n        if (!resolvedType) return false;\r\n        if (resolvedType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(resolvedType);\r\n\r\n      // Otherwise infer type from initializer\r\n      } else if (initializerNode) {\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\r\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\r\n        );\r\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\r\n        this.currentFlow = previousFlow;\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(this.currentType);\r\n\r\n      // Error if there's neither a type nor an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          global.identifierNode.range.atEnd\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\r\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\r\n      return true;\r\n    }\r\n\r\n    var type = global.type;\r\n    var nativeType = type.toNativeType();\r\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\r\n\r\n    // Handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // Constant global or mutable globals enabled\r\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        mangleImportName(global, global.declaration);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          mangleImportName_moduleName,\r\n          mangleImportName_elementName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // Importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          global.declaration.range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // The MVP does not yet support initializer expressions other than constant values (and constant\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // Evaluate initializer if present\r\n    if (initializerNode) {\r\n      if (!initExpr) {\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(initializerNode, type,\r\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\r\n        );\r\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\r\n        this.currentFlow = previousFlow;\r\n      }\r\n\r\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n        if (isDeclaredConstant) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\r\n        } else {\r\n          initializeInStart = true;\r\n        }\r\n      }\r\n\r\n      // Explicitly inline if annotated\r\n      if (isDeclaredInline) {\r\n        if (initializeInStart) {\r\n          this.warning(\r\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\r\n            initializerNode.range\r\n          );\r\n        } else {\r\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\r\n          let exprType = getExpressionType(initExpr);\r\n          switch (exprType) {\r\n            case NativeType.I32: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(\r\n                getConstValueI64Low(initExpr),\r\n                getConstValueI64High(initExpr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF32(initExpr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF64(initExpr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              return false;\r\n            }\r\n          }\r\n          global.set(CommonFlags.INLINED); // inline the value from now on\r\n        }\r\n      }\r\n\r\n    // Initialize to zero if there's no initializer\r\n    } else {\r\n      initExpr = type.toNativeZero(module);\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      if (isDeclaredInline) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\r\n        );\r\n      }\r\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\r\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\r\n      this.currentBody.push(\r\n        module.global_set(internalName, initExpr)\r\n      );\r\n    } else if (!isDeclaredInline) { // compile normally\r\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // === Enums ====================================================================================\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n    var previousValueIsMut = false;\r\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueNode = val.valueNode;\r\n        val.set(CommonFlags.COMPILED);\r\n        let previousFlow = this.currentFlow;\r\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = element.file.startFunction.flow;\r\n        }\r\n        let initExpr: ExpressionRef;\r\n        if (valueNode) {\r\n          initExpr = this.compileExpression(valueNode, Type.i32,\r\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\r\n          );\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            initExpr = module.precomputeExpression(initExpr);\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              if (element.is(CommonFlags.CONST)) {\r\n                this.error(\r\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                  valueNode.range\r\n                );\r\n              }\r\n              initInStart = true;\r\n            }\r\n          }\r\n        } else if (previousValue == null) {\r\n          initExpr = module.i32(0);\r\n        } else {\r\n          if (previousValueIsMut) {\r\n            this.error(\r\n              DiagnosticCode.Enum_member_must_have_initializer,\r\n              (<EnumValue>member).identifierNode.range.atEnd\r\n            );\r\n          }\r\n          initExpr = module.binary(BinaryOp.AddI32,\r\n            module.global_get(previousValue.internalName, NativeType.I32),\r\n            module.i32(1)\r\n          );\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.error(\r\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                member.declaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n        }\r\n        this.currentFlow = previousFlow;\r\n        if (initInStart) {\r\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\r\n          this.currentBody.push(\r\n            this.makeGlobalAssignment(val, initExpr, false)\r\n          );\r\n          previousValueIsMut = true;\r\n        } else {\r\n          if (isInline) {\r\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\r\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\r\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            }\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n          }\r\n          val.isImmutable = true;\r\n          previousValueIsMut = false;\r\n        }\r\n        previousValue = <EnumValue>val;\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // === Functions ================================================================================\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: NamedTypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): Function | null {\r\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\r\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return null;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles the body of a function within the specified flow. */\r\n  compileFunctionBody(\r\n    /** Function to compile. */\r\n    instance: Function,\r\n    /** Target array of statements. */\r\n    stmts: ExpressionRef[] | null = null\r\n  ): ExpressionRef[] {\r\n    var module = this.module;\r\n    var bodyNode = assert(instance.prototype.bodyNode);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = this.currentFlow;\r\n\r\n    // compile statements\r\n    if (bodyNode.kind == NodeKind.BLOCK) {\r\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\r\n    } else {\r\n      // must be an expression statement if not a block\r\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\r\n\r\n      // must be an arrow function\r\n      assert(instance.prototype.arrowKind);\r\n\r\n      // none of the following can be an arrow function\r\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\r\n\r\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      if (!stmts) stmts = [ expr ];\r\n      else stmts.push(expr);\r\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\r\n        let indexBefore = stmts.length;\r\n        this.performAutoreleases(flow, stmts);\r\n        this.finishAutoreleases(flow, stmts);\r\n        let canOverflow = flow.canOverflow(expr, returnType);\r\n        let nonNull = flow.isNonnull(expr, returnType);\r\n        if (stmts.length > indexBefore) {\r\n          let temp = flow.getAndFreeTempLocal(returnType);\r\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\r\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\r\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\r\n        }\r\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\r\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\r\n      }\r\n    }\r\n\r\n    // make constructors return their instance pointer\r\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n      assert(instance.is(CommonFlags.INSTANCE));\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n\r\n      if (!flow.is(FlowFlags.TERMINATES)) {\r\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n\r\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\r\n        if (!flow.is(FlowFlags.ALLOCATES)) {\r\n          // {\r\n          //   if (!this) this = <ALLOC>\r\n          //   this.a = X\r\n          //   this.b = Y\r\n          // }\r\n          stmts.push(\r\n            module.if(\r\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                module.local_get(thisLocal.index, nativeSizeType)\r\n              ),\r\n              module.local_set(thisLocal.index,\r\n                this.makeRetain(\r\n                  this.makeAllocation(<Class>classInstance)\r\n                ),\r\n              )\r\n            )\r\n          );\r\n          this.makeFieldInitialization(<Class>classInstance, stmts);\r\n        }\r\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\r\n        this.finishAutoreleases(flow, stmts);\r\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\r\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\r\n      }\r\n\r\n      // check that super has been called if this is a derived class\r\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\r\n        this.error(\r\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\r\n          instance.prototype.declaration.range\r\n        );\r\n      }\r\n\r\n    // if this is a normal function, make sure that all branches terminate\r\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        instance.prototype.functionTypeNode.returnType.range\r\n      );\r\n    }\r\n\r\n    return stmts;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\r\n\r\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var signature = instance.signature;\r\n    var bodyNode = instance.prototype.bodyNode;\r\n\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var funcRef: FunctionRef;\r\n\r\n    // concrete function\r\n    if (bodyNode) {\r\n\r\n      // must not be ambient\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      // cannot have an annotated external name\r\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\r\n        let decoratorNodes = instance.decoratorNodes;\r\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          decorator.range\r\n        );\r\n      }\r\n\r\n      // compile body in this function's context\r\n      let previousFlow = this.currentFlow;\r\n      let flow = instance.flow;\r\n      this.currentFlow = flow;\r\n      let stmts = new Array<ExpressionRef>();\r\n\r\n      // retain each argument for as long as the function lives\r\n      let index = 0;\r\n      let thisType = signature.thisType;\r\n      if (thisType) {\r\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\r\n        ++index;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\r\n        let type = parameterTypes[i];\r\n        if (type.isManaged) {\r\n          stmts.push(\r\n            module.drop(\r\n              this.makeRetain(\r\n                module.local_get(index, type.toNativeType())\r\n              )\r\n            )\r\n          );\r\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\r\n        }\r\n      }\r\n\r\n      this.compileFunctionBody(instance, stmts);\r\n      if (!flow.is(FlowFlags.TERMINATES)) {\r\n        this.performAutoreleases(flow, stmts);\r\n        this.finishAutoreleases(flow, stmts);\r\n      }\r\n      this.currentFlow = previousFlow;\r\n\r\n      // create the function\r\n      funcRef = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\r\n      );\r\n\r\n    // imported function\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\r\n\r\n      // create the import\r\n      funcRef = module.addFunctionImport(\r\n        instance.internalName,\r\n        mangleImportName_moduleName,\r\n        mangleImportName_elementName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    instance.finalize(module, funcRef);\r\n    this.currentType = previousType;\r\n    return true;\r\n  }\r\n\r\n  // === Classes ==================================================================================\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: NamedTypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = this.resolver.resolveClassInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    var prototype = instance.prototype;\r\n    var staticMembers = (<ClassPrototype>prototype).members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                (<FunctionPrototype>element).identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let getter = (<PropertyPrototype>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                getter.identifierNode\r\n              );\r\n            }\r\n            let setter = (<PropertyPrototype>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                setter.identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            element.set(CommonFlags.COMPILED);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterInstance;\r\n            if (getter) this.compileFunction(getter);\r\n            let setter = (<Property>element).setterInstance;\r\n            if (setter) this.compileFunction(setter);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: NamedTypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // === Memory ===================================================================================\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\r\n  ensureStaticString(stringValue: string): ExpressionRef {\r\n    var program = this.program;\r\n    var rtHeaderSize = program.runtimeHeaderSize;\r\n    var stringInstance = assert(program.stringInstance);\r\n    var stringSegment: MemorySegment;\r\n    var segments = this.stringSegments;\r\n    if (segments.has(stringValue)) {\r\n      stringSegment = segments.get(stringValue)!; // reuse\r\n    } else {\r\n      let length = stringValue.length;\r\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\r\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\r\n      for (let i = 0; i < length; ++i) {\r\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\r\n      }\r\n      stringSegment = this.addMemorySegment(buffer);\r\n      segments.set(stringValue, stringSegment);\r\n    }\r\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\r\n    this.currentType = stringInstance.type;\r\n    if (this.options.isWasm64) {\r\n      return this.module.i64(i64_low(ref), i64_high(ref));\r\n    } else {\r\n      assert(i64_is_u32(ref));\r\n      return this.module.i32(i64_low(ref));\r\n    }\r\n  }\r\n\r\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\r\n    var program = this.program;\r\n    var length = values.length;\r\n    var byteSize = elementType.byteSize;\r\n    var byteLength = length * byteSize;\r\n    var bufferInstance = assert(program.arrayBufferInstance);\r\n    var runtimeHeaderSize = program.runtimeHeaderSize;\r\n\r\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\r\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\r\n    var pos = runtimeHeaderSize;\r\n    var nativeType = elementType.toNativeType();\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        switch (byteSize) {\r\n          case 1: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI8(getConstValueI32(value), buf, pos);\r\n              pos += 1;\r\n            }\r\n            break;\r\n          }\r\n          case 2: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI16(getConstValueI32(value), buf, pos);\r\n              pos += 2;\r\n            }\r\n            break;\r\n          }\r\n          case 4: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI32(getConstValueI32(value), buf, pos);\r\n              pos += 4;\r\n            }\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF32(getConstValueF32(value), buf, pos);\r\n          pos += 4;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF64(getConstValueF64(value), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    assert(pos == buf.length);\r\n\r\n    return this.addMemorySegment(buf);\r\n  }\r\n\r\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\r\n    var program = this.program;\r\n    var runtimeHeaderSize = program.runtimeHeaderSize;\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\r\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\r\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\r\n    var arrayLength = i32(bufferLength / elementType.byteSize);\r\n\r\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\r\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\r\n\r\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\r\n    assert(!program.options.isWasm64); // TODO\r\n    assert(arrayInstance.writeField(\"data\", bufferAddress32, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"dataLength\", bufferLength, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\r\n\r\n    return this.addMemorySegment(buf);\r\n  }\r\n\r\n  // === Table ====================================================================================\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func.internalName);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // === Statements ===============================================================================\r\n\r\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\r\n    if (statement.kind == NodeKind.EXPORTDEFAULT) {\r\n      statement = (<ExportDefaultStatement>statement).declaration;\r\n    }\r\n    switch (statement.kind) {\r\n      case NodeKind.CLASSDECLARATION: {\r\n        let memberStatements = (<ClassDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.ENUMDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\r\n        assert(element.kind == ElementKind.ENUM);\r\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case NodeKind.NAMESPACEDECLARATION: {\r\n        let memberStatements = (<NamespaceDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        let declarations = (<VariableStatement>statement).declarations;\r\n        for (let i = 0, k = declarations.length; i < k; ++i) {\r\n          let element = this.program.getElementByDeclaration(declarations[i]);\r\n          assert(element.kind == ElementKind.GLOBAL);\r\n          if (\r\n            !element.is(CommonFlags.AMBIENT) && // delay imports\r\n            !element.hasDecorator(DecoratorFlags.LAZY)\r\n          ) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.FIELDDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\r\n        if (element.kind == ElementKind.GLOBAL) { // static\r\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.EXPORT: {\r\n        if ((<ExportStatement>statement).normalizedPath != null) {\r\n          this.compileFileByPath(\r\n            <string>(<ExportStatement>statement).normalizedPath,\r\n            <StringLiteralExpression>(<ExportStatement>statement).path\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.IMPORT: {\r\n        this.compileFileByPath(\r\n          (<ImportStatement>statement).normalizedPath,\r\n          (<ImportStatement>statement).path\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTIONDECLARATION:\r\n      case NodeKind.METHODDECLARATION:\r\n      case NodeKind.INTERFACEDECLARATION:\r\n      case NodeKind.INDEXSIGNATUREDECLARATION:\r\n      case NodeKind.TYPEDECLARATION: break;\r\n      default: { // otherwise a top-level statement that is part of the start function's body\r\n        let stmt = this.compileStatement(statement);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  compileStatement(\r\n    statement: Statement,\r\n    isLastInBody: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.nop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // TODO: integrate inner type declaration into flow\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        stmt = module.unreachable();\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.unreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(\r\n    statements: Statement[],\r\n    isBody: bool = false,\r\n    stmts: ExpressionRef[] | null = null\r\n  ): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    if (!stmts) {\r\n      stmts = new Array<ExpressionRef>(numStatements);\r\n      stmts.length = 0;\r\n    }\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\r\n      switch (getExpressionId(stmt)) {\r\n        case ExpressionId.Block: {\r\n          if (!getBlockName(stmt)) {\r\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: stmts.push(stmt);\r\n        case ExpressionId.Nop:\r\n      }\r\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\r\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\r\n        break;\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(\r\n    statement: BlockStatement\r\n  ): ExpressionRef {\r\n    var statements = statement.statements;\r\n    var outerFlow = this.currentFlow;\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\r\n    this.currentFlow = outerFlow;\r\n    return flatten(this.module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileBreakStatement(\r\n    statement: BreakStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    var flow = this.currentFlow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    var parent = flow.parent;\r\n    while (parent !== null && parent.breakLabel == breakLabel) {\r\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\r\n      parent = parent.parent;\r\n    }\r\n    flow.freeScopedLocals();\r\n    stmts.push(module.br(breakLabel));\r\n    flow.set(FlowFlags.BREAKS);\r\n    return flatten(module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileContinueStatement(\r\n    statement: ContinueStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFlow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    var current: Flow | null = flow.parent;\r\n    while (current && current.continueLabel === continueLabel) {\r\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\r\n      current = current.parent;\r\n    }\r\n    flow.freeScopedLocals();\r\n    stmts.push(module.br(continueLabel));\r\n    return flatten(module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileDoStatement(\r\n    statement: DoStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (statement.statement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(\r\n        this.compileStatement(statement.statement)\r\n      );\r\n    }\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(statement.condition, Type.i32),\r\n        this.currentType\r\n      )\r\n    );\r\n    var alwaysFalse = false;\r\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n      assert(getExpressionType(condExpr) == NativeType.I32);\r\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\r\n    }\r\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\r\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\r\n\r\n    // (block $break            ;; (1) skip if no breaks\r\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\r\n    //   (...)                  ;; (3)\r\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\r\n    //  )\r\n    // )\r\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\r\n\r\n    if (fallsThrough && !alwaysFalse) { // (4)\r\n      stmts.push(module.br(continueLabel, condExpr));\r\n    }\r\n    var expr = flatten(module, stmts, NativeType.None);\r\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\r\n      expr = module.loop(continueLabel, expr);\r\n    }\r\n    if (breaks) { // (1)\r\n      expr = module.block(breakLabel, [ expr ]);\r\n    }\r\n\r\n    // Switch back to the parent flow\r\n    if (!terminates) this.performAutoreleases(innerFlow, stmts);\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    outerFlow.inherit(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return expr;\r\n  }\r\n\r\n  compileEmptyStatement(\r\n    statement: EmptyStatement\r\n  ): ExpressionRef {\r\n    return this.module.nop();\r\n  }\r\n\r\n  compileExpressionStatement(\r\n    statement: ExpressionStatement\r\n  ): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\r\n  }\r\n\r\n  compileForStatement(\r\n    statement: ForStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // Set up and use the inner flow\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n\r\n    // Compile the initializer\r\n    var initializer = statement.initializer;\r\n    var initExpr: ExpressionRef = 0;\r\n    if (initializer) initExpr = this.compileStatement(initializer);\r\n\r\n    // Compile the condition\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = false;\r\n    if (statement.condition) {\r\n      condExpr = module.precomputeExpression(\r\n        this.makeIsTrueish(\r\n          this.compileExpression(<Expression>statement.condition, Type.bool),\r\n          this.currentType\r\n        )\r\n      );\r\n      // Simplify if the condition is constant\r\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n        assert(getExpressionType(condExpr) == NativeType.I32);\r\n        if (getConstValueI32(condExpr) == /* false */ 0) {\r\n          let stmts = new Array<ExpressionRef>();\r\n          if (initExpr) stmts.push(initExpr);\r\n          this.performAutoreleases(innerFlow, stmts);\r\n          innerFlow.freeScopedLocals();\r\n          outerFlow.popBreakLabel();\r\n          this.currentFlow = outerFlow;\r\n          return flatten(module, stmts, NativeType.None);\r\n        }\r\n        alwaysTrue = true;\r\n      }\r\n    } else { // Omitted condition is always true\r\n      condExpr = module.i32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    innerFlow.inheritNonnullIfTrue(condExpr);\r\n\r\n    // Compile incrementor\r\n    var incrementor = statement.incrementor;\r\n    var incrExpr: ExpressionRef = 0;\r\n    if (incrementor) incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\r\n\r\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\r\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; innerFlow.breakLabel = breakLabel;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n    var loopLabel = \"loop|\" + label;\r\n    var bodyStatement = statement.statement;\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (bodyStatement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(this.compileStatement(bodyStatement));\r\n    }\r\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\r\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\r\n\r\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\r\n    //  (initializer)         ;; (2) [may be empty]\r\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\r\n    //   (br_if !cond $break) ;; (4) skip if always true\r\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\r\n    //    (...)               ;; (6)\r\n    //   )\r\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\r\n    //   (br $loop)           ;; (8) skip if skipping (3)\r\n    //  )\r\n    // )\r\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\r\n    var needsLabel = !alwaysTrue || breaks;\r\n\r\n    var loop = new Array<ExpressionRef>();\r\n    if (!alwaysTrue) { // (4)\r\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\r\n    }\r\n    if (continues) { // (5)\r\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\r\n        loop.push(module.block(continueLabel, stmts));\r\n      }\r\n    } else {\r\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\r\n    }\r\n    var expr: ExpressionRef;\r\n    if (fallsThrough || continues) { // (3)\r\n      if (incrExpr) loop.push(incrExpr); // (7)\r\n      this.performAutoreleases(innerFlow, loop);\r\n      loop.push(module.br(loopLabel)); // (8)\r\n      if (initExpr) { // (2)\r\n        expr = module.block(needsLabel ? breakLabel : null, [\r\n          initExpr,\r\n          module.loop(loopLabel, module.block(null, loop))\r\n        ]);\r\n      } else {\r\n        expr = module.block(needsLabel ? breakLabel : null, [\r\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\r\n        ]);\r\n      }\r\n    } else {\r\n      if (initExpr) loop.unshift(initExpr); // (2)\r\n      this.performAutoreleases(innerFlow, loop);\r\n      expr = module.block(needsLabel ? breakLabel : null, loop);\r\n    }\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(\r\n    statement: IfStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(statement.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExpr)\r\n        ? this.compileStatement(ifTrue)\r\n        : ifFalse\r\n          ? this.compileStatement(ifFalse)\r\n          : module.nop();\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var ifTrueStmts = new Array<ExpressionRef>();\r\n    var ifTrueFlow = outerFlow.fork();\r\n    this.currentFlow = ifTrueFlow;\r\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\r\n    if (ifTrue.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\r\n    } else {\r\n      ifTrueStmts.push(this.compileStatement(ifTrue));\r\n    }\r\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\r\n    ifTrueFlow.freeScopedLocals();\r\n    this.currentFlow = outerFlow;\r\n\r\n    if (ifFalse) {\r\n      let ifFalseFlow = outerFlow.fork();\r\n      this.currentFlow = ifFalseFlow;\r\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\r\n      let ifFalseStmts = new Array<ExpressionRef>();\r\n      if (ifFalse.kind == NodeKind.BLOCK) {\r\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\r\n      } else {\r\n        ifFalseStmts.push(this.compileStatement(ifFalse));\r\n      }\r\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\r\n      ifFalseFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n      return module.if(condExpr,\r\n        flatten(module, ifTrueStmts, NativeType.None),\r\n        flatten(module, ifFalseStmts, NativeType.None)\r\n      );\r\n    } else {\r\n      outerFlow.inheritConditional(ifTrueFlow);\r\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\r\n      return module.if(condExpr,\r\n        flatten(module, ifTrueStmts, NativeType.None)\r\n      );\r\n    }\r\n    // TODO: Detect neglected condition\r\n    // if (!foo) {\r\n    //   foo = [notNull]\r\n    // }\r\n    // foo // is possibly null\r\n  }\r\n\r\n  compileReturnStatement(\r\n    statement: ReturnStatement,\r\n    isLastInBody: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = this.currentFlow;\r\n    var returnType = flow.returnType;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\r\n\r\n    var valueExpression = statement.value;\r\n    if (valueExpression) {\r\n      if (returnType == Type.void) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          valueExpression.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let constraints = Constraints.CONV_IMPLICIT;\r\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\r\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\r\n\r\n      // when returning a local, and it is already retained, skip the final set\r\n      // of retaining it as the return value and releasing it as a variable\r\n      if (!this.skippedAutoreleases.has(expr)) {\r\n        if (returnType.isManaged) {\r\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\r\n            if (flow.isAnyLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED)) {\r\n              flow.unsetLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED);\r\n              this.skippedAutoreleases.add(expr);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // remember return states\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\r\n\r\n    } else if (returnType != Type.void) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        statement.range, \"void\", returnType.toString()\r\n      );\r\n      expr = module.unreachable();\r\n    }\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    this.finishAutoreleases(flow, stmts);\r\n\r\n    // Make sure that the return value is retained for the caller\r\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\r\n\r\n    if (returnType != Type.void && stmts.length) {\r\n      let temp = flow.getAndFreeTempLocal(returnType);\r\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n      stmts.unshift(\r\n        module.local_set(temp.index, expr)\r\n      );\r\n      expr = module.local_get(temp.index, returnType.toNativeType());\r\n    }\r\n    flow.freeScopedLocals();\r\n\r\n    // If the last statement anyway, make it the block's return value\r\n    if (isLastInBody && expr && returnType != Type.void) {\r\n      if (!stmts.length) return expr;\r\n      stmts.push(expr);\r\n      return module.block(null, stmts, returnType.toNativeType());\r\n    }\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\r\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\r\n      // stmts.push(module.createUnreachable());\r\n      return module.block(null, stmts);\r\n    }\r\n\r\n    // Otherwise emit a normal return\r\n    if (!stmts.length) return module.return(expr);\r\n    stmts.push(module.return(expr));\r\n    return module.block(null, stmts);\r\n  }\r\n\r\n  compileSwitchStatement(\r\n    statement: SwitchStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var outerFlow = this.currentFlow;\r\n    var context = outerFlow.pushBreakLabel();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.local_set( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32,\r\n        Constraints.CONV_IMPLICIT\r\n      )\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.binary(BinaryOp.EqI32,\r\n            module.local_get(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32,\r\n              Constraints.CONV_IMPLICIT\r\n            )\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    outerFlow.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.br((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\r\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\r\n    var commonConditional = 0;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let innerFlow = outerFlow.fork();\r\n      this.currentFlow = innerFlow;\r\n      let breakLabel = \"break|\" + context;\r\n      innerFlow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminates = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n        }\r\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\r\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\r\n          break;\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\r\n        commonCategorical &= innerFlow.flags;\r\n      }\r\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\r\n\r\n      // Switch back to the parent flow\r\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\r\n      innerFlow.unset(\r\n        FlowFlags.BREAKS |\r\n        FlowFlags.CONDITIONALLY_BREAKS\r\n      );\r\n      innerFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    outerFlow.popBreakLabel();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\r\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\r\n    // TODO: what about local states?\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(\r\n    statement: ThrowStatement\r\n  ): ExpressionRef {\r\n    var flow = this.currentFlow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.finishAutoreleases(flow, stmts);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    var value = statement.value;\r\n    var message: Expression | null = null;\r\n    if (value.kind == NodeKind.NEW) {\r\n      let newArgs = (<NewExpression>value).arguments;\r\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\r\n    }\r\n    stmts.push(compileAbort(this, message, statement));\r\n\r\n    return flatten(this.module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileTryStatement(\r\n    statement: TryStatement\r\n  ): ExpressionRef {\r\n    // TODO: can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\r\n  compileVariableStatement(\r\n    statement: VariableStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n    var flow = this.currentFlow;\r\n    var initializers = new Array<ExpressionRef>();\r\n    var resolver = this.resolver;\r\n\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      let initAutoreleaseSkipped = false;\r\n\r\n      // Resolve type if annotated\r\n      if (declaration.type) {\r\n        type = resolver.resolveType( // reports\r\n          declaration.type,\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\r\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\r\n          );\r\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\r\n        }\r\n\r\n      // Otherwise infer type from initializer\r\n      } else if (declaration.initializer) {\r\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\r\n          Constraints.WILL_RETAIN\r\n        ); // reports\r\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n\r\n      // Error if there's neither a type nor an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n\r\n      // Handle constants, and try to inline if value is static\r\n      let isConst = declaration.is(CommonFlags.CONST);\r\n      let isStatic = false;\r\n      if (isConst) {\r\n        if (initExpr) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(name, -1, type, flow.parentFunction);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI32(initExpr),\r\n                    0\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI64Low(initExpr),\r\n                    getConstValueI64High(initExpr)\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return module.unreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = flow.scopedLocals;\r\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.unreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isStatic = true;\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n\r\n      // Otherwise compile as mutable\r\n      if (!isStatic) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          let existingLocal = flow.getScopedLocal(name);\r\n          if (existingLocal) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, declaration.name.text\r\n            );\r\n            local = existingLocal;\r\n          } else {\r\n            local = flow.addScopedLocal(name, type);\r\n          }\r\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\r\n        } else {\r\n          if (flow.lookupLocal(name)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, name\r\n            );\r\n            continue;\r\n          }\r\n          local = flow.parentFunction.addLocal(type, name, declaration);\r\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\r\n        }\r\n        let isManaged = type.isManaged;\r\n        if (initExpr) {\r\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n          if (isManaged) {\r\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\r\n            initializers.push(\r\n              module.local_set(local.index,\r\n                initAutoreleaseSkipped\r\n                  ? initExpr\r\n                  : this.makeRetain(initExpr)\r\n              )\r\n            );\r\n          } else {\r\n            initializers.push(\r\n              module.local_set(local.index, initExpr)\r\n            );\r\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\r\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\r\n            }\r\n          }\r\n        } else {\r\n          if (isManaged) {\r\n            // This is necessary because the first use (and assign) of the local could be taking place\r\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\r\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\r\n            // initialized but becomes released later on, whatever was stored before would be released.\r\n            // TODO: Detect this condition inside of a loop instead?\r\n            initializers.push(\r\n              module.local_set(local.index,\r\n                type.toNativeZero(module)\r\n              )\r\n            );\r\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\r\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return initializers.length == 0\r\n      ? 0\r\n      : flatten(module, initializers, NativeType.None);\r\n  }\r\n\r\n  compileVoidStatement(\r\n    statement: VoidStatement\r\n  ): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void,\r\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\r\n    );\r\n  }\r\n\r\n  compileWhileStatement(\r\n    statement: WhileStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // Compile condition\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(statement.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Simplify if the condition is constant\r\n    var alwaysTrue = false;\r\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n      assert(getExpressionType(condExpr) == NativeType.I32);\r\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\r\n      alwaysTrue = true;\r\n    }\r\n\r\n    // Compile body\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n    innerFlow.inheritNonnullIfTrue(condExpr);\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (statement.statement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(this.compileStatement(statement.statement));\r\n    }\r\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\r\n\r\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\r\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\r\n    //   (br_if !cond $break) ;; (3) skip if always true\r\n    //   (...)                ;; (4)\r\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\r\n    //  )\r\n    // )\r\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\r\n\r\n    if (fallsThrough) { // (5)\r\n      this.performAutoreleases(innerFlow, stmts);\r\n      stmts.push(module.br(continueLabel));\r\n    }\r\n    if (!alwaysTrue) { // (3)\r\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\r\n    }\r\n    var expr = flatten(module, stmts, NativeType.None);\r\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\r\n      expr = module.loop(continueLabel, expr);\r\n    }\r\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\r\n      expr = module.block(breakLabel, [ expr ]);\r\n    }\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return expr;\r\n  }\r\n\r\n  // === Expressions ==============================================================================\r\n\r\n  /** Compiles the value of an inlined constant element. */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.i32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.i64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.i64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        // monkey-patch for converting built-in floats to f32 implicitly\r\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.unreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    constraints: Constraints = Constraints.NONE\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n    var expr: ExpressionRef;\r\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileExpression((<ParenthesizedExpression>expression).expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.unreachable();\r\n      }\r\n    }\r\n    // ensure conversion and wrapping in case the respective function doesn't on its own\r\n    var currentType = this.currentType;\r\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\r\n    if (currentType != contextualType) {\r\n      if (constraints & Constraints.CONV_EXPLICIT) {\r\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\r\n        wrap = false;\r\n        this.currentType = contextualType;\r\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\r\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\r\n        wrap = false;\r\n        this.currentType = contextualType;\r\n      }\r\n    }\r\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\r\n    // must go through this function, with the respective per-kind functions not being used directly.\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    constraints: Constraints = Constraints.NONE\r\n  ): ExpressionRef {\r\n    return this.module.precomputeExpression(\r\n      this.compileExpression(expression, contextualType, constraints)\r\n    );\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    /** Original type. */\r\n    fromType: Type,\r\n    /** New type. */\r\n    toType: Type,\r\n    /** Whether the conversion is explicit.*/\r\n    explicit: bool,\r\n    /** Whether the result should be wrapped, if a small integer. */\r\n    wrap: bool,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\r\n\r\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (!explicit) {\r\n        if (fromType.nonNullableType == toType) {\r\n          this.error(\r\n            DiagnosticCode.Object_is_possibly_null,\r\n            reportNode.range\r\n          ); // recoverable\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n            reportNode.range, fromType.toString(), toType.toString()\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.unary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.unary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType == Type.bool) {\r\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\r\n            wrap = false;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType == Type.bool) {\r\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\r\n            wrap = false;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.drop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (toType == Type.bool) {\r\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\r\n          wrap = false;\r\n        } else if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.unary(\r\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrap = false;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrap = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrap\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(\r\n    expression: AssertionExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\r\n    switch (expression.assertionKind) {\r\n      case AssertionKind.PREFIX:\r\n      case AssertionKind.AS: {\r\n        let flow = this.currentFlow;\r\n        let toType = this.resolver.resolveType( // reports\r\n          assert(expression.toType),\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!toType) return this.module.unreachable();\r\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\r\n      }\r\n      case AssertionKind.NONNULL: {\r\n        assert(!expression.toType);\r\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\r\n        let type = this.currentType;\r\n        if (this.currentFlow.isNonnull(expr, type)) {\r\n          this.info(\r\n            DiagnosticCode.Expression_is_never_null,\r\n            expression.expression.range\r\n          );\r\n        } else if (!this.options.noAssert) {\r\n          let module = this.module;\r\n          let flow = this.currentFlow;\r\n          let tempIndex = flow.getAndFreeTempLocal(type).index;\r\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(tempIndex, LocalFlags.WRAPPED);\r\n          flow.setLocalFlag(tempIndex, LocalFlags.NONNULL);\r\n          expr = module.if(\r\n            module.local_tee(tempIndex, expr),\r\n            module.local_get(tempIndex, type.toNativeType()),\r\n            module.unreachable()\r\n          );\r\n        }\r\n        this.currentType = this.currentType.nonNullableType;\r\n        return expr;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.unary(UnaryOp.AllTrueVecI8x16,\r\n              module.binary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.unary(UnaryOp.AnyTrueVecI8x16,\r\n              module.binary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            this.currentType, Type.f64,\r\n            false, false,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.unreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, true, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, true, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, true, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, true, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.unreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.unreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\r\n        let flow = this.currentFlow;\r\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\r\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\r\n        leftType = this.currentType;\r\n\r\n        let rightFlow = flow.fork();\r\n        this.currentFlow = rightFlow;\r\n        rightFlow.inheritNonnullIfTrue(leftExpr);\r\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\r\n        rightType = leftType;\r\n\r\n        // simplify if only interested in true or false\r\n        if (contextualType == Type.bool || contextualType == Type.void) {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n          this.currentType = Type.bool;\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            this.makeIsTrueish(rightExpr, rightType),\r\n            module.i32(0)\r\n          );\r\n\r\n        // references must properly retain and release, with the same outcome independent of the branch taken\r\n        } else if (leftType.isManaged) {\r\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\r\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\r\n          let temp = flow.getTempLocal(leftType);\r\n          leftExpr = module.local_tee(temp.index, leftExpr);\r\n\r\n          // instead of retaining left and releasing it again in right when right\r\n          // is taken, we can also just retain left if right is not taken\r\n          let retainLeftInElse = false;\r\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\r\n            if (!leftAutoreleaseSkipped) {\r\n              retainLeftInElse = true;\r\n            } else {\r\n              rightExpr = this.makeRetain(rightExpr);\r\n              rightAutoreleaseSkipped = true;\r\n            }\r\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\r\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\r\n          }\r\n\r\n          let rightStmts = new Array<ExpressionRef>();\r\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\r\n            rightStmts.unshift(\r\n              this.makeRelease(\r\n                module.local_get(temp.index, leftType.toNativeType())\r\n              )\r\n            );\r\n          }\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            rightExpr,\r\n            retainLeftInElse\r\n              ? this.makeRetain(\r\n                  module.local_get(temp.index, leftType.toNativeType())\r\n                )\r\n              : module.local_get(temp.index, leftType.toNativeType())\r\n          );\r\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n          if (temp) flow.freeTempLocal(temp);\r\n\r\n        // basic values can use more aggressive optimizations\r\n        } else {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          // simplify if cloning left without side effects is possible\r\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n            expr = module.if(\r\n              this.makeIsTrueish(leftExpr, this.currentType),\r\n              rightExpr,\r\n              expr\r\n            );\r\n\r\n          // if not possible, tee left to a temp\r\n          } else {\r\n            let tempLocal = flow.getTempLocal(leftType);\r\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\r\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\r\n            expr = module.if(\r\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\r\n              rightExpr,\r\n              module.local_get(tempLocal.index, leftType.toNativeType())\r\n            );\r\n          }\r\n        }\r\n        this.currentType = leftType;\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\r\n        let flow = this.currentFlow;\r\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\r\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\r\n        leftType = this.currentType;\r\n\r\n        let rightFlow = flow.fork();\r\n        this.currentFlow = rightFlow;\r\n        rightFlow.inheritNonnullIfFalse(leftExpr);\r\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\r\n        rightType = leftType;\r\n\r\n        // simplify if only interested in true or false\r\n        if (contextualType == Type.bool || contextualType == Type.void) {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n          this.currentType = Type.bool;\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            module.i32(1),\r\n            this.makeIsTrueish(rightExpr, rightType)\r\n          );\r\n\r\n        // references must properly retain and release, with the same outcome independent of the branch taken\r\n        } else if (leftType.isManaged) {\r\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\r\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\r\n          let temp = flow.getTempLocal(leftType);\r\n          leftExpr = module.local_tee(temp.index, leftExpr);\r\n\r\n          // instead of retaining left and releasing it again in right when right\r\n          // is taken, we can also just retain left if right is not taken\r\n          let retainLeftInThen = false;\r\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\r\n            if (!leftAutoreleaseSkipped) {\r\n              retainLeftInThen = true;\r\n            } else {\r\n              rightExpr = this.makeRetain(rightExpr);\r\n              rightAutoreleaseSkipped = true;\r\n            }\r\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\r\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\r\n          }\r\n\r\n          let rightStmts = new Array<ExpressionRef>();\r\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\r\n            // TODO: usually, false'ish means left is null, but this might not hold\r\n            // once implicit conversion with strings is performed and left is \"\", so:\r\n            rightStmts.unshift(\r\n              this.makeRelease(\r\n                module.local_get(temp.index, leftType.toNativeType())\r\n              )\r\n            );\r\n          }\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            retainLeftInThen\r\n              ? this.makeRetain(\r\n                  module.local_get(temp.index, leftType.toNativeType())\r\n                )\r\n              : module.local_get(temp.index, leftType.toNativeType()),\r\n            rightExpr\r\n          );\r\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n          if (temp) flow.freeTempLocal(temp);\r\n\r\n        // basic values can use more aggressive optimizations\r\n        } else {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          // simplify if cloning left without side effects is possible\r\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n            expr = module.if(\r\n              this.makeIsTrueish(leftExpr, leftType),\r\n              expr,\r\n              rightExpr\r\n            );\r\n\r\n          // if not possible, tee left to a temp. local\r\n          } else {\r\n            let tempLocal = flow.getAndFreeTempLocal(leftType);\r\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\r\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\r\n            expr = module.if(\r\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\r\n              module.local_get(tempLocal.index, leftType.toNativeType()),\r\n              rightExpr\r\n            );\r\n          }\r\n        }\r\n        this.currentType = leftType;\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.unreachable();\r\n      }\r\n    }\r\n    if (!compound) return expr;\r\n    var resolver = this.resolver;\r\n    var target = resolver.resolveExpression(left, this.currentFlow);\r\n    if (!target) return module.unreachable();\r\n    return this.makeAssignment(\r\n      target,\r\n      expr, // TODO: delay release above if possible?\r\n      left,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\r\n    // is a bad idea currently. so this assumes that the type matches.\r\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var rightType: Type;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      rightType = operatorInstance.signature.parameterTypes[0];\r\n    } else {\r\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\r\n      // local states, like having retained locals that actually do not even exist, possibly\r\n      // releasing something random in that local before and evil things like that. Hence this\r\n      // assumes that LHS type matches, which in turn means that static overloads must be\r\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\r\n      // things like multiple static overloads for different combinations of LHS/RHS types.\r\n      // We might want that at some point of course, but requires to complete the resolver so\r\n      // it can actually resolve every kind of expression without ever having to recompile.\r\n      rightType = operatorInstance.signature.parameterTypes[1];\r\n    }\r\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\r\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var resolver = program.resolver;\r\n    var flow = this.currentFlow;\r\n    var target = resolver.resolveExpression(expression, flow); // reports\r\n    if (!target) return this.module.unreachable();\r\n    var thisExpression = resolver.currentThisExpression;\r\n    var elementExpression = resolver.currentElementExpression;\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        // not yet compiled if a static field compiled as a global\r\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return this.module.unreachable();\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (elementExpression) { // indexed access\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          // if (isUnchecked) {\r\n          //   let arrayType = this.program.determineBuiltinArrayType(<Class>target);\r\n          //   if (arrayType) {\r\n          //     return compileBuiltinArraySet(\r\n          //       this,\r\n          //       <Class>target,\r\n          //       assert(this.resolver.currentThisExpression),\r\n          //       elementExpression,\r\n          //       valueExpression,\r\n          //       contextualType\r\n          //     );\r\n          //   }\r\n          // }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.unreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\r\n          if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.unreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    return this.makeAssignment(\r\n      target,\r\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\r\n      expression,\r\n      thisExpression,\r\n      elementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  /** Makes an assignment expression or block, assigning a value to a target. */\r\n  makeAssignment(\r\n    /** Target element, e.g. a Local. */\r\n    target: Element,\r\n    /** Value expression that has been compiled in a previous step already. */\r\n    valueExpr: ExpressionRef,\r\n    /** Expression reference. Has already been compiled to `valueExpr`. */\r\n    valueExpression: Expression,\r\n    /** `this` expression reference if a field or property set. */\r\n    thisExpression: Expression | null,\r\n    /** Index expression reference if an indexed set. */\r\n    indexExpression: Expression | null,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\r\n    // everything else must insert the skipped autorelease now. See (*)\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          this.currentType = tee ? (<Local>target).type : Type.void;\r\n          return module.unreachable();\r\n        }\r\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\r\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range,\r\n            target.internalName\r\n          );\r\n          this.currentType = tee ? (<Global>target).type : Type.void;\r\n          return module.unreachable();\r\n        }\r\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let initializerNode = (<Field>target).initializerNode;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            initializerNode\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, (<Field>target).internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        return this.makeFieldAssignment(<Field>target,\r\n          valueExpr,\r\n          // FIXME: explicit type (currently fails due to missing null checking)\r\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\r\n          tee\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return module.unreachable();\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\r\n        // otherwise call the setter first, then the getter\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!getterInstance) return module.unreachable();\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        return module.block(null, [\r\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\r\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) {\r\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\r\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\r\n        }\r\n        // otherwise call the setter first, then the getter\r\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\r\n        let tempLocal = flow.getAndFreeTempLocal(returnType);\r\n        let tempLocalIndex = tempLocal.index;\r\n        return module.block(null, [\r\n          this.makeCallDirect(setterInstance, [ // set and remember the target\r\n            module.local_tee(tempLocalIndex, thisExpr),\r\n            valueExpr\r\n          ], valueExpression),\r\n          this.makeCallDirect(getterInstance, [ // get from remembered target\r\n            module.local_get(tempLocalIndex, nativeReturnType)\r\n          ], valueExpression)\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        if (indexExpression) {\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              valueExpression.range, target.internalName\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              valueExpression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.unreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\r\n          let elementExpr = this.compileExpression(indexExpression, Type.i32, Constraints.CONV_IMPLICIT);\r\n          if (tee) {\r\n            let tempLocalTarget = flow.getTempLocal(targetType);\r\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType);\r\n            let returnType = indexedGet.signature.returnType;\r\n            flow.freeTempLocal(tempLocalTarget);\r\n            return module.block(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.local_tee(tempLocalTarget.index, thisExpr),\r\n                module.local_tee(tempLocalElement.index, elementExpr),\r\n                valueExpr\r\n              ], valueExpression),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.local_get(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.local_get(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ], valueExpression)\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueExpr\r\n            ], valueExpression);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      valueExpression.range\r\n    );\r\n    return module.unreachable();\r\n  }\r\n\r\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\r\n  private makeLocalAssignment(\r\n    /** The local to assign to. */\r\n    local: Local,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var type = local.type;\r\n    assert(type != Type.void);\r\n    var flow = this.currentFlow;\r\n    var localIndex = local.index;\r\n\r\n    if (type.is(TypeFlags.NULLABLE)) {\r\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\r\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\r\n    }\r\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\r\n\r\n    if (type.isManaged) {\r\n      let module = this.module;\r\n      let nativeType = type.toNativeType();\r\n\r\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n        if (this.skippedAutoreleases.has(valueExpr)) {\r\n          valueExpr = this.makeSkippedRelease(\r\n            module.local_get(localIndex, nativeType), // oldRef\r\n            valueExpr // newRef\r\n          );\r\n          if (tee) { // TEE(local = __skippedRelease(local, value))\r\n            this.currentType = type;\r\n            return module.local_tee(localIndex, valueExpr);\r\n          } else { // local = __skippedRelease(local, value)\r\n            this.currentType = Type.void;\r\n            return module.local_set(localIndex, valueExpr);\r\n          }\r\n        } else {\r\n          valueExpr = this.makeRetainRelease(\r\n            module.local_get(localIndex, nativeType), // oldRef\r\n            valueExpr // newRef\r\n          );\r\n          if (tee) { // TEE(local = __retainRelease(local, value))\r\n            this.currentType = type;\r\n            return module.local_tee(localIndex, valueExpr);\r\n          } else { // local = __retainRelease(local, value)\r\n            this.currentType = Type.void;\r\n            return module.local_set(localIndex, valueExpr);\r\n          }\r\n        }\r\n      } else {\r\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\r\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\r\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\r\n        if (tee) { // TEE(local = __retain(value, local))\r\n          this.currentType = type;\r\n          return module.local_tee(localIndex, valueExpr);\r\n        } else { // local = __retain(value, local)\r\n          this.currentType = Type.void;\r\n          return module.local_set(localIndex, valueExpr);\r\n        }\r\n      }\r\n    } else {\r\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\r\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\r\n      }\r\n      if (tee) { // TEE(local = value)\r\n        this.currentType = type;\r\n        return this.module.local_tee(localIndex, valueExpr);\r\n      } else { // local = value\r\n        this.currentType = Type.void;\r\n        return this.module.local_set(localIndex, valueExpr);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\r\n  private makeGlobalAssignment(\r\n    /** The global to assign to. */\r\n    global: Global,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var type = global.type;\r\n    assert(type != Type.void);\r\n    var nativeType = type.toNativeType();\r\n\r\n    if (type.isManaged) {\r\n      if (this.skippedAutoreleases.has(valueExpr)) {\r\n        if (tee) { // (global = __skippedRelease(global, value)), global\r\n          this.currentType = type;\r\n          return module.block(null, [\r\n            module.global_set(global.internalName,\r\n              this.makeSkippedRelease(\r\n                module.global_get(global.internalName, nativeType), // oldRef\r\n                valueExpr // newRef\r\n              )\r\n            ),\r\n            module.global_get(global.internalName, nativeType)\r\n          ], nativeType);\r\n        } else { // global = __skippedRelease(global, value)\r\n          this.currentType = Type.void;\r\n          return module.global_set(global.internalName,\r\n            this.makeSkippedRelease(\r\n              module.global_get(global.internalName, nativeType), // oldRef\r\n              valueExpr // newRef\r\n            )\r\n          );\r\n        }\r\n      } else {\r\n        if (tee) { // (global = __retainRelease(global, value)), global\r\n          this.currentType = type;\r\n          return module.block(null, [\r\n            module.global_set(global.internalName,\r\n              this.makeRetainRelease(\r\n                module.global_get(global.internalName, nativeType), // oldRef\r\n                valueExpr // newRef\r\n              )\r\n            ),\r\n            module.global_get(global.internalName, nativeType)\r\n          ], nativeType);\r\n        } else { // global = __retainRelease(global, value)\r\n          this.currentType = Type.void;\r\n          return module.global_set(global.internalName,\r\n            this.makeRetainRelease(\r\n              module.global_get(global.internalName, nativeType), // oldRef\r\n              valueExpr // newRef\r\n            )\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\r\n      if (tee) { // (global = value), global\r\n        this.currentType = type;\r\n        return module.block(null, [\r\n          module.global_set(global.internalName, valueExpr),\r\n          module.global_get(global.internalName, nativeType)\r\n        ], nativeType);\r\n      } else { // global = value\r\n        this.currentType = Type.void;\r\n        return module.global_set(global.internalName,\r\n          valueExpr\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\r\n  makeFieldAssignment(\r\n    /** The field to assign to. */\r\n    field: Field,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** The value of `this`. */\r\n    thisExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var fieldType = field.type;\r\n    var nativeFieldType = fieldType.toNativeType();\r\n    assert(field.parent.kind == ElementKind.CLASS);\r\n    var thisType = (<Class>field.parent).type;\r\n    var nativeThisType = thisType.toNativeType();\r\n\r\n    if (fieldType.isManaged && thisType.isManaged) {\r\n      let tempThis = flow.getTempLocal(thisType);\r\n      if (this.skippedAutoreleases.has(valueExpr)) {\r\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\r\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = fieldType;\r\n          return module.block(null, [\r\n            module.store(fieldType.byteSize,\r\n              module.local_tee(tempThis.index, thisExpr),\r\n              this.makeSkippedRelease(\r\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                  module.local_get(tempThis.index, nativeThisType),\r\n                  nativeFieldType, field.memoryOffset\r\n                ),\r\n                module.local_tee(tempValue.index, valueExpr), // newRef\r\n              ),\r\n              nativeFieldType, field.memoryOffset\r\n            ),\r\n            module.local_get(tempValue.index, nativeFieldType)\r\n          ], nativeFieldType);\r\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = Type.void;\r\n          return module.store(fieldType.byteSize,\r\n            module.local_tee(tempThis.index, thisExpr),\r\n            this.makeSkippedRelease(\r\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                module.local_get(tempThis.index, nativeThisType),\r\n                nativeFieldType, field.memoryOffset\r\n              ),\r\n              valueExpr, // newRef\r\n            ),\r\n            nativeFieldType, field.memoryOffset\r\n          );\r\n        }\r\n      } else {\r\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\r\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = fieldType;\r\n          return module.block(null, [\r\n            module.store(fieldType.byteSize,\r\n              module.local_tee(tempThis.index, thisExpr),\r\n              this.makeRetainRelease(\r\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                  module.local_get(tempThis.index, nativeThisType),\r\n                  nativeFieldType, field.memoryOffset\r\n                ),\r\n                module.local_tee(tempValue.index, valueExpr) // newRef\r\n              ),\r\n              nativeFieldType, field.memoryOffset\r\n            ),\r\n            module.local_get(tempValue.index, nativeFieldType)\r\n          ], nativeFieldType);\r\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = Type.void;\r\n          return module.store(fieldType.byteSize,\r\n            module.local_tee(tempThis.index, thisExpr),\r\n            this.makeRetainRelease(\r\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                module.local_get(tempThis.index, nativeThisType),\r\n                nativeFieldType, field.memoryOffset\r\n              ),\r\n              valueExpr // newRef\r\n            ),\r\n            nativeFieldType, field.memoryOffset\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      if (tee) { // (this.field = (t1 = value)), t1\r\n        let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n        this.currentType = fieldType;\r\n        return module.block(null, [\r\n          module.store(fieldType.byteSize,\r\n            thisExpr,\r\n            module.local_tee(tempValue.index, valueExpr),\r\n            nativeFieldType, field.memoryOffset\r\n          ),\r\n          module.local_get(tempValue.index, nativeFieldType)\r\n        ], nativeFieldType);\r\n      } else { // this.field = value\r\n        this.currentType = Type.void;\r\n        return module.store(fieldType.byteSize,\r\n          thisExpr,\r\n          valueExpr,\r\n          nativeFieldType, field.memoryOffset\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Compiles a call expression according to the specified context. */\r\n  compileCallExpression(\r\n    /** Call expression to compile. */\r\n    expression: CallExpression,\r\n    /** Contextual type indicating the return type the caller expects, if any. */\r\n    contextualType: Type,\r\n    /** Constraints indicating contextual conditions. */\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // handle call to super\r\n    if (expression.expression.kind == NodeKind.SUPER) {\r\n      let flow = this.currentFlow;\r\n      let actualFunction = flow.actualFunction;\r\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n        this.error(\r\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n\r\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let baseClassInstance = assert((<Class>classInstance).base);\r\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n\r\n      // {\r\n      //   this = super(this || <ALLOC>, ...args)\r\n      //   this.a = X\r\n      //   this.b = Y\r\n      // }\r\n      let theCall = this.compileCallDirect(\r\n        this.ensureConstructor(baseClassInstance, expression),\r\n        expression.arguments,\r\n        expression,\r\n        module.if(\r\n          module.local_get(thisLocal.index, nativeSizeType),\r\n          module.local_get(thisLocal.index, nativeSizeType),\r\n          this.makeRetain(\r\n            this.makeAllocation(<Class>classInstance)\r\n          )\r\n        ),\r\n        Constraints.WILL_RETAIN\r\n      );\r\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\r\n      let stmts: ExpressionRef[] = [\r\n        module.local_set(thisLocal.index, theCall)\r\n      ];\r\n      this.makeFieldInitialization(<Class>classInstance, stmts);\r\n\r\n      // check that super had been called before accessing `this`\r\n      if (flow.isAny(\r\n        FlowFlags.ALLOCATES |\r\n        FlowFlags.CONDITIONALLY_ALLOCATES\r\n      )) {\r\n        this.error(\r\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\r\n      this.currentType = Type.void;\r\n      return module.block(null, stmts);\r\n    }\r\n\r\n    // otherwise resolve normally\r\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\r\n    if (!target) return module.unreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          instance = this.resolver.resolveFunctionInclTypeArguments(\r\n            prototype,\r\n            typeArguments,\r\n            flow.actualFunction.parent, // relative to caller\r\n            makeMap<string,Type>(flow.contextualTypeArguments),\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n          let numTypeParameters = typeParameterNodes.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterNodes = prototype.functionTypeNode.parameters;\r\n          let numParameters = parameterNodes.length;\r\n          let argumentNodes = expression.arguments;\r\n          let numArguments = argumentNodes.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameters; ++i) {\r\n            let typeNode = parameterNodes[i].type;\r\n            let templateName = typeNode.kind == NodeKind.NAMEDTYPE && !(<NamedTypeNode>typeNode).name.next\r\n              ? (<NamedTypeNode>typeNode).name.identifier.text\r\n              : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentNodes[i]\r\n              : parameterNodes[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameters.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.unreachable();\r\n            }\r\n            if (templateName !== null && inferredTypes.has(templateName)) {\r\n              let inferredType = inferredTypes.get(templateName);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpression(argumentExpression, inferredType);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.unreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpression(argumentExpression, Type.auto);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(templateName, inferredType);\r\n            } else {\r\n              let concreteType = this.resolver.resolveType(\r\n                parameterNodes[i].type,\r\n                flow.actualFunction,\r\n                flow.contextualTypeArguments\r\n              );\r\n              if (!concreteType) return module.unreachable();\r\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType, Constraints.CONV_IMPLICIT);\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            resolvedTypeArguments,\r\n            makeMap<string,Type>(flow.contextualTypeArguments)\r\n          );\r\n          if (!instance) return this.module.unreachable();\r\n          if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n          return this.makeCallDirect(instance, argumentExprs, expression, contextualType == Type.void);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = this.resolver.resolveFunction(prototype, null);\r\n        }\r\n        if (!instance) return this.module.unreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          constraints\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          if ((<Local>target).is(CommonFlags.INLINED)) {\r\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\r\n          } else {\r\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\r\n          }\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\r\n          indexArg = module.load(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\r\n        break;\r\n      }\r\n\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\r\n        if (!getterInstance) return module.unreachable();\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\r\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\r\n        );\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        break;\r\n      }\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression,\r\n      0,\r\n      contextualType == Type.void\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n\r\n    var typeArguments: Type[] | null = null;\r\n\r\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\r\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var typeArgumentNodes = expression.typeArguments;\r\n    if (expression.typeArguments) {\r\n      if (!prototype.is(CommonFlags.GENERIC)) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          expression.range, prototype.internalName\r\n        );\r\n      }\r\n      typeArguments = this.resolver.resolveTypeArguments(\r\n        assert(typeParameterNodes),\r\n        typeArgumentNodes,\r\n        this.currentFlow.actualFunction.parent,\r\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n\r\n    // now compile the builtin, which usually returns a block of code that replaces the call.\r\n    var expr = compileBuiltinCall(\r\n      this,\r\n      prototype,\r\n      typeArguments,\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.unreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Checks that an unsafe expression is allowed. */\r\n  private checkUnsafe(reportNode: Node): void {\r\n    // Library files may always use unsafe features\r\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\r\n      this.error(\r\n        DiagnosticCode.Expression_is_unsafe,\r\n        reportNode.range\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    constraints: Constraints = Constraints.NONE\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      this.currentType = signature.returnType;\r\n      return this.module.unreachable();\r\n    }\r\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\r\n\r\n    // Inline if explicitly requested\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let parameterTypes = signature.parameterTypes;\r\n        assert(numArguments <= parameterTypes.length);\r\n        // compile argument expressions\r\n        let args = new Array<ExpressionRef>(numArguments);\r\n        for (let i = 0; i < numArguments; ++i) {\r\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\r\n          );\r\n        }\r\n        // make the inlined call (is aware of autoreleases)\r\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\r\n        if (this.currentType.isManaged) {\r\n          if (!(constraints & Constraints.WILL_RETAIN)) {\r\n            expr = this.makeAutorelease(expr, this.currentFlow);\r\n          } else {\r\n            this.skippedAutoreleases.add(expr);\r\n          }\r\n        }\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    if (signature.returnType.isManaged) {\r\n      if (constraints & Constraints.WILL_DROP) {\r\n        // Skip autorelease and simply release\r\n        return this.makeCallDirect(instance, operands, reportNode, true);\r\n      } else if (constraints & Constraints.WILL_RETAIN) {\r\n        // Skip autorelease and remember\r\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\r\n        this.skippedAutoreleases.add(expr);\r\n        return expr;\r\n      } else {\r\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\r\n      }\r\n    }\r\n    return this.makeCallDirect(instance, operands, reportNode,\r\n      (constraints & Constraints.WILL_DROP) != 0\r\n    );\r\n  }\r\n\r\n  makeCallInline(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null,\r\n    thisArg: ExpressionRef = 0,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var numArguments = operands ? operands.length : 0;\r\n    var signature = instance.signature;\r\n    var parameterTypes = signature.parameterTypes;\r\n    var numParameters = parameterTypes.length;\r\n\r\n    // Create a new inline flow and use it to compile the function as a block\r\n    var previousFlow = this.currentFlow;\r\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\r\n    var body = [];\r\n    var usedLocals = new Set<i32>();\r\n\r\n    // Prepare compiled arguments right to left, keeping track of used locals.\r\n    for (let i = numArguments - 1; i >= 0; --i) {\r\n      // This is necessary because a later expression must not set an earlier argument local, which\r\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\r\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\r\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\r\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\r\n      let paramExpr = operands![i];\r\n      let paramType = parameterTypes[i];\r\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\r\n      findUsedLocals(paramExpr, usedLocals);\r\n      // inlining is aware of wrap/nonnull states:\r\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\r\n      // inlining is aware of skipped autoreleases:\r\n      if (paramType.isManaged) {\r\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\r\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\r\n      }\r\n      body.unshift(\r\n        module.local_set(argumentLocal.index, paramExpr)\r\n      );\r\n    }\r\n    if (thisArg) {\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let thisType = assert(instance.signature.thisType);\r\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\r\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\r\n      body.unshift(\r\n        module.local_set(thisLocal.index, thisArg)\r\n      );\r\n      let baseInstance = (<Class>classInstance).base;\r\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\r\n    } else {\r\n      assert(!instance.signature.thisType);\r\n    }\r\n\r\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\r\n    // side-effects within earlier expressions because these already happened on set.\r\n    this.currentFlow = flow;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initType = parameterTypes[i];\r\n      let initExpr = this.compileExpression(\r\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\r\n        initType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\r\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\r\n      if (initType.isManaged) {\r\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\r\n        body.push(\r\n          module.local_set(argumentLocal.index,\r\n            this.makeRetain(initExpr)\r\n          )\r\n        );\r\n      } else {\r\n        body.push(\r\n          module.local_set(argumentLocal.index, initExpr)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    this.compileFunctionBody(instance, body);\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    if (!flow.is(FlowFlags.TERMINATES)) {\r\n      this.performAutoreleases(flow, body);\r\n      this.finishAutoreleases(flow, body);\r\n    }\r\n    flow.freeScopedLocals();\r\n    var returnType = flow.returnType;\r\n    this.currentFlow = previousFlow;\r\n\r\n    // Create an outer block that we can break to when returning a value out of order\r\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\r\n    var returnType = originalSignature.returnType;\r\n    var thisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\r\n    trampoline = new Function(\r\n      original.name + \"|trampoline\",\r\n      original.prototype,\r\n      trampolineSignature,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFlow = this.currentFlow;\r\n    var flow = trampoline.flow;\r\n    this.currentFlow = flow;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.block(names[0], [\r\n      module.block(\"outOfRange\", [\r\n        module.switch(names, \"outOfRange\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.binary(\r\n                BinaryOp.SubI32,\r\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\r\n                module.i32(minArguments)\r\n              )\r\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\r\n        )\r\n      ]),\r\n      module.unreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.local_set(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.unreachable();\r\n      }\r\n      body = module.block(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\r\n    }\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var stmts: ExpressionRef[] = [ body ];\r\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\r\n    if (returnType != Type.void) {\r\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\r\n    } else {\r\n      stmts.push(theCall);\r\n      this.performAutoreleases(flow, stmts);\r\n    }\r\n    flow.freeScopedLocals();\r\n    this.currentFlow = previousFlow;\r\n\r\n    var funcRef = module.addFunction(\r\n      trampoline.internalName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        returnType,\r\n        thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.block(null, stmts, returnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        BuiltinSymbols.argc,\r\n        NativeType.I32,\r\n        true,\r\n        module.i32(0)\r\n      );\r\n    }\r\n    return BuiltinSymbols.argc;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.global_set(this.ensureArgcVar(),\r\n          module.local_get(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\r\n    }\r\n    return BuiltinSymbols.setargc;\r\n  }\r\n\r\n  // <reference-counting>\r\n\r\n  /** Makes retain call, retaining the expression's value. */\r\n  makeRetain(expr: ExpressionRef): ExpressionRef {\r\n    var retainInstance = this.program.retainInstance;\r\n    this.compileFunction(retainInstance);\r\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\r\n  }\r\n\r\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\r\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\r\n    // if ((t1=newExpr) != (t2=oldExpr)) {\r\n    //   __retain(t1);\r\n    //   __release(t2);\r\n    // }, t1\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\r\n    var temp2 = flow.getAndFreeTempLocal(usizeType);\r\n    flow.freeTempLocal(temp1);\r\n    return module.block(null, [\r\n      module.if(\r\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\r\n          module.local_tee(temp1.index, newExpr),\r\n          module.local_tee(temp2.index, oldExpr)\r\n        ),\r\n        module.block(null, [\r\n          module.drop(\r\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\r\n          ),\r\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\r\n        ])\r\n      ),\r\n      module.local_get(temp1.index, nativeSizeType)\r\n    ], nativeSizeType);\r\n  }\r\n\r\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\r\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\r\n    // TODO: this helper can be eliminated altogether if the current logic holds\r\n    // (t1=newExpr), __release(oldExpr), t1\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var temp = flow.getAndFreeTempLocal(usizeType, findUsedLocals(oldExpr));\r\n    return module.block(null, [\r\n      module.local_set(temp.index, newExpr),\r\n      this.makeRelease(oldExpr),\r\n      module.local_get(temp.index, nativeSizeType)\r\n    ], nativeSizeType);\r\n  }\r\n\r\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\r\n  makeRelease(expr: ExpressionRef): ExpressionRef {\r\n    var releaseInstance = this.program.releaseInstance;\r\n    this.compileFunction(releaseInstance);\r\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\r\n  }\r\n\r\n  /** Makes an automatic release call at the end of the current flow. */\r\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\r\n    // FIXME: loses track of nonNull state?\r\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\r\n  }\r\n\r\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\r\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\r\n    // NOTE: Can't remove the local.tee completely because it's already compiled\r\n    // and a child of something else. Preventing the final release however should\r\n    // make it optimize away.\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\r\n        if (isLocalTee(expr)) {\r\n          let index = getLocalSetIndex(expr);\r\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\r\n            // Assumes that the expression actually belongs to the flow and that\r\n            // top-level autoreleases are never undone. While that's true, it's\r\n            // not necessary to check presence in scopedLocals.\r\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\r\n            return index;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\r\n        if (getBlockName(expr) === null) { // must not be a break target\r\n          let count = getBlockChildCount(expr);\r\n          if (count) {\r\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Attemps to move a final autorelease from one flow to a parent.\r\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\r\n   * retain would have been written already.\r\n   */\r\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\r\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\r\n    // eliminate the now unnecessary temporary local.tee because it is already part of\r\n    // another expression in the tree. But optimizing should collapse locals again.\r\n    var index = this.undoAutorelease(expr, fromInnerFlow);\r\n    return ~index\r\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\r\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\r\n  }\r\n\r\n  /** Performs any queued autoreleases in the specified flow. */\r\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      let module = this.module;\r\n      for (let local of scopedLocals.values()) {\r\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          let localIndex = local.index;\r\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\r\n            stmts.push(\r\n              this.makeRelease(\r\n                module.local_get(localIndex, local.type.toNativeType())\r\n              )\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\r\n  performAutoreleasesWithValue(\r\n    flow: Flow,\r\n    valueExpr: ExpressionRef,\r\n    valueType: Type,\r\n    stmts: ExpressionRef[] | null = null,\r\n    clearFlags: bool = true\r\n  ): ExpressionRef {\r\n    if (!stmts) stmts = new Array<ExpressionRef>();\r\n    stmts.push(\r\n      this.module.nop()\r\n    );\r\n    var lengthBefore = stmts.length;\r\n    this.performAutoreleases(flow, stmts, clearFlags);\r\n    if (stmts.length > lengthBefore) {\r\n      let nativeType = valueType.toNativeType();\r\n      let temp = flow.getAndFreeTempLocal(valueType);\r\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n      let module = this.module;\r\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\r\n      stmts.push(\r\n        module.local_get(temp.index, nativeType) // append get\r\n      );\r\n      return module.block(null, stmts, nativeType);\r\n    } else if (stmts.length > 1) {\r\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\r\n      return this.module.block(null, stmts, valueType.toNativeType());\r\n    }\r\n    return valueExpr;\r\n  }\r\n\r\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\r\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\r\n    var module = this.module;\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      // traverse to the top-most flow containing the inlined function's\r\n      // locals as scoped locals and release these instead.\r\n      let parent: Flow | null;\r\n      while (parent = flow.parent) flow = parent;\r\n      this.performAutoreleases(flow, stmts, false);\r\n    } else {\r\n      for (let local of flow.parentFunction.localsByIndex) {\r\n        let localIndex = local.index;\r\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\r\n          stmts.push(\r\n            this.makeRelease(\r\n              module.local_get(localIndex, local.type.toNativeType())\r\n            )\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // </reference-counting>\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null,\r\n    reportNode: Node,\r\n    immediatelyDropped: bool = false,\r\n    /** Skip the usual autorelease and manage this at the callsite instead. */\r\n    skipAutorelease: bool = false\r\n  ): ExpressionRef {\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let expr: ExpressionRef;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          let theOperands = assert(operands);\r\n          assert(theOperands.length);\r\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\r\n        } else {\r\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\r\n        }\r\n        if (this.currentType.isManaged) {\r\n          if (!skipAutorelease) {\r\n            expr = this.makeAutorelease(expr, this.currentFlow);\r\n          } else {\r\n            this.skippedAutoreleases.add(expr);\r\n          }\r\n        }\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.unreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\r\n      assert(parameterNodes.length == parameterTypes.length);\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (initializer) {\r\n          if (nodeIsConstantValue(initializer.kind)) {\r\n            operands.push(this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              Constraints.CONV_IMPLICIT\r\n            ));\r\n            continue;\r\n          }\r\n          let resolved = this.resolver.resolveExpression(initializer, instance.flow, parameterTypes[i]);\r\n          if (resolved) {\r\n            if (resolved.kind == ElementKind.GLOBAL) {\r\n              let global = <Global>resolved;\r\n              if (this.compileGlobal(global)) {\r\n                if (global.is(CommonFlags.INLINED)) {\r\n                  operands.push(\r\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\r\n                  );\r\n                } else {\r\n                  operands.push(\r\n                    this.convertExpression(\r\n                      module.global_get(global.internalName, global.type.toNativeType()),\r\n                      global.type, parameterTypes[i], false, false, initializer\r\n                    )\r\n                  );\r\n                }\r\n                continue;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n        allOptionalsAreConstant = false;\r\n      }\r\n      if (!allOptionalsAreConstant) {\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.unreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\r\n          this.currentType = returnType;\r\n          if (returnType.isManaged) {\r\n            if (immediatelyDropped) {\r\n              expr = this.makeRelease(expr);\r\n              this.currentType = Type.void;\r\n            } else if (!skipAutorelease) {\r\n              expr = this.makeAutorelease(expr);\r\n            } else {\r\n              this.skippedAutoreleases.add(expr);\r\n            }\r\n          }\r\n          return module.block(null, [\r\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\r\n            expr\r\n          ], this.currentType.toNativeType());\r\n        }\r\n      }\r\n    }\r\n\r\n    // If the return value is of a reference type it has not yet been released but is in flight\r\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\r\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\r\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      } else if (!skipAutorelease) {\r\n        expr = this.makeAutorelease(expr);\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.unreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      } else {\r\n        expr = this.makeAutorelease(expr);\r\n      }\r\n    }\r\n    return module.block(null, [\r\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\r\n        module.i32(numArguments)\r\n      ),\r\n      expr\r\n    ], this.currentType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(\r\n    expression: CommaExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\r\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\r\n    return this.module.block(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(\r\n    expression: ElementAccessExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var target = this.resolver.resolveElementAccessExpression(\r\n      expression,\r\n      this.currentFlow,\r\n      contextualType\r\n    ); // reports\r\n    if (!target) return this.module.unreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type,\r\n          Constraints.CONV_IMPLICIT\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg, constraints);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  compileFunctionExpression(\r\n    expression: FunctionExpression,\r\n    contextualSignature: Signature | null,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\r\n    assert(!declaration.typeParameters); // function expression cannot be generic\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n    var prototype = new FunctionPrototype(\r\n      declaration.name.text.length\r\n        ? declaration.name.text\r\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\r\n      actualFunction,\r\n      declaration,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var instance: Function | null;\r\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\r\n\r\n    // compile according to context. this differs from a normal function in that omitted parameter\r\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\r\n    if (contextualSignature) {\r\n      let signatureNode = prototype.functionTypeNode;\r\n      let parameterNodes = signatureNode.parameters;\r\n      let numPresentParameters = parameterNodes.length;\r\n\r\n      // must not require more than the maximum number of parameters\r\n      let parameterTypes = contextualSignature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      if (numPresentParameters > numParameters) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          expression.range, numParameters.toString(), numPresentParameters.toString()\r\n        );\r\n        return this.module.unreachable();\r\n      }\r\n\r\n      // check non-omitted parameter types\r\n      let parameterNames = new Array<string>(numPresentParameters);\r\n      for (let i = 0; i < numPresentParameters; ++i) {\r\n        let parameterNode = parameterNodes[i];\r\n        parameterNames[i] = parameterNode.name.text; // use actual name\r\n        if (!isTypeOmitted(parameterNode.type)) {\r\n          let resolvedType = this.resolver.resolveType(\r\n            parameterNode.type,\r\n            actualFunction.parent,\r\n            contextualTypeArguments\r\n          );\r\n          if (!resolvedType) return this.module.unreachable();\r\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\r\n            );\r\n            return this.module.unreachable();\r\n          }\r\n        }\r\n        // any unused parameters are inherited but ignored\r\n      }\r\n\r\n      // check non-omitted return type\r\n      let returnType = contextualSignature.returnType;\r\n      if (!isTypeOmitted(signatureNode.returnType)) {\r\n        let resolvedType = this.resolver.resolveType(\r\n          signatureNode.returnType,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.unreachable();\r\n        if (\r\n          returnType == Type.void\r\n            ? resolvedType != Type.void\r\n            : !resolvedType.isStrictlyAssignableTo(returnType)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n      }\r\n\r\n      // check explicit this type\r\n      let thisType = contextualSignature.thisType;\r\n      let thisTypeNode = signatureNode.explicitThisType;\r\n      if (thisTypeNode) {\r\n        if (!thisType) {\r\n          this.error(\r\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n            thisTypeNode.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let resolvedType = this.resolver.resolveType(\r\n          thisTypeNode,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.unreachable();\r\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n      }\r\n\r\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\r\n      signature.requiredParameters = numParameters; // !\r\n      signature.parameterNames = parameterNames;\r\n      instance = new Function(\r\n        prototype.name,\r\n        prototype,\r\n        signature,\r\n        contextualTypeArguments\r\n      );\r\n      if (!this.compileFunction(instance)) return this.module.unreachable();\r\n      this.currentType = contextualSignature.type;\r\n\r\n    // otherwise compile like a normal function\r\n    } else {\r\n      instance = this.compileFunctionUsingTypeArguments(\r\n        prototype,\r\n        [],\r\n        contextualTypeArguments\r\n      );\r\n      if (!instance) return this.module.unreachable();\r\n      this.currentType = instance.signature.type;\r\n    }\r\n\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.unreachable()\r\n      : this.module.i32(index);\r\n  }\r\n\r\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\r\n  private maybeCompileEnclosingSource(expression: Expression): void {\r\n    var internalPath = expression.range.source.internalPath;\r\n    var filesByName = this.program.filesByName;\r\n    assert(filesByName.has(internalPath));\r\n    var enclosingFile = filesByName.get(internalPath)!;\r\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\r\n      this.compileFileByPath(internalPath, expression);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        let classReference = contextualType.classReference;\r\n        if (!classReference) {\r\n          this.currentType = options.usizeType;\r\n        } else {\r\n          this.currentType = classReference.type.asNullable();\r\n        }\r\n        return options.isWasm64\r\n          ? module.i64(0)\r\n          : module.i32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.i32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.i32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // {\r\n              //   if (!this) this = <ALLOC>\r\n              //   this.a = X\r\n              //   this.b = Y\r\n              //   return this\r\n              // }\r\n              let stmts: ExpressionRef[] = [\r\n                module.if(\r\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                    module.local_get(thisLocal.index, nativeSizeType)\r\n                  ),\r\n                  module.local_set(thisLocal.index,\r\n                    this.makeRetain(\r\n                      this.makeAllocation(<Class>classInstance)\r\n                    )\r\n                  )\r\n                )\r\n              ];\r\n              this.makeFieldInitialization(<Class>classInstance, stmts);\r\n              stmts.push(\r\n                module.local_get(thisLocal.index, nativeSizeType)\r\n              );\r\n              this.currentType = thisLocal.type;\r\n              return module.block(null, stmts, nativeSizeType);\r\n            }\r\n          }\r\n          // if not a constructor, `this` type can differ\r\n          let thisType = assert(actualFunction.signature.thisType);\r\n          this.currentType = thisType;\r\n          return module.local_get(thisLocal.index, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.unreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = this.currentFlow;\r\n        let actualFunction = flow.actualFunction;\r\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\r\n            // TS1034 in the parser effectively limits this to property accesses\r\n            this.error(\r\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\r\n              expression.range\r\n            );\r\n          }\r\n        }\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.local_get(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let baseClassInstance = (<Class>classInstance).base;\r\n          if (baseClassInstance) {\r\n            let superType = baseClassInstance.type;\r\n            this.currentType = superType;\r\n            return module.local_get(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.unreachable();\r\n      }\r\n    }\r\n\r\n    this.maybeCompileEnclosingSource(expression);\r\n\r\n    // otherwise resolve\r\n    var target = this.resolver.resolveIdentifier( // reports\r\n      expression,\r\n      flow,\r\n      this.currentEnum || actualFunction\r\n    );\r\n    if (!target) return module.unreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\r\n        }\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\r\n          type = type.nonNullableType;\r\n        }\r\n        this.currentType = type;\r\n        return this.module.local_get(localIndex, type.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.unreachable();\r\n        }\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\r\n        }\r\n        this.currentType = type;\r\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.unreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = this.resolver.resolveFunction(\r\n          <FunctionPrototype>target,\r\n          null,\r\n          makeMap<string,Type>(flow.contextualTypeArguments)\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.i32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\r\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\r\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\r\n    var actualType = this.currentType;\r\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\r\n    this.currentType = Type.bool;\r\n    if (!expectedType) return module.unreachable();\r\n\r\n    // instanceof <basic> - must be exact\r\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\r\n      return module.block(null, [\r\n        module.drop(expr),\r\n        module.i32(actualType == expectedType ? 1 : 0)\r\n      ], NativeType.I32);\r\n    }\r\n\r\n    // <basic> instanceof <reference> - always false\r\n    if (!actualType.is(TypeFlags.REFERENCE)) {\r\n      return module.block(null, [\r\n        module.drop(expr),\r\n        module.i32(0)\r\n      ], NativeType.I32);\r\n    }\r\n\r\n    // both LHS and RHS are references now\r\n    var nativeSizeType = actualType.toNativeType();\r\n\r\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\r\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\r\n\r\n      // downcast - check statically\r\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\r\n        return module.binary(\r\n          nativeSizeType == NativeType.I64\r\n            ? BinaryOp.NeI64\r\n            : BinaryOp.NeI32,\r\n          expr,\r\n          actualType.toNativeZero(module)\r\n        );\r\n      }\r\n\r\n      // upcast - check dynamically\r\n      if (expectedType.isAssignableTo(actualType)) {\r\n        let program = this.program;\r\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\r\n          let instanceofInstance = assert(program.instanceofInstance);\r\n          this.compileFunction(instanceofInstance);\r\n          return module.if(\r\n            module.unary(\r\n              nativeSizeType == NativeType.I64\r\n                ? UnaryOp.EqzI64\r\n                : UnaryOp.EqzI32,\r\n              module.local_tee(tempLocal.index, expr),\r\n            ),\r\n            module.i32(0),\r\n            this.makeCallDirect(instanceofInstance, [\r\n              module.local_get(tempLocal.index, nativeSizeType),\r\n              module.i32(expectedType.classReference!.id)\r\n            ], expression)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n        }\r\n      }\r\n\r\n    // either none or both nullable\r\n    } else {\r\n\r\n      // downcast - check statically\r\n      if (actualType.isAssignableTo(expectedType)) {\r\n        return module.block(null, [\r\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\r\n          module.i32(1)\r\n        ], NativeType.I32);\r\n\r\n      // upcast - check dynamically\r\n      } else if (expectedType.isAssignableTo(actualType)) {\r\n        let program = this.program;\r\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\r\n          // FIXME: the temp local and the if can be removed here once flows\r\n          // perform null checking, which would error earlier when checking\r\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\r\n          let instanceofInstance = assert(program.instanceofInstance);\r\n          this.compileFunction(instanceofInstance);\r\n          return module.if(\r\n            module.unary(\r\n              nativeSizeType == NativeType.I64\r\n                ? UnaryOp.EqzI64\r\n                : UnaryOp.EqzI32,\r\n              module.local_tee(tempLocal.index, expr),\r\n            ),\r\n            module.i32(0),\r\n            this.makeCallDirect(instanceofInstance, [\r\n              module.local_get(tempLocal.index, nativeSizeType),\r\n              module.i32(expectedType.classReference!.id)\r\n            ], expression)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // false\r\n    return module.block(null, [\r\n      module.drop(expr),\r\n      module.i32(0)\r\n    ], NativeType.I32);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints,\r\n    implicitlyNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitlyNegate);\r\n        let classType = contextualType.classReference;\r\n        if (classType) {\r\n          if (classType.prototype == this.program.arrayPrototype) {\r\n            return this.compileArrayLiteral(\r\n              assert(classType.typeArguments)[0],\r\n              (<ArrayLiteralExpression>expression).elementExpressions,\r\n              constraints,\r\n              expression\r\n            );\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitlyNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.f32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.f64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitlyNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\r\n        this.currentType = type;\r\n        switch (type.kind) {\r\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\r\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\r\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\r\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\r\n          default: return module.i32(i64_low(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitlyNegate);\r\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\r\n      }\r\n      case LiteralKind.OBJECT: {\r\n        assert(!implicitlyNegate);\r\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\r\n      }\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.unreachable();\r\n  }\r\n\r\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\r\n    return this.ensureStaticString(expression.value);\r\n  }\r\n\r\n  compileArrayLiteral(\r\n    elementType: Type,\r\n    expressions: (Expression | null)[],\r\n    constraints: Constraints,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var program = this.program;\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\r\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\r\n    var arrayType = arrayInstance.type;\r\n    var flow = this.currentFlow;\r\n\r\n    // block those here so compiling expressions doesn't conflict\r\n    var tempThis = flow.getTempLocal(arrayType);\r\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\r\n\r\n    // compile value expressions and find out whether all are constant\r\n    var length = expressions.length;\r\n    var values = new Array<ExpressionRef>(length);\r\n    var isStatic = true;\r\n    var nativeElementType = elementType.toNativeType();\r\n    for (let i = 0; i < length; ++i) {\r\n      let expression = expressions[i];\r\n      let expr = expression\r\n        ? module.precomputeExpression(\r\n            this.compileExpression(<Expression>expression, elementType,\r\n              Constraints.CONV_IMPLICIT\r\n            )\r\n          )\r\n        : elementType.toNativeZero(module);\r\n      if (getExpressionId(expr) == ExpressionId.Const) {\r\n        assert(getExpressionType(expr) == nativeElementType);\r\n      } else {\r\n        isStatic = false;\r\n      }\r\n      values[i] = expr;\r\n    }\r\n\r\n    // if the array is static, make a static arraybuffer segment\r\n    if (isStatic) {\r\n      flow.freeTempLocal(tempThis);\r\n      flow.freeTempLocal(tempDataStart);\r\n\r\n      let runtimeHeaderSize = program.runtimeHeaderSize;\r\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\r\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\r\n\r\n      // make both the buffer and array header static if assigned to a global. this can't be done\r\n      // if inside of a function because each invocation must create a new array reference then.\r\n      if (constraints & Constraints.PREFER_STATIC) {\r\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\r\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\r\n        this.currentType = arrayType;\r\n        return program.options.isWasm64\r\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\r\n          : this.module.i32(i64_low(arrayAddress));\r\n\r\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\r\n      } else {\r\n        // makeArray(length, alignLog2, classId, staticBuffer)\r\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\r\n          module.i32(length),\r\n          program.options.isWasm64\r\n            ? module.i64(elementType.alignLog2)\r\n            : module.i32(elementType.alignLog2),\r\n          module.i32(arrayInstance.id),\r\n          program.options.isWasm64\r\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\r\n            : module.i32(i64_low(bufferAddress))\r\n        ], reportNode);\r\n        this.currentType = arrayType;\r\n        return this.makeAutorelease(this.makeRetain(expr));\r\n      }\r\n    }\r\n\r\n    // otherwise compile an explicit instantiation with indexed sets\r\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n    if (!setter) {\r\n      flow.freeTempLocal(tempThis);\r\n      flow.freeTempLocal(tempDataStart);\r\n      this.error(\r\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n        reportNode.range, arrayInstance.internalName\r\n      );\r\n      this.currentType = arrayType;\r\n      return module.unreachable();\r\n    }\r\n    var nativeArrayType = arrayType.toNativeType();\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\r\n    stmts.push(\r\n      module.local_set(tempThis.index,\r\n        this.makeCallDirect(program.allocArrayInstance, [\r\n          module.i32(length),\r\n          program.options.isWasm64\r\n            ? module.i64(elementType.alignLog2)\r\n            : module.i32(elementType.alignLog2),\r\n          module.i32(arrayInstance.id),\r\n          program.options.isWasm64\r\n            ? module.i64(0)\r\n            : module.i32(0)\r\n        ], reportNode),\r\n      )\r\n    );\r\n    // tempData = tempThis.dataStart\r\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\r\n    assert(dataStart.kind == ElementKind.FIELD);\r\n    stmts.push(\r\n      module.local_set(tempDataStart.index,\r\n        module.load(arrayType.byteSize, false,\r\n          module.local_get(tempThis.index, nativeArrayType),\r\n          nativeArrayType,\r\n          (<Field>dataStart).memoryOffset\r\n        )\r\n      )\r\n    );\r\n    var isManaged = elementType.isManaged;\r\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\r\n      let valueExpr = values[i];\r\n      if (isManaged) {\r\n        // value = __retain(value)\r\n        valueExpr = this.makeRetain(valueExpr);\r\n      }\r\n      // store<T>(tempData, value, immOffset)\r\n      stmts.push(\r\n        module.store(elementType.byteSize,\r\n          module.local_get(tempDataStart.index, nativeArrayType),\r\n          valueExpr,\r\n          nativeElementType,\r\n          i << alignLog2\r\n        )\r\n      );\r\n    }\r\n    // -> tempThis\r\n    stmts.push(\r\n      module.local_get(tempThis.index, nativeArrayType)\r\n    );\r\n    flow.freeTempLocal(tempThis);\r\n    flow.freeTempLocal(tempDataStart);\r\n    this.currentType = arrayType;\r\n    return module.block(null, stmts, nativeArrayType);\r\n  }\r\n\r\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // contextual type must be a class\r\n    var classReference = contextualType.classReference;\r\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, \"<object>\", contextualType.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n\r\n    // if present, check that the constructor is compatible with object literals\r\n    var ctor = classReference.constructorInstance;\r\n    if (ctor) {\r\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\r\n      // object literal and use them to call the ctor while not generating a store.\r\n      if (ctor.signature.requiredParameters) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PRIVATE)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PROTECTED)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n    }\r\n\r\n    // check and compile field values\r\n    var names = expression.names;\r\n    var numNames = names.length;\r\n    var values = expression.values;\r\n    var members = classReference.members;\r\n    var hasErrors = false;\r\n    var exprs = new Array<ExpressionRef>(numNames + 2);\r\n    var flow = this.currentFlow;\r\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\r\n    assert(numNames == values.length);\r\n    for (let i = 0, k = numNames; i < k; ++i) {\r\n      let member = members ? members.get(names[i].text) : null;\r\n      if (!member || member.kind != ElementKind.FIELD) {\r\n        this.error(\r\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n          names[i].range, names[i].text, classReference.toString()\r\n        );\r\n        hasErrors = true;\r\n        continue;\r\n      }\r\n      let type = (<Field>member).type;\r\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\r\n        type.byteSize,\r\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\r\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\r\n        type.toNativeType(),\r\n        (<Field>member).memoryOffset\r\n      );\r\n    }\r\n    this.currentType = classReference.type.nonNullableType;\r\n    if (hasErrors) return module.unreachable();\r\n\r\n    // allocate a new instance first and assign 'this' to the temp. local\r\n    exprs[0] = module.local_set(\r\n      tempLocal.index,\r\n      this.makeRetain(\r\n        this.makeAllocation(classReference)\r\n      )\r\n    );\r\n\r\n    // once all field values have been set, return 'this'\r\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\r\n\r\n    this.currentType = classReference.type;\r\n    return module.block(null, exprs, this.options.nativeSizeType);\r\n  }\r\n\r\n  compileNewExpression(\r\n    expression: NewExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.resolver.resolveExpression( // reports\r\n      expression.expression,\r\n      flow\r\n    );\r\n    if (!target) return module.unreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.unreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = this.resolver.resolveClass(\r\n        classPrototype,\r\n        classReference.typeArguments,\r\n        makeMap<string,Type>(flow.contextualTypeArguments)\r\n      );\r\n    } else {\r\n      classInstance = this.resolver.resolveClassInclTypeArguments(\r\n        classPrototype,\r\n        typeArguments,\r\n        flow.actualFunction.parent, // relative to caller\r\n        makeMap<string,Type>(flow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.unreachable();\r\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\r\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\r\n  }\r\n\r\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\r\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\r\n    var instance = classInstance.constructorInstance;\r\n    if (instance) {\r\n      // do not attempt to compile it if inlined anyway\r\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\r\n      return instance;\r\n    }\r\n\r\n    // clone base constructor if a derived class\r\n    var baseClass = classInstance.base;\r\n    if (baseClass) {\r\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          // declaration is important, i.e. to access optional parameter initializers\r\n          (<FunctionDeclaration>baseCtor.declaration).clone()\r\n        ),\r\n        baseCtor.signature,\r\n        null\r\n      );\r\n\r\n    // otherwise make a default constructor\r\n    } else {\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\r\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\r\n          )\r\n        ),\r\n        new Signature(this.program, null, classInstance.type, classInstance.type),\r\n        null\r\n      );\r\n    }\r\n\r\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\r\n    instance.set(CommonFlags.COMPILED);\r\n    instance.prototype.setResolvedInstance(\"\", instance);\r\n    classInstance.constructorInstance = instance;\r\n    var previousFlow = this.currentFlow;\r\n    var flow = instance.flow;\r\n    this.currentFlow = flow;\r\n\r\n    // generate body\r\n    var signature = instance.signature;\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var stmts = new Array<ExpressionRef>();\r\n\r\n    // {\r\n    //   if (!this) this = <ALLOC>\r\n    //   IF_DERIVED: this = super(this, ...args)\r\n    //   this.a = X\r\n    //   this.b = Y\r\n    //   return this\r\n    // }\r\n    stmts.push(\r\n      module.if(\r\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n          module.local_get(0, nativeSizeType)\r\n        ),\r\n        module.local_set(0,\r\n          this.makeRetain(\r\n            this.makeAllocation(classInstance)\r\n          )\r\n        )\r\n      )\r\n    );\r\n    if (baseClass) {\r\n      let parameterTypes = signature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      let operands = new Array<ExpressionRef>(1 + numParameters);\r\n      operands[0] = module.local_get(0, nativeSizeType);\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\r\n      }\r\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\r\n      stmts.push(\r\n        module.local_set(0,\r\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\r\n        )\r\n      );\r\n    }\r\n    this.makeFieldInitialization(classInstance, stmts);\r\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\r\n    flow.freeScopedLocals();\r\n    this.currentFlow = previousFlow;\r\n\r\n    // make the function\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var locals = instance.localsByIndex;\r\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\r\n    var numOperands = 1 + signature.parameterTypes.length;\r\n    var numLocals = locals.length;\r\n    if (numLocals > numOperands) {\r\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\r\n    }\r\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\r\n    instance.finalize(module, funcRef);\r\n    return instance;\r\n  }\r\n\r\n  compileInstantiate(\r\n    /** Class to instantiate. */\r\n    classInstance: Class,\r\n    /** Constructor arguments. */\r\n    argumentExpressions: Expression[],\r\n    /** Contextual flags. */\r\n    constraints: Constraints,\r\n    /** Node to report on. */\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var ctor = this.ensureConstructor(classInstance, reportNode);\r\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\r\n    var expr = this.compileCallDirect( // no need for another autoreleased local\r\n      ctor,\r\n      argumentExpressions,\r\n      reportNode,\r\n      this.options.usizeType.toNativeZero(this.module),\r\n      constraints\r\n    );\r\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\r\n      this.currentType = classInstance.type; // important because a super ctor could be called\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    this.maybeCompileEnclosingSource(propertyAccess);\r\n\r\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\r\n    if (!target) return module.unreachable();\r\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(propertyAccess);\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static field\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.unreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>theEnum)) {\r\n          this.currentType = Type.i32;\r\n          return this.module.unreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return module.i32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\r\n        this.currentType = (<Field>target).type;\r\n        return module.load(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\r\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\r\n        if (getterPrototype) {\r\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\r\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\r\n        }\r\n        return module.unreachable();\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\r\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\r\n        );\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n\r\n        if (prototype.is(CommonFlags.STATIC)) {\r\n          let instance = this.compileFunctionUsingTypeArguments(\r\n            prototype,\r\n            [],\r\n            makeMap<string,Type>(),\r\n            propertyAccess,\r\n          );\r\n          if (instance == null) {\r\n            return module.unreachable();\r\n          } else {\r\n            this.currentType = instance.type;\r\n            return module.i32(this.ensureFunctionTableEntry(instance));\r\n          }\r\n        }\r\n\r\n        this.error(\r\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\r\n          propertyAccess.range, prototype.name\r\n        );\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.unreachable();\r\n  }\r\n\r\n  compileTernaryExpression(\r\n    expression: TernaryExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    var condExpr = this.module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(expression.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExpr)\r\n        ? this.compileExpression(ifThen, contextualType)\r\n        : this.compileExpression(ifElse, contextualType);\r\n    }\r\n\r\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\r\n\r\n    var ifThenFlow = outerFlow.fork();\r\n    this.currentFlow = ifThenFlow;\r\n    var ifThenExpr = this.compileExpression(ifThen, contextualType, inheritedConstraints);\r\n    var ifThenType = this.currentType;\r\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\r\n\r\n    var ifElseFlow = outerFlow.fork();\r\n    this.currentFlow = ifElseFlow;\r\n    var ifElseExpr = this.compileExpression(ifElse, contextualType, inheritedConstraints);\r\n    var ifElseType = this.currentType;\r\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\r\n\r\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.unreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType, commonType,\r\n      false, false,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType, commonType,\r\n      false, false,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n\r\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\r\n      if (!IfThenAutoreleaseSkipped) {\r\n        ifThenExpr = this.makeRetain(ifThenExpr);\r\n        IfThenAutoreleaseSkipped = true;\r\n      } else {\r\n        ifElseExpr = this.makeRetain(ifElseExpr);\r\n        ifElseAutoreleaseSkipped = true;\r\n      }\r\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\r\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\r\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\r\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\r\n      // }\r\n    }\r\n\r\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\r\n    ifThenFlow.freeScopedLocals();\r\n\r\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\r\n    ifElseFlow.freeScopedLocals();\r\n\r\n    this.currentFlow = outerFlow;\r\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\r\n\r\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\r\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\r\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n    return expr;\r\n  }\r\n\r\n  compileUnaryPostfixExpression(\r\n    expression: UnaryPostfixExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType.exceptVoid,\r\n      Constraints.NONE\r\n    );\r\n\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n\r\n    // if the value isn't dropped, a temp. local is required to remember the original value\r\n    var tempLocal: Local | null = null;\r\n    if (contextualType != Type.void) {\r\n      tempLocal = flow.getTempLocal(this.currentType);\r\n      getValue = module.local_tee(\r\n        tempLocal.index,\r\n        getValue\r\n      );\r\n    }\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(\r\n              BinaryOp.AddI32,\r\n              getValue,\r\n              module.i32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\r\n                if (overload) {\r\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.unreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            expr = module.binary(\r\n              options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              getValue,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(\r\n              BinaryOp.AddI64,\r\n              getValue,\r\n              module.i64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(\r\n              BinaryOp.AddF32,\r\n              getValue,\r\n              module.f32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(\r\n              BinaryOp.AddF64,\r\n              getValue,\r\n              module.f64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(\r\n              BinaryOp.SubI32,\r\n              getValue,\r\n              module.i32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\r\n                if (overload) {\r\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.unreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            expr = module.binary(\r\n              options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              getValue,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(\r\n              BinaryOp.SubI64,\r\n              getValue,\r\n              module.i64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(\r\n              BinaryOp.SubF32,\r\n              getValue,\r\n              module.f32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(\r\n              BinaryOp.SubF64,\r\n              getValue,\r\n              module.f64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.unreachable();\r\n      }\r\n    }\r\n\r\n    var resolver = this.resolver;\r\n    var target = resolver.resolveExpression(expression.operand, flow); // reports\r\n\r\n    // simplify if dropped anyway\r\n    if (!tempLocal) {\r\n      this.currentType = Type.void;\r\n      if (!target) return module.unreachable();\r\n      return this.makeAssignment(\r\n        target,\r\n        expr,\r\n        expression.operand,\r\n        resolver.currentThisExpression,\r\n        resolver.currentElementExpression,\r\n        false\r\n      );\r\n    } else if (!target) {\r\n      return module.unreachable();\r\n    }\r\n\r\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\r\n    var setValue = this.makeAssignment(\r\n      target,\r\n      expr, // includes a tee of getValue to tempLocal\r\n      expression.operand,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      false\r\n    );\r\n\r\n    this.currentType = tempLocal.type;\r\n    flow.freeTempLocal(tempLocal);\r\n    var nativeType = tempLocal.type.toNativeType();\r\n\r\n    return module.block(null, [\r\n      setValue,\r\n      module.local_get(tempLocal.index, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.unary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.unary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        } else {\r\n          expr = this.convertExpression(expr,\r\n            this.currentType, this.currentType.intType,\r\n            false, false,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    if (!compound) return expr;\r\n    var resolver = this.resolver;\r\n    var target = resolver.resolveExpression(expression.operand, this.currentFlow);\r\n    if (!target) return module.unreachable();\r\n    return this.makeAssignment(\r\n      target,\r\n      expr,\r\n      expression.operand,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.binary(BinaryOp.ShrI32,\r\n                module.binary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.i32(24)\r\n                ),\r\n                module.i32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.binary(BinaryOp.ShrI32,\r\n                module.binary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.i32(16)\r\n                ),\r\n                module.i32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.binary(BinaryOp.AndI32,\r\n            expr,\r\n            module.i32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.binary(BinaryOp.AndI32,\r\n            expr,\r\n            module.i32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          // bool is special in that it compares to 0 instead of masking with 0x1\r\n          expr = module.binary(BinaryOp.NeI32,\r\n            expr,\r\n            module.i32(0)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var parentFunction = this.currentFlow.parentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    parentFunction.debugLocations.push(range);\r\n  }\r\n\r\n  // === Specialized code generation ==============================================================\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.unary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.unary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\r\n      case TypeKind.ISIZE: {\r\n        return module.unary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.binary(BinaryOp.EqF32, expr, module.f32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.binary(BinaryOp.EqF64, expr, module.f64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.i32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.BOOL: // not a mask, just != 0\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\r\n      }\r\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.binary(BinaryOp.NeF32, expr, module.f32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.binary(BinaryOp.NeF64, expr, module.f64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.i32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\r\n  makeAllocation(\r\n    classInstance: Class\r\n  ): ExpressionRef {\r\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\r\n    var program = this.program;\r\n    assert(classInstance.program == program);\r\n    var module = this.module;\r\n    var options = this.options;\r\n    this.currentType = classInstance.type;\r\n    var allocInstance = program.allocInstance;\r\n    this.compileFunction(allocInstance);\r\n    return module.call(allocInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.i64(classInstance.currentMemoryOffset)\r\n        : module.i32(classInstance.currentMemoryOffset),\r\n      module.i32(\r\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\r\n          ? 0\r\n          : classInstance.id\r\n      )\r\n    ], options.nativeSizeType);\r\n  }\r\n\r\n  /** Makes the initializers for a class's fields. */\r\n  makeFieldInitialization(\r\n    classInstance: Class,\r\n    stmts: ExpressionRef[] = []\r\n  ): ExpressionRef[] {\r\n    var members = classInstance.members;\r\n    if (!members) return [];\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\r\n    var thisLocalIndex = isInline\r\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\r\n      : 0;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    for (let member of members.values()) {\r\n      if (\r\n        member.kind != ElementKind.FIELD || // not a field\r\n        member.parent != classInstance      // inherited field\r\n      ) continue;\r\n\r\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\r\n      let fieldType = field.type;\r\n      let nativeFieldType = fieldType.toNativeType();\r\n      let initializerNode = field.prototype.initializerNode;\r\n      if (initializerNode) { // use initializer\r\n        let initExpr = this.compileExpression(initializerNode, fieldType, // reports\r\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\r\n        );\r\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\r\n          initExpr = this.makeRetain(initExpr);\r\n        }\r\n        stmts.push(\r\n          module.store(fieldType.byteSize,\r\n            module.local_get(thisLocalIndex, nativeSizeType),\r\n            initExpr,\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      } else {\r\n        let parameterIndex = field.prototype.parameterIndex;\r\n        stmts.push(\r\n          module.store(fieldType.byteSize,\r\n            module.local_get(thisLocalIndex, nativeSizeType),\r\n            parameterIndex >= 0 // initialized via parameter (here: a local)\r\n              ? module.local_get(\r\n                  isInline\r\n                    ? assert(flow.lookupLocal(field.name)).index\r\n                    : 1 + parameterIndex, // this is local 0\r\n                  nativeFieldType\r\n                )\r\n              : fieldType.toNativeZero(module),\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  makeInstanceOfClass(\r\n    expr: ExpressionRef,\r\n    classInstance: Class\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var idTemp = flow.getTempLocal(Type.i32);\r\n    var idExpr = module.load(4, false,\r\n      module.binary(BinaryOp.SubI32,\r\n        expr,\r\n        module.i32(this.program.runtimeHeaderSize)\r\n      ),\r\n      NativeType.I32\r\n    );\r\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\r\n    var conditions: ExpressionRef[] = [];\r\n    conditions.push(\r\n      module.drop( // br_if returns the value too\r\n        module.br(label,\r\n          module.binary(BinaryOp.EqI32, // classId == class.id\r\n            module.local_tee(idTemp.index, idExpr),\r\n            module.i32(classInstance.id)\r\n          ),\r\n          module.i32(1) // ? true\r\n        )\r\n      )\r\n    );\r\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\r\n    // TODO: simplify if there are none\r\n    conditions.push(\r\n      module.i32(0) // : false\r\n    );\r\n    flow.freeTempLocal(idTemp);\r\n    flow.popBreakLabel();\r\n    return module.block(label, conditions, NativeType.I32);\r\n  }\r\n\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleImportName(\r\n  element: Element,\r\n  declaration: DeclarationStatement\r\n): void {\r\n  // by default, use the file name as the module name\r\n  mangleImportName_moduleName = declaration.range.source.simplePath;\r\n  // and the internal name of the element within that file as the element name\r\n  mangleImportName_elementName = mangleInternalName(\r\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\r\n  );\r\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\r\n\r\n  var program = element.program;\r\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n  var args = decorator.arguments;\r\n  if (args && args.length) {\r\n    let arg = args[0];\r\n    // if one argument is given, override just the element name\r\n    // if two arguments are given, override both module and element name\r\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n      if (args.length >= 2) {\r\n        arg = args[1];\r\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n          mangleImportName_moduleName = mangleImportName_elementName;\r\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n          if (args.length > 2) {\r\n            program.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"2\", args.length.toString()\r\n            );\r\n          }\r\n        } else {\r\n          program.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            arg.range\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      program.error(\r\n        DiagnosticCode.String_literal_expected,\r\n        arg.range\r\n      );\r\n    }\r\n  } else {\r\n    program.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      decorator.range, \"1\", \"0\"\r\n    );\r\n  }\r\n}\r\n\r\nvar mangleImportName_moduleName: string;\r\nvar mangleImportName_elementName: string;\r\n\r\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\r\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\r\n  var length = stmts.length;\r\n  if (length == 0) return module.nop(); // usually filtered out again\r\n  if (length == 1) {\r\n    let single = stmts[0];\r\n    if (getExpressionType(single) == type) return single;\r\n    if (getExpressionId(single) == ExpressionId.Block) {\r\n      let count = getBlockChildCount(single);\r\n      let children = new Array<ExpressionRef>(count);\r\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\r\n      return module.block(getBlockName(single), children, type);\r\n    }\r\n  }\r\n  return module.block(null, stmts,\r\n    type == NativeType.Auto\r\n      ? getExpressionType(stmts[length - 1])\r\n      : type\r\n  );\r\n}\r\n","/**\r\n * Generated from diagnosticsMessages.json. Do not edit.\r\n * @module diagnostics\r\n *//***/\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n/** Enum of available diagnostic codes. */\r\nexport enum DiagnosticCode {\r\n  Operation_not_supported = 100,\r\n  Operation_is_unsafe = 101,\r\n  User_defined_0 = 102,\r\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\r\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\r\n  Type_0_cannot_be_changed_to_type_1 = 202,\r\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\r\n  Basic_type_0_cannot_be_nullable = 204,\r\n  Cannot_export_a_mutable_global = 205,\r\n  Mutable_value_cannot_be_inlined = 206,\r\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\r\n  Unmanaged_classes_cannot_implement_interfaces = 208,\r\n  Invalid_regular_expression_flags = 209,\r\n  Implementation_0_must_match_the_signature_1 = 210,\r\n  Class_0_is_sealed_and_cannot_be_extended = 211,\r\n  Decorator_0_is_not_valid_here = 212,\r\n  Duplicate_decorator = 213,\r\n  An_allocator_must_be_present_to_use_0 = 214,\r\n  Optional_parameter_must_have_an_initializer = 215,\r\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\r\n  Function_0_cannot_be_inlined_into_itself = 217,\r\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\r\n  Optional_properties_are_not_supported = 219,\r\n  Expression_must_be_a_compile_time_constant = 220,\r\n  Module_cannot_have_multiple_start_functions = 221,\r\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\r\n  _0_must_be_a_power_of_two = 223,\r\n  Expression_is_unsafe = 224,\r\n  Expression_is_never_null = 225,\r\n  Unterminated_string_literal = 1002,\r\n  Identifier_expected = 1003,\r\n  _0_expected = 1005,\r\n  A_file_cannot_have_a_reference_to_itself = 1006,\r\n  Trailing_comma_not_allowed = 1009,\r\n  Unexpected_token = 1012,\r\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\r\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\r\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\r\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\r\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\r\n  _0_modifier_cannot_be_used_here = 1042,\r\n  A_rest_parameter_cannot_be_optional = 1047,\r\n  A_rest_parameter_cannot_have_an_initializer = 1048,\r\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\r\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\r\n  A_get_accessor_cannot_have_parameters = 1054,\r\n  Enum_member_must_have_initializer = 1061,\r\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\r\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\r\n  An_accessor_cannot_have_type_parameters = 1094,\r\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\r\n  Type_parameter_list_cannot_be_empty = 1098,\r\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\r\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\r\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\r\n  Expression_expected = 1109,\r\n  Type_expected = 1110,\r\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\r\n  Duplicate_label_0 = 1114,\r\n  An_export_assignment_cannot_have_modifiers = 1120,\r\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\r\n  Digit_expected = 1124,\r\n  Hexadecimal_digit_expected = 1125,\r\n  Unexpected_end_of_text = 1126,\r\n  Invalid_character = 1127,\r\n  _case_or_default_expected = 1130,\r\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\r\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\r\n  Type_argument_expected = 1140,\r\n  String_literal_expected = 1141,\r\n  Line_break_not_permitted_here = 1142,\r\n  Declaration_expected = 1146,\r\n  _const_declarations_must_be_initialized = 1155,\r\n  Unterminated_regular_expression_literal = 1161,\r\n  Interface_declaration_cannot_have_implements_clause = 1176,\r\n  Binary_digit_expected = 1177,\r\n  Octal_digit_expected = 1178,\r\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\r\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\r\n  Unterminated_Unicode_escape_sequence = 1199,\r\n  Decorators_are_not_valid_here = 1206,\r\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\r\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\r\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\r\n  A_class_may_only_extend_another_class = 1311,\r\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\r\n  Duplicate_identifier_0 = 2300,\r\n  Cannot_find_name_0 = 2304,\r\n  Module_0_has_no_exported_member_1 = 2305,\r\n  Generic_type_0_requires_1_type_argument_s = 2314,\r\n  Type_0_is_not_generic = 2315,\r\n  Type_0_is_not_assignable_to_type_1 = 2322,\r\n  Index_signature_is_missing_in_type_0 = 2329,\r\n  _this_cannot_be_referenced_in_current_location = 2332,\r\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\r\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\r\n  Property_0_does_not_exist_on_type_1 = 2339,\r\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\r\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\r\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\r\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\r\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\r\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\r\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\r\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\r\n  _get_and_set_accessor_must_have_the_same_type = 2380,\r\n  Constructor_implementation_is_missing = 2390,\r\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\r\n  Multiple_constructor_implementations_are_not_allowed = 2392,\r\n  Duplicate_function_implementation = 2393,\r\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\r\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\r\n  Type_0_has_no_property_1 = 2460,\r\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\r\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\r\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\r\n  Object_is_possibly_null = 2531,\r\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\r\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\r\n  Index_signature_in_type_0_only_permits_reading = 2542,\r\n  Expected_0_arguments_but_got_1 = 2554,\r\n  Expected_at_least_0_arguments_but_got_1 = 2555,\r\n  Expected_0_type_arguments_but_got_1 = 2558,\r\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\r\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\r\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\r\n  Namespace_0_has_no_exported_member_1 = 2694,\r\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\r\n  Duplicate_property_0 = 2718,\r\n  File_0_not_found = 6054,\r\n  Numeric_separators_are_not_allowed_here = 6188,\r\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\r\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\r\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\r\n}\r\n\r\n/** Translates a diagnostic code to its respective string. */\r\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\r\n  switch (code) {\r\n    case 100: return \"Operation not supported.\";\r\n    case 101: return \"Operation is unsafe.\";\r\n    case 102: return \"User-defined: {0}\";\r\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\r\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n    case 205: return \"Cannot export a mutable global.\";\r\n    case 206: return \"Mutable value cannot be inlined.\";\r\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\r\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\r\n    case 209: return \"Invalid regular expression flags.\";\r\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\r\n    case 212: return \"Decorator '{0}' is not valid here.\";\r\n    case 213: return \"Duplicate decorator.\";\r\n    case 214: return \"An allocator must be present to use '{0}'.\";\r\n    case 215: return \"Optional parameter must have an initializer.\";\r\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\r\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\r\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\r\n    case 219: return \"Optional properties are not supported.\";\r\n    case 220: return \"Expression must be a compile-time constant.\";\r\n    case 221: return \"Module cannot have multiple start functions.\";\r\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\r\n    case 223: return \"'{0}' must be a power of two.\";\r\n    case 224: return \"Expression is unsafe.\";\r\n    case 225: return \"Expression is never 'null'.\";\r\n    case 1002: return \"Unterminated string literal.\";\r\n    case 1003: return \"Identifier expected.\";\r\n    case 1005: return \"'{0}' expected.\";\r\n    case 1006: return \"A file cannot have a reference to itself.\";\r\n    case 1009: return \"Trailing comma not allowed.\";\r\n    case 1012: return \"Unexpected token.\";\r\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n    case 1042: return \"'{0}' modifier cannot be used here.\";\r\n    case 1047: return \"A rest parameter cannot be optional.\";\r\n    case 1048: return \"A rest parameter cannot have an initializer.\";\r\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n    case 1061: return \"Enum member must have initializer.\";\r\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n    case 1094: return \"An accessor cannot have type parameters.\";\r\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n    case 1098: return \"Type parameter list cannot be empty.\";\r\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n    case 1109: return \"Expression expected.\";\r\n    case 1110: return \"Type expected.\";\r\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n    case 1114: return \"Duplicate label '{0}'.\";\r\n    case 1120: return \"An export assignment cannot have modifiers.\";\r\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n    case 1124: return \"Digit expected.\";\r\n    case 1125: return \"Hexadecimal digit expected.\";\r\n    case 1126: return \"Unexpected end of text.\";\r\n    case 1127: return \"Invalid character.\";\r\n    case 1130: return \"'case' or 'default' expected.\";\r\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\r\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\r\n    case 1140: return \"Type argument expected.\";\r\n    case 1141: return \"String literal expected.\";\r\n    case 1142: return \"Line break not permitted here.\";\r\n    case 1146: return \"Declaration expected.\";\r\n    case 1155: return \"'const' declarations must be initialized.\";\r\n    case 1161: return \"Unterminated regular expression literal.\";\r\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\r\n    case 1177: return \"Binary digit expected.\";\r\n    case 1178: return \"Octal digit expected.\";\r\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n    case 1199: return \"Unterminated Unicode escape sequence.\";\r\n    case 1206: return \"Decorators are not valid here.\";\r\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\r\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\r\n    case 1311: return \"A class may only extend another class.\";\r\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\r\n    case 2300: return \"Duplicate identifier '{0}'.\";\r\n    case 2304: return \"Cannot find name '{0}'.\";\r\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n    case 2315: return \"Type '{0}' is not generic.\";\r\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n    case 2329: return \"Index signature is missing in type '{0}'.\";\r\n    case 2332: return \"'this' cannot be referenced in current location.\";\r\n    case 2335: return \"'super' can only be referenced in a derived class.\";\r\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\r\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\r\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\r\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\r\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n    case 2390: return \"Constructor implementation is missing.\";\r\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n    case 2393: return \"Duplicate function implementation.\";\r\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\r\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\r\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\r\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\r\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\r\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n    case 2531: return \"Object is possibly 'null'.\";\r\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\r\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\r\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\r\n    case 2718: return \"Duplicate property '{0}'.\";\r\n    case 6054: return \"File '{0}' not found.\";\r\n    case 6188: return \"Numeric separators are not allowed here.\";\r\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\r\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\r\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\r\n    default: return \"\";\r\n  }\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  Constraints,\r\n  RuntimeFeatures,\r\n  flatten\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression,\r\n  CallExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  AtomicRMWOp,\r\n  SIMDExtractOp,\r\n  SIMDReplaceOp,\r\n  SIMDShiftOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  Relooper,\r\n  RelooperBlockRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Field,\r\n  Global,\r\n  DecoratorFlags,\r\n  Element\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  LocalFlags\r\n} from \"./flow\";\r\n\r\nimport {\r\n  ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  Feature,\r\n  TypeinfoFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\n/** Symbols of various compiler built-ins. */\r\nexport namespace BuiltinSymbols {\r\n  // std/builtins.ts\r\n  export const isInteger = \"~lib/builtins/isInteger\";\r\n  export const isFloat = \"~lib/builtins/isFloat\";\r\n  export const isBoolean = \"~lib/builtins/isBoolean\";\r\n  export const isSigned = \"~lib/builtins/isSigned\";\r\n  export const isReference = \"~lib/builtins/isReference\";\r\n  export const isString = \"~lib/builtins/isString\";\r\n  export const isArray = \"~lib/builtins/isArray\";\r\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\r\n  export const isFunction = \"~lib/builtins/isFunction\";\r\n  export const isNullable = \"~lib/builtins/isNullable\";\r\n  export const isDefined = \"~lib/builtins/isDefined\";\r\n  export const isConstant = \"~lib/builtins/isConstant\";\r\n  export const isManaged = \"~lib/builtins/isManaged\";\r\n\r\n  export const clz = \"~lib/builtins/clz\";\r\n  export const ctz = \"~lib/builtins/ctz\";\r\n  export const popcnt = \"~lib/builtins/popcnt\";\r\n  export const rotl = \"~lib/builtins/rotl\";\r\n  export const rotr = \"~lib/builtins/rotr\";\r\n  export const abs = \"~lib/builtins/abs\";\r\n  export const max = \"~lib/builtins/max\";\r\n  export const min = \"~lib/builtins/min\";\r\n  export const ceil = \"~lib/builtins/ceil\";\r\n  export const floor = \"~lib/builtins/floor\";\r\n  export const copysign = \"~lib/builtins/copysign\";\r\n  export const nearest = \"~lib/builtins/nearest\";\r\n  export const reinterpret = \"~lib/builtins/reinterpret\";\r\n  export const sqrt = \"~lib/builtins/sqrt\";\r\n  export const trunc = \"~lib/builtins/trunc\";\r\n  export const load = \"~lib/builtins/load\";\r\n  export const store = \"~lib/builtins/store\";\r\n  export const atomic_load = \"~lib/builtins/atomic.load\";\r\n  export const atomic_store = \"~lib/builtins/atomic.store\";\r\n  export const atomic_add = \"~lib/builtins/atomic.add\";\r\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\r\n  export const atomic_and = \"~lib/builtins/atomic.and\";\r\n  export const atomic_or = \"~lib/builtins/atomic.or\";\r\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\r\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\r\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\r\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\r\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\r\n\r\n  export const sizeof = \"~lib/builtins/sizeof\";\r\n  export const alignof = \"~lib/builtins/alignof\";\r\n  export const offsetof = \"~lib/builtins/offsetof\";\r\n  export const select = \"~lib/builtins/select\";\r\n  export const unreachable = \"~lib/builtins/unreachable\";\r\n  export const changetype = \"~lib/builtins/changetype\";\r\n  export const assert = \"~lib/builtins/assert\";\r\n  export const unchecked = \"~lib/builtins/unchecked\";\r\n  export const call_direct = \"~lib/builtins/call_direct\";\r\n  export const call_indirect = \"~lib/builtins/call_indirect\";\r\n  export const instantiate = \"~lib/builtins/instantiate\";\r\n  export const idof = \"~lib/builtins/idof\";\r\n\r\n  export const i8 = \"~lib/builtins/i8\";\r\n  export const i16 = \"~lib/builtins/i16\";\r\n  export const i32 = \"~lib/builtins/i32\";\r\n  export const i64 = \"~lib/builtins/i64\";\r\n  export const isize = \"~lib/builtins/isize\";\r\n  export const u8 = \"~lib/builtins/u8\";\r\n  export const u16 = \"~lib/builtins/u16\";\r\n  export const u32 = \"~lib/builtins/u32\";\r\n  export const u64 = \"~lib/builtins/u64\";\r\n  export const usize = \"~lib/builtins/usize\";\r\n  export const bool = \"~lib/builtins/bool\";\r\n  export const f32 = \"~lib/builtins/f32\";\r\n  export const f64 = \"~lib/builtins/f64\";\r\n  export const v128 = \"~lib/builtins/v128\";\r\n  export const void_ = \"~lib/builtins/void\";\r\n\r\n  export const i32_clz = \"~lib/builtins/i32.clz\";\r\n  export const i64_clz = \"~lib/builtins/i64.clz\";\r\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\r\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\r\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\r\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\r\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\r\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\r\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\r\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\r\n\r\n  export const f32_abs = \"~lib/builtins/f32.abs\";\r\n  export const f64_abs = \"~lib/builtins/f64.abs\";\r\n  export const f32_max = \"~lib/builtins/f32.max\";\r\n  export const f64_max = \"~lib/builtins/f64.max\";\r\n  export const f32_min = \"~lib/builtins/f32.min\";\r\n  export const f64_min = \"~lib/builtins/f64.min\";\r\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\r\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\r\n  export const f32_floor = \"~lib/builtins/f32.floor\";\r\n  export const f64_floor = \"~lib/builtins/f64.floor\";\r\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\r\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\r\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\r\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\r\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\r\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\r\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\r\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\r\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\r\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\r\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\r\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\r\n\r\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\r\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\r\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\r\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\r\n  export const i32_load = \"~lib/builtins/i32.load\";\r\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\r\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\r\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\r\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\r\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\r\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\r\n  export const i64_load = \"~lib/builtins/i64.load\";\r\n  export const f32_load = \"~lib/builtins/f32.load\";\r\n  export const f64_load = \"~lib/builtins/f64.load\";\r\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\r\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\r\n  export const i32_store = \"~lib/builtins/i32.store\";\r\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\r\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\r\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\r\n  export const i64_store = \"~lib/builtins/i64.store\";\r\n  export const f32_store = \"~lib/builtins/f32.store\";\r\n  export const f64_store = \"~lib/builtins/f64.store\";\r\n\r\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\r\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\r\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\r\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\r\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\r\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\r\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\r\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\r\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\r\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\r\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\r\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\r\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\r\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\r\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\r\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\r\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\r\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\r\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\r\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\r\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\r\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\r\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\r\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\r\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\r\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\r\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\r\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\r\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\r\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\r\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\r\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\r\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\r\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\r\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\r\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\r\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\r\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\r\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\r\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\r\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\r\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\r\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\r\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\r\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\r\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\r\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\r\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\r\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\r\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\r\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\r\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\r\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\r\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\r\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\r\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\r\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\r\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\r\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\r\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\r\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\r\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\r\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\r\n  export const i32_wait = \"~lib/builtins/i32.wait\";\r\n  export const i64_wait = \"~lib/builtins/i64.wait\";\r\n\r\n  export const v128_splat = \"~lib/builtins/v128.splat\";\r\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\r\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\r\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\r\n  export const v128_load = \"~lib/builtins/v128.load\";\r\n  export const v128_store = \"~lib/builtins/v128.store\";\r\n  export const v128_add = \"~lib/builtins/v128.add\";\r\n  export const v128_sub = \"~lib/builtins/v128.sub\";\r\n  export const v128_mul = \"~lib/builtins/v128.mul\";\r\n  export const v128_div = \"~lib/builtins/v128.div\";\r\n  export const v128_neg = \"~lib/builtins/v128.neg\";\r\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\r\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\r\n  export const v128_shl = \"~lib/builtins/v128.shl\";\r\n  export const v128_shr = \"~lib/builtins/v128.shr\";\r\n  export const v128_and = \"~lib/builtins/v128.and\";\r\n  export const v128_or = \"~lib/builtins/v128.or\";\r\n  export const v128_xor = \"~lib/builtins/v128.xor\";\r\n  export const v128_not = \"~lib/builtins/v128.not\";\r\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\r\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\r\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\r\n  export const v128_min = \"~lib/builtins/v128.min\";\r\n  export const v128_max = \"~lib/builtins/v128.max\";\r\n  export const v128_abs = \"~lib/builtins/v128.abs\";\r\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\r\n  export const v128_eq = \"~lib/builtins/v128.eq\";\r\n  export const v128_ne = \"~lib/builtins/v128.ne\";\r\n  export const v128_lt = \"~lib/builtins/v128.lt\";\r\n  export const v128_le = \"~lib/builtins/v128.le\";\r\n  export const v128_gt = \"~lib/builtins/v128.gt\";\r\n  export const v128_ge = \"~lib/builtins/v128.ge\";\r\n  export const v128_convert = \"~lib/builtins/v128.convert\";\r\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\r\n\r\n  export const i8x16 = \"~lib/builtins/i8x16\";\r\n  export const i16x8 = \"~lib/builtins/i16x8\";\r\n  export const i32x4 = \"~lib/builtins/i32x4\";\r\n  export const i64x2 = \"~lib/builtins/i64x2\";\r\n  export const f32x4 = \"~lib/builtins/f32x4\";\r\n  export const f64x2 = \"~lib/builtins/f64x2\";\r\n\r\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\r\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\r\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\r\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\r\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\r\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\r\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\r\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\r\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\r\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\r\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\r\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\r\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\r\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\r\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\r\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\r\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\r\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\r\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\r\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\r\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\r\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\r\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\r\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\r\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\r\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\r\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\r\n\r\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\r\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\r\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\r\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\r\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\r\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\r\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\r\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\r\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\r\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\r\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\r\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\r\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\r\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\r\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\r\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\r\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\r\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\r\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\r\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\r\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\r\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\r\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\r\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\r\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\r\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\r\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\r\n\r\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\r\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\r\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\r\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\r\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\r\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\r\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\r\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\r\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\r\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\r\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\r\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\r\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\r\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\r\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\r\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\r\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\r\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\r\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\r\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\r\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\r\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\r\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\r\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\r\n\r\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\r\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\r\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\r\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\r\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\r\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\r\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\r\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\r\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\r\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\r\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\r\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\r\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\r\n\r\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\r\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\r\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\r\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\r\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\r\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\r\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\r\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\r\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\r\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\r\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\r\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\r\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\r\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\r\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\r\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\r\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\r\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\r\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\r\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\r\n\r\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\r\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\r\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\r\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\r\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\r\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\r\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\r\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\r\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\r\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\r\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\r\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\r\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\r\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\r\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\r\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\r\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\r\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\r\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\r\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\r\n\r\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\r\n\r\n  // internals\r\n  export const heap_base = \"~lib/heap/__heap_base\";\r\n  export const rtti_base = \"~lib/rt/__rtti_base\";\r\n  export const visit_globals = \"~lib/rt/__visit_globals\";\r\n  export const visit_members = \"~lib/rt/__visit_members\";\r\n\r\n  // std/diagnostics.ts\r\n  export const ERROR = \"~lib/diagnostics/ERROR\";\r\n  export const WARNING = \"~lib/diagnostics/WARNING\";\r\n  export const INFO = \"~lib/diagnostics/INFO\";\r\n\r\n  // std/memory.ts\r\n  export const memory_size = \"~lib/memory/memory.size\";\r\n  export const memory_grow = \"~lib/memory/memory.grow\";\r\n  export const memory_copy = \"~lib/memory/memory.copy\";\r\n  export const memory_fill = \"~lib/memory/memory.fill\";\r\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\r\n  export const memory_free = \"~lib/memory/memory.free\";\r\n  export const memory_reset = \"~lib/memory/memory.reset\";\r\n\r\n  // std/runtime.ts\r\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\r\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\r\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\r\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\r\n  export const runtime_register = \"~lib/util/runtime/register\";\r\n  export const runtime_discard = \"~lib/util/runtime/discard\";\r\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\r\n\r\n  // std/typedarray.ts\r\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\r\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\r\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\r\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\r\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\r\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\r\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\r\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\r\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\r\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\r\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\r\n\r\n  // compiler generated\r\n  export const started = \"~lib/started\";\r\n  export const argc = \"~lib/argc\";\r\n  export const setargc = \"~lib/setargc\";\r\n  export const capabilities = \"~lib/capabilities\";\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  /* Compiler reference. */\r\n  compiler: Compiler,\r\n  /** Respective function prototype. */\r\n  prototype: FunctionPrototype,\r\n  /** Pre-resolved type arguments. */\r\n  typeArguments: Type[] | null,\r\n  /** Operand expressions. */\r\n  operands: Expression[],\r\n  /** Contextual type. */\r\n  contextualType: Type,\r\n  /** Respective call expression. */\r\n  reportNode: CallExpression,\r\n  /** Indicates that contextual type is ASM type. */\r\n  isAsm: bool = false\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\r\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\r\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\r\n\r\n  var directize = false;\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // === Static type evaluation =================================================================\r\n\r\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type == Type.bool\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.i32(1);\r\n      }\r\n      return module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference) return module.i32(0);\r\n      let classPrototype = classReference.prototype;\r\n      return module.i32(classPrototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference) return module.i32(0);\r\n      return module.i32(classReference.isArrayLike ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.signatureReference ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let element = compiler.resolver.resolveExpression(\r\n        operands[0],\r\n        compiler.currentFlow,\r\n        Type.auto,\r\n        ReportMode.SWALLOW\r\n      );\r\n      return module.i32(element ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let expr = compiler.compileExpression(operands[0], Type.auto);\r\n      compiler.currentType = Type.bool;\r\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.isManaged ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let expr: ExpressionRef;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          expr = module.i32(byteSize);\r\n        } else {\r\n          expr = module.i64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          expr = module.i64(byteSize, 0);\r\n        } else {\r\n          expr = module.i32(byteSize);\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      assert(isPowerOf2(byteSize));\r\n      let alignLog2 = ctz<i32>(byteSize);\r\n      let expr: ExpressionRef;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          expr = module.i32(alignLog2);\r\n        } else {\r\n          expr = module.i64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          expr = module.i64(alignLog2, 0);\r\n        } else {\r\n          expr = module.i32(alignLog2);\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let classType = typeArguments![0].classReference;\r\n      if (!classType) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.i32(offset);\r\n        } else {\r\n          return module.i64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.i64(offset);\r\n        } else {\r\n          return module.i32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // === Math ===================================================================================\r\n\r\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\r\n    case BuiltinSymbols.ctz:\r\n    case BuiltinSymbols.popcnt: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.clz: {\r\n          switch (type.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.ClzI64\r\n                : UnaryOp.ClzI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.ctz: {\r\n          switch (type.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.CtzI64\r\n                : UnaryOp.CtzI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.popcnt: {\r\n          switch (compiler.currentType.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.PopcntI64\r\n                : UnaryOp.PopcntI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          expr = compiler.ensureSmallIntegerWrap(\r\n            module.binary(BinaryOp.RotlI32, arg0, arg1),\r\n            type\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          expr = module.binary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.ISIZE: {\r\n          expr = module.binary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0, arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          expr = module.binary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr; // possibly overflows\r\n    }\r\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          expr = compiler.ensureSmallIntegerWrap(\r\n            module.binary(BinaryOp.RotrI32, arg0, arg1),\r\n            type\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          expr = module.binary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.ISIZE: {\r\n          expr = module.binary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0, arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          expr = module.binary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr; // possibly overflowws\r\n    }\r\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal1 = flow.getTempLocal(Type.i32);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 31)) ^ (x >> 31)\r\n          expr = module.binary(BinaryOp.XorI32,\r\n            module.binary(BinaryOp.AddI32,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(BinaryOp.ShrI32,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  module.i32(31)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, NativeType.I32)\r\n            ),\r\n            module.local_get(tempLocalIndex2, NativeType.I32)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let options = compiler.options;\r\n          let flow = compiler.currentFlow;\r\n          let wasm64 = options.isWasm64;\r\n\r\n          let tempLocal1 = flow.getTempLocal(options.usizeType);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          expr = module.binary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\r\n            module.binary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  wasm64 ? module.i64(63) : module.i32(31)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, options.nativeSizeType)\r\n            ),\r\n            module.local_get(tempLocalIndex2, options.nativeSizeType)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          let tempLocal1 = flow.getTempLocal(Type.i64);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 63)) ^ (x >> 63)\r\n          expr = module.binary(BinaryOp.XorI64,\r\n            module.binary(BinaryOp.AddI64,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(BinaryOp.ShrI64,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  module.i64(63)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, NativeType.I64)\r\n            ),\r\n            module.local_get(tempLocalIndex2, NativeType.I64)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\r\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\r\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.GtI64\r\n            : BinaryOp.GtI32;\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.GtU64\r\n            : BinaryOp.GtU32;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          return module.binary(BinaryOp.MaxF32, arg0, arg1);\r\n        }\r\n        case TypeKind.F64: {\r\n          return module.binary(BinaryOp.MaxF64, arg0, arg1);\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let nativeType = type.toNativeType();\r\n      let tempLocal0 = flow.getTempLocal(type);\r\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\r\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\r\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\r\n      flow.freeTempLocal(tempLocal0);\r\n      return module.select(\r\n        module.local_tee(tempLocal0.index, arg0),\r\n        module.local_tee(tempLocal1.index, arg1),\r\n        module.binary(op,\r\n          module.local_get(tempLocal0.index, nativeType),\r\n          module.local_get(tempLocal1.index, nativeType)\r\n        )\r\n      );\r\n    }\r\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\r\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\r\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.LtI64\r\n            : BinaryOp.LtI32;\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.LtU64\r\n            : BinaryOp.LtU32;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          return module.binary(BinaryOp.MinF32, arg0, arg1);\r\n        }\r\n        case TypeKind.F64: {\r\n          return module.binary(BinaryOp.MinF64, arg0, arg1);\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let nativeType = type.toNativeType();\r\n      let tempLocal0 = flow.getTempLocal(type);\r\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\r\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\r\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\r\n      flow.freeTempLocal(tempLocal0);\r\n      return module.select(\r\n        module.local_tee(tempLocal0.index, arg0),\r\n        module.local_tee(tempLocal1.index, arg1),\r\n        module.binary(op,\r\n          module.local_get(tempLocal0.index, nativeType),\r\n          module.local_get(tempLocal1.index, nativeType)\r\n        )\r\n      );\r\n    }\r\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\r\n    case BuiltinSymbols.floor: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: return arg0; // considered rounded\r\n        case TypeKind.F32: {\r\n          op = prototype.internalName == BuiltinSymbols.ceil\r\n            ? UnaryOp.CeilF32\r\n            : UnaryOp.FloorF32;\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          op = prototype.internalName == BuiltinSymbols.ceil\r\n            ? UnaryOp.CeilF64\r\n            : UnaryOp.FloorF64;\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        // TODO: does an integer version make sense?\r\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\r\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.currentType = type;\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          let arg0 = compiler.compileExpression(operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            Constraints.CONV_IMPLICIT\r\n          );\r\n          expr = module.unary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = type;\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.currentType = type;\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n\r\n    // === Memory access ==========================================================================\r\n\r\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        contextualType != Type.auto &&\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let numOperands = operands.length;\r\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (numOperands == 3) {\r\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[2].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.load(\r\n        type.byteSize,\r\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset,\r\n        immAlign\r\n      );\r\n    }\r\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (operands.length == 4) {\r\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[3].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\r\n    }\r\n\r\n    // === Atomics ================================================================================\r\n\r\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      if (!type.is(TypeFlags.INTEGER)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.atomic_load(\r\n        type.byteSize,\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(\r\n            operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\r\n    }\r\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\r\n    case BuiltinSymbols.atomic_sub:\r\n    case BuiltinSymbols.atomic_and:\r\n    case BuiltinSymbols.atomic_or:\r\n    case BuiltinSymbols.atomic_xor:\r\n    case BuiltinSymbols.atomic_xchg: {\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.unreachable();\r\n      }\r\n      let op: AtomicRMWOp;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\r\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\r\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\r\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\r\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\r\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.atomic_rmw(\r\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      let arg2 = compiler.compileExpression(operands[2],\r\n        inType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        arg2 = compiler.convertExpression(arg2,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[2]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.atomic_cmpxchg(\r\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = compiler.compileExpression(operands[1], type,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg2 = compiler.compileExpression(operands[2],\r\n        Type.i64,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      compiler.currentType = Type.i32;\r\n      return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\r\n    }\r\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32): i32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = compiler.compileExpression(operands[1],\r\n        Type.i32,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      compiler.currentType = Type.i32;\r\n      return module.atomic_notify(arg0, arg1);\r\n    }\r\n\r\n    // === Control flow ===========================================================================\r\n\r\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.auto);\r\n      let type = compiler.currentType;\r\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpression(operands[2], Type.bool),\r\n        compiler.currentType // ^\r\n      );\r\n      compiler.currentType = type;\r\n      return module.select(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      checkArgsRequired(operands, 0, reportNode, compiler);\r\n      return module.unreachable();\r\n    }\r\n\r\n    // === Memory =================================================================================\r\n\r\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      return module.host(HostOp.MemorySize);\r\n    }\r\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      return module.host(HostOp.MemoryGrow, null, [\r\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\r\n      ]);\r\n    }\r\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.unreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.void;\r\n      return module.memory_copy(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.unreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.void;\r\n      return module.memory_fill(arg0, arg1, arg2);\r\n    }\r\n\r\n    // === Helpers ================================================================================\r\n\r\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let toType = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], toType);\r\n      let fromType = compiler.currentType;\r\n      compiler.currentType = toType;\r\n      if (fromType.size != toType.size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return arg0;\r\n    }\r\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) {\r\n        if (typeArguments) {\r\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\r\n          compiler.currentType = typeArguments[0].nonNullableType;\r\n        }\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // if the assertion can be proven statically, omit it\r\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\r\n        switch (getExpressionType(arg0)) {\r\n          case NativeType.I32: {\r\n            if (getConstValueI32(arg0) != 0) {\r\n              if (contextualType == Type.void) {\r\n                compiler.currentType = Type.void;\r\n                return module.nop();\r\n              }\r\n              return arg0;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\r\n              if (contextualType == Type.void) {\r\n                compiler.currentType = Type.void;\r\n                return module.nop();\r\n              }\r\n              return arg0;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            if (getConstValueF32(arg0) != 0) {\r\n              if (contextualType == Type.void) {\r\n                compiler.currentType = Type.void;\r\n                return module.nop();\r\n              }\r\n              return arg0;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            if (getConstValueF64(arg0) != 0) {\r\n              if (contextualType == Type.void) {\r\n                compiler.currentType = Type.void;\r\n                return module.nop();\r\n              }\r\n              return arg0;\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // return ifTrueish if assertions are disabled\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) { // simplify if dropped anyway\r\n          compiler.currentType = Type.void;\r\n          return module.nop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      // otherwise call abort if the assertion is false-ish\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n      compiler.currentType = type.nonNullableType;\r\n      let expr: ExpressionRef;\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        compiler.currentType = Type.void;\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI32, arg0),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI64, arg0),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            expr = module.if(\r\n              module.unary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.f32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.f64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.typeArgumentsRange\r\n            );\r\n            expr = abort;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        compiler.currentType = type.nonNullableType;\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFlow;\r\n            let tempLocal = flow.getAndFreeTempLocal(type);\r\n            flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED); // arg0 is wrapped\r\n            expr = module.if(\r\n              module.local_tee(tempLocal.index, arg0),\r\n              module.local_get(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64);\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI64,\r\n                module.local_tee(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType);\r\n            expr = module.if(\r\n              module.unary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.local_tee(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32);\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF32,\r\n                module.local_tee(tempLocal.index, arg0),\r\n                module.f32(0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64);\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF64,\r\n                module.local_tee(tempLocal.index, arg0),\r\n                module.f64(0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.typeArgumentsRange\r\n            );\r\n            expr = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let flow = compiler.currentFlow;\r\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      // eliminate unnecessary tees by preferring contextualType(=void):\r\n      let expr = compiler.compileExpression(operands[0], contextualType);\r\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.call_direct: directize = true;\r\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\r\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\r\n      let arg0Type = compiler.currentType;\r\n      if (!(\r\n        arg0Type == Type.u32 ||                                      // either plain index\r\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\r\n      )) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let parameterTypes = new Array<Type>(numOperands);\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\r\n        let operandType = compiler.currentType;\r\n        parameterTypes[i] = operandType;\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      if (directize) {\r\n        // if the index expression is precomputable to a constant value, emit a direct call\r\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\r\n          assert(getExpressionType(arg0) == NativeType.I32);\r\n          let index = getConstValueI32(arg0);\r\n          let functionTable = compiler.functionTable;\r\n          if (index >= 0 && index < functionTable.length) {\r\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.call_indirect(arg0, operandExprs, typeName);\r\n    }\r\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\r\n      ) return module.unreachable();\r\n      let classInstance = typeArguments![0].classReference;\r\n      if (!classInstance) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = classInstance.type;\r\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\r\n    }\r\n\r\n    // === User-defined diagnostics ===============================================================\r\n\r\n    case BuiltinSymbols.ERROR: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.error(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.WARNING: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.warning(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.nop();\r\n    }\r\n    case BuiltinSymbols.INFO: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.info(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.nop();\r\n    }\r\n\r\n    // === Portable type conversions ==============================================================\r\n\r\n    case BuiltinSymbols.i8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i8;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i16;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.isize: {\r\n      let isizeType = compiler.options.isizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = isizeType;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u8;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u16;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.usize: {\r\n      let usizeType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = usizeType;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.bool: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.f32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.f64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\r\n    }\r\n\r\n    // === SIMD ===================================================================================\r\n\r\n    case BuiltinSymbols.v128: // alias for now\r\n    case BuiltinSymbols.i8x16: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 16, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 16; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI8(getConstValueI32(expr), bytes, i);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i16x8: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 8, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 8; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI16(getConstValueI32(expr), bytes, i << 1);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI32(getConstValueI32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I64);\r\n          let off = i << 3;\r\n          writeI32(getConstValueI64Low(expr), bytes, off);\r\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.f32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F32);\r\n          writeF32(getConstValueF32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.f64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F64);\r\n          writeF64(getConstValueF64(expr), bytes, i << 3);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? UnaryOp.SplatVecI64x2\r\n            : UnaryOp.SplatVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\r\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = type;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDExtractOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\r\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\r\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\r\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDExtractOp.ExtractLaneVecI64x2\r\n            : SIMDExtractOp.ExtractLaneVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = type;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = type;\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return module.simd_extract(op, arg0, idx);\r\n    }\r\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDReplaceOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\r\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_replace(op, arg0, idx, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let laneWidth = type.byteSize;\r\n      let laneCount = 16 / laneWidth;\r\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\r\n      if (\r\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.F32:\r\n        case TypeKind.F64: break;\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let mask = new Uint8Array(16);\r\n      let maxIdx = (laneCount << 1) - 1;\r\n      for (let i = 0; i < laneCount; ++i) {\r\n        let operand = operands[2 + i];\r\n        let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\r\n        if (getExpressionId(argN) != ExpressionId.Const) {\r\n          compiler.error(\r\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n            operand.range\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n        assert(getExpressionType(argN) == NativeType.I32);\r\n        let idx = getConstValueI32(argN);\r\n        if (idx < 0 || idx > maxIdx) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n        switch (laneWidth) {\r\n          case 1: {\r\n            writeI8(idx, mask, i);\r\n            break;\r\n          }\r\n          case 2: {\r\n            let off8 = i << 1;\r\n            let idx8 = idx << 1;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            break;\r\n          }\r\n          case 4: {\r\n            let off8 = i << 2;\r\n            let idx8 = idx << 2;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            break;\r\n          }\r\n          case 8: {\r\n            let off8 = i << 3;\r\n            let idx8 = idx << 3;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            writeI8(idx8 + 4, mask, off8 + 4);\r\n            writeI8(idx8 + 5, mask, off8 + 5);\r\n            writeI8(idx8 + 6, mask, off8 + 6);\r\n            writeI8(idx8 + 7, mask, off8 + 7);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_shuffle(arg0, arg1, mask);\r\n    }\r\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\r\n    case BuiltinSymbols.v128_sub:\r\n    case BuiltinSymbols.v128_mul:\r\n    case BuiltinSymbols.v128_div:\r\n    case BuiltinSymbols.v128_add_saturate:\r\n    case BuiltinSymbols.v128_sub_saturate:\r\n    case BuiltinSymbols.v128_min:\r\n    case BuiltinSymbols.v128_max:\r\n    case BuiltinSymbols.v128_eq:\r\n    case BuiltinSymbols.v128_ne:\r\n    case BuiltinSymbols.v128_lt:\r\n    case BuiltinSymbols.v128_le:\r\n    case BuiltinSymbols.v128_gt:\r\n    case BuiltinSymbols.v128_ge: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: BinaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_add: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? BinaryOp.AddVecI64x2\r\n                : BinaryOp.AddVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sub: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? BinaryOp.SubVecI64x2\r\n                : BinaryOp.SubVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_mul: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_div: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_add_saturate: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sub_saturate: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_min: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_max: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_eq: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_ne: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_lt: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.LtSVecI32x4\r\n                  : BinaryOp.LtUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_le: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.LeSVecI32x4\r\n                  : BinaryOp.LeUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_gt: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.GtSVecI32x4\r\n                  : BinaryOp.GtUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_ge: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.GeSVecI32x4\r\n                  : BinaryOp.GeUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\r\n    case BuiltinSymbols.v128_abs:\r\n    case BuiltinSymbols.v128_sqrt:\r\n    case BuiltinSymbols.v128_convert:\r\n    case BuiltinSymbols.v128_trunc: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_neg: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.NegVecI64x2\r\n                : UnaryOp.NegVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_abs: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sqrt: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_convert: {\r\n          switch (type.kind) {\r\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\r\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\r\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\r\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_trunc: {\r\n          switch (type.kind) {\r\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\r\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\r\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\r\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\r\n    case BuiltinSymbols.v128_shr: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDShiftOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_shl: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShlVecI64x2\r\n                : SIMDShiftOp.ShlVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_shr: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\r\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\r\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\r\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\r\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\r\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\r\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrSVecI64x2\r\n                : SIMDShiftOp.ShrSVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrUVecI64x2\r\n                : SIMDShiftOp.ShrUVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_shift(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\r\n    case BuiltinSymbols.v128_or:\r\n    case BuiltinSymbols.v128_xor: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: BinaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\r\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\r\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.unary(UnaryOp.NotVec128, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.simd_bitselect(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\r\n    case BuiltinSymbols.v128_all_true: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.v128_any_true: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.AnyTrueVecI64x2\r\n                : UnaryOp.AnyTrueVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_all_true: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.AllTrueVecI64x2\r\n                : UnaryOp.AllTrueVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.bool;\r\n      return module.unary(op, arg0);\r\n    }\r\n\r\n    // === Internal runtime =======================================================================\r\n\r\n    case BuiltinSymbols.idof: {\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.u32;\r\n      if (!type || checkArgsOptional(operands, 0, 0, reportNode, compiler)) return module.unreachable();\r\n\r\n      if (type.is(TypeFlags.REFERENCE) && type.signatureReference !== null) {\r\n        return module.i32(type.signatureReference.id);\r\n      }\r\n\r\n      let classReference = type.classReference;\r\n      if (!classReference || classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return module.i32(classReference.id);\r\n    }\r\n    case BuiltinSymbols.visit_globals: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\r\n      ) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\r\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\r\n      compiler.currentType = Type.void;\r\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\r\n    }\r\n    case BuiltinSymbols.visit_members: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\r\n      ) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\r\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\r\n      compiler.currentType = Type.void;\r\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\r\n    }\r\n  }\r\n\r\n  // try to defer inline asm to a concrete built-in\r\n  {\r\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\r\n    if (expr) {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      return expr;\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Cannot_find_name_0,\r\n    reportNode.expression.range, prototype.internalName\r\n  );\r\n  return module.unreachable();\r\n}\r\n\r\n/** Tries to defer an inline-assembler-like call to a built-in function. */\r\nfunction tryDeferASM(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  /* tslint:disable:max-line-length */\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  if (compiler.options.hasFeature(Feature.THREADS)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\r\n    }\r\n  }\r\n  if (compiler.options.hasFeature(Feature.SIMD)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\r\n\r\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\r\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\r\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\r\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\r\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    }\r\n  }\r\n  /* tslint:enable:max-line-length */\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  assert(compiler.program.elementsByName.has(name));\r\n  var prototype = compiler.program.elementsByName.get(name)!;\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(\r\n    compiler,\r\n    <FunctionPrototype>prototype,\r\n    [ typeArgument ],\r\n    operands,\r\n    contextualType,\r\n    reportNode,\r\n    /* isAsm */ true\r\n  );\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringInstance = compiler.program.stringInstance;\r\n  if (!stringInstance) return module.unreachable();\r\n\r\n  var abortInstance = program.abortInstance;\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\r\n\r\n  var messageArg: ExpressionRef;\r\n  if (message !== null) {\r\n    // The message argument works much like an arm of an IF that does not become executed if the\r\n    // assertion succeeds respectively is only being computed if the program actually crashes.\r\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\r\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\r\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\r\n  } else {\r\n    messageArg = stringInstance.type.toNativeZero(module);\r\n  }\r\n\r\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.block(null, [\r\n    module.call(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.i32(reportNode.range.line),\r\n        module.i32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.unreachable()\r\n  ]);\r\n}\r\n\r\n/** Compiles the `visit_globals` function. */\r\nexport function compileVisitGlobals(compiler: Compiler): void {\r\n  var module = compiler.module;\r\n  var exprs = new Array<ExpressionRef>();\r\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n  var visitInstance = assert(compiler.program.visitInstance);\r\n\r\n  compiler.compileFunction(visitInstance);\r\n\r\n  for (let element of compiler.program.elementsByName.values()) {\r\n    if (element.kind != ElementKind.GLOBAL) continue;\r\n    let global = <Global>element;\r\n    let classReference = global.type.classReference;\r\n    if (\r\n      global.is(CommonFlags.COMPILED) &&\r\n      classReference !== null &&\r\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\r\n    ) {\r\n      if (global.is(CommonFlags.INLINED)) {\r\n        let value = global.constantIntegerValue;\r\n        if (i64_low(value) || i64_high(value)) {\r\n          exprs.push(\r\n            module.call(visitInstance.internalName, [\r\n              compiler.options.isWasm64\r\n                ? module.i64(i64_low(value), i64_high(value))\r\n                : module.i32(i64_low(value))\r\n            ], NativeType.None)\r\n          );\r\n        }\r\n      } else {\r\n        exprs.push(\r\n          module.if(\r\n            module.local_tee(1,\r\n              module.global_get(global.internalName, nativeSizeType)\r\n            ),\r\n            module.call(visitInstance.internalName, [\r\n              module.local_get(1, nativeSizeType), // tempRef != null\r\n              module.local_get(0, NativeType.I32) // cookie\r\n            ], NativeType.None)\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\r\n    exprs.length\r\n      ? module.block(null, exprs)\r\n      : module.nop()\r\n  );\r\n}\r\n\r\n/** Compiles the `visit_members` function. */\r\nexport function compileVisitMembers(compiler: Compiler): void {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n  var usizeType = program.options.usizeType;\r\n  var nativeSizeType = usizeType.toNativeType();\r\n  var nativeSizeSize = usizeType.byteSize;\r\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\r\n  var managedClasses = program.managedClasses;\r\n  var visitInstance = assert(program.visitInstance);\r\n  var blocks = new Array<RelooperBlockRef>();\r\n  var relooper = Relooper.create(module);\r\n\r\n  var outer = relooper.addBlockWithSwitch(\r\n    module.nop(),\r\n    module.load(nativeSizeSize, false,\r\n      nativeSizeType == NativeType.I64\r\n        ? module.binary(BinaryOp.SubI64,\r\n            module.local_get(0, nativeSizeType),\r\n            module.i64(8)\r\n          )\r\n        : module.binary(BinaryOp.SubI32,\r\n            module.local_get(0, nativeSizeType),\r\n            module.i32(8) // rtId is at -8\r\n          ),\r\n      NativeType.I32,\r\n      0\r\n    )\r\n  );\r\n\r\n  var lastId = 0;\r\n  for (let [id, instance] of managedClasses) {\r\n    assert(instance.type.isManaged);\r\n    assert(id == lastId++);\r\n\r\n    let visitImpl: Element | null;\r\n    let code = new Array<ExpressionRef>();\r\n\r\n    // if a library element, check if it implements a custom traversal function\r\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\r\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\r\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\r\n        code.push(\r\n          module.unreachable()\r\n        );\r\n      } else {\r\n        let visitSig = visitFunc.signature;\r\n        assert(\r\n          visitSig.parameterTypes.length == 1 &&\r\n          visitSig.parameterTypes[0] == Type.u32 &&\r\n          visitSig.returnType == Type.void &&\r\n          visitSig.thisType == instance.type\r\n        );\r\n        code.push(\r\n          module.call(visitFunc.internalName, [\r\n            module.local_get(0, nativeSizeType), // ref\r\n            module.local_get(1, NativeType.I32)  // cookie\r\n          ], NativeType.None)\r\n        );\r\n      }\r\n\r\n    // otherwise generate traversal logic for own fields\r\n    } else {\r\n      let members = instance.members;\r\n      if (members) {\r\n        for (let member of members.values()) {\r\n          if (member.kind == ElementKind.FIELD) {\r\n            if ((<Field>member).parent === instance) {\r\n              let fieldType = (<Field>member).type;\r\n              if (fieldType.isManaged) {\r\n                let fieldOffset = (<Field>member).memoryOffset;\r\n                assert(fieldOffset >= 0);\r\n                code.push(\r\n                  // if ($2 = value) FIELDCLASS~traverse($2)\r\n                  module.if(\r\n                    module.local_tee(2,\r\n                      module.load(nativeSizeSize, false,\r\n                        module.local_get(0, nativeSizeType),\r\n                        nativeSizeType, fieldOffset\r\n                      )\r\n                    ),\r\n                    module.call(visitInstance.internalName, [\r\n                      module.local_get(2, nativeSizeType), // ref\r\n                      module.local_get(1, NativeType.I32)  // cookie\r\n                    ], NativeType.None)\r\n                  )\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (!instance.base) code.push(module.return());\r\n    let block = relooper.addBlock(\r\n      flatten(module, code, NativeType.None)\r\n    );\r\n    relooper.addBranchForSwitch(outer, block, [ id ]);\r\n    blocks.push(block);\r\n  }\r\n  for (let [id, instance] of managedClasses) {\r\n    let base = instance.base;\r\n    if (base) {\r\n      relooper.addBranch(blocks[id], blocks[base.id]);\r\n    }\r\n  }\r\n  blocks.push(\r\n    relooper.addBlock(\r\n      module.unreachable()\r\n    )\r\n  );\r\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\r\n  compiler.compileFunction(visitInstance);\r\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\r\n}\r\n\r\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\r\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\r\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\r\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\r\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\r\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\r\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\r\n}\r\n\r\n/** Compiles runtime type information for use by stdlib. */\r\nexport function compileRTTI(compiler: Compiler): void {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n  var managedClasses = program.managedClasses;\r\n  var count = managedClasses.size;\r\n  var size = 4 + 8 * count;\r\n  var data = new Uint8Array(size);\r\n  writeI32(count, data, 0);\r\n  var off = 4;\r\n  var abvInstance = program.arrayBufferViewInstance;\r\n  var abvPrototype = abvInstance.prototype;\r\n  var arrayPrototype = program.arrayPrototype;\r\n  var setPrototype = program.setPrototype;\r\n  var mapPrototype = program.mapPrototype;\r\n  var lastId = 0;\r\n  for (let [id, instance] of managedClasses) {\r\n    assert(id == lastId++);\r\n    let flags: TypeinfoFlags = 0;\r\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\r\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\r\n      let valueType = instance.getArrayValueType();\r\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\r\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\r\n    } else if (instance.extends(setPrototype)) {\r\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\r\n      assert(typeArguments.length == 1);\r\n      flags |= TypeinfoFlags.SET;\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\r\n    } else if (instance.extends(mapPrototype)) {\r\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\r\n      assert(typeArguments.length == 2);\r\n      flags |= TypeinfoFlags.MAP;\r\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\r\n    }\r\n    writeI32(flags, data, off); off += 4;\r\n    instance.rttiFlags = flags;\r\n    let base = instance.base;\r\n    writeI32(base ? base.id : 0, data, off); off += 4;\r\n  }\r\n  assert(off == size);\r\n  var usizeType = program.options.usizeType;\r\n  var segment = compiler.addMemorySegment(data);\r\n  if (usizeType.size == 8) {\r\n    let offset = segment.offset;\r\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\r\n  } else {\r\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\r\n  }\r\n}\r\n\r\n// Helpers\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments !== null && typeArguments.length) {\r\n      if (typeArguments.length > 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n        );\r\n        return null;\r\n      }\r\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\r\n    } else {\r\n      compiler.compileExpression(operands[0], Type.auto);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a compile-time constant immediate offset argument.*/\r\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Checks a call with a single required type argument. Returns `1` on error. */\r\nfunction checkTypeRequired(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n  } else {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", \"0\"\r\n    );\r\n  }\r\n  return 1;\r\n}\r\n\r\n/** Checks a call with a single optional type argument. Returns `1` on error. */\r\nfunction checkTypeOptional(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that is not generic. Returns `1` on error. */\r\nfunction checkTypeAbsent(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  prototype: FunctionPrototype\r\n): i32 {\r\n  if (typeArguments) {\r\n    prototype.program.error(\r\n      DiagnosticCode.Type_0_is_not_generic,\r\n      reportNode.typeArgumentsRange, prototype.internalName\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\r\nfunction checkArgsRequired(\r\n  operands: Expression[],\r\n  expected: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  if (operands.length != expected) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expected.toString(), operands.length.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\r\nfunction checkArgsOptional(\r\n  operands: Expression[],\r\n  expectedMinimum: i32,\r\n  expectedMaximum: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  var numOperands = operands.length;\r\n  if (numOperands < expectedMinimum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  } else if (numOperands > expectedMaximum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getLocalGetIndex,\r\n  getLocalSetIndex,\r\n  getLocalSetValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        this.push(\"$\");\r\n        this.push(getLocalGetIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.LocalSet: {\r\n        this.push(\"$\");\r\n        this.push(getLocalSetIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getLocalSetValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GlobalGet:\r\n      case ExpressionId.GlobalSet: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.MemorySize: {\r\n            this.push(\"memory.size()\");\r\n            return;\r\n          }\r\n          case HostOp.MemoryGrow: {\r\n            this.push(\"memory.grow(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicNotify:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.V128: return \"v128\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\n import {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property,\r\n  PropertyPrototype,\r\n  File\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  SourceKind\r\n } from \"./ast\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Already seen elements. */\r\n  seen: Map<Element,string> = new Map();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all elements and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let file of this.program.filesByName.values()) {\r\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\r\n    }\r\n  }\r\n\r\n  /** Visits all exported elements of a file. */\r\n  visitFile(file: File): void {\r\n    var members = file.exports;\r\n    if (members) {\r\n      for (let [name, member] of members) this.visitElement(name, member);\r\n    }\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar) {\r\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\r\n    }\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(name: string, element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    var seen = this.seen;\r\n    if (seen.has(element)) {\r\n      this.visitAlias(name, element, <string>seen.get(element));\r\n      return;\r\n    }\r\n    seen.set(element, name);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(name, <ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterInstance;\r\n        if (getter) this.visitFunction(name, getter);\r\n        let setter = prop.setterInstance;\r\n        if (setter) this.visitFunction(name, setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\r\n        break;\r\n      }\r\n      case ElementKind.TYPEDEFINITION: break;\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(name: string, element: ClassPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\r\n    // var instances = element.instances;\r\n    // if (instances) {\r\n    //   for (let instance of instances.values()) {\r\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\r\n    //   }\r\n    // }\r\n    assert(false);\r\n  }\r\n\r\n  abstract visitGlobal(name: string, element: Global): void;\r\n  abstract visitEnum(name: string, element: Enum): void;\r\n  abstract visitFunction(name: string, element: Function): void;\r\n  abstract visitClass(name: string, element: Class): void;\r\n  abstract visitInterface(name: string, element: Interface): void;\r\n  abstract visitField(name: string, element: Field): void;\r\n  abstract visitNamespace(name: string, element: Element): void;\r\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(name: string, element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(name);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(name: string, element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(name: string, element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(name);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(name: string, element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(name: string, element: Interface): void {\r\n    this.visitClass(name, element);\r\n  }\r\n\r\n  visitField(name: string, element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(name: string, element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitAlias(name: string, element: Element, originalName: string): void {\r\n    // TODO\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n  private unknown: Set<string> = new Set();\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(name: string, element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"export const \");\r\n      else sb.push(\"export var \");\r\n    }\r\n    sb.push(name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(name, element);\r\n  }\r\n\r\n  visitEnum(name: string, element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"export enum \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(name, element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(name: string, element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(\"get \");\r\n      sb.push(name); // 'get:funcName' internally\r\n      sb.push(\"(): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\r\n      sb.push(name);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(name, element);\r\n  }\r\n\r\n  visitClass(name: string, element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"export interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"export class \");\r\n    }\r\n    sb.push(name);\r\n    // var base = element.base;\r\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n    //   sb.push(\" extends \");\r\n    //   sb.push(base.name); // TODO: fqn\r\n    // }\r\n    sb.push(\" {\\n\");\r\n    var staticMembers = element.prototype.members;\r\n    if (staticMembers) {\r\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\r\n    }\r\n    var instanceMembers = element.members;\r\n    if (instanceMembers) {\r\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(name: string, element: Interface): void {\r\n    this.visitClass(name, element);\r\n  }\r\n\r\n  visitField(name: string, element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(name: string, element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"export namespace \");\r\n      sb.push(name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitAlias(name: string, element: Element, originalName: string): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(\"export const \");\r\n    sb.push(name);\r\n    sb.push(\" = typeof \");\r\n    sb.push(originalName);\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"any\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          let instances = (<FunctionPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instances = (<ClassPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling,\r\n  isIllegalVariableIdentifier\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  TypeNode,\r\n  NamedTypeNode,\r\n  FunctionTypeNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  ClassExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  IndexSignatureDeclaration,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath,\r\n  nodeIsCallable,\r\n  nodeIsGenericCallable\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n  /** Current file being parsed. */\r\n  currentSource: Source;\r\n  /** Dependency map **/\r\n  dependees: Map<string, Source> = new Map();\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.USER_ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX)\r\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n            ? SourceKind.LIBRARY_ENTRY\r\n            : SourceKind.LIBRARY\r\n          : SourceKind.USER\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n    this.currentSource = source;\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn, null);\r\n      if (statement) statements.push(statement);\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: NamespaceDeclaration | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [decorator];\r\n      else decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    var defaultStart: i32 = 0;\r\n    var defaultEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        defaultStart = tn.tokenPos;\r\n        defaultEnd = tn.pos;\r\n      }\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      } else {\r\n        if (startPos < 0) startPos = tn.tokenPos;\r\n        declareStart = startPos;\r\n        declareEnd = tn.pos;\r\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n      }\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        }\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\r\n            if (declareEnd) {\r\n              this.error(\r\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\r\n                tn.range(declareStart, declareEnd)\r\n              );\r\n            }\r\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\r\n            defaultStart = defaultEnd = 0; // consume\r\n          } else {\r\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\r\n          }\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n\r\n    // check if this an `export default` declaration\r\n    if (defaultEnd && statement !== null) {\r\n      switch (statement.kind) {\r\n        case NodeKind.ENUMDECLARATION:\r\n        case NodeKind.FUNCTIONDECLARATION:\r\n        case NodeKind.CLASSDECLARATION:\r\n        case NodeKind.INTERFACEDECLARATION:\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\r\n        }\r\n        default: {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(defaultStart, defaultEnd), \"default\"\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Obtains the dependee for a given import */\r\n  getDependee(dependent: string): string | null {\r\n    var source = this.dependees.get(dependent);\r\n    if (source) {\r\n      return source.internalPath;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    this.dependees.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): TypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: TypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseFunctionType(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n      let current = first;\r\n      let parameters: NamedTypeNode[] | null = null;\r\n      let nullable = false;\r\n\r\n      // Identifier ('.' Identifier)+\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n          current.next = next;\r\n          current = next;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range(tn.pos)\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\r\n          else parameters.push(<NamedTypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      while (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createNamedType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function type, as used in type declarations. */\r\n  tryParseFunctionType(\r\n    tn: Tokenizer\r\n  ): FunctionTypeNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: NamedTypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.NAMEDTYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <NamedTypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (isSignature) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: TypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createFunctionType(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (isIllegalVariableIdentifier(identifier.text)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        identifier.range\r\n      );\r\n    }\r\n    var flags = parentFlags;\r\n    if (tn.skip(Token.EXCLAMATION)) {\r\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n    }\r\n\r\n    var type: TypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    var range = Range.join(identifier.range, tn.range());\r\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\r\n      this.error(\r\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n        range);\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      range\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    var seenOptional = false;\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      if (typeParameter.defaultType !== null) {\r\n        seenOptional = true;\r\n      } else if (seenOptional) {\r\n        this.error(\r\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\r\n          typeParameter.range\r\n        );\r\n        typeParameter.defaultType = null;\r\n      }\r\n      if (!typeParameters) typeParameters = [ typeParameter ];\r\n      else typeParameters.push(typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (!(typeParameters && typeParameters.length)) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)? ('=' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: NamedTypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.NAMEDTYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <NamedTypeNode>t;\r\n      }\r\n      let defaultType: NamedTypeNode | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.NAMEDTYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        defaultType = <NamedTypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        defaultType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: NamedTypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: TypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\r\n          this.parseParametersThis = <NamedTypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: TypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: TypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createFunctionType(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      ArrowKind.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var arrowKind = ArrowKind.NONE;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    arrowKind: ArrowKind,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: TypeNode | null = null;\r\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n    }\r\n\r\n    if (arrowKind) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createFunctionType(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (arrowKind) {\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        body = this.parseBlockStatement(tn, false);\r\n      } else {\r\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\r\n      }\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      CommonFlags.NONE,\r\n      arrowKind,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    var extendsType: NamedTypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.NAMEDTYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <NamedTypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: NamedTypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\r\n          else implementsTypes.push(<NamedTypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n        else {\r\n          this.skipStatement(tn);\r\n          if (tn.skip(Token.ENDOFFILE)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    declaration.range.end = tn.pos;\r\n    return declaration;\r\n  }\r\n\r\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\r\n\r\n    // at 'class': Identifier? '{' ... '}'\r\n\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n\r\n    if (tn.skipIdentifier()) {\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    } else {\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration = Node.createClassDeclaration(\r\n      name,\r\n      [],\r\n      null,\r\n      null,\r\n      members,\r\n      null,\r\n      CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n        else {\r\n          this.skipStatement(tn);\r\n          if (tn.skip(Token.ENDOFFILE)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    declaration.range.end = tn.pos;\r\n    return Node.createClassExpression(declaration);\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\r\n\r\n    var decorators: DecoratorNode[] | null = null;\r\n    if (tn.skip(Token.AT)) {\r\n      do {\r\n        let decorator = this.parseDecorator(tn);\r\n        if (!decorator) break;\r\n        if (!decorators) decorators = [<DecoratorNode>decorator];\r\n        else decorators.push(<DecoratorNode>decorator);\r\n      } while (tn.skip(Token.AT));\r\n      if (decorators && isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n        );\r\n      }\r\n    }\r\n\r\n    // inherit ambient status\r\n    var flags = parent.flags & CommonFlags.AMBIENT;\r\n\r\n    // implemented methods are virtual\r\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\r\n\r\n    var accessStart = 0;\r\n    var accessEnd = 0;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"public\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PUBLIC;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"private\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PRIVATE;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"protected\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PROTECTED;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    }\r\n\r\n    var staticStart = 0;\r\n    var staticEnd = 0;\r\n    var abstractStart = 0;\r\n    var abstractEnd = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"static\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      flags |= CommonFlags.INSTANCE;\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        if (isInterface) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(), \"abstract\"\r\n          );\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.peek() == Token.READONLY) {\r\n      let state = tn.mark();\r\n      tn.next();\r\n      if (tn.peek() != Token.COLON) { // modifier\r\n        tn.discard(state);\r\n        flags |= CommonFlags.READONLY;\r\n        readonlyStart = tn.tokenPos;\r\n        readonlyEnd = tn.pos;\r\n      } else { // identifier\r\n        tn.reset(state);\r\n      }\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (!isInterface) {\r\n      if (tn.skip(Token.GET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.GET;\r\n          isGetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.SET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.SET;\r\n          isSetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n        flags |= CommonFlags.CONSTRUCTOR;\r\n        isConstructor = true;\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    var name: IdentifierExpression;\r\n    if (isConstructor) {\r\n      name = Node.createConstructorExpression(tn.range());\r\n    } else {\r\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\r\n        // TODO: also handle symbols, which might have some of these modifiers\r\n        if (flags & CommonFlags.PUBLIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"public\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PROTECTED) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PRIVATE) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\r\n        if (!retIndex) return null;\r\n        tn.skip(Token.SEMICOLON);\r\n        return retIndex;\r\n      }\r\n      if (!tn.skipIdentifier()) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: TypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createFunctionType(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\r\n            tn.range(), name.text\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: TypeNode | null = null;\r\n      if (tn.skip(Token.QUESTION)) {\r\n        this.error(\r\n          DiagnosticCode.Optional_properties_are_not_supported,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      if (tn.skip(Token.EXCLAMATION)) {\r\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let range = tn.range(startPos, tn.pos);\r\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\r\n        this.error(\r\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n          range\r\n        );\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        range\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\r\n\r\n    // at: '[': 'key' ':' Type ']' ':' Type\r\n\r\n    if (decorators && decorators.length) {\r\n      this.error(\r\n        DiagnosticCode.Decorators_are_not_valid_here,\r\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n      ); // recoverable\r\n    }\r\n\r\n    var start = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let id = tn.readIdentifier();\r\n      if (id == \"key\") {\r\n        if (tn.skip(Token.COLON)) {\r\n          let keyType = this.parseType(tn);\r\n          if (!keyType) return null;\r\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              tn.range()\r\n            );\r\n            return null;\r\n          }\r\n          if (tn.skip(Token.CLOSEBRACKET)) {\r\n            if (tn.skip(Token.COLON)) {\r\n              let valueType = this.parseType(tn);\r\n              if (!valueType) return null;\r\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \":\"\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \":\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"key\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let declaration = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, declaration);\r\n          if (member) members.push(member);\r\n          else {\r\n            this.skipStatement(tn);\r\n            if (tn.skip(Token.ENDOFFILE)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        declaration.range.end = tn.pos;\r\n        tn.skip(Token.SEMICOLON);\r\n        return declaration;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    isDeclare: bool\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseExportMember(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.dependees.set(internalPath, this.currentSource);\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.dependees.set(internalPath, this.currentSource);\r\n            this.backlog.push(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportDefaultAlias(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    defaultStart: i32,\r\n    defaultEnd: i32\r\n  ): ExportStatement {\r\n\r\n    // at 'export' 'default': [Known-To-Be-]Identifier\r\n\r\n    var name = tn.readIdentifier();\r\n    var range = tn.range();\r\n    var ret = Node.createExportStatement([\r\n      Node.createExportMember(\r\n        Node.createIdentifierExpression(name, range),\r\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\r\n        range\r\n      )\r\n    ], null, false, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\r\n      let name = tn.readIdentifier();\r\n      let range = tn.range();\r\n      members = [\r\n        Node.createImportDeclaration(\r\n          Node.createIdentifierExpression(\"default\", range),\r\n          Node.createIdentifierExpression(name, range),\r\n          range\r\n        )\r\n      ];\r\n      if (tn.skip(Token.COMMA)) {\r\n        // TODO: default + star, default + members\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    } else { // import \"file\"\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.dependees.set(internalPath, this.currentSource);\r\n          this.backlog.push(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        if (tn.token == Token.ENDOFFILE) return null;\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.NONE) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var expr: Expression | null = null;\r\n    switch (token) {\r\n\r\n      case Token.NULL: return Node.createNullExpression(tn.range());\r\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\r\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            ArrowKind.ARROW_PARENTHESIZED\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (\r\n                    !tn.skip(Token.COLON) &&\r\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\r\n                  ) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // optional parameter or parenthesized\r\n                case Token.QUESTION: {\r\n                  if (\r\n                    tn.skip(Token.COLON) ||   // optional parameter with type\r\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\r\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\r\n                  ) {\r\n                    tn.reset(state);\r\n                    return this.parseFunctionExpression(tn);\r\n                  }\r\n                  again = false; // parenthesized\r\n                  break;\r\n                  }\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // ObjectLiteralExpression\r\n      case Token.OPENBRACE: {\r\n        let startPos = tn.tokenPos;\r\n        let names = new Array<IdentifierExpression>();\r\n        let values = new Array<Expression>();\r\n        let name: IdentifierExpression;\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          if (!tn.skipIdentifier()) {\r\n            if (!tn.skip(Token.STRINGLITERAL)) {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                tn.range(),\r\n              );\r\n              return null;\r\n            }\r\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\r\n            name.isQuoted = true;\r\n          } else {\r\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          }\r\n          names.push(name);\r\n          if (tn.skip(Token.COLON)) {\r\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!value) return null;\r\n            values.push(value);\r\n          } else if (!name.isQuoted) {\r\n            values.push(name);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACE)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        let identifierText = tn.readIdentifier();\r\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\r\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\r\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [\r\n              Node.createParameter(\r\n                identifier,\r\n                Node.createOmittedType(identifier.range.atEnd),\r\n                null,\r\n                ParameterKind.DEFAULT,\r\n                identifier.range\r\n              )\r\n            ],\r\n            ArrowKind.ARROW_SINGLE,\r\n            startPos\r\n          );\r\n        }\r\n        return identifier;\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\r\n          this.error(\r\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\r\n            tn.range()\r\n          );\r\n        }\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      case Token.CLASS: {\r\n        return this.parseClassExpression(tn);\r\n      }\r\n      default: {\r\n        if (token == Token.ENDOFFILE) {\r\n          this.error(\r\n            DiagnosticCode.Unexpected_end_of_text,\r\n            tn.range(startPos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Expression_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): TypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments: TypeNode[] | null = null;\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      if (!typeArguments) typeArguments = [ type ];\r\n      else typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = Precedence.COMMA\r\n  ): Expression | null {\r\n    assert(precedence != Precedence.NONE);\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\r\n\r\n    var startPos = expr.range.start;\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        case Token.EXCLAMATION: {\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.NONNULL,\r\n            expr,\r\n            null,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\r\n            ? Precedence.COMMA + 1\r\n            : Precedence.COMMA\r\n          );\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (tn.skipIdentifier()) {\r\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            } else {\r\n              next = this.parseExpression(tn,\r\n                isRightAssociative(token)\r\n                  ? nextPrecedence\r\n                  : nextPrecedence + 1\r\n              );\r\n              if (!next) return null;\r\n            }\r\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\r\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\r\n              if (!expr) return null;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            next = this.parseExpression(tn,\r\n              isRightAssociative(token)\r\n                ? nextPrecedence\r\n                : nextPrecedence + 1\r\n            );\r\n            if (!next) return null;\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  private joinPropertyCall(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    expr: Expression,\r\n    call: CallExpression\r\n  ): Expression | null {\r\n    var callee = call.expression;\r\n    switch (callee.kind) {\r\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\r\n        call.expression = Node.createPropertyAccessExpression(\r\n          expr,\r\n          <IdentifierExpression>callee,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.CALL: { // join call target und wrap the original call around it\r\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\r\n        if (!inner) return null;\r\n        call.expression = inner;\r\n        call.range = tn.range(startPos, tn.pos);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          call.range\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return call;\r\n  }\r\n\r\n  private maybeParseCallExpression(\r\n    tn: Tokenizer,\r\n    expr: Expression\r\n  ): Expression {\r\n    if (nodeIsCallable(expr.kind)) {\r\n      let typeArguments: TypeNode[] | null = null;\r\n      while (\r\n        tn.skip(Token.OPENPAREN)\r\n        ||\r\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\r\n      ) {\r\n        let args = this.parseArguments(tn);\r\n        if (!args) break;\r\n        expr = Node.createCallExpression( // is again callable\r\n          expr,\r\n          typeArguments,\r\n          args,\r\n          tn.range(expr.range.start, tn.pos)\r\n        );\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          this.skipBlock(tn);\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipBlock(tn: Tokenizer): void {\r\n    // at '{': ... '}'\r\n    var depth = 1;\r\n    var again = true;\r\n    do {\r\n      switch (tn.next()) {\r\n        case Token.ENDOFFILE: {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          again = false;\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          ++depth;\r\n          break;\r\n        }\r\n        case Token.CLOSEBRACE: {\r\n          --depth;\r\n          if (!depth) again = false;\r\n          break;\r\n        }\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (again);\r\n  }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  NONE,\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET:\r\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\n/// <reference path=\"./node.d.ts\" />\r\n\r\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\r\nimport \"../../../std/portable/index\";\r\nimport \"./float\";\r\nimport \"./i64\";\r\n\r\nimport { Module } from \"../../module\";\r\n\r\nModule.prototype.toText = function(this: Module) {\r\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\r\n  // of unreachable statements not actually emitted by the compiler. Optimizing\r\n  // StackIR removes these again, but may also suppress useless code emitted by\r\n  // the compiler that's then no longer visible in tests. Both not ideal.\r\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\r\n};\r\n\r\nModule.prototype.toAsmjs = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitAsmjs();\r\n};\r\n","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\nglobal.binaryen = binaryen;\r\n\r\nfor (var key in binaryen) {\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\r\n}\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.__memory_allocate = binaryen._malloc;\r\nglobal.__memory_free = binaryen._free;\r\nglobal.__memory_copy = binaryen._memmove;\r\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\r\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nglobalScope.ASC_TARGET = 2; // Target.JS\r\nglobalScope.ASC_NO_ASSERT = false;\r\nglobalScope.ASC_MEMORY_BASE = 0;\r\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\r\nglobalScope.ASC_SHRINK_LEVEL = 0;\r\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\r\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\r\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\r\nglobalScope.ASC_FEATURE_SIMD = false;\r\nglobalScope.ASC_FEATURE_THREADS = false;\r\n\r\nvar F64 = new Float64Array(1);\r\nvar U64 = new Uint32Array(F64.buffer);\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value:  127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value:  32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value:   0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value:     0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value:          0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: false, writable: false },\r\n  \"MAX_VALUE\": { value: true,  writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\r\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\r\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nif (!String.prototype.replaceAll) {\r\n  Object.defineProperty(String.prototype, \"replaceAll\", {\r\n    value: function replaceAll(search, replacment) {\r\n      var res = this.split(search).join(replacment);\r\n      if (!search.length) res = replacment + res + replacment;\r\n      return res;\r\n    }\r\n  });\r\n}\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isNullable\"] = function isNullable(arg) {\r\n  return true;\r\n}\r\n\r\nglobalScope[\"isReference\"] = function isReference(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isFunction\"] = function isFunction(arg) {\r\n  return typeof arg === \"function\";\r\n}\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\r\n  return expr\r\n    && typeof expr === 'object'\r\n    && typeof expr.length === 'number'\r\n    && expr.length >= 0\r\n    && Math.trunc(expr.length) === expr.length;\r\n};\r\n\r\nArray.create = function(capacity) {\r\n  var arr = new Array(capacity);\r\n  arr.length = 0;\r\n  return arr;\r\n};\r\n\r\nglobalScope[\"isDefined\"] = function isDefined(expr) {\r\n  return typeof expr !== \"undefined\";\r\n}\r\n\r\nglobalScope[\"isConstant\"] = function isConstant(expr) {\r\n  return false;\r\n};\r\n\r\nglobalScope[\"unchecked\"] = function unchecked(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nglobalScope[\"JSMath\"] = Math;\r\n\r\nObject.defineProperties(globalScope[\"JSMath\"], {\r\n  sincos_sin: { value: 0.0, writable: true },\r\n  sincos_cos: { value: 0.0, writable: true },\r\n  signbit: {\r\n    value: function signbit(x) {\r\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\r\n    }\r\n  },\r\n  sincos: {\r\n    value: function sincos(x) {\r\n      this.sincos_sin = Math.sin(x);\r\n      this.sincos_cos = Math.cos(x);\r\n    }\r\n  }\r\n});\r\n\r\nglobalScope[\"memory\"] = (() => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n  return {\r\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\r\n      if (!(size >>>= 0)) return 0;\r\n      if (HEAP_OFFSET + size > HEAP.length) {\r\n        var oldHeap = HEAP;\r\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n        HEAP.set(oldHeap);\r\n      }\r\n      var ptr = HEAP_OFFSET;\r\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n      return ptr;\r\n    },\r\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\r\n      HEAP.fill(value, dest, dest + size);\r\n    },\r\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\r\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\r\n      HEAP.copyWithin(dest, src, src + size);\r\n    },\r\n    reset: globalScope[\"__memory_reset\"] || function reset() {\r\n      HEAP = new Uint8Array(0);\r\n      HEAP_OFFSET = 0;\r\n    }\r\n  };\r\n})();\r\n\r\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\r\n  HEAP[(ptr | 0) + (offset | 0)] = value;\r\n};\r\n\r\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\r\n  return HEAP[(ptr | 0) + (offset | 0)];\r\n};\r\n\r\nglobalScope[\"unmanaged\"] = function() {};\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\r\n  /** Bulk memory operations. */\r\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  /** SIMD types and operations. */\r\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\r\n  /** Threading and atomic operations. */\r\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\r\n}\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64,\r\n  /** Portable. */\r\n  JS\r\n}\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\r\n//    3                   2                   1\r\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\r\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\r\n// │                             count                             │\r\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\r\n// │                      Typeinfo#flags [id=0]                    │ id < count\r\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\r\n// │                      Typeinfo#base  [id=0]                    │\r\n// ├───────────────────────────────────────────────────────────────┤\r\n// │                              ...                              │\r\n\r\n/** Runtime type information data structure. */\r\n@unmanaged\r\nexport class Typeinfo {\r\n  /** Flags describing the shape of this class type. */\r\n  flags: TypeinfoFlags;\r\n  /** Base class id or `0` if none. */\r\n  base: u32;\r\n}\r\n\r\n/** Runtime type information flags. */\r\nexport const enum TypeinfoFlags {\r\n  /** No specific flags. */\r\n  NONE = 0,\r\n  /** Type is an `ArrayBufferView`. */\r\n  ARRAYBUFFERVIEW = 1 << 0,\r\n  /** Type is an `Array`. */\r\n  ARRAY = 1 << 1,\r\n  /** Type is a `Set`. */\r\n  SET = 1 << 2,\r\n  /** Type is a `Map`. */\r\n  MAP = 1 << 3,\r\n  /** Type is inherently acyclic. */\r\n  ACYCLIC = 1 << 4,\r\n  /** Value alignment of 1 byte. */\r\n  VALUE_ALIGN_0 = 1 << 5,\r\n  /** Value alignment of 2 bytes. */\r\n  VALUE_ALIGN_1 = 1 << 6,\r\n  /** Value alignment of 4 bytes. */\r\n  VALUE_ALIGN_2 = 1 << 7,\r\n  /** Value alignment of 8 bytes. */\r\n  VALUE_ALIGN_3 = 1 << 8,\r\n  /** Value alignment of 16 bytes. */\r\n  VALUE_ALIGN_4 = 1 << 9,\r\n  /** Value is a signed type. */\r\n  VALUE_SIGNED = 1 << 10,\r\n  /** Value is a float type. */\r\n  VALUE_FLOAT = 1 << 11,\r\n  /** Value type is nullable. */\r\n  VALUE_NULLABLE = 1 << 12,\r\n  /** Value type is managed. */\r\n  VALUE_MANAGED = 1 << 13,\r\n  /** Key alignment of 1 byte. */\r\n  KEY_ALIGN_0 = 1 << 14,\r\n  /** Key alignment of 2 bytes. */\r\n  KEY_ALIGN_1 = 1 << 15,\r\n  /** Key alignment of 4 bytes. */\r\n  KEY_ALIGN_2 = 1 << 16,\r\n  /** Key alignment of 8 bytes. */\r\n  KEY_ALIGN_3 = 1 << 17,\r\n  /** Key alignment of 16 bytes. */\r\n  KEY_ALIGN_4 = 1 << 18,\r\n  /** Key is a signed type. */\r\n  KEY_SIGNED = 1 << 19,\r\n  /** Key is a float type. */\r\n  KEY_FLOAT = 1 << 20,\r\n  /** Key type is nullable. */\r\n  KEY_NULLABLE = 1 << 21,\r\n  /** Key type is managed. */\r\n  KEY_MANAGED = 1 << 22\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport { Target, Feature } from \"./common\";\r\nimport { Compiler, Options } from \"./compiler\";\r\nimport { Decompiler } from \"./decompiler\";\r\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\r\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\r\nimport { Module } from \"./module\";\r\nimport { Parser } from \"./parser\";\r\nimport { Program } from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the path of the dependee of a given imported file. */\r\nexport function getDependee(parser: Parser, file: string): string | null {\r\n  return parser.getDependee(file);\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `sharedMemory` option. */\r\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\r\n  options.sharedMemory = sharedMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(alias, name);\r\n}\r\n\r\n/** Sets the `explicitStart` option. */\r\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\r\n  options.explicitStart = explicitStart;\r\n}\r\n\r\n/** Sets the `noUnsafe` option. */\r\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\r\n  options.noUnsafe = noUnsafe;\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n/** Bulk memory operations. */\r\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\r\n/** SIMD types and operations. */\r\nexport const FEATURE_SIMD = Feature.SIMD;\r\n/** Threading and atomic operations. */\r\nexport const FEATURE_THREADS = Feature.THREADS;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\r\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\r\n  options.optimizeLevelHint = optimizeLevel;\r\n  options.shrinkLevelHint = shrinkLevel;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Builds a JSON file of a program's runtime type information. */\r\nexport function buildRTTI(program: Program): string {\r\n  var sb = new Array<string>();\r\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    sb.push(\"    \\\"\");\r\n    sb.push(cls.internalName);\r\n    sb.push(\"\\\",\\n\");\r\n  }\r\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    let base = cls.base;\r\n    sb.push(\"    \");\r\n    sb.push(base ? base.id.toString() : \"0\");\r\n    sb.push(\",\\n\");\r\n  }\r\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    sb.push(\"    \");\r\n    sb.push(cls.rttiFlags.toString());\r\n    sb.push(\",\\n\");\r\n  }\r\n  sb.push(\"  ]\\n}\\n\");\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./common\";\r\n\r\n// Full API\r\nexport * from \"./ast\";\r\n// export * from \"./binary\";\r\nexport * from \"./common\";\r\nexport * from \"./compiler\";\r\nexport * from \"./decompiler\";\r\nexport * from \"./definitions\";\r\nexport * from \"./diagnosticMessages.generated\";\r\nexport * from \"./diagnostics\";\r\nexport * from \"./flow\";\r\nexport * from \"./module\";\r\nexport * from \"./parser\";\r\nexport * from \"./program\";\r\nexport * from \"./resolver\";\r\nexport * from \"./tokenizer\";\r\nexport * from \"./types\";\r\nexport * from \"./util\";\r\n","/** @module util *//***/\r\n\r\n/** Tests if the bit at the specified index is set within a 64-bit map. */\r\nexport function bitsetIs(map: I64, index: i32): bool {\r\n  assert(index >= 0 && index < 64);\r\n  return i64_ne(\r\n    i64_and(\r\n      map,\r\n      i64_shl(\r\n        i64_one,\r\n        i64_new(index)\r\n      )\r\n    ),\r\n    i64_zero\r\n  );\r\n}\r\n\r\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\r\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\r\n  assert(index >= 0 && index < 64);\r\n  return isSet\r\n    ? i64_or(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      )\r\n    : i64_and(\r\n        map,\r\n        i64_not(\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      );\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n  var midVal: u16;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + ((hi - lo) >> 1);\r\n    mid -= (mid & 1);\r\n    midVal = map[mid];\r\n    if (midVal <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < midVal) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\r\n  if (original) {\r\n    let cloned = new Array<V>(original.length);\r\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\r\n    return cloned;\r\n  }\r\n  return new Array<V>();\r\n}\r\n\r\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\r\n  if (original) {\r\n    let cloned = new Set<V>();\r\n    for (let v of original) cloned.add(v);\r\n    return cloned;\r\n  }\r\n  return new Set<V>();\r\n}\r\n\r\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\r\n  var cloned = new Map<K,V>();\r\n  if (original) {\r\n    for (let [k, v] of original) cloned.set(k, v);\r\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\r\n  } else if (overrides) {\r\n    for (let [k, v] of overrides) cloned.set(k, v);\r\n  }\r\n  return cloned;\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nimport {\r\n  PATH_DELIMITER\r\n} from \"../common\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + PATH_DELIMITER + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  if (pos <= 1) {\r\n    if (pos == 0) return \".\";\r\n    if (normalizedPath.charCodeAt(0) == separator) {\r\n      return normalizedPath;\r\n    }\r\n  }\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Reads an 8-bit integer from the specified buffer. */\r\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset];\r\n}\r\n\r\n/** Writes an 8-bit integer to the specified buffer. */\r\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset] = value;\r\n}\r\n\r\n/** Reads a 16-bit integer from the specified buffer. */\r\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8;\r\n}\r\n\r\n/** Writes a 16-bit integer to the specified buffer. */\r\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n}\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n"],"sourceRoot":""}